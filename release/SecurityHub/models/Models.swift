// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

public struct AcceptAdministratorInvitationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptAdministratorInvitationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptAdministratorInvitationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptAdministratorInvitationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptAdministratorInvitationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptAdministratorInvitationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptAdministratorInvitationOutputError>
}

extension AcceptAdministratorInvitationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AcceptAdministratorInvitationInput(administratorId: \(Swift.String(describing: administratorId)), invitationId: \(Swift.String(describing: invitationId)))"}
}

extension AcceptAdministratorInvitationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administratorId = "AdministratorId"
        case invitationId = "InvitationId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let administratorId = administratorId {
            try encodeContainer.encode(administratorId, forKey: .administratorId)
        }
        if let invitationId = invitationId {
            try encodeContainer.encode(invitationId, forKey: .invitationId)
        }
    }
}

public struct AcceptAdministratorInvitationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptAdministratorInvitationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptAdministratorInvitationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptAdministratorInvitationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptAdministratorInvitationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptAdministratorInvitationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptAdministratorInvitationOutputError>
}

public struct AcceptAdministratorInvitationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptAdministratorInvitationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptAdministratorInvitationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptAdministratorInvitationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptAdministratorInvitationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptAdministratorInvitationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptAdministratorInvitationOutputError>
}

public struct AcceptAdministratorInvitationInput: Swift.Equatable {
    /// <p>The account ID of the Security Hub administrator account that sent the invitation.</p>
    public let administratorId: Swift.String?
    /// <p>The identifier of the invitation sent from the Security Hub administrator account.</p>
    public let invitationId: Swift.String?

    public init (
        administratorId: Swift.String? = nil,
        invitationId: Swift.String? = nil
    )
    {
        self.administratorId = administratorId
        self.invitationId = invitationId
    }
}

struct AcceptAdministratorInvitationInputBody: Swift.Equatable {
    public let administratorId: Swift.String?
    public let invitationId: Swift.String?
}

extension AcceptAdministratorInvitationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administratorId = "AdministratorId"
        case invitationId = "InvitationId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let administratorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .administratorId)
        administratorId = administratorIdDecoded
        let invitationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .invitationId)
        invitationId = invitationIdDecoded
    }
}

extension AcceptAdministratorInvitationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptAdministratorInvitationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AcceptAdministratorInvitationOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptAdministratorInvitationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AcceptAdministratorInvitationOutputResponse()"}
}

extension AcceptAdministratorInvitationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AcceptAdministratorInvitationOutputResponse: Swift.Equatable {

    public init() {}
}

struct AcceptAdministratorInvitationOutputResponseBody: Swift.Equatable {
}

extension AcceptAdministratorInvitationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct AcceptInvitationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptInvitationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptInvitationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptInvitationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptInvitationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptInvitationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptInvitationOutputError>
}

extension AcceptInvitationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AcceptInvitationInput(invitationId: \(Swift.String(describing: invitationId)), masterId: \(Swift.String(describing: masterId)))"}
}

extension AcceptInvitationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invitationId = "InvitationId"
        case masterId = "MasterId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let invitationId = invitationId {
            try encodeContainer.encode(invitationId, forKey: .invitationId)
        }
        if let masterId = masterId {
            try encodeContainer.encode(masterId, forKey: .masterId)
        }
    }
}

public struct AcceptInvitationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptInvitationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptInvitationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptInvitationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptInvitationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptInvitationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptInvitationOutputError>
}

public struct AcceptInvitationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "AcceptInvitationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<AcceptInvitationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<AcceptInvitationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<AcceptInvitationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<AcceptInvitationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<AcceptInvitationOutputError>
}

public struct AcceptInvitationInput: Swift.Equatable {
    /// <p>The identifier of the invitation sent from the Security Hub administrator account.</p>
    public let invitationId: Swift.String?
    /// <p>The account ID of the Security Hub administrator account that sent the invitation.</p>
    public let masterId: Swift.String?

    public init (
        invitationId: Swift.String? = nil,
        masterId: Swift.String? = nil
    )
    {
        self.invitationId = invitationId
        self.masterId = masterId
    }
}

struct AcceptInvitationInputBody: Swift.Equatable {
    public let masterId: Swift.String?
    public let invitationId: Swift.String?
}

extension AcceptInvitationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invitationId = "InvitationId"
        case masterId = "MasterId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterId)
        masterId = masterIdDecoded
        let invitationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .invitationId)
        invitationId = invitationIdDecoded
    }
}

extension AcceptInvitationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension AcceptInvitationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum AcceptInvitationOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension AcceptInvitationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AcceptInvitationOutputResponse()"}
}

extension AcceptInvitationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct AcceptInvitationOutputResponse: Swift.Equatable {

    public init() {}
}

struct AcceptInvitationOutputResponseBody: Swift.Equatable {
}

extension AcceptInvitationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension AccessDeniedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessDeniedException(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension AccessDeniedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You don't have permission to perform the action specified in the request.</p>
public struct AccessDeniedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let code: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension SecurityHubClientTypes.AccountDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case email = "Email"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let email = email {
            try encodeContainer.encode(email, forKey: .email)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let emailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .email)
        email = emailDecoded
    }
}

extension SecurityHubClientTypes.AccountDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccountDetails(accountId: \(Swift.String(describing: accountId)), email: \(Swift.String(describing: email)))"}
}

extension SecurityHubClientTypes {
    /// <p>The details of an AWS account.</p>
    public struct AccountDetails: Swift.Equatable {
        /// <p>The ID of an AWS account.</p>
        public let accountId: Swift.String?
        /// <p>The email of an AWS account.</p>
        public let email: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            email: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.email = email
        }
    }

}

extension SecurityHubClientTypes.Action: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionType = "ActionType"
        case awsApiCallAction = "AwsApiCallAction"
        case dnsRequestAction = "DnsRequestAction"
        case networkConnectionAction = "NetworkConnectionAction"
        case portProbeAction = "PortProbeAction"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionType = actionType {
            try encodeContainer.encode(actionType, forKey: .actionType)
        }
        if let awsApiCallAction = awsApiCallAction {
            try encodeContainer.encode(awsApiCallAction, forKey: .awsApiCallAction)
        }
        if let dnsRequestAction = dnsRequestAction {
            try encodeContainer.encode(dnsRequestAction, forKey: .dnsRequestAction)
        }
        if let networkConnectionAction = networkConnectionAction {
            try encodeContainer.encode(networkConnectionAction, forKey: .networkConnectionAction)
        }
        if let portProbeAction = portProbeAction {
            try encodeContainer.encode(portProbeAction, forKey: .portProbeAction)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionType)
        actionType = actionTypeDecoded
        let networkConnectionActionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.NetworkConnectionAction.self, forKey: .networkConnectionAction)
        networkConnectionAction = networkConnectionActionDecoded
        let awsApiCallActionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiCallAction.self, forKey: .awsApiCallAction)
        awsApiCallAction = awsApiCallActionDecoded
        let dnsRequestActionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.DnsRequestAction.self, forKey: .dnsRequestAction)
        dnsRequestAction = dnsRequestActionDecoded
        let portProbeActionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.PortProbeAction.self, forKey: .portProbeAction)
        portProbeAction = portProbeActionDecoded
    }
}

extension SecurityHubClientTypes.Action: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Action(actionType: \(Swift.String(describing: actionType)), awsApiCallAction: \(Swift.String(describing: awsApiCallAction)), dnsRequestAction: \(Swift.String(describing: dnsRequestAction)), networkConnectionAction: \(Swift.String(describing: networkConnectionAction)), portProbeAction: \(Swift.String(describing: portProbeAction)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides details about one of the following actions that affects or that was taken on a resource:</p>
    ///          <ul>
    ///             <li>
    ///                <p>A remote IP address issued an AWS API call</p>
    ///             </li>
    ///             <li>
    ///                <p>A DNS request was received</p>
    ///             </li>
    ///             <li>
    ///                <p>A remote IP address attempted to connect to an EC2 instance</p>
    ///             </li>
    ///             <li>
    ///                <p>A remote IP address attempted a port probe on an EC2 instance</p>
    ///             </li>
    ///          </ul>
    public struct Action: Swift.Equatable {
        /// <p>The type of action that was detected. The possible action types are:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>NETWORK_CONNECTION</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>AWS_API_CALL</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>DNS_REQUEST</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>PORT_PROBE</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let actionType: Swift.String?
        /// <p>Included if <code>ActionType</code> is <code>AWS_API_CALL</code>. Provides details about
        ///          the API call that was detected. </p>
        public let awsApiCallAction: SecurityHubClientTypes.AwsApiCallAction?
        /// <p>Included if <code>ActionType</code> is <code>DNS_REQUEST</code>. Provides details about
        ///          the DNS request that was detected. </p>
        public let dnsRequestAction: SecurityHubClientTypes.DnsRequestAction?
        /// <p>Included if <code>ActionType</code> is <code>NETWORK_CONNECTION</code>. Provides details
        ///          about the network connection that was detected.</p>
        public let networkConnectionAction: SecurityHubClientTypes.NetworkConnectionAction?
        /// <p>Included if <code>ActionType</code> is <code>PORT_PROBE</code>. Provides details about
        ///          the port probe that was detected. </p>
        public let portProbeAction: SecurityHubClientTypes.PortProbeAction?

        public init (
            actionType: Swift.String? = nil,
            awsApiCallAction: SecurityHubClientTypes.AwsApiCallAction? = nil,
            dnsRequestAction: SecurityHubClientTypes.DnsRequestAction? = nil,
            networkConnectionAction: SecurityHubClientTypes.NetworkConnectionAction? = nil,
            portProbeAction: SecurityHubClientTypes.PortProbeAction? = nil
        )
        {
            self.actionType = actionType
            self.awsApiCallAction = awsApiCallAction
            self.dnsRequestAction = dnsRequestAction
            self.networkConnectionAction = networkConnectionAction
            self.portProbeAction = portProbeAction
        }
    }

}

extension SecurityHubClientTypes.ActionLocalIpDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipAddressV4 = "IpAddressV4"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ipAddressV4 = ipAddressV4 {
            try encodeContainer.encode(ipAddressV4, forKey: .ipAddressV4)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipAddressV4Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddressV4)
        ipAddressV4 = ipAddressV4Decoded
    }
}

extension SecurityHubClientTypes.ActionLocalIpDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActionLocalIpDetails(ipAddressV4: \(Swift.String(describing: ipAddressV4)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about the IP address where the scanned port is located.</p>
    public struct ActionLocalIpDetails: Swift.Equatable {
        /// <p>The IP address.</p>
        public let ipAddressV4: Swift.String?

        public init (
            ipAddressV4: Swift.String? = nil
        )
        {
            self.ipAddressV4 = ipAddressV4
        }
    }

}

extension SecurityHubClientTypes.ActionLocalPortDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case port = "Port"
        case portName = "PortName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let portName = portName {
            try encodeContainer.encode(portName, forKey: .portName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portDecoded = try containerValues.decode(Swift.Int.self, forKey: .port)
        port = portDecoded
        let portNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portName)
        portName = portNameDecoded
    }
}

extension SecurityHubClientTypes.ActionLocalPortDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActionLocalPortDetails(port: \(Swift.String(describing: port)), portName: \(Swift.String(describing: portName)))"}
}

extension SecurityHubClientTypes {
    /// <p>For <code>NetworkConnectionAction</code> and <code>PortProbeDetails</code>,
    ///             <code>LocalPortDetails</code> provides information about the local port that was
    ///          involved in the action.</p>
    public struct ActionLocalPortDetails: Swift.Equatable {
        /// <p>The number of the port.</p>
        public let port: Swift.Int
        /// <p>The port name of the local connection.</p>
        public let portName: Swift.String?

        public init (
            port: Swift.Int = 0,
            portName: Swift.String? = nil
        )
        {
            self.port = port
            self.portName = portName
        }
    }

}

extension SecurityHubClientTypes.ActionRemoteIpDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case city = "City"
        case country = "Country"
        case geoLocation = "GeoLocation"
        case ipAddressV4 = "IpAddressV4"
        case organization = "Organization"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let city = city {
            try encodeContainer.encode(city, forKey: .city)
        }
        if let country = country {
            try encodeContainer.encode(country, forKey: .country)
        }
        if let geoLocation = geoLocation {
            try encodeContainer.encode(geoLocation, forKey: .geoLocation)
        }
        if let ipAddressV4 = ipAddressV4 {
            try encodeContainer.encode(ipAddressV4, forKey: .ipAddressV4)
        }
        if let organization = organization {
            try encodeContainer.encode(organization, forKey: .organization)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipAddressV4Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddressV4)
        ipAddressV4 = ipAddressV4Decoded
        let organizationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.IpOrganizationDetails.self, forKey: .organization)
        organization = organizationDecoded
        let countryDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Country.self, forKey: .country)
        country = countryDecoded
        let cityDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.City.self, forKey: .city)
        city = cityDecoded
        let geoLocationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.GeoLocation.self, forKey: .geoLocation)
        geoLocation = geoLocationDecoded
    }
}

extension SecurityHubClientTypes.ActionRemoteIpDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActionRemoteIpDetails(city: \(Swift.String(describing: city)), country: \(Swift.String(describing: country)), geoLocation: \(Swift.String(describing: geoLocation)), ipAddressV4: \(Swift.String(describing: ipAddressV4)), organization: \(Swift.String(describing: organization)))"}
}

extension SecurityHubClientTypes {
    /// <p>For <code>AwsApiAction</code>, <code>NetworkConnectionAction</code>, and
    ///             <code>PortProbeAction</code>, <code>RemoteIpDetails</code> provides information about
    ///          the remote IP address that was involved in the action.</p>
    public struct ActionRemoteIpDetails: Swift.Equatable {
        /// <p>The city where the remote IP address is located.</p>
        public let city: SecurityHubClientTypes.City?
        /// <p>The country where the remote IP address is located.</p>
        public let country: SecurityHubClientTypes.Country?
        /// <p>The coordinates of the location of the remote IP address.</p>
        public let geoLocation: SecurityHubClientTypes.GeoLocation?
        /// <p>The IP address.</p>
        public let ipAddressV4: Swift.String?
        /// <p>The internet service provider (ISP) organization associated with the remote IP
        ///          address.</p>
        public let organization: SecurityHubClientTypes.IpOrganizationDetails?

        public init (
            city: SecurityHubClientTypes.City? = nil,
            country: SecurityHubClientTypes.Country? = nil,
            geoLocation: SecurityHubClientTypes.GeoLocation? = nil,
            ipAddressV4: Swift.String? = nil,
            organization: SecurityHubClientTypes.IpOrganizationDetails? = nil
        )
        {
            self.city = city
            self.country = country
            self.geoLocation = geoLocation
            self.ipAddressV4 = ipAddressV4
            self.organization = organization
        }
    }

}

extension SecurityHubClientTypes.ActionRemotePortDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case port = "Port"
        case portName = "PortName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let portName = portName {
            try encodeContainer.encode(portName, forKey: .portName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portDecoded = try containerValues.decode(Swift.Int.self, forKey: .port)
        port = portDecoded
        let portNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .portName)
        portName = portNameDecoded
    }
}

extension SecurityHubClientTypes.ActionRemotePortDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActionRemotePortDetails(port: \(Swift.String(describing: port)), portName: \(Swift.String(describing: portName)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about the remote port that was involved in an attempted network
    ///          connection.</p>
    public struct ActionRemotePortDetails: Swift.Equatable {
        /// <p>The number of the port.</p>
        public let port: Swift.Int
        /// <p>The port name of the remote connection.</p>
        public let portName: Swift.String?

        public init (
            port: Swift.Int = 0,
            portName: Swift.String? = nil
        )
        {
            self.port = port
            self.portName = portName
        }
    }

}

extension SecurityHubClientTypes.ActionTarget: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionTargetArn = "ActionTargetArn"
        case description = "Description"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionTargetArn = actionTargetArn {
            try encodeContainer.encode(actionTargetArn, forKey: .actionTargetArn)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTargetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionTargetArn)
        actionTargetArn = actionTargetArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension SecurityHubClientTypes.ActionTarget: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ActionTarget(actionTargetArn: \(Swift.String(describing: actionTargetArn)), description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)))"}
}

extension SecurityHubClientTypes {
    /// <p>An <code>ActionTarget</code> object.</p>
    public struct ActionTarget: Swift.Equatable {
        /// <p>The ARN for the target action.</p>
        public let actionTargetArn: Swift.String?
        /// <p>The description of the target action.</p>
        public let description: Swift.String?
        /// <p>The name of the action target.</p>
        public let name: Swift.String?

        public init (
            actionTargetArn: Swift.String? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.actionTargetArn = actionTargetArn
            self.description = description
            self.name = name
        }
    }

}

extension SecurityHubClientTypes.AdminAccount: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AdminStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityHubClientTypes.AdminAccount: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AdminAccount(accountId: \(Swift.String(describing: accountId)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>Represents a Security Hub administrator account designated by an organization management
    ///          account.</p>
    public struct AdminAccount: Swift.Equatable {
        /// <p>The AWS account identifier of the Security Hub administrator account.</p>
        public let accountId: Swift.String?
        /// <p>The current status of the Security Hub administrator account. Indicates whether the account is
        ///          currently enabled as a Security Hub administrator.</p>
        public let status: SecurityHubClientTypes.AdminStatus?

        public init (
            accountId: Swift.String? = nil,
            status: SecurityHubClientTypes.AdminStatus? = nil
        )
        {
            self.accountId = accountId
            self.status = status
        }
    }

}

extension SecurityHubClientTypes {
    public enum AdminStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disableInProgress
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [AdminStatus] {
            return [
                .disableInProgress,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disableInProgress: return "DISABLE_IN_PROGRESS"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AdminStatus(rawValue: rawValue) ?? AdminStatus.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes.AvailabilityZone: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subnetId = "SubnetId"
        case zoneName = "ZoneName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let zoneName = zoneName {
            try encodeContainer.encode(zoneName, forKey: .zoneName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let zoneNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .zoneName)
        zoneName = zoneNameDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
    }
}

extension SecurityHubClientTypes.AvailabilityZone: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AvailabilityZone(subnetId: \(Swift.String(describing: subnetId)), zoneName: \(Swift.String(describing: zoneName)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about an Availability Zone.</p>
    public struct AvailabilityZone: Swift.Equatable {
        /// <p>The ID of the subnet. You can specify one subnet per Availability Zone.</p>
        public let subnetId: Swift.String?
        /// <p>The name of the Availability Zone.</p>
        public let zoneName: Swift.String?

        public init (
            subnetId: Swift.String? = nil,
            zoneName: Swift.String? = nil
        )
        {
            self.subnetId = subnetId
            self.zoneName = zoneName
        }
    }

}

extension SecurityHubClientTypes.AwsApiCallAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case affectedResources = "AffectedResources"
        case api = "Api"
        case callerType = "CallerType"
        case domainDetails = "DomainDetails"
        case firstSeen = "FirstSeen"
        case lastSeen = "LastSeen"
        case remoteIpDetails = "RemoteIpDetails"
        case serviceName = "ServiceName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let affectedResources = affectedResources {
            var affectedResourcesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .affectedResources)
            for (dictKey0, fieldmap0) in affectedResources {
                try affectedResourcesContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let api = api {
            try encodeContainer.encode(api, forKey: .api)
        }
        if let callerType = callerType {
            try encodeContainer.encode(callerType, forKey: .callerType)
        }
        if let domainDetails = domainDetails {
            try encodeContainer.encode(domainDetails, forKey: .domainDetails)
        }
        if let firstSeen = firstSeen {
            try encodeContainer.encode(firstSeen, forKey: .firstSeen)
        }
        if let lastSeen = lastSeen {
            try encodeContainer.encode(lastSeen, forKey: .lastSeen)
        }
        if let remoteIpDetails = remoteIpDetails {
            try encodeContainer.encode(remoteIpDetails, forKey: .remoteIpDetails)
        }
        if let serviceName = serviceName {
            try encodeContainer.encode(serviceName, forKey: .serviceName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apiDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .api)
        api = apiDecoded
        let serviceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceName)
        serviceName = serviceNameDecoded
        let callerTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callerType)
        callerType = callerTypeDecoded
        let remoteIpDetailsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ActionRemoteIpDetails.self, forKey: .remoteIpDetails)
        remoteIpDetails = remoteIpDetailsDecoded
        let domainDetailsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiCallActionDomainDetails.self, forKey: .domainDetails)
        domainDetails = domainDetailsDecoded
        let affectedResourcesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .affectedResources)
        var affectedResourcesDecoded0: [Swift.String:Swift.String]? = nil
        if let affectedResourcesContainer = affectedResourcesContainer {
            affectedResourcesDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in affectedResourcesContainer {
                if let nonemptystring0 = nonemptystring0 {
                    affectedResourcesDecoded0?[key0] = nonemptystring0
                }
            }
        }
        affectedResources = affectedResourcesDecoded0
        let firstSeenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firstSeen)
        firstSeen = firstSeenDecoded
        let lastSeenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastSeen)
        lastSeen = lastSeenDecoded
    }
}

extension SecurityHubClientTypes.AwsApiCallAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsApiCallAction(affectedResources: \(Swift.String(describing: affectedResources)), api: \(Swift.String(describing: api)), callerType: \(Swift.String(describing: callerType)), domainDetails: \(Swift.String(describing: domainDetails)), firstSeen: \(Swift.String(describing: firstSeen)), lastSeen: \(Swift.String(describing: lastSeen)), remoteIpDetails: \(Swift.String(describing: remoteIpDetails)), serviceName: \(Swift.String(describing: serviceName)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provided if <code>ActionType</code> is <code>AWS_API_CALL</code>. It provides details
    ///          about the API call that was detected.</p>
    public struct AwsApiCallAction: Swift.Equatable {
        /// <p>Identifies the resources that were affected by the API call.</p>
        public let affectedResources: [Swift.String:Swift.String]?
        /// <p>The name of the API method that was issued.</p>
        public let api: Swift.String?
        /// <p>Indicates whether the API call originated from a remote IP address
        ///             (<code>remoteip</code>) or from a DNS domain (<code>domain</code>).</p>
        public let callerType: Swift.String?
        /// <p>Provided if <code>CallerType</code> is <code>domain</code>. Provides information about
        ///          the DNS domain that the API call originated from.</p>
        public let domainDetails: SecurityHubClientTypes.AwsApiCallActionDomainDetails?
        /// <p>An ISO8601-formatted timestamp that indicates when the API call was first
        ///          observed.</p>
        public let firstSeen: Swift.String?
        /// <p>An ISO8601-formatted timestamp that indicates when the API call was most recently
        ///          observed.</p>
        public let lastSeen: Swift.String?
        /// <p>Provided if <code>CallerType</code> is <code>remoteIp</code>. Provides information about
        ///          the remote IP address that the API call originated from.</p>
        public let remoteIpDetails: SecurityHubClientTypes.ActionRemoteIpDetails?
        /// <p>The name of the AWS service that the API method belongs to.</p>
        public let serviceName: Swift.String?

        public init (
            affectedResources: [Swift.String:Swift.String]? = nil,
            api: Swift.String? = nil,
            callerType: Swift.String? = nil,
            domainDetails: SecurityHubClientTypes.AwsApiCallActionDomainDetails? = nil,
            firstSeen: Swift.String? = nil,
            lastSeen: Swift.String? = nil,
            remoteIpDetails: SecurityHubClientTypes.ActionRemoteIpDetails? = nil,
            serviceName: Swift.String? = nil
        )
        {
            self.affectedResources = affectedResources
            self.api = api
            self.callerType = callerType
            self.domainDetails = domainDetails
            self.firstSeen = firstSeen
            self.lastSeen = lastSeen
            self.remoteIpDetails = remoteIpDetails
            self.serviceName = serviceName
        }
    }

}

extension SecurityHubClientTypes.AwsApiCallActionDomainDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
    }
}

extension SecurityHubClientTypes.AwsApiCallActionDomainDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsApiCallActionDomainDetails(domain: \(Swift.String(describing: domain)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provided if <code>CallerType</code> is <code>domain</code>. It provides information
    ///          about the DNS domain that issued the API call.</p>
    public struct AwsApiCallActionDomainDetails: Swift.Equatable {
        /// <p>The name of the DNS domain that issued the API call.</p>
        public let domain: Swift.String?

        public init (
            domain: Swift.String? = nil
        )
        {
            self.domain = domain
        }
    }

}

extension SecurityHubClientTypes.AwsApiGatewayAccessLogSettings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationArn = "DestinationArn"
        case format = "Format"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationArn = destinationArn {
            try encodeContainer.encode(destinationArn, forKey: .destinationArn)
        }
        if let format = format {
            try encodeContainer.encode(format, forKey: .format)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .format)
        format = formatDecoded
        let destinationArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationArn)
        destinationArn = destinationArnDecoded
    }
}

extension SecurityHubClientTypes.AwsApiGatewayAccessLogSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsApiGatewayAccessLogSettings(destinationArn: \(Swift.String(describing: destinationArn)), format: \(Swift.String(describing: format)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about settings for logging access for the stage.</p>
    public struct AwsApiGatewayAccessLogSettings: Swift.Equatable {
        /// <p>The ARN of the CloudWatch Logs log group that receives the access logs.</p>
        public let destinationArn: Swift.String?
        /// <p>A single-line format of the access logs of data, as specified by selected
        ///             <code>$context</code> variables. The format must include at least
        ///             <code>$context.requestId</code>.</p>
        public let format: Swift.String?

        public init (
            destinationArn: Swift.String? = nil,
            format: Swift.String? = nil
        )
        {
            self.destinationArn = destinationArn
            self.format = format
        }
    }

}

extension SecurityHubClientTypes.AwsApiGatewayCanarySettings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deploymentId = "DeploymentId"
        case percentTraffic = "PercentTraffic"
        case stageVariableOverrides = "StageVariableOverrides"
        case useStageCache = "UseStageCache"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if percentTraffic != 0.0 {
            try encodeContainer.encode(percentTraffic, forKey: .percentTraffic)
        }
        if let stageVariableOverrides = stageVariableOverrides {
            var stageVariableOverridesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .stageVariableOverrides)
            for (dictKey0, fieldmap0) in stageVariableOverrides {
                try stageVariableOverridesContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if useStageCache != false {
            try encodeContainer.encode(useStageCache, forKey: .useStageCache)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let percentTrafficDecoded = try containerValues.decode(Swift.Double.self, forKey: .percentTraffic)
        percentTraffic = percentTrafficDecoded
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let stageVariableOverridesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .stageVariableOverrides)
        var stageVariableOverridesDecoded0: [Swift.String:Swift.String]? = nil
        if let stageVariableOverridesContainer = stageVariableOverridesContainer {
            stageVariableOverridesDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in stageVariableOverridesContainer {
                if let nonemptystring0 = nonemptystring0 {
                    stageVariableOverridesDecoded0?[key0] = nonemptystring0
                }
            }
        }
        stageVariableOverrides = stageVariableOverridesDecoded0
        let useStageCacheDecoded = try containerValues.decode(Swift.Bool.self, forKey: .useStageCache)
        useStageCache = useStageCacheDecoded
    }
}

extension SecurityHubClientTypes.AwsApiGatewayCanarySettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsApiGatewayCanarySettings(deploymentId: \(Swift.String(describing: deploymentId)), percentTraffic: \(Swift.String(describing: percentTraffic)), stageVariableOverrides: \(Swift.String(describing: stageVariableOverrides)), useStageCache: \(Swift.String(describing: useStageCache)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about settings for canary deployment in the stage.</p>
    public struct AwsApiGatewayCanarySettings: Swift.Equatable {
        /// <p>The deployment identifier for the canary deployment.</p>
        public let deploymentId: Swift.String?
        /// <p>The percentage of traffic that is diverted to a canary deployment.</p>
        public let percentTraffic: Swift.Double
        /// <p>Stage variables that are overridden in the canary release deployment. The variables
        ///          include new stage variables that are introduced in the canary.</p>
        ///          <p>Each variable is represented as a string-to-string map between the stage variable name
        ///          and the variable value.</p>
        public let stageVariableOverrides: [Swift.String:Swift.String]?
        /// <p>Indicates whether the canary deployment uses the stage cache.</p>
        public let useStageCache: Swift.Bool

        public init (
            deploymentId: Swift.String? = nil,
            percentTraffic: Swift.Double = 0.0,
            stageVariableOverrides: [Swift.String:Swift.String]? = nil,
            useStageCache: Swift.Bool = false
        )
        {
            self.deploymentId = deploymentId
            self.percentTraffic = percentTraffic
            self.stageVariableOverrides = stageVariableOverrides
            self.useStageCache = useStageCache
        }
    }

}

extension SecurityHubClientTypes.AwsApiGatewayEndpointConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case types = "Types"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let types = types {
            var typesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .types)
            for nonemptystringlist0 in types {
                try typesContainer.encode(nonemptystringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .types)
        var typesDecoded0:[Swift.String]? = nil
        if let typesContainer = typesContainer {
            typesDecoded0 = [Swift.String]()
            for string0 in typesContainer {
                if let string0 = string0 {
                    typesDecoded0?.append(string0)
                }
            }
        }
        types = typesDecoded0
    }
}

extension SecurityHubClientTypes.AwsApiGatewayEndpointConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsApiGatewayEndpointConfiguration(types: \(Swift.String(describing: types)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about the endpoints for the API.</p>
    public struct AwsApiGatewayEndpointConfiguration: Swift.Equatable {
        /// <p>A list of endpoint types for the REST API.</p>
        ///          <p>For an edge-optimized API, the endpoint type is <code>EDGE</code>. For a Regional API,
        ///          the endpoint type is <code>REGIONAL</code>. For a private API, the endpoint type is
        ///             <code>PRIVATE</code>.</p>
        public let types: [Swift.String]?

        public init (
            types: [Swift.String]? = nil
        )
        {
            self.types = types
        }
    }

}

extension SecurityHubClientTypes.AwsApiGatewayMethodSettings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheDataEncrypted = "CacheDataEncrypted"
        case cacheTtlInSeconds = "CacheTtlInSeconds"
        case cachingEnabled = "CachingEnabled"
        case dataTraceEnabled = "DataTraceEnabled"
        case httpMethod = "HttpMethod"
        case loggingLevel = "LoggingLevel"
        case metricsEnabled = "MetricsEnabled"
        case requireAuthorizationForCacheControl = "RequireAuthorizationForCacheControl"
        case resourcePath = "ResourcePath"
        case throttlingBurstLimit = "ThrottlingBurstLimit"
        case throttlingRateLimit = "ThrottlingRateLimit"
        case unauthorizedCacheControlHeaderStrategy = "UnauthorizedCacheControlHeaderStrategy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cacheDataEncrypted != false {
            try encodeContainer.encode(cacheDataEncrypted, forKey: .cacheDataEncrypted)
        }
        if cacheTtlInSeconds != 0 {
            try encodeContainer.encode(cacheTtlInSeconds, forKey: .cacheTtlInSeconds)
        }
        if cachingEnabled != false {
            try encodeContainer.encode(cachingEnabled, forKey: .cachingEnabled)
        }
        if dataTraceEnabled != false {
            try encodeContainer.encode(dataTraceEnabled, forKey: .dataTraceEnabled)
        }
        if let httpMethod = httpMethod {
            try encodeContainer.encode(httpMethod, forKey: .httpMethod)
        }
        if let loggingLevel = loggingLevel {
            try encodeContainer.encode(loggingLevel, forKey: .loggingLevel)
        }
        if metricsEnabled != false {
            try encodeContainer.encode(metricsEnabled, forKey: .metricsEnabled)
        }
        if requireAuthorizationForCacheControl != false {
            try encodeContainer.encode(requireAuthorizationForCacheControl, forKey: .requireAuthorizationForCacheControl)
        }
        if let resourcePath = resourcePath {
            try encodeContainer.encode(resourcePath, forKey: .resourcePath)
        }
        if throttlingBurstLimit != 0 {
            try encodeContainer.encode(throttlingBurstLimit, forKey: .throttlingBurstLimit)
        }
        if throttlingRateLimit != 0.0 {
            try encodeContainer.encode(throttlingRateLimit, forKey: .throttlingRateLimit)
        }
        if let unauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategy {
            try encodeContainer.encode(unauthorizedCacheControlHeaderStrategy, forKey: .unauthorizedCacheControlHeaderStrategy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let metricsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .metricsEnabled)
        metricsEnabled = metricsEnabledDecoded
        let loggingLevelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loggingLevel)
        loggingLevel = loggingLevelDecoded
        let dataTraceEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .dataTraceEnabled)
        dataTraceEnabled = dataTraceEnabledDecoded
        let throttlingBurstLimitDecoded = try containerValues.decode(Swift.Int.self, forKey: .throttlingBurstLimit)
        throttlingBurstLimit = throttlingBurstLimitDecoded
        let throttlingRateLimitDecoded = try containerValues.decode(Swift.Double.self, forKey: .throttlingRateLimit)
        throttlingRateLimit = throttlingRateLimitDecoded
        let cachingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .cachingEnabled)
        cachingEnabled = cachingEnabledDecoded
        let cacheTtlInSecondsDecoded = try containerValues.decode(Swift.Int.self, forKey: .cacheTtlInSeconds)
        cacheTtlInSeconds = cacheTtlInSecondsDecoded
        let cacheDataEncryptedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .cacheDataEncrypted)
        cacheDataEncrypted = cacheDataEncryptedDecoded
        let requireAuthorizationForCacheControlDecoded = try containerValues.decode(Swift.Bool.self, forKey: .requireAuthorizationForCacheControl)
        requireAuthorizationForCacheControl = requireAuthorizationForCacheControlDecoded
        let unauthorizedCacheControlHeaderStrategyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .unauthorizedCacheControlHeaderStrategy)
        unauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategyDecoded
        let httpMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .httpMethod)
        httpMethod = httpMethodDecoded
        let resourcePathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourcePath)
        resourcePath = resourcePathDecoded
    }
}

extension SecurityHubClientTypes.AwsApiGatewayMethodSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsApiGatewayMethodSettings(cacheDataEncrypted: \(Swift.String(describing: cacheDataEncrypted)), cacheTtlInSeconds: \(Swift.String(describing: cacheTtlInSeconds)), cachingEnabled: \(Swift.String(describing: cachingEnabled)), dataTraceEnabled: \(Swift.String(describing: dataTraceEnabled)), httpMethod: \(Swift.String(describing: httpMethod)), loggingLevel: \(Swift.String(describing: loggingLevel)), metricsEnabled: \(Swift.String(describing: metricsEnabled)), requireAuthorizationForCacheControl: \(Swift.String(describing: requireAuthorizationForCacheControl)), resourcePath: \(Swift.String(describing: resourcePath)), throttlingBurstLimit: \(Swift.String(describing: throttlingBurstLimit)), throttlingRateLimit: \(Swift.String(describing: throttlingRateLimit)), unauthorizedCacheControlHeaderStrategy: \(Swift.String(describing: unauthorizedCacheControlHeaderStrategy)))"}
}

extension SecurityHubClientTypes {
    /// <p>Defines settings for a method for the stage.</p>
    public struct AwsApiGatewayMethodSettings: Swift.Equatable {
        /// <p>Indicates whether the cached responses are encrypted. </p>
        public let cacheDataEncrypted: Swift.Bool
        /// <p>Specifies the time to live (TTL), in seconds, for cached responses. The higher the TTL,
        ///          the longer the response is cached.</p>
        public let cacheTtlInSeconds: Swift.Int
        /// <p>Indicates whether responses are cached and returned for requests. For responses to be
        ///          cached, a cache cluster must be enabled on the stage.</p>
        public let cachingEnabled: Swift.Bool
        /// <p>Indicates whether data trace logging is enabled for the method. Data trace logging
        ///          affects the log entries that are pushed to CloudWatch Logs.</p>
        public let dataTraceEnabled: Swift.Bool
        /// <p>The HTTP method. You can use an asterisk (*) as a wildcard to apply method settings to
        ///          multiple methods.</p>
        public let httpMethod: Swift.String?
        /// <p>The logging level for this method. The logging level affects the log entries that are
        ///          pushed to CloudWatch Logs.</p>
        ///          <p>If the logging level is <code>ERROR</code>, then the logs only include error-level
        ///          entries.</p>
        ///          <p>If the logging level is <code>INFO</code>, then the logs include both <code>ERROR</code>
        ///          events and extra informational events.</p>
        ///          <p>Valid values: <code>OFF</code> | <code>ERROR</code> | <code>INFO</code>
        ///          </p>
        public let loggingLevel: Swift.String?
        /// <p>Indicates whether CloudWatch metrics are enabled for the method. </p>
        public let metricsEnabled: Swift.Bool
        /// <p>Indicates whether authorization is required for a cache invalidation request.</p>
        public let requireAuthorizationForCacheControl: Swift.Bool
        /// <p>The resource path for this method. Forward slashes (/) are encoded as ~1 . The initial
        ///          slash must include a forward slash.</p>
        ///          <p>For example, the path value <code>/resource/subresource</code> must be encoded as
        ///             <code>/~1resource~1subresource</code>.</p>
        ///          <p>To specify the root path, use only a slash (/). You can use an asterisk (*) as a
        ///          wildcard to apply method settings to multiple methods.</p>
        public let resourcePath: Swift.String?
        /// <p>The throttling burst limit for the method.</p>
        public let throttlingBurstLimit: Swift.Int
        /// <p>The throttling rate limit for the method.</p>
        public let throttlingRateLimit: Swift.Double
        /// <p>Indicates how to handle unauthorized requests for cache invalidation.</p>
        ///          <p>Valid values: <code>FAIL_WITH_403</code> | <code>SUCCEED_WITH_RESPONSE_HEADER</code> |
        ///             <code>SUCCEED_WITHOUT_RESPONSE_HEADER</code>
        ///          </p>
        public let unauthorizedCacheControlHeaderStrategy: Swift.String?

        public init (
            cacheDataEncrypted: Swift.Bool = false,
            cacheTtlInSeconds: Swift.Int = 0,
            cachingEnabled: Swift.Bool = false,
            dataTraceEnabled: Swift.Bool = false,
            httpMethod: Swift.String? = nil,
            loggingLevel: Swift.String? = nil,
            metricsEnabled: Swift.Bool = false,
            requireAuthorizationForCacheControl: Swift.Bool = false,
            resourcePath: Swift.String? = nil,
            throttlingBurstLimit: Swift.Int = 0,
            throttlingRateLimit: Swift.Double = 0.0,
            unauthorizedCacheControlHeaderStrategy: Swift.String? = nil
        )
        {
            self.cacheDataEncrypted = cacheDataEncrypted
            self.cacheTtlInSeconds = cacheTtlInSeconds
            self.cachingEnabled = cachingEnabled
            self.dataTraceEnabled = dataTraceEnabled
            self.httpMethod = httpMethod
            self.loggingLevel = loggingLevel
            self.metricsEnabled = metricsEnabled
            self.requireAuthorizationForCacheControl = requireAuthorizationForCacheControl
            self.resourcePath = resourcePath
            self.throttlingBurstLimit = throttlingBurstLimit
            self.throttlingRateLimit = throttlingRateLimit
            self.unauthorizedCacheControlHeaderStrategy = unauthorizedCacheControlHeaderStrategy
        }
    }

}

extension SecurityHubClientTypes.AwsApiGatewayRestApiDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apiKeySource = "ApiKeySource"
        case binaryMediaTypes = "BinaryMediaTypes"
        case createdDate = "CreatedDate"
        case description = "Description"
        case endpointConfiguration = "EndpointConfiguration"
        case id = "Id"
        case minimumCompressionSize = "MinimumCompressionSize"
        case name = "Name"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiKeySource = apiKeySource {
            try encodeContainer.encode(apiKeySource, forKey: .apiKeySource)
        }
        if let binaryMediaTypes = binaryMediaTypes {
            var binaryMediaTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .binaryMediaTypes)
            for nonemptystringlist0 in binaryMediaTypes {
                try binaryMediaTypesContainer.encode(nonemptystringlist0)
            }
        }
        if let createdDate = createdDate {
            try encodeContainer.encode(createdDate, forKey: .createdDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let endpointConfiguration = endpointConfiguration {
            try encodeContainer.encode(endpointConfiguration, forKey: .endpointConfiguration)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if minimumCompressionSize != 0 {
            try encodeContainer.encode(minimumCompressionSize, forKey: .minimumCompressionSize)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let binaryMediaTypesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .binaryMediaTypes)
        var binaryMediaTypesDecoded0:[Swift.String]? = nil
        if let binaryMediaTypesContainer = binaryMediaTypesContainer {
            binaryMediaTypesDecoded0 = [Swift.String]()
            for string0 in binaryMediaTypesContainer {
                if let string0 = string0 {
                    binaryMediaTypesDecoded0?.append(string0)
                }
            }
        }
        binaryMediaTypes = binaryMediaTypesDecoded0
        let minimumCompressionSizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .minimumCompressionSize)
        minimumCompressionSize = minimumCompressionSizeDecoded
        let apiKeySourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiKeySource)
        apiKeySource = apiKeySourceDecoded
        let endpointConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiGatewayEndpointConfiguration.self, forKey: .endpointConfiguration)
        endpointConfiguration = endpointConfigurationDecoded
    }
}

extension SecurityHubClientTypes.AwsApiGatewayRestApiDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsApiGatewayRestApiDetails(apiKeySource: \(Swift.String(describing: apiKeySource)), binaryMediaTypes: \(Swift.String(describing: binaryMediaTypes)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), endpointConfiguration: \(Swift.String(describing: endpointConfiguration)), id: \(Swift.String(describing: id)), minimumCompressionSize: \(Swift.String(describing: minimumCompressionSize)), name: \(Swift.String(describing: name)), version: \(Swift.String(describing: version)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about a REST API in version 1 of Amazon API Gateway.</p>
    public struct AwsApiGatewayRestApiDetails: Swift.Equatable {
        /// <p>The source of the API key for metering requests according to a usage plan.</p>
        ///          <p>
        ///             <code>HEADER</code> indicates whether to read the API key from the X-API-Key header of a
        ///          request.</p>
        ///          <p>
        ///             <code>AUTHORIZER</code> indicates whether to read the API key from the
        ///             <code>UsageIdentifierKey</code> from a custom authorizer.</p>
        public let apiKeySource: Swift.String?
        /// <p>The list of binary media types supported by the REST API.</p>
        public let binaryMediaTypes: [Swift.String]?
        /// <p>Indicates when the API was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createdDate: Swift.String?
        /// <p>A description of the REST API.</p>
        public let description: Swift.String?
        /// <p>The endpoint configuration of the REST API.</p>
        public let endpointConfiguration: SecurityHubClientTypes.AwsApiGatewayEndpointConfiguration?
        /// <p>The identifier of the REST API.</p>
        public let id: Swift.String?
        /// <p>The minimum size in bytes of a payload before compression is enabled.</p>
        ///          <p>If <code>null</code>, then compression is disabled.</p>
        ///          <p>If 0, then all payloads are compressed.</p>
        public let minimumCompressionSize: Swift.Int
        /// <p>The name of the REST API.</p>
        public let name: Swift.String?
        /// <p>The version identifier for the REST API.</p>
        public let version: Swift.String?

        public init (
            apiKeySource: Swift.String? = nil,
            binaryMediaTypes: [Swift.String]? = nil,
            createdDate: Swift.String? = nil,
            description: Swift.String? = nil,
            endpointConfiguration: SecurityHubClientTypes.AwsApiGatewayEndpointConfiguration? = nil,
            id: Swift.String? = nil,
            minimumCompressionSize: Swift.Int = 0,
            name: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.apiKeySource = apiKeySource
            self.binaryMediaTypes = binaryMediaTypes
            self.createdDate = createdDate
            self.description = description
            self.endpointConfiguration = endpointConfiguration
            self.id = id
            self.minimumCompressionSize = minimumCompressionSize
            self.name = name
            self.version = version
        }
    }

}

extension SecurityHubClientTypes.AwsApiGatewayStageDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessLogSettings = "AccessLogSettings"
        case cacheClusterEnabled = "CacheClusterEnabled"
        case cacheClusterSize = "CacheClusterSize"
        case cacheClusterStatus = "CacheClusterStatus"
        case canarySettings = "CanarySettings"
        case clientCertificateId = "ClientCertificateId"
        case createdDate = "CreatedDate"
        case deploymentId = "DeploymentId"
        case description = "Description"
        case documentationVersion = "DocumentationVersion"
        case lastUpdatedDate = "LastUpdatedDate"
        case methodSettings = "MethodSettings"
        case stageName = "StageName"
        case tracingEnabled = "TracingEnabled"
        case variables = "Variables"
        case webAclArn = "WebAclArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessLogSettings = accessLogSettings {
            try encodeContainer.encode(accessLogSettings, forKey: .accessLogSettings)
        }
        if cacheClusterEnabled != false {
            try encodeContainer.encode(cacheClusterEnabled, forKey: .cacheClusterEnabled)
        }
        if let cacheClusterSize = cacheClusterSize {
            try encodeContainer.encode(cacheClusterSize, forKey: .cacheClusterSize)
        }
        if let cacheClusterStatus = cacheClusterStatus {
            try encodeContainer.encode(cacheClusterStatus, forKey: .cacheClusterStatus)
        }
        if let canarySettings = canarySettings {
            try encodeContainer.encode(canarySettings, forKey: .canarySettings)
        }
        if let clientCertificateId = clientCertificateId {
            try encodeContainer.encode(clientCertificateId, forKey: .clientCertificateId)
        }
        if let createdDate = createdDate {
            try encodeContainer.encode(createdDate, forKey: .createdDate)
        }
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let documentationVersion = documentationVersion {
            try encodeContainer.encode(documentationVersion, forKey: .documentationVersion)
        }
        if let lastUpdatedDate = lastUpdatedDate {
            try encodeContainer.encode(lastUpdatedDate, forKey: .lastUpdatedDate)
        }
        if let methodSettings = methodSettings {
            var methodSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .methodSettings)
            for awsapigatewaymethodsettingslist0 in methodSettings {
                try methodSettingsContainer.encode(awsapigatewaymethodsettingslist0)
            }
        }
        if let stageName = stageName {
            try encodeContainer.encode(stageName, forKey: .stageName)
        }
        if tracingEnabled != false {
            try encodeContainer.encode(tracingEnabled, forKey: .tracingEnabled)
        }
        if let variables = variables {
            var variablesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .variables)
            for (dictKey0, fieldmap0) in variables {
                try variablesContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let webAclArn = webAclArn {
            try encodeContainer.encode(webAclArn, forKey: .webAclArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let clientCertificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clientCertificateId)
        clientCertificateId = clientCertificateIdDecoded
        let stageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stageName)
        stageName = stageNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let cacheClusterEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .cacheClusterEnabled)
        cacheClusterEnabled = cacheClusterEnabledDecoded
        let cacheClusterSizeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterSize)
        cacheClusterSize = cacheClusterSizeDecoded
        let cacheClusterStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cacheClusterStatus)
        cacheClusterStatus = cacheClusterStatusDecoded
        let methodSettingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsApiGatewayMethodSettings?].self, forKey: .methodSettings)
        var methodSettingsDecoded0:[SecurityHubClientTypes.AwsApiGatewayMethodSettings]? = nil
        if let methodSettingsContainer = methodSettingsContainer {
            methodSettingsDecoded0 = [SecurityHubClientTypes.AwsApiGatewayMethodSettings]()
            for structure0 in methodSettingsContainer {
                if let structure0 = structure0 {
                    methodSettingsDecoded0?.append(structure0)
                }
            }
        }
        methodSettings = methodSettingsDecoded0
        let variablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .variables)
        var variablesDecoded0: [Swift.String:Swift.String]? = nil
        if let variablesContainer = variablesContainer {
            variablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in variablesContainer {
                if let nonemptystring0 = nonemptystring0 {
                    variablesDecoded0?[key0] = nonemptystring0
                }
            }
        }
        variables = variablesDecoded0
        let documentationVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .documentationVersion)
        documentationVersion = documentationVersionDecoded
        let accessLogSettingsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiGatewayAccessLogSettings.self, forKey: .accessLogSettings)
        accessLogSettings = accessLogSettingsDecoded
        let canarySettingsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiGatewayCanarySettings.self, forKey: .canarySettings)
        canarySettings = canarySettingsDecoded
        let tracingEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .tracingEnabled)
        tracingEnabled = tracingEnabledDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let webAclArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webAclArn)
        webAclArn = webAclArnDecoded
    }
}

extension SecurityHubClientTypes.AwsApiGatewayStageDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsApiGatewayStageDetails(accessLogSettings: \(Swift.String(describing: accessLogSettings)), cacheClusterEnabled: \(Swift.String(describing: cacheClusterEnabled)), cacheClusterSize: \(Swift.String(describing: cacheClusterSize)), cacheClusterStatus: \(Swift.String(describing: cacheClusterStatus)), canarySettings: \(Swift.String(describing: canarySettings)), clientCertificateId: \(Swift.String(describing: clientCertificateId)), createdDate: \(Swift.String(describing: createdDate)), deploymentId: \(Swift.String(describing: deploymentId)), description: \(Swift.String(describing: description)), documentationVersion: \(Swift.String(describing: documentationVersion)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), methodSettings: \(Swift.String(describing: methodSettings)), stageName: \(Swift.String(describing: stageName)), tracingEnabled: \(Swift.String(describing: tracingEnabled)), variables: \(Swift.String(describing: variables)), webAclArn: \(Swift.String(describing: webAclArn)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about a version 1 Amazon API Gateway stage.</p>
    public struct AwsApiGatewayStageDetails: Swift.Equatable {
        /// <p>Settings for logging access for the stage.</p>
        public let accessLogSettings: SecurityHubClientTypes.AwsApiGatewayAccessLogSettings?
        /// <p>Indicates whether a cache cluster is enabled for the stage.</p>
        public let cacheClusterEnabled: Swift.Bool
        /// <p>If a cache cluster is enabled, the size of the cache cluster.</p>
        public let cacheClusterSize: Swift.String?
        /// <p>If a cache cluster is enabled, the status of the cache cluster.</p>
        public let cacheClusterStatus: Swift.String?
        /// <p>Information about settings for canary deployment in the stage.</p>
        public let canarySettings: SecurityHubClientTypes.AwsApiGatewayCanarySettings?
        /// <p>The identifier of the client certificate for the stage.</p>
        public let clientCertificateId: Swift.String?
        /// <p>Indicates when the stage was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createdDate: Swift.String?
        /// <p>The identifier of the deployment that the stage points to.</p>
        public let deploymentId: Swift.String?
        /// <p>A description of the stage.</p>
        public let description: Swift.String?
        /// <p>The version of the API documentation that is associated with the stage.</p>
        public let documentationVersion: Swift.String?
        /// <p>Indicates when the stage was most recently updated.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let lastUpdatedDate: Swift.String?
        /// <p>Defines the method settings for the stage.</p>
        public let methodSettings: [SecurityHubClientTypes.AwsApiGatewayMethodSettings]?
        /// <p>The name of the stage.</p>
        public let stageName: Swift.String?
        /// <p>Indicates whether active tracing with AWS X-Ray is enabled for the stage.</p>
        public let tracingEnabled: Swift.Bool
        /// <p>A map that defines the stage variables for the stage.</p>
        ///          <p>Variable names can have alphanumeric and underscore characters.</p>
        ///          <p>Variable values can contain the following characters:</p>
        ///          <ul>
        ///             <li>
        ///                <p>Uppercase and lowercase letters</p>
        ///             </li>
        ///             <li>
        ///                <p>Numbers</p>
        ///             </li>
        ///             <li>
        ///                <p>Special characters -._~:/?#&=,</p>
        ///             </li>
        ///          </ul>
        public let variables: [Swift.String:Swift.String]?
        /// <p>The ARN of the web ACL associated with the stage.</p>
        public let webAclArn: Swift.String?

        public init (
            accessLogSettings: SecurityHubClientTypes.AwsApiGatewayAccessLogSettings? = nil,
            cacheClusterEnabled: Swift.Bool = false,
            cacheClusterSize: Swift.String? = nil,
            cacheClusterStatus: Swift.String? = nil,
            canarySettings: SecurityHubClientTypes.AwsApiGatewayCanarySettings? = nil,
            clientCertificateId: Swift.String? = nil,
            createdDate: Swift.String? = nil,
            deploymentId: Swift.String? = nil,
            description: Swift.String? = nil,
            documentationVersion: Swift.String? = nil,
            lastUpdatedDate: Swift.String? = nil,
            methodSettings: [SecurityHubClientTypes.AwsApiGatewayMethodSettings]? = nil,
            stageName: Swift.String? = nil,
            tracingEnabled: Swift.Bool = false,
            variables: [Swift.String:Swift.String]? = nil,
            webAclArn: Swift.String? = nil
        )
        {
            self.accessLogSettings = accessLogSettings
            self.cacheClusterEnabled = cacheClusterEnabled
            self.cacheClusterSize = cacheClusterSize
            self.cacheClusterStatus = cacheClusterStatus
            self.canarySettings = canarySettings
            self.clientCertificateId = clientCertificateId
            self.createdDate = createdDate
            self.deploymentId = deploymentId
            self.description = description
            self.documentationVersion = documentationVersion
            self.lastUpdatedDate = lastUpdatedDate
            self.methodSettings = methodSettings
            self.stageName = stageName
            self.tracingEnabled = tracingEnabled
            self.variables = variables
            self.webAclArn = webAclArn
        }
    }

}

extension SecurityHubClientTypes.AwsApiGatewayV2ApiDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case apiEndpoint = "ApiEndpoint"
        case apiId = "ApiId"
        case apiKeySelectionExpression = "ApiKeySelectionExpression"
        case corsConfiguration = "CorsConfiguration"
        case createdDate = "CreatedDate"
        case description = "Description"
        case name = "Name"
        case protocolType = "ProtocolType"
        case routeSelectionExpression = "RouteSelectionExpression"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiEndpoint = apiEndpoint {
            try encodeContainer.encode(apiEndpoint, forKey: .apiEndpoint)
        }
        if let apiId = apiId {
            try encodeContainer.encode(apiId, forKey: .apiId)
        }
        if let apiKeySelectionExpression = apiKeySelectionExpression {
            try encodeContainer.encode(apiKeySelectionExpression, forKey: .apiKeySelectionExpression)
        }
        if let corsConfiguration = corsConfiguration {
            try encodeContainer.encode(corsConfiguration, forKey: .corsConfiguration)
        }
        if let createdDate = createdDate {
            try encodeContainer.encode(createdDate, forKey: .createdDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let protocolType = protocolType {
            try encodeContainer.encode(protocolType, forKey: .protocolType)
        }
        if let routeSelectionExpression = routeSelectionExpression {
            try encodeContainer.encode(routeSelectionExpression, forKey: .routeSelectionExpression)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let apiEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiEndpoint)
        apiEndpoint = apiEndpointDecoded
        let apiIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiId)
        apiId = apiIdDecoded
        let apiKeySelectionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .apiKeySelectionExpression)
        apiKeySelectionExpression = apiKeySelectionExpressionDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let protocolTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocolType)
        protocolType = protocolTypeDecoded
        let routeSelectionExpressionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .routeSelectionExpression)
        routeSelectionExpression = routeSelectionExpressionDecoded
        let corsConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCorsConfiguration.self, forKey: .corsConfiguration)
        corsConfiguration = corsConfigurationDecoded
    }
}

extension SecurityHubClientTypes.AwsApiGatewayV2ApiDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsApiGatewayV2ApiDetails(apiEndpoint: \(Swift.String(describing: apiEndpoint)), apiId: \(Swift.String(describing: apiId)), apiKeySelectionExpression: \(Swift.String(describing: apiKeySelectionExpression)), corsConfiguration: \(Swift.String(describing: corsConfiguration)), createdDate: \(Swift.String(describing: createdDate)), description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)), protocolType: \(Swift.String(describing: protocolType)), routeSelectionExpression: \(Swift.String(describing: routeSelectionExpression)), version: \(Swift.String(describing: version)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about a version 2 API in Amazon API Gateway.</p>
    public struct AwsApiGatewayV2ApiDetails: Swift.Equatable {
        /// <p>The URI of the API. </p>
        ///          <p>Uses the format
        ///                <code>
        ///                <i><api-id></i>.execute-api.<i><region></i>.amazonaws.com</code>
        ///          </p>
        ///          <p>The stage name is typically appended to the URI to form a complete path to a deployed
        ///          API stage.</p>
        public let apiEndpoint: Swift.String?
        /// <p>The identifier of the API.</p>
        public let apiId: Swift.String?
        /// <p>An API key selection expression. Supported only for WebSocket APIs. </p>
        public let apiKeySelectionExpression: Swift.String?
        /// <p>A cross-origin resource sharing (CORS) configuration. Supported only for HTTP
        ///          APIs.</p>
        public let corsConfiguration: SecurityHubClientTypes.AwsCorsConfiguration?
        /// <p>Indicates when the API was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createdDate: Swift.String?
        /// <p>A description of the API.</p>
        public let description: Swift.String?
        /// <p>The name of the API.</p>
        public let name: Swift.String?
        /// <p>The API protocol for the API.</p>
        ///          <p>Valid values: <code>WEBSOCKET</code> | <code>HTTP</code>
        ///          </p>
        public let protocolType: Swift.String?
        /// <p>The route selection expression for the API.</p>
        ///          <p>For HTTP APIs, must be <code>${request.method} ${request.path}</code>. This is the
        ///          default value for HTTP APIs.</p>
        ///          <p>For WebSocket APIs, there is no default value.</p>
        public let routeSelectionExpression: Swift.String?
        /// <p>The version identifier for the API.</p>
        public let version: Swift.String?

        public init (
            apiEndpoint: Swift.String? = nil,
            apiId: Swift.String? = nil,
            apiKeySelectionExpression: Swift.String? = nil,
            corsConfiguration: SecurityHubClientTypes.AwsCorsConfiguration? = nil,
            createdDate: Swift.String? = nil,
            description: Swift.String? = nil,
            name: Swift.String? = nil,
            protocolType: Swift.String? = nil,
            routeSelectionExpression: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.apiEndpoint = apiEndpoint
            self.apiId = apiId
            self.apiKeySelectionExpression = apiKeySelectionExpression
            self.corsConfiguration = corsConfiguration
            self.createdDate = createdDate
            self.description = description
            self.name = name
            self.protocolType = protocolType
            self.routeSelectionExpression = routeSelectionExpression
            self.version = version
        }
    }

}

extension SecurityHubClientTypes.AwsApiGatewayV2RouteSettings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataTraceEnabled = "DataTraceEnabled"
        case detailedMetricsEnabled = "DetailedMetricsEnabled"
        case loggingLevel = "LoggingLevel"
        case throttlingBurstLimit = "ThrottlingBurstLimit"
        case throttlingRateLimit = "ThrottlingRateLimit"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if dataTraceEnabled != false {
            try encodeContainer.encode(dataTraceEnabled, forKey: .dataTraceEnabled)
        }
        if detailedMetricsEnabled != false {
            try encodeContainer.encode(detailedMetricsEnabled, forKey: .detailedMetricsEnabled)
        }
        if let loggingLevel = loggingLevel {
            try encodeContainer.encode(loggingLevel, forKey: .loggingLevel)
        }
        if throttlingBurstLimit != 0 {
            try encodeContainer.encode(throttlingBurstLimit, forKey: .throttlingBurstLimit)
        }
        if throttlingRateLimit != 0.0 {
            try encodeContainer.encode(throttlingRateLimit, forKey: .throttlingRateLimit)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailedMetricsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .detailedMetricsEnabled)
        detailedMetricsEnabled = detailedMetricsEnabledDecoded
        let loggingLevelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loggingLevel)
        loggingLevel = loggingLevelDecoded
        let dataTraceEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .dataTraceEnabled)
        dataTraceEnabled = dataTraceEnabledDecoded
        let throttlingBurstLimitDecoded = try containerValues.decode(Swift.Int.self, forKey: .throttlingBurstLimit)
        throttlingBurstLimit = throttlingBurstLimitDecoded
        let throttlingRateLimitDecoded = try containerValues.decode(Swift.Double.self, forKey: .throttlingRateLimit)
        throttlingRateLimit = throttlingRateLimitDecoded
    }
}

extension SecurityHubClientTypes.AwsApiGatewayV2RouteSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsApiGatewayV2RouteSettings(dataTraceEnabled: \(Swift.String(describing: dataTraceEnabled)), detailedMetricsEnabled: \(Swift.String(describing: detailedMetricsEnabled)), loggingLevel: \(Swift.String(describing: loggingLevel)), throttlingBurstLimit: \(Swift.String(describing: throttlingBurstLimit)), throttlingRateLimit: \(Swift.String(describing: throttlingRateLimit)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains route settings for a stage.</p>
    public struct AwsApiGatewayV2RouteSettings: Swift.Equatable {
        /// <p>Indicates whether data trace logging is enabled. Data trace logging affects the log
        ///          entries that are pushed to CloudWatch Logs. Supported only for WebSocket APIs.</p>
        public let dataTraceEnabled: Swift.Bool
        /// <p>Indicates whether detailed metrics are enabled.</p>
        public let detailedMetricsEnabled: Swift.Bool
        /// <p>The logging level. The logging level affects the log entries that are pushed to
        ///          CloudWatch Logs. Supported only for WebSocket APIs.</p>
        ///          <p>If the logging level is <code>ERROR</code>, then the logs only include error-level
        ///          entries.</p>
        ///          <p>If the logging level is <code>INFO</code>, then the logs include both <code>ERROR</code>
        ///          events and extra informational events.</p>
        ///          <p>Valid values: <code>OFF</code> | <code>ERROR</code> | <code>INFO</code>
        ///          </p>
        public let loggingLevel: Swift.String?
        /// <p>The throttling burst limit.</p>
        public let throttlingBurstLimit: Swift.Int
        /// <p>The throttling rate limit.</p>
        public let throttlingRateLimit: Swift.Double

        public init (
            dataTraceEnabled: Swift.Bool = false,
            detailedMetricsEnabled: Swift.Bool = false,
            loggingLevel: Swift.String? = nil,
            throttlingBurstLimit: Swift.Int = 0,
            throttlingRateLimit: Swift.Double = 0.0
        )
        {
            self.dataTraceEnabled = dataTraceEnabled
            self.detailedMetricsEnabled = detailedMetricsEnabled
            self.loggingLevel = loggingLevel
            self.throttlingBurstLimit = throttlingBurstLimit
            self.throttlingRateLimit = throttlingRateLimit
        }
    }

}

extension SecurityHubClientTypes.AwsApiGatewayV2StageDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessLogSettings = "AccessLogSettings"
        case apiGatewayManaged = "ApiGatewayManaged"
        case autoDeploy = "AutoDeploy"
        case createdDate = "CreatedDate"
        case defaultRouteSettings = "DefaultRouteSettings"
        case deploymentId = "DeploymentId"
        case description = "Description"
        case lastDeploymentStatusMessage = "LastDeploymentStatusMessage"
        case lastUpdatedDate = "LastUpdatedDate"
        case routeSettings = "RouteSettings"
        case stageName = "StageName"
        case stageVariables = "StageVariables"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessLogSettings = accessLogSettings {
            try encodeContainer.encode(accessLogSettings, forKey: .accessLogSettings)
        }
        if apiGatewayManaged != false {
            try encodeContainer.encode(apiGatewayManaged, forKey: .apiGatewayManaged)
        }
        if autoDeploy != false {
            try encodeContainer.encode(autoDeploy, forKey: .autoDeploy)
        }
        if let createdDate = createdDate {
            try encodeContainer.encode(createdDate, forKey: .createdDate)
        }
        if let defaultRouteSettings = defaultRouteSettings {
            try encodeContainer.encode(defaultRouteSettings, forKey: .defaultRouteSettings)
        }
        if let deploymentId = deploymentId {
            try encodeContainer.encode(deploymentId, forKey: .deploymentId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let lastDeploymentStatusMessage = lastDeploymentStatusMessage {
            try encodeContainer.encode(lastDeploymentStatusMessage, forKey: .lastDeploymentStatusMessage)
        }
        if let lastUpdatedDate = lastUpdatedDate {
            try encodeContainer.encode(lastUpdatedDate, forKey: .lastUpdatedDate)
        }
        if let routeSettings = routeSettings {
            try encodeContainer.encode(routeSettings, forKey: .routeSettings)
        }
        if let stageName = stageName {
            try encodeContainer.encode(stageName, forKey: .stageName)
        }
        if let stageVariables = stageVariables {
            var stageVariablesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .stageVariables)
            for (dictKey0, fieldmap0) in stageVariables {
                try stageVariablesContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createdDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let defaultRouteSettingsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiGatewayV2RouteSettings.self, forKey: .defaultRouteSettings)
        defaultRouteSettings = defaultRouteSettingsDecoded
        let deploymentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deploymentId)
        deploymentId = deploymentIdDecoded
        let lastUpdatedDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdatedDate)
        lastUpdatedDate = lastUpdatedDateDecoded
        let routeSettingsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiGatewayV2RouteSettings.self, forKey: .routeSettings)
        routeSettings = routeSettingsDecoded
        let stageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .stageName)
        stageName = stageNameDecoded
        let stageVariablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .stageVariables)
        var stageVariablesDecoded0: [Swift.String:Swift.String]? = nil
        if let stageVariablesContainer = stageVariablesContainer {
            stageVariablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in stageVariablesContainer {
                if let nonemptystring0 = nonemptystring0 {
                    stageVariablesDecoded0?[key0] = nonemptystring0
                }
            }
        }
        stageVariables = stageVariablesDecoded0
        let accessLogSettingsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiGatewayAccessLogSettings.self, forKey: .accessLogSettings)
        accessLogSettings = accessLogSettingsDecoded
        let autoDeployDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoDeploy)
        autoDeploy = autoDeployDecoded
        let lastDeploymentStatusMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastDeploymentStatusMessage)
        lastDeploymentStatusMessage = lastDeploymentStatusMessageDecoded
        let apiGatewayManagedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .apiGatewayManaged)
        apiGatewayManaged = apiGatewayManagedDecoded
    }
}

extension SecurityHubClientTypes.AwsApiGatewayV2StageDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsApiGatewayV2StageDetails(accessLogSettings: \(Swift.String(describing: accessLogSettings)), apiGatewayManaged: \(Swift.String(describing: apiGatewayManaged)), autoDeploy: \(Swift.String(describing: autoDeploy)), createdDate: \(Swift.String(describing: createdDate)), defaultRouteSettings: \(Swift.String(describing: defaultRouteSettings)), deploymentId: \(Swift.String(describing: deploymentId)), description: \(Swift.String(describing: description)), lastDeploymentStatusMessage: \(Swift.String(describing: lastDeploymentStatusMessage)), lastUpdatedDate: \(Swift.String(describing: lastUpdatedDate)), routeSettings: \(Swift.String(describing: routeSettings)), stageName: \(Swift.String(describing: stageName)), stageVariables: \(Swift.String(describing: stageVariables)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about a version 2 stage for Amazon API Gateway.</p>
    public struct AwsApiGatewayV2StageDetails: Swift.Equatable {
        /// <p>Information about settings for logging access for the stage.</p>
        public let accessLogSettings: SecurityHubClientTypes.AwsApiGatewayAccessLogSettings?
        /// <p>Indicates whether the stage is managed by API Gateway.</p>
        public let apiGatewayManaged: Swift.Bool
        /// <p>Indicates whether updates to an API automatically trigger a new deployment.</p>
        public let autoDeploy: Swift.Bool
        /// <p>Indicates when the stage was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createdDate: Swift.String?
        /// <p>Default route settings for the stage.</p>
        public let defaultRouteSettings: SecurityHubClientTypes.AwsApiGatewayV2RouteSettings?
        /// <p>The identifier of the deployment that the stage is associated with. </p>
        public let deploymentId: Swift.String?
        /// <p>The description of the stage.</p>
        public let description: Swift.String?
        /// <p>The status of the last deployment of a stage. Supported only if the stage has automatic
        ///          deployment enabled.</p>
        public let lastDeploymentStatusMessage: Swift.String?
        /// <p>Indicates when the stage was most recently updated.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let lastUpdatedDate: Swift.String?
        /// <p>The route settings for the stage.</p>
        public let routeSettings: SecurityHubClientTypes.AwsApiGatewayV2RouteSettings?
        /// <p>The name of the stage.</p>
        public let stageName: Swift.String?
        /// <p>A map that defines the stage variables for the stage.</p>
        ///          <p>Variable names can have alphanumeric and underscore characters.</p>
        ///          <p>Variable values can contain the following characters:</p>
        ///          <ul>
        ///             <li>
        ///                <p>Uppercase and lowercase letters</p>
        ///             </li>
        ///             <li>
        ///                <p>Numbers</p>
        ///             </li>
        ///             <li>
        ///                <p>Special characters -._~:/?#&=,</p>
        ///             </li>
        ///          </ul>
        public let stageVariables: [Swift.String:Swift.String]?

        public init (
            accessLogSettings: SecurityHubClientTypes.AwsApiGatewayAccessLogSettings? = nil,
            apiGatewayManaged: Swift.Bool = false,
            autoDeploy: Swift.Bool = false,
            createdDate: Swift.String? = nil,
            defaultRouteSettings: SecurityHubClientTypes.AwsApiGatewayV2RouteSettings? = nil,
            deploymentId: Swift.String? = nil,
            description: Swift.String? = nil,
            lastDeploymentStatusMessage: Swift.String? = nil,
            lastUpdatedDate: Swift.String? = nil,
            routeSettings: SecurityHubClientTypes.AwsApiGatewayV2RouteSettings? = nil,
            stageName: Swift.String? = nil,
            stageVariables: [Swift.String:Swift.String]? = nil
        )
        {
            self.accessLogSettings = accessLogSettings
            self.apiGatewayManaged = apiGatewayManaged
            self.autoDeploy = autoDeploy
            self.createdDate = createdDate
            self.defaultRouteSettings = defaultRouteSettings
            self.deploymentId = deploymentId
            self.description = description
            self.lastDeploymentStatusMessage = lastDeploymentStatusMessage
            self.lastUpdatedDate = lastUpdatedDate
            self.routeSettings = routeSettings
            self.stageName = stageName
            self.stageVariables = stageVariables
        }
    }

}

extension SecurityHubClientTypes.AwsAutoScalingAutoScalingGroupDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdTime = "CreatedTime"
        case healthCheckGracePeriod = "HealthCheckGracePeriod"
        case healthCheckType = "HealthCheckType"
        case launchConfigurationName = "LaunchConfigurationName"
        case loadBalancerNames = "LoadBalancerNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime, forKey: .createdTime)
        }
        if healthCheckGracePeriod != 0 {
            try encodeContainer.encode(healthCheckGracePeriod, forKey: .healthCheckGracePeriod)
        }
        if let healthCheckType = healthCheckType {
            try encodeContainer.encode(healthCheckType, forKey: .healthCheckType)
        }
        if let launchConfigurationName = launchConfigurationName {
            try encodeContainer.encode(launchConfigurationName, forKey: .launchConfigurationName)
        }
        if let loadBalancerNames = loadBalancerNames {
            var loadBalancerNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .loadBalancerNames)
            for stringlist0 in loadBalancerNames {
                try loadBalancerNamesContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let launchConfigurationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchConfigurationName)
        launchConfigurationName = launchConfigurationNameDecoded
        let loadBalancerNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .loadBalancerNames)
        var loadBalancerNamesDecoded0:[Swift.String]? = nil
        if let loadBalancerNamesContainer = loadBalancerNamesContainer {
            loadBalancerNamesDecoded0 = [Swift.String]()
            for string0 in loadBalancerNamesContainer {
                if let string0 = string0 {
                    loadBalancerNamesDecoded0?.append(string0)
                }
            }
        }
        loadBalancerNames = loadBalancerNamesDecoded0
        let healthCheckTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .healthCheckType)
        healthCheckType = healthCheckTypeDecoded
        let healthCheckGracePeriodDecoded = try containerValues.decode(Swift.Int.self, forKey: .healthCheckGracePeriod)
        healthCheckGracePeriod = healthCheckGracePeriodDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
    }
}

extension SecurityHubClientTypes.AwsAutoScalingAutoScalingGroupDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsAutoScalingAutoScalingGroupDetails(createdTime: \(Swift.String(describing: createdTime)), healthCheckGracePeriod: \(Swift.String(describing: healthCheckGracePeriod)), healthCheckType: \(Swift.String(describing: healthCheckType)), launchConfigurationName: \(Swift.String(describing: launchConfigurationName)), loadBalancerNames: \(Swift.String(describing: loadBalancerNames)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides details about an auto scaling group.</p>
    public struct AwsAutoScalingAutoScalingGroupDetails: Swift.Equatable {
        /// <p>Indicates when the auto scaling group was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createdTime: Swift.String?
        /// <p>The amount of time, in seconds, that Amazon EC2 Auto Scaling waits before it checks the
        ///          health status of an EC2 instance that has come into service.</p>
        public let healthCheckGracePeriod: Swift.Int
        /// <p>The service to use for the health checks.</p>
        public let healthCheckType: Swift.String?
        /// <p>The name of the launch configuration.</p>
        public let launchConfigurationName: Swift.String?
        /// <p>The list of load balancers associated with the group.</p>
        public let loadBalancerNames: [Swift.String]?

        public init (
            createdTime: Swift.String? = nil,
            healthCheckGracePeriod: Swift.Int = 0,
            healthCheckType: Swift.String? = nil,
            launchConfigurationName: Swift.String? = nil,
            loadBalancerNames: [Swift.String]? = nil
        )
        {
            self.createdTime = createdTime
            self.healthCheckGracePeriod = healthCheckGracePeriod
            self.healthCheckType = healthCheckType
            self.launchConfigurationName = launchConfigurationName
            self.loadBalancerNames = loadBalancerNames
        }
    }

}

extension SecurityHubClientTypes.AwsCertificateManagerCertificateDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case createdAt = "CreatedAt"
        case domainName = "DomainName"
        case domainValidationOptions = "DomainValidationOptions"
        case extendedKeyUsages = "ExtendedKeyUsages"
        case failureReason = "FailureReason"
        case importedAt = "ImportedAt"
        case inUseBy = "InUseBy"
        case issuedAt = "IssuedAt"
        case issuer = "Issuer"
        case keyAlgorithm = "KeyAlgorithm"
        case keyUsages = "KeyUsages"
        case notAfter = "NotAfter"
        case notBefore = "NotBefore"
        case options = "Options"
        case renewalEligibility = "RenewalEligibility"
        case renewalSummary = "RenewalSummary"
        case serial = "Serial"
        case signatureAlgorithm = "SignatureAlgorithm"
        case status = "Status"
        case subject = "Subject"
        case subjectAlternativeNames = "SubjectAlternativeNames"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateAuthorityArn = certificateAuthorityArn {
            try encodeContainer.encode(certificateAuthorityArn, forKey: .certificateAuthorityArn)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let domainValidationOptions = domainValidationOptions {
            var domainValidationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationOptions)
            for awscertificatemanagercertificatedomainvalidationoptions0 in domainValidationOptions {
                try domainValidationOptionsContainer.encode(awscertificatemanagercertificatedomainvalidationoptions0)
            }
        }
        if let extendedKeyUsages = extendedKeyUsages {
            var extendedKeyUsagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .extendedKeyUsages)
            for awscertificatemanagercertificateextendedkeyusages0 in extendedKeyUsages {
                try extendedKeyUsagesContainer.encode(awscertificatemanagercertificateextendedkeyusages0)
            }
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let importedAt = importedAt {
            try encodeContainer.encode(importedAt, forKey: .importedAt)
        }
        if let inUseBy = inUseBy {
            var inUseByContainer = encodeContainer.nestedUnkeyedContainer(forKey: .inUseBy)
            for stringlist0 in inUseBy {
                try inUseByContainer.encode(stringlist0)
            }
        }
        if let issuedAt = issuedAt {
            try encodeContainer.encode(issuedAt, forKey: .issuedAt)
        }
        if let issuer = issuer {
            try encodeContainer.encode(issuer, forKey: .issuer)
        }
        if let keyAlgorithm = keyAlgorithm {
            try encodeContainer.encode(keyAlgorithm, forKey: .keyAlgorithm)
        }
        if let keyUsages = keyUsages {
            var keyUsagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keyUsages)
            for awscertificatemanagercertificatekeyusages0 in keyUsages {
                try keyUsagesContainer.encode(awscertificatemanagercertificatekeyusages0)
            }
        }
        if let notAfter = notAfter {
            try encodeContainer.encode(notAfter, forKey: .notAfter)
        }
        if let notBefore = notBefore {
            try encodeContainer.encode(notBefore, forKey: .notBefore)
        }
        if let options = options {
            try encodeContainer.encode(options, forKey: .options)
        }
        if let renewalEligibility = renewalEligibility {
            try encodeContainer.encode(renewalEligibility, forKey: .renewalEligibility)
        }
        if let renewalSummary = renewalSummary {
            try encodeContainer.encode(renewalSummary, forKey: .renewalSummary)
        }
        if let serial = serial {
            try encodeContainer.encode(serial, forKey: .serial)
        }
        if let signatureAlgorithm = signatureAlgorithm {
            try encodeContainer.encode(signatureAlgorithm, forKey: .signatureAlgorithm)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let subject = subject {
            try encodeContainer.encode(subject, forKey: .subject)
        }
        if let subjectAlternativeNames = subjectAlternativeNames {
            var subjectAlternativeNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subjectAlternativeNames)
            for stringlist0 in subjectAlternativeNames {
                try subjectAlternativeNamesContainer.encode(stringlist0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateAuthorityArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateAuthorityArn)
        certificateAuthorityArn = certificateAuthorityArnDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let domainValidationOptionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsCertificateManagerCertificateDomainValidationOption?].self, forKey: .domainValidationOptions)
        var domainValidationOptionsDecoded0:[SecurityHubClientTypes.AwsCertificateManagerCertificateDomainValidationOption]? = nil
        if let domainValidationOptionsContainer = domainValidationOptionsContainer {
            domainValidationOptionsDecoded0 = [SecurityHubClientTypes.AwsCertificateManagerCertificateDomainValidationOption]()
            for structure0 in domainValidationOptionsContainer {
                if let structure0 = structure0 {
                    domainValidationOptionsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationOptions = domainValidationOptionsDecoded0
        let extendedKeyUsagesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsCertificateManagerCertificateExtendedKeyUsage?].self, forKey: .extendedKeyUsages)
        var extendedKeyUsagesDecoded0:[SecurityHubClientTypes.AwsCertificateManagerCertificateExtendedKeyUsage]? = nil
        if let extendedKeyUsagesContainer = extendedKeyUsagesContainer {
            extendedKeyUsagesDecoded0 = [SecurityHubClientTypes.AwsCertificateManagerCertificateExtendedKeyUsage]()
            for structure0 in extendedKeyUsagesContainer {
                if let structure0 = structure0 {
                    extendedKeyUsagesDecoded0?.append(structure0)
                }
            }
        }
        extendedKeyUsages = extendedKeyUsagesDecoded0
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let importedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .importedAt)
        importedAt = importedAtDecoded
        let inUseByContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .inUseBy)
        var inUseByDecoded0:[Swift.String]? = nil
        if let inUseByContainer = inUseByContainer {
            inUseByDecoded0 = [Swift.String]()
            for string0 in inUseByContainer {
                if let string0 = string0 {
                    inUseByDecoded0?.append(string0)
                }
            }
        }
        inUseBy = inUseByDecoded0
        let issuedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuedAt)
        issuedAt = issuedAtDecoded
        let issuerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .issuer)
        issuer = issuerDecoded
        let keyAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyAlgorithm)
        keyAlgorithm = keyAlgorithmDecoded
        let keyUsagesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsCertificateManagerCertificateKeyUsage?].self, forKey: .keyUsages)
        var keyUsagesDecoded0:[SecurityHubClientTypes.AwsCertificateManagerCertificateKeyUsage]? = nil
        if let keyUsagesContainer = keyUsagesContainer {
            keyUsagesDecoded0 = [SecurityHubClientTypes.AwsCertificateManagerCertificateKeyUsage]()
            for structure0 in keyUsagesContainer {
                if let structure0 = structure0 {
                    keyUsagesDecoded0?.append(structure0)
                }
            }
        }
        keyUsages = keyUsagesDecoded0
        let notAfterDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notAfter)
        notAfter = notAfterDecoded
        let notBeforeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .notBefore)
        notBefore = notBeforeDecoded
        let optionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCertificateManagerCertificateOptions.self, forKey: .options)
        options = optionsDecoded
        let renewalEligibilityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .renewalEligibility)
        renewalEligibility = renewalEligibilityDecoded
        let renewalSummaryDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCertificateManagerCertificateRenewalSummary.self, forKey: .renewalSummary)
        renewalSummary = renewalSummaryDecoded
        let serialDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serial)
        serial = serialDecoded
        let signatureAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .signatureAlgorithm)
        signatureAlgorithm = signatureAlgorithmDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let subjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subject)
        subject = subjectDecoded
        let subjectAlternativeNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subjectAlternativeNames)
        var subjectAlternativeNamesDecoded0:[Swift.String]? = nil
        if let subjectAlternativeNamesContainer = subjectAlternativeNamesContainer {
            subjectAlternativeNamesDecoded0 = [Swift.String]()
            for string0 in subjectAlternativeNamesContainer {
                if let string0 = string0 {
                    subjectAlternativeNamesDecoded0?.append(string0)
                }
            }
        }
        subjectAlternativeNames = subjectAlternativeNamesDecoded0
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension SecurityHubClientTypes.AwsCertificateManagerCertificateDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCertificateManagerCertificateDetails(certificateAuthorityArn: \(Swift.String(describing: certificateAuthorityArn)), createdAt: \(Swift.String(describing: createdAt)), domainName: \(Swift.String(describing: domainName)), domainValidationOptions: \(Swift.String(describing: domainValidationOptions)), extendedKeyUsages: \(Swift.String(describing: extendedKeyUsages)), failureReason: \(Swift.String(describing: failureReason)), importedAt: \(Swift.String(describing: importedAt)), inUseBy: \(Swift.String(describing: inUseBy)), issuedAt: \(Swift.String(describing: issuedAt)), issuer: \(Swift.String(describing: issuer)), keyAlgorithm: \(Swift.String(describing: keyAlgorithm)), keyUsages: \(Swift.String(describing: keyUsages)), notAfter: \(Swift.String(describing: notAfter)), notBefore: \(Swift.String(describing: notBefore)), options: \(Swift.String(describing: options)), renewalEligibility: \(Swift.String(describing: renewalEligibility)), renewalSummary: \(Swift.String(describing: renewalSummary)), serial: \(Swift.String(describing: serial)), signatureAlgorithm: \(Swift.String(describing: signatureAlgorithm)), status: \(Swift.String(describing: status)), subject: \(Swift.String(describing: subject)), subjectAlternativeNames: \(Swift.String(describing: subjectAlternativeNames)), type: \(Swift.String(describing: type)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides details about an AWS Certificate Manager certificate.</p>
    public struct AwsCertificateManagerCertificateDetails: Swift.Equatable {
        /// <p>The ARN of the private certificate authority (CA) that will be used to issue the
        ///          certificate.</p>
        public let certificateAuthorityArn: Swift.String?
        /// <p>Indicates when the certificate was requested.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createdAt: Swift.String?
        /// <p>The fully qualified domain name (FQDN), such as www.example.com, that is secured by the
        ///          certificate.</p>
        public let domainName: Swift.String?
        /// <p>Contains information about the initial validation of each domain name that occurs as a
        ///          result of the <code>RequestCertificate</code> request.</p>
        ///          <p>Only provided if the certificate type is <code>AMAZON_ISSUED</code>.</p>
        public let domainValidationOptions: [SecurityHubClientTypes.AwsCertificateManagerCertificateDomainValidationOption]?
        /// <p>Contains a list of Extended Key Usage X.509 v3 extension objects. Each object specifies
        ///          a purpose for which the certificate public key can be used and consists of a name and an
        ///          object identifier (OID).</p>
        public let extendedKeyUsages: [SecurityHubClientTypes.AwsCertificateManagerCertificateExtendedKeyUsage]?
        /// <p>For a failed certificate request, the reason for the failure.</p>
        ///          <p>Valid values: <code>NO_AVAILABLE_CONTACTS</code> |
        ///             <code>ADDITIONAL_VERIFICATION_REQUIRED</code> | <code>DOMAIN_NOT_ALLOWED</code> |
        ///             <code>INVALID_PUBLIC_DOMAIN</code> | <code>DOMAIN_VALIDATION_DENIED</code> |
        ///             <code>CAA_ERROR</code> | <code>PCA_LIMIT_EXCEEDED</code> | <code>PCA_INVALID_ARN</code>
        ///          | <code>PCA_INVALID_STATE</code> | <code>PCA_REQUEST_FAILED</code> |
        ///             <code>PCA_NAME_CONSTRAINTS_VALIDATION</code> | <code>PCA_RESOURCE_NOT_FOUND</code> |
        ///             <code>PCA_INVALID_ARGS</code> | <code>PCA_INVALID_DURATION</code> |
        ///             <code>PCA_ACCESS_DENIED</code> | <code>SLR_NOT_FOUND</code> | <code>OTHER</code>
        ///          </p>
        public let failureReason: Swift.String?
        /// <p>Indicates when the certificate was imported. Provided if the certificate type is
        ///             <code>IMPORTED</code>.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let importedAt: Swift.String?
        /// <p>The list of ARNs for the AWS resources that use the certificate.</p>
        public let inUseBy: [Swift.String]?
        /// <p>Indicates when the certificate was issued. Provided if the certificate type is
        ///             <code>AMAZON_ISSUED</code>.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let issuedAt: Swift.String?
        /// <p>The name of the certificate authority that issued and signed the certificate.</p>
        public let issuer: Swift.String?
        /// <p>The algorithm that was used to generate the public-private key pair.</p>
        ///          <p>Valid values: <code>RSA_2048</code> | <code>RSA_1024</code> |<code> RSA_4096</code> |
        ///             <code>EC_prime256v1</code> | <code>EC_secp384r1</code> |
        ///          <code>EC_secp521r1</code>
        ///          </p>
        public let keyAlgorithm: Swift.String?
        /// <p>A list of key usage X.509 v3 extension objects.</p>
        public let keyUsages: [SecurityHubClientTypes.AwsCertificateManagerCertificateKeyUsage]?
        /// <p>The time after which the certificate becomes invalid.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let notAfter: Swift.String?
        /// <p>The time before which the certificate is not valid.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let notBefore: Swift.String?
        /// <p>Provides a value that specifies whether to add the certificate to a transparency
        ///          log.</p>
        public let options: SecurityHubClientTypes.AwsCertificateManagerCertificateOptions?
        /// <p>Whether the certificate is eligible for renewal.</p>
        ///          <p>Valid values: <code>ELIGIBLE</code> | <code>INELIGIBLE</code>
        ///          </p>
        public let renewalEligibility: Swift.String?
        /// <p>Information about the status of the AWS Certificate Manager managed renewal for the
        ///          certificate. Provided only when the certificate type is <code>AMAZON_ISSUED</code>.</p>
        public let renewalSummary: SecurityHubClientTypes.AwsCertificateManagerCertificateRenewalSummary?
        /// <p>The serial number of the certificate.</p>
        public let serial: Swift.String?
        /// <p>The algorithm that was used to sign the certificate.</p>
        public let signatureAlgorithm: Swift.String?
        /// <p>The status of the certificate.</p>
        ///          <p>Valid values: <code>PENDING_VALIDATION</code> | <code>ISSUED</code> |
        ///             <code>INACTIVE</code> | <code>EXPIRED</code> | <code>VALIDATION_TIMED_OUT</code> |
        ///             <code>REVOKED</code> | <code>FAILED</code>
        ///          </p>
        public let status: Swift.String?
        /// <p>The name of the entity that is associated with the public key contained in the
        ///          certificate.</p>
        public let subject: Swift.String?
        /// <p>One or more domain names (subject alternative names) included in the certificate. This
        ///          list contains the domain names that are bound to the public key that is contained in the
        ///          certificate.</p>
        ///          <p>The subject alternative names include the canonical domain name (CN) of the certificate
        ///          and additional domain names that can be used to connect to the website.</p>
        public let subjectAlternativeNames: [Swift.String]?
        /// <p>The source of the certificate. For certificates that AWS Certificate Manager provides,
        ///             <code>Type</code> is <code>AMAZON_ISSUED</code>. For certificates that are imported with
        ///             <code>ImportCertificate</code>, <code>Type</code> is <code>IMPORTED</code>.</p>
        ///          <p>Valid values: <code>IMPORTED</code> | <code>AMAZON_ISSUED</code> |
        ///          <code>PRIVATE</code>
        ///          </p>
        public let type: Swift.String?

        public init (
            certificateAuthorityArn: Swift.String? = nil,
            createdAt: Swift.String? = nil,
            domainName: Swift.String? = nil,
            domainValidationOptions: [SecurityHubClientTypes.AwsCertificateManagerCertificateDomainValidationOption]? = nil,
            extendedKeyUsages: [SecurityHubClientTypes.AwsCertificateManagerCertificateExtendedKeyUsage]? = nil,
            failureReason: Swift.String? = nil,
            importedAt: Swift.String? = nil,
            inUseBy: [Swift.String]? = nil,
            issuedAt: Swift.String? = nil,
            issuer: Swift.String? = nil,
            keyAlgorithm: Swift.String? = nil,
            keyUsages: [SecurityHubClientTypes.AwsCertificateManagerCertificateKeyUsage]? = nil,
            notAfter: Swift.String? = nil,
            notBefore: Swift.String? = nil,
            options: SecurityHubClientTypes.AwsCertificateManagerCertificateOptions? = nil,
            renewalEligibility: Swift.String? = nil,
            renewalSummary: SecurityHubClientTypes.AwsCertificateManagerCertificateRenewalSummary? = nil,
            serial: Swift.String? = nil,
            signatureAlgorithm: Swift.String? = nil,
            status: Swift.String? = nil,
            subject: Swift.String? = nil,
            subjectAlternativeNames: [Swift.String]? = nil,
            type: Swift.String? = nil
        )
        {
            self.certificateAuthorityArn = certificateAuthorityArn
            self.createdAt = createdAt
            self.domainName = domainName
            self.domainValidationOptions = domainValidationOptions
            self.extendedKeyUsages = extendedKeyUsages
            self.failureReason = failureReason
            self.importedAt = importedAt
            self.inUseBy = inUseBy
            self.issuedAt = issuedAt
            self.issuer = issuer
            self.keyAlgorithm = keyAlgorithm
            self.keyUsages = keyUsages
            self.notAfter = notAfter
            self.notBefore = notBefore
            self.options = options
            self.renewalEligibility = renewalEligibility
            self.renewalSummary = renewalSummary
            self.serial = serial
            self.signatureAlgorithm = signatureAlgorithm
            self.status = status
            self.subject = subject
            self.subjectAlternativeNames = subjectAlternativeNames
            self.type = type
        }
    }

}

extension SecurityHubClientTypes.AwsCertificateManagerCertificateDomainValidationOption: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case resourceRecord = "ResourceRecord"
        case validationDomain = "ValidationDomain"
        case validationEmails = "ValidationEmails"
        case validationMethod = "ValidationMethod"
        case validationStatus = "ValidationStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let resourceRecord = resourceRecord {
            try encodeContainer.encode(resourceRecord, forKey: .resourceRecord)
        }
        if let validationDomain = validationDomain {
            try encodeContainer.encode(validationDomain, forKey: .validationDomain)
        }
        if let validationEmails = validationEmails {
            var validationEmailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .validationEmails)
            for stringlist0 in validationEmails {
                try validationEmailsContainer.encode(stringlist0)
            }
        }
        if let validationMethod = validationMethod {
            try encodeContainer.encode(validationMethod, forKey: .validationMethod)
        }
        if let validationStatus = validationStatus {
            try encodeContainer.encode(validationStatus, forKey: .validationStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let resourceRecordDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCertificateManagerCertificateResourceRecord.self, forKey: .resourceRecord)
        resourceRecord = resourceRecordDecoded
        let validationDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validationDomain)
        validationDomain = validationDomainDecoded
        let validationEmailsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .validationEmails)
        var validationEmailsDecoded0:[Swift.String]? = nil
        if let validationEmailsContainer = validationEmailsContainer {
            validationEmailsDecoded0 = [Swift.String]()
            for string0 in validationEmailsContainer {
                if let string0 = string0 {
                    validationEmailsDecoded0?.append(string0)
                }
            }
        }
        validationEmails = validationEmailsDecoded0
        let validationMethodDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validationMethod)
        validationMethod = validationMethodDecoded
        let validationStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .validationStatus)
        validationStatus = validationStatusDecoded
    }
}

extension SecurityHubClientTypes.AwsCertificateManagerCertificateDomainValidationOption: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCertificateManagerCertificateDomainValidationOption(domainName: \(Swift.String(describing: domainName)), resourceRecord: \(Swift.String(describing: resourceRecord)), validationDomain: \(Swift.String(describing: validationDomain)), validationEmails: \(Swift.String(describing: validationEmails)), validationMethod: \(Swift.String(describing: validationMethod)), validationStatus: \(Swift.String(describing: validationStatus)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about one of the following:</p>
    ///          <ul>
    ///             <li>
    ///                <p>The initial validation of each domain name that occurs as a result of the
    ///                   <code>RequestCertificate</code> request</p>
    ///             </li>
    ///             <li>
    ///                <p>The validation of each domain name in the certificate, as it pertains to AWS
    ///                Certificate Manager managed renewal</p>
    ///             </li>
    ///          </ul>
    public struct AwsCertificateManagerCertificateDomainValidationOption: Swift.Equatable {
        /// <p>A fully qualified domain name (FQDN) in the certificate.</p>
        public let domainName: Swift.String?
        /// <p>The CNAME record that is added to the DNS database for domain validation.</p>
        public let resourceRecord: SecurityHubClientTypes.AwsCertificateManagerCertificateResourceRecord?
        /// <p>The domain name that AWS Certificate Manager uses to send domain validation
        ///          emails.</p>
        public let validationDomain: Swift.String?
        /// <p>A list of email addresses that AWS Certificate Manager uses to send domain validation
        ///          emails.</p>
        public let validationEmails: [Swift.String]?
        /// <p>The method used to validate the domain name.</p>
        public let validationMethod: Swift.String?
        /// <p>The validation status of the domain name.</p>
        public let validationStatus: Swift.String?

        public init (
            domainName: Swift.String? = nil,
            resourceRecord: SecurityHubClientTypes.AwsCertificateManagerCertificateResourceRecord? = nil,
            validationDomain: Swift.String? = nil,
            validationEmails: [Swift.String]? = nil,
            validationMethod: Swift.String? = nil,
            validationStatus: Swift.String? = nil
        )
        {
            self.domainName = domainName
            self.resourceRecord = resourceRecord
            self.validationDomain = validationDomain
            self.validationEmails = validationEmails
            self.validationMethod = validationMethod
            self.validationStatus = validationStatus
        }
    }

}

extension SecurityHubClientTypes.AwsCertificateManagerCertificateExtendedKeyUsage: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case oId = "OId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let oId = oId {
            try encodeContainer.encode(oId, forKey: .oId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let oIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .oId)
        oId = oIdDecoded
    }
}

extension SecurityHubClientTypes.AwsCertificateManagerCertificateExtendedKeyUsage: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCertificateManagerCertificateExtendedKeyUsage(name: \(Swift.String(describing: name)), oId: \(Swift.String(describing: oId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about an extended key usage X.509 v3 extension object.</p>
    public struct AwsCertificateManagerCertificateExtendedKeyUsage: Swift.Equatable {
        /// <p>The name of an extension value. Indicates the purpose for which the certificate public
        ///          key can be used.</p>
        public let name: Swift.String?
        /// <p>An object identifier (OID) for the extension value.</p>
        ///          <p>The format is numbers separated by periods.</p>
        public let oId: Swift.String?

        public init (
            name: Swift.String? = nil,
            oId: Swift.String? = nil
        )
        {
            self.name = name
            self.oId = oId
        }
    }

}

extension SecurityHubClientTypes.AwsCertificateManagerCertificateKeyUsage: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension SecurityHubClientTypes.AwsCertificateManagerCertificateKeyUsage: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCertificateManagerCertificateKeyUsage(name: \(Swift.String(describing: name)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about a key usage X.509 v3 extension object.</p>
    public struct AwsCertificateManagerCertificateKeyUsage: Swift.Equatable {
        /// <p>The key usage extension name.</p>
        public let name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension SecurityHubClientTypes.AwsCertificateManagerCertificateOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificateTransparencyLoggingPreference = "CertificateTransparencyLoggingPreference"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificateTransparencyLoggingPreference = certificateTransparencyLoggingPreference {
            try encodeContainer.encode(certificateTransparencyLoggingPreference, forKey: .certificateTransparencyLoggingPreference)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateTransparencyLoggingPreferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificateTransparencyLoggingPreference)
        certificateTransparencyLoggingPreference = certificateTransparencyLoggingPreferenceDecoded
    }
}

extension SecurityHubClientTypes.AwsCertificateManagerCertificateOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCertificateManagerCertificateOptions(certificateTransparencyLoggingPreference: \(Swift.String(describing: certificateTransparencyLoggingPreference)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains other options for the certificate.</p>
    public struct AwsCertificateManagerCertificateOptions: Swift.Equatable {
        /// <p>Whether to add the certificate to a transparency log.</p>
        ///          <p>Valid values: <code>DISABLED</code> | <code>ENABLED</code>
        ///          </p>
        public let certificateTransparencyLoggingPreference: Swift.String?

        public init (
            certificateTransparencyLoggingPreference: Swift.String? = nil
        )
        {
            self.certificateTransparencyLoggingPreference = certificateTransparencyLoggingPreference
        }
    }

}

extension SecurityHubClientTypes.AwsCertificateManagerCertificateRenewalSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainValidationOptions = "DomainValidationOptions"
        case renewalStatus = "RenewalStatus"
        case renewalStatusReason = "RenewalStatusReason"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainValidationOptions = domainValidationOptions {
            var domainValidationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainValidationOptions)
            for awscertificatemanagercertificatedomainvalidationoptions0 in domainValidationOptions {
                try domainValidationOptionsContainer.encode(awscertificatemanagercertificatedomainvalidationoptions0)
            }
        }
        if let renewalStatus = renewalStatus {
            try encodeContainer.encode(renewalStatus, forKey: .renewalStatus)
        }
        if let renewalStatusReason = renewalStatusReason {
            try encodeContainer.encode(renewalStatusReason, forKey: .renewalStatusReason)
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainValidationOptionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsCertificateManagerCertificateDomainValidationOption?].self, forKey: .domainValidationOptions)
        var domainValidationOptionsDecoded0:[SecurityHubClientTypes.AwsCertificateManagerCertificateDomainValidationOption]? = nil
        if let domainValidationOptionsContainer = domainValidationOptionsContainer {
            domainValidationOptionsDecoded0 = [SecurityHubClientTypes.AwsCertificateManagerCertificateDomainValidationOption]()
            for structure0 in domainValidationOptionsContainer {
                if let structure0 = structure0 {
                    domainValidationOptionsDecoded0?.append(structure0)
                }
            }
        }
        domainValidationOptions = domainValidationOptionsDecoded0
        let renewalStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .renewalStatus)
        renewalStatus = renewalStatusDecoded
        let renewalStatusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .renewalStatusReason)
        renewalStatusReason = renewalStatusReasonDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension SecurityHubClientTypes.AwsCertificateManagerCertificateRenewalSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCertificateManagerCertificateRenewalSummary(domainValidationOptions: \(Swift.String(describing: domainValidationOptions)), renewalStatus: \(Swift.String(describing: renewalStatus)), renewalStatusReason: \(Swift.String(describing: renewalStatusReason)), updatedAt: \(Swift.String(describing: updatedAt)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about the AWS Certificate Manager managed renewal for an
    ///             <code>AMAZON_ISSUED</code> certificate.</p>
    public struct AwsCertificateManagerCertificateRenewalSummary: Swift.Equatable {
        /// <p>Information about the validation of each domain name in the certificate, as it pertains
        ///          to AWS Certificate Manager managed renewal. Provided only when the certificate type is
        ///             <code>AMAZON_ISSUED</code>.</p>
        public let domainValidationOptions: [SecurityHubClientTypes.AwsCertificateManagerCertificateDomainValidationOption]?
        /// <p>The status of the AWS Certificate Manager managed renewal of the certificate.</p>
        ///          <p>Valid values: <code>PENDING_AUTO_RENEWAL</code> | <code>PENDING_VALIDATION</code> |
        ///             <code>SUCCESS</code> | <code>FAILED</code>
        ///          </p>
        public let renewalStatus: Swift.String?
        /// <p>The reason that a renewal request was unsuccessful.</p>
        ///          <p>Valid values: <code>NO_AVAILABLE_CONTACTS</code> |
        ///             <code>ADDITIONAL_VERIFICATION_REQUIRED</code> | <code>DOMAIN_NOT_ALLOWED</code> |
        ///             <code>INVALID_PUBLIC_DOMAIN</code> | <code>DOMAIN_VALIDATION_DENIED</code> |
        ///             <code>CAA_ERROR</code> | <code>PCA_LIMIT_EXCEEDED</code> | <code>PCA_INVALID_ARN</code>
        ///          | <code>PCA_INVALID_STATE</code> | <code>PCA_REQUEST_FAILED</code> |
        ///             <code>PCA_NAME_CONSTRAINTS_VALIDATION</code> | <code>PCA_RESOURCE_NOT_FOUND</code> |
        ///             <code>PCA_INVALID_ARGS</code> | <code>PCA_INVALID_DURATION</code> |
        ///             <code>PCA_ACCESS_DENIED</code> | <code>SLR_NOT_FOUND</code> | <code>OTHER</code>
        ///          </p>
        public let renewalStatusReason: Swift.String?
        /// <p>Indicates when the renewal summary was last updated.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let updatedAt: Swift.String?

        public init (
            domainValidationOptions: [SecurityHubClientTypes.AwsCertificateManagerCertificateDomainValidationOption]? = nil,
            renewalStatus: Swift.String? = nil,
            renewalStatusReason: Swift.String? = nil,
            updatedAt: Swift.String? = nil
        )
        {
            self.domainValidationOptions = domainValidationOptions
            self.renewalStatus = renewalStatus
            self.renewalStatusReason = renewalStatusReason
            self.updatedAt = updatedAt
        }
    }

}

extension SecurityHubClientTypes.AwsCertificateManagerCertificateResourceRecord: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SecurityHubClientTypes.AwsCertificateManagerCertificateResourceRecord: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCertificateManagerCertificateResourceRecord(name: \(Swift.String(describing: name)), type: \(Swift.String(describing: type)), value: \(Swift.String(describing: value)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides details about the CNAME record that is added to the DNS database for domain
    ///          validation.</p>
    public struct AwsCertificateManagerCertificateResourceRecord: Swift.Equatable {
        /// <p>The name of the resource.</p>
        public let name: Swift.String?
        /// <p>The type of resource.</p>
        public let type: Swift.String?
        /// <p>The value of the resource.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            type: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
            self.value = value
        }
    }

}

extension SecurityHubClientTypes.AwsCloudFrontDistributionCacheBehavior: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case viewerProtocolPolicy = "ViewerProtocolPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let viewerProtocolPolicy = viewerProtocolPolicy {
            try encodeContainer.encode(viewerProtocolPolicy, forKey: .viewerProtocolPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let viewerProtocolPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .viewerProtocolPolicy)
        viewerProtocolPolicy = viewerProtocolPolicyDecoded
    }
}

extension SecurityHubClientTypes.AwsCloudFrontDistributionCacheBehavior: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudFrontDistributionCacheBehavior(viewerProtocolPolicy: \(Swift.String(describing: viewerProtocolPolicy)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about a cache behavior for the distribution.</p>
    public struct AwsCloudFrontDistributionCacheBehavior: Swift.Equatable {
        /// <p>The protocol that viewers can use to access the files in an origin. You can specify the
        ///          following options:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>allow-all</code> - Viewers can use HTTP or HTTPS.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>redirect-to-https</code> - CloudFront responds to HTTP requests with an HTTP
        ///                status code of 301 (Moved Permanently) and the HTTPS URL. The viewer then uses the
        ///                new URL to resubmit.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>https-only</code> - CloudFront responds to HTTP request with an HTTP status
        ///                code of 403 (Forbidden).</p>
        ///             </li>
        ///          </ul>
        public let viewerProtocolPolicy: Swift.String?

        public init (
            viewerProtocolPolicy: Swift.String? = nil
        )
        {
            self.viewerProtocolPolicy = viewerProtocolPolicy
        }
    }

}

extension SecurityHubClientTypes.AwsCloudFrontDistributionCacheBehaviors: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case items = "Items"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let items = items {
            var itemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .items)
            for awscloudfrontdistributioncachebehaviorsitemlist0 in items {
                try itemsContainer.encode(awscloudfrontdistributioncachebehaviorsitemlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsCloudFrontDistributionCacheBehavior?].self, forKey: .items)
        var itemsDecoded0:[SecurityHubClientTypes.AwsCloudFrontDistributionCacheBehavior]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [SecurityHubClientTypes.AwsCloudFrontDistributionCacheBehavior]()
            for structure0 in itemsContainer {
                if let structure0 = structure0 {
                    itemsDecoded0?.append(structure0)
                }
            }
        }
        items = itemsDecoded0
    }
}

extension SecurityHubClientTypes.AwsCloudFrontDistributionCacheBehaviors: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudFrontDistributionCacheBehaviors(items: \(Swift.String(describing: items)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about caching for the distribution.</p>
    public struct AwsCloudFrontDistributionCacheBehaviors: Swift.Equatable {
        /// <p>The cache behaviors for the distribution.</p>
        public let items: [SecurityHubClientTypes.AwsCloudFrontDistributionCacheBehavior]?

        public init (
            items: [SecurityHubClientTypes.AwsCloudFrontDistributionCacheBehavior]? = nil
        )
        {
            self.items = items
        }
    }

}

extension SecurityHubClientTypes.AwsCloudFrontDistributionDefaultCacheBehavior: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case viewerProtocolPolicy = "ViewerProtocolPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let viewerProtocolPolicy = viewerProtocolPolicy {
            try encodeContainer.encode(viewerProtocolPolicy, forKey: .viewerProtocolPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let viewerProtocolPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .viewerProtocolPolicy)
        viewerProtocolPolicy = viewerProtocolPolicyDecoded
    }
}

extension SecurityHubClientTypes.AwsCloudFrontDistributionDefaultCacheBehavior: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudFrontDistributionDefaultCacheBehavior(viewerProtocolPolicy: \(Swift.String(describing: viewerProtocolPolicy)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about the default cache configuration for the distribution.</p>
    public struct AwsCloudFrontDistributionDefaultCacheBehavior: Swift.Equatable {
        /// <p>The protocol that viewers can use to access the files in an origin. You can specify the
        ///          following options:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>allow-all</code> - Viewers can use HTTP or HTTPS.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>redirect-to-https</code> - CloudFront responds to HTTP requests with an HTTP
        ///                status code of 301 (Moved Permanently) and the HTTPS URL. The viewer then uses the
        ///                new URL to resubmit.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>https-only</code> - CloudFront responds to HTTP request with an HTTP status
        ///                code of 403 (Forbidden).</p>
        ///             </li>
        ///          </ul>
        public let viewerProtocolPolicy: Swift.String?

        public init (
            viewerProtocolPolicy: Swift.String? = nil
        )
        {
            self.viewerProtocolPolicy = viewerProtocolPolicy
        }
    }

}

extension SecurityHubClientTypes.AwsCloudFrontDistributionDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cacheBehaviors = "CacheBehaviors"
        case defaultCacheBehavior = "DefaultCacheBehavior"
        case defaultRootObject = "DefaultRootObject"
        case domainName = "DomainName"
        case eTag = "ETag"
        case lastModifiedTime = "LastModifiedTime"
        case logging = "Logging"
        case originGroups = "OriginGroups"
        case origins = "Origins"
        case status = "Status"
        case webAclId = "WebAclId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cacheBehaviors = cacheBehaviors {
            try encodeContainer.encode(cacheBehaviors, forKey: .cacheBehaviors)
        }
        if let defaultCacheBehavior = defaultCacheBehavior {
            try encodeContainer.encode(defaultCacheBehavior, forKey: .defaultCacheBehavior)
        }
        if let defaultRootObject = defaultRootObject {
            try encodeContainer.encode(defaultRootObject, forKey: .defaultRootObject)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let eTag = eTag {
            try encodeContainer.encode(eTag, forKey: .eTag)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime, forKey: .lastModifiedTime)
        }
        if let logging = logging {
            try encodeContainer.encode(logging, forKey: .logging)
        }
        if let originGroups = originGroups {
            try encodeContainer.encode(originGroups, forKey: .originGroups)
        }
        if let origins = origins {
            try encodeContainer.encode(origins, forKey: .origins)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let webAclId = webAclId {
            try encodeContainer.encode(webAclId, forKey: .webAclId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cacheBehaviorsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCloudFrontDistributionCacheBehaviors.self, forKey: .cacheBehaviors)
        cacheBehaviors = cacheBehaviorsDecoded
        let defaultCacheBehaviorDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCloudFrontDistributionDefaultCacheBehavior.self, forKey: .defaultCacheBehavior)
        defaultCacheBehavior = defaultCacheBehaviorDecoded
        let defaultRootObjectDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultRootObject)
        defaultRootObject = defaultRootObjectDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let loggingDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCloudFrontDistributionLogging.self, forKey: .logging)
        logging = loggingDecoded
        let originsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCloudFrontDistributionOrigins.self, forKey: .origins)
        origins = originsDecoded
        let originGroupsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroups.self, forKey: .originGroups)
        originGroups = originGroupsDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let webAclIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webAclId)
        webAclId = webAclIdDecoded
    }
}

extension SecurityHubClientTypes.AwsCloudFrontDistributionDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudFrontDistributionDetails(cacheBehaviors: \(Swift.String(describing: cacheBehaviors)), defaultCacheBehavior: \(Swift.String(describing: defaultCacheBehavior)), defaultRootObject: \(Swift.String(describing: defaultRootObject)), domainName: \(Swift.String(describing: domainName)), eTag: \(Swift.String(describing: eTag)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), logging: \(Swift.String(describing: logging)), originGroups: \(Swift.String(describing: originGroups)), origins: \(Swift.String(describing: origins)), status: \(Swift.String(describing: status)), webAclId: \(Swift.String(describing: webAclId)))"}
}

extension SecurityHubClientTypes {
    /// <p>A distribution configuration.</p>
    public struct AwsCloudFrontDistributionDetails: Swift.Equatable {
        /// <p>Provides information about the cache configuration for the distribution.</p>
        public let cacheBehaviors: SecurityHubClientTypes.AwsCloudFrontDistributionCacheBehaviors?
        /// <p>The default cache behavior for the configuration.</p>
        public let defaultCacheBehavior: SecurityHubClientTypes.AwsCloudFrontDistributionDefaultCacheBehavior?
        /// <p>The object that CloudFront sends in response to requests from the origin (for example,
        ///          index.html) when a viewer requests the root URL for the distribution
        ///          (http://www.example.com) instead of an object in your distribution
        ///          (http://www.example.com/product-description.html). </p>
        public let defaultRootObject: Swift.String?
        /// <p>The domain name corresponding to the distribution.</p>
        public let domainName: Swift.String?
        /// <p>The entity tag is a hash of the object.</p>
        public let eTag: Swift.String?
        /// <p>Indicates when that the distribution was last modified.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let lastModifiedTime: Swift.String?
        /// <p>A complex type that controls whether access logs are written for the distribution.</p>
        public let logging: SecurityHubClientTypes.AwsCloudFrontDistributionLogging?
        /// <p>Provides information about the origin groups in the distribution.</p>
        public let originGroups: SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroups?
        /// <p>A complex type that contains information about origins for this distribution.</p>
        public let origins: SecurityHubClientTypes.AwsCloudFrontDistributionOrigins?
        /// <p>Indicates the current status of the distribution.</p>
        public let status: Swift.String?
        /// <p>A unique identifier that specifies the AWS WAF web ACL, if any, to associate with this distribution.</p>
        public let webAclId: Swift.String?

        public init (
            cacheBehaviors: SecurityHubClientTypes.AwsCloudFrontDistributionCacheBehaviors? = nil,
            defaultCacheBehavior: SecurityHubClientTypes.AwsCloudFrontDistributionDefaultCacheBehavior? = nil,
            defaultRootObject: Swift.String? = nil,
            domainName: Swift.String? = nil,
            eTag: Swift.String? = nil,
            lastModifiedTime: Swift.String? = nil,
            logging: SecurityHubClientTypes.AwsCloudFrontDistributionLogging? = nil,
            originGroups: SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroups? = nil,
            origins: SecurityHubClientTypes.AwsCloudFrontDistributionOrigins? = nil,
            status: Swift.String? = nil,
            webAclId: Swift.String? = nil
        )
        {
            self.cacheBehaviors = cacheBehaviors
            self.defaultCacheBehavior = defaultCacheBehavior
            self.defaultRootObject = defaultRootObject
            self.domainName = domainName
            self.eTag = eTag
            self.lastModifiedTime = lastModifiedTime
            self.logging = logging
            self.originGroups = originGroups
            self.origins = origins
            self.status = status
            self.webAclId = webAclId
        }
    }

}

extension SecurityHubClientTypes.AwsCloudFrontDistributionLogging: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket = "Bucket"
        case enabled = "Enabled"
        case includeCookies = "IncludeCookies"
        case prefix = "Prefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if includeCookies != false {
            try encodeContainer.encode(includeCookies, forKey: .includeCookies)
        }
        if let prefix = prefix {
            try encodeContainer.encode(prefix, forKey: .prefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let includeCookiesDecoded = try containerValues.decode(Swift.Bool.self, forKey: .includeCookies)
        includeCookies = includeCookiesDecoded
        let prefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefix)
        prefix = prefixDecoded
    }
}

extension SecurityHubClientTypes.AwsCloudFrontDistributionLogging: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudFrontDistributionLogging(bucket: \(Swift.String(describing: bucket)), enabled: \(Swift.String(describing: enabled)), includeCookies: \(Swift.String(describing: includeCookies)), prefix: \(Swift.String(describing: prefix)))"}
}

extension SecurityHubClientTypes {
    /// <p>A complex type that controls whether access logs are written for the distribution.</p>
    public struct AwsCloudFrontDistributionLogging: Swift.Equatable {
        /// <p>The Amazon S3 bucket to store the access logs in.</p>
        public let bucket: Swift.String?
        /// <p>With this field, you can enable or disable the selected distribution.</p>
        public let enabled: Swift.Bool
        /// <p>Specifies whether you want CloudFront to include cookies in access logs.</p>
        public let includeCookies: Swift.Bool
        /// <p>An optional string that you want CloudFront to use as a prefix to the access log
        ///          filenames for this distribution.</p>
        public let prefix: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            enabled: Swift.Bool = false,
            includeCookies: Swift.Bool = false,
            prefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.enabled = enabled
            self.includeCookies = includeCookies
            self.prefix = prefix
        }
    }

}

extension SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failoverCriteria = "FailoverCriteria"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let failoverCriteria = failoverCriteria {
            try encodeContainer.encode(failoverCriteria, forKey: .failoverCriteria)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failoverCriteriaDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroupFailover.self, forKey: .failoverCriteria)
        failoverCriteria = failoverCriteriaDecoded
    }
}

extension SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudFrontDistributionOriginGroup(failoverCriteria: \(Swift.String(describing: failoverCriteria)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about an origin group for the distribution.</p>
    public struct AwsCloudFrontDistributionOriginGroup: Swift.Equatable {
        /// <p>Provides the criteria for an origin group to fail over.</p>
        public let failoverCriteria: SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroupFailover?

        public init (
            failoverCriteria: SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroupFailover? = nil
        )
        {
            self.failoverCriteria = failoverCriteria
        }
    }

}

extension SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroupFailover: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case statusCodes = "StatusCodes"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let statusCodes = statusCodes {
            try encodeContainer.encode(statusCodes, forKey: .statusCodes)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusCodesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroupFailoverStatusCodes.self, forKey: .statusCodes)
        statusCodes = statusCodesDecoded
    }
}

extension SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroupFailover: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudFrontDistributionOriginGroupFailover(statusCodes: \(Swift.String(describing: statusCodes)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about when an origin group fails over.</p>
    public struct AwsCloudFrontDistributionOriginGroupFailover: Swift.Equatable {
        /// <p>Information about the status codes that cause an origin group to fail over.</p>
        public let statusCodes: SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroupFailoverStatusCodes?

        public init (
            statusCodes: SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroupFailoverStatusCodes? = nil
        )
        {
            self.statusCodes = statusCodes
        }
    }

}

extension SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroupFailoverStatusCodes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case items = "Items"
        case quantity = "Quantity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let items = items {
            var itemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .items)
            for awscloudfrontdistributionorigingroupfailoverstatuscodesitemlist0 in items {
                try itemsContainer.encode(awscloudfrontdistributionorigingroupfailoverstatuscodesitemlist0)
            }
        }
        if quantity != 0 {
            try encodeContainer.encode(quantity, forKey: .quantity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemsContainer = try containerValues.decodeIfPresent([Swift.Int?].self, forKey: .items)
        var itemsDecoded0:[Swift.Int]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [Swift.Int]()
            for integer0 in itemsContainer {
                if let integer0 = integer0 {
                    itemsDecoded0?.append(integer0)
                }
            }
        }
        items = itemsDecoded0
        let quantityDecoded = try containerValues.decode(Swift.Int.self, forKey: .quantity)
        quantity = quantityDecoded
    }
}

extension SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroupFailoverStatusCodes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudFrontDistributionOriginGroupFailoverStatusCodes(items: \(Swift.String(describing: items)), quantity: \(Swift.String(describing: quantity)))"}
}

extension SecurityHubClientTypes {
    /// <p>The status codes that cause an origin group to fail over.</p>
    public struct AwsCloudFrontDistributionOriginGroupFailoverStatusCodes: Swift.Equatable {
        /// <p>The list of status code values that can cause a failover to the next origin.</p>
        public let items: [Swift.Int]?
        /// <p>The number of status codes that can cause a failover.</p>
        public let quantity: Swift.Int

        public init (
            items: [Swift.Int]? = nil,
            quantity: Swift.Int = 0
        )
        {
            self.items = items
            self.quantity = quantity
        }
    }

}

extension SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroups: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case items = "Items"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let items = items {
            var itemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .items)
            for awscloudfrontdistributionorigingroupsitemlist0 in items {
                try itemsContainer.encode(awscloudfrontdistributionorigingroupsitemlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroup?].self, forKey: .items)
        var itemsDecoded0:[SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroup]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroup]()
            for structure0 in itemsContainer {
                if let structure0 = structure0 {
                    itemsDecoded0?.append(structure0)
                }
            }
        }
        items = itemsDecoded0
    }
}

extension SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroups: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudFrontDistributionOriginGroups(items: \(Swift.String(describing: items)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about origin groups that are associated with the
    ///          distribution.</p>
    public struct AwsCloudFrontDistributionOriginGroups: Swift.Equatable {
        /// <p>The list of origin groups.</p>
        public let items: [SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroup]?

        public init (
            items: [SecurityHubClientTypes.AwsCloudFrontDistributionOriginGroup]? = nil
        )
        {
            self.items = items
        }
    }

}

extension SecurityHubClientTypes.AwsCloudFrontDistributionOriginItem: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domainName = "DomainName"
        case id = "Id"
        case originPath = "OriginPath"
        case s3OriginConfig = "S3OriginConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let originPath = originPath {
            try encodeContainer.encode(originPath, forKey: .originPath)
        }
        if let s3OriginConfig = s3OriginConfig {
            try encodeContainer.encode(s3OriginConfig, forKey: .s3OriginConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let originPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originPath)
        originPath = originPathDecoded
        let s3OriginConfigDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCloudFrontDistributionOriginS3OriginConfig.self, forKey: .s3OriginConfig)
        s3OriginConfig = s3OriginConfigDecoded
    }
}

extension SecurityHubClientTypes.AwsCloudFrontDistributionOriginItem: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudFrontDistributionOriginItem(domainName: \(Swift.String(describing: domainName)), id: \(Swift.String(describing: id)), originPath: \(Swift.String(describing: originPath)), s3OriginConfig: \(Swift.String(describing: s3OriginConfig)))"}
}

extension SecurityHubClientTypes {
    /// <p>A complex type that describes the Amazon S3 bucket, HTTP server (for example, a web
    ///          server), Amazon Elemental MediaStore, or other server from which CloudFront gets your
    ///          files.</p>
    public struct AwsCloudFrontDistributionOriginItem: Swift.Equatable {
        /// <p>Amazon S3 origins: The DNS name of the Amazon S3 bucket from which you want CloudFront to get objects for this origin.</p>
        public let domainName: Swift.String?
        /// <p>A unique identifier for the origin or origin group.</p>
        public let id: Swift.String?
        /// <p>An optional element that causes CloudFront to request your content from a directory in your Amazon S3 bucket or your custom origin.</p>
        public let originPath: Swift.String?
        /// <p>An origin that is an S3 bucket that is not configured with static website
        ///          hosting.</p>
        public let s3OriginConfig: SecurityHubClientTypes.AwsCloudFrontDistributionOriginS3OriginConfig?

        public init (
            domainName: Swift.String? = nil,
            id: Swift.String? = nil,
            originPath: Swift.String? = nil,
            s3OriginConfig: SecurityHubClientTypes.AwsCloudFrontDistributionOriginS3OriginConfig? = nil
        )
        {
            self.domainName = domainName
            self.id = id
            self.originPath = originPath
            self.s3OriginConfig = s3OriginConfig
        }
    }

}

extension SecurityHubClientTypes.AwsCloudFrontDistributionOriginS3OriginConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case originAccessIdentity = "OriginAccessIdentity"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let originAccessIdentity = originAccessIdentity {
            try encodeContainer.encode(originAccessIdentity, forKey: .originAccessIdentity)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let originAccessIdentityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .originAccessIdentity)
        originAccessIdentity = originAccessIdentityDecoded
    }
}

extension SecurityHubClientTypes.AwsCloudFrontDistributionOriginS3OriginConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudFrontDistributionOriginS3OriginConfig(originAccessIdentity: \(Swift.String(describing: originAccessIdentity)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about an origin that is an S3 bucket that is not configured with static
    ///          website hosting.</p>
    public struct AwsCloudFrontDistributionOriginS3OriginConfig: Swift.Equatable {
        /// <p>The CloudFront origin access identity to associate with the origin.</p>
        public let originAccessIdentity: Swift.String?

        public init (
            originAccessIdentity: Swift.String? = nil
        )
        {
            self.originAccessIdentity = originAccessIdentity
        }
    }

}

extension SecurityHubClientTypes.AwsCloudFrontDistributionOrigins: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case items = "Items"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let items = items {
            var itemsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .items)
            for awscloudfrontdistributionoriginitemlist0 in items {
                try itemsContainer.encode(awscloudfrontdistributionoriginitemlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let itemsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsCloudFrontDistributionOriginItem?].self, forKey: .items)
        var itemsDecoded0:[SecurityHubClientTypes.AwsCloudFrontDistributionOriginItem]? = nil
        if let itemsContainer = itemsContainer {
            itemsDecoded0 = [SecurityHubClientTypes.AwsCloudFrontDistributionOriginItem]()
            for structure0 in itemsContainer {
                if let structure0 = structure0 {
                    itemsDecoded0?.append(structure0)
                }
            }
        }
        items = itemsDecoded0
    }
}

extension SecurityHubClientTypes.AwsCloudFrontDistributionOrigins: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudFrontDistributionOrigins(items: \(Swift.String(describing: items)))"}
}

extension SecurityHubClientTypes {
    /// <p>A complex type that contains information about origins and origin groups for this distribution.</p>
    public struct AwsCloudFrontDistributionOrigins: Swift.Equatable {
        /// <p>A complex type that contains origins or origin groups for this distribution.</p>
        public let items: [SecurityHubClientTypes.AwsCloudFrontDistributionOriginItem]?

        public init (
            items: [SecurityHubClientTypes.AwsCloudFrontDistributionOriginItem]? = nil
        )
        {
            self.items = items
        }
    }

}

extension SecurityHubClientTypes.AwsCloudTrailTrailDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cloudWatchLogsLogGroupArn = "CloudWatchLogsLogGroupArn"
        case cloudWatchLogsRoleArn = "CloudWatchLogsRoleArn"
        case hasCustomEventSelectors = "HasCustomEventSelectors"
        case homeRegion = "HomeRegion"
        case includeGlobalServiceEvents = "IncludeGlobalServiceEvents"
        case isMultiRegionTrail = "IsMultiRegionTrail"
        case isOrganizationTrail = "IsOrganizationTrail"
        case kmsKeyId = "KmsKeyId"
        case logFileValidationEnabled = "LogFileValidationEnabled"
        case name = "Name"
        case s3BucketName = "S3BucketName"
        case s3KeyPrefix = "S3KeyPrefix"
        case snsTopicArn = "SnsTopicArn"
        case snsTopicName = "SnsTopicName"
        case trailArn = "TrailArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn {
            try encodeContainer.encode(cloudWatchLogsLogGroupArn, forKey: .cloudWatchLogsLogGroupArn)
        }
        if let cloudWatchLogsRoleArn = cloudWatchLogsRoleArn {
            try encodeContainer.encode(cloudWatchLogsRoleArn, forKey: .cloudWatchLogsRoleArn)
        }
        if hasCustomEventSelectors != false {
            try encodeContainer.encode(hasCustomEventSelectors, forKey: .hasCustomEventSelectors)
        }
        if let homeRegion = homeRegion {
            try encodeContainer.encode(homeRegion, forKey: .homeRegion)
        }
        if includeGlobalServiceEvents != false {
            try encodeContainer.encode(includeGlobalServiceEvents, forKey: .includeGlobalServiceEvents)
        }
        if isMultiRegionTrail != false {
            try encodeContainer.encode(isMultiRegionTrail, forKey: .isMultiRegionTrail)
        }
        if isOrganizationTrail != false {
            try encodeContainer.encode(isOrganizationTrail, forKey: .isOrganizationTrail)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if logFileValidationEnabled != false {
            try encodeContainer.encode(logFileValidationEnabled, forKey: .logFileValidationEnabled)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let s3BucketName = s3BucketName {
            try encodeContainer.encode(s3BucketName, forKey: .s3BucketName)
        }
        if let s3KeyPrefix = s3KeyPrefix {
            try encodeContainer.encode(s3KeyPrefix, forKey: .s3KeyPrefix)
        }
        if let snsTopicArn = snsTopicArn {
            try encodeContainer.encode(snsTopicArn, forKey: .snsTopicArn)
        }
        if let snsTopicName = snsTopicName {
            try encodeContainer.encode(snsTopicName, forKey: .snsTopicName)
        }
        if let trailArn = trailArn {
            try encodeContainer.encode(trailArn, forKey: .trailArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cloudWatchLogsLogGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogsLogGroupArn)
        cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArnDecoded
        let cloudWatchLogsRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cloudWatchLogsRoleArn)
        cloudWatchLogsRoleArn = cloudWatchLogsRoleArnDecoded
        let hasCustomEventSelectorsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .hasCustomEventSelectors)
        hasCustomEventSelectors = hasCustomEventSelectorsDecoded
        let homeRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .homeRegion)
        homeRegion = homeRegionDecoded
        let includeGlobalServiceEventsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .includeGlobalServiceEvents)
        includeGlobalServiceEvents = includeGlobalServiceEventsDecoded
        let isMultiRegionTrailDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isMultiRegionTrail)
        isMultiRegionTrail = isMultiRegionTrailDecoded
        let isOrganizationTrailDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isOrganizationTrail)
        isOrganizationTrail = isOrganizationTrailDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let logFileValidationEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .logFileValidationEnabled)
        logFileValidationEnabled = logFileValidationEnabledDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let s3KeyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3KeyPrefix)
        s3KeyPrefix = s3KeyPrefixDecoded
        let snsTopicArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicArn)
        snsTopicArn = snsTopicArnDecoded
        let snsTopicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snsTopicName)
        snsTopicName = snsTopicNameDecoded
        let trailArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .trailArn)
        trailArn = trailArnDecoded
    }
}

extension SecurityHubClientTypes.AwsCloudTrailTrailDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCloudTrailTrailDetails(cloudWatchLogsLogGroupArn: \(Swift.String(describing: cloudWatchLogsLogGroupArn)), cloudWatchLogsRoleArn: \(Swift.String(describing: cloudWatchLogsRoleArn)), hasCustomEventSelectors: \(Swift.String(describing: hasCustomEventSelectors)), homeRegion: \(Swift.String(describing: homeRegion)), includeGlobalServiceEvents: \(Swift.String(describing: includeGlobalServiceEvents)), isMultiRegionTrail: \(Swift.String(describing: isMultiRegionTrail)), isOrganizationTrail: \(Swift.String(describing: isOrganizationTrail)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), logFileValidationEnabled: \(Swift.String(describing: logFileValidationEnabled)), name: \(Swift.String(describing: name)), s3BucketName: \(Swift.String(describing: s3BucketName)), s3KeyPrefix: \(Swift.String(describing: s3KeyPrefix)), snsTopicArn: \(Swift.String(describing: snsTopicArn)), snsTopicName: \(Swift.String(describing: snsTopicName)), trailArn: \(Swift.String(describing: trailArn)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides details about a CloudTrail trail.</p>
    public struct AwsCloudTrailTrailDetails: Swift.Equatable {
        /// <p>The ARN of the log group that CloudTrail logs are delivered to.</p>
        public let cloudWatchLogsLogGroupArn: Swift.String?
        /// <p>The ARN of the role that the CloudWatch Logs endpoint assumes when it writes to the log
        ///          group.</p>
        public let cloudWatchLogsRoleArn: Swift.String?
        /// <p>Indicates whether the trail has custom event selectors.</p>
        public let hasCustomEventSelectors: Swift.Bool
        /// <p>The Region where the trail was created.</p>
        public let homeRegion: Swift.String?
        /// <p>Indicates whether the trail publishes events from global services such as IAM to the log
        ///          files.</p>
        public let includeGlobalServiceEvents: Swift.Bool
        /// <p>Indicates whether the trail applies only to the current Region or to all Regions.</p>
        public let isMultiRegionTrail: Swift.Bool
        /// <p>Whether the trail is created for all accounts in an organization in AWS Organizations,
        ///          or only for the current AWS account.</p>
        public let isOrganizationTrail: Swift.Bool
        /// <p>The AWS KMS key ID to use to encrypt the logs.</p>
        public let kmsKeyId: Swift.String?
        /// <p>Indicates whether CloudTrail log file validation is enabled.</p>
        public let logFileValidationEnabled: Swift.Bool
        /// <p>The name of the trail.</p>
        public let name: Swift.String?
        /// <p>The name of the S3 bucket where the log files are published.</p>
        public let s3BucketName: Swift.String?
        /// <p>The S3 key prefix. The key prefix is added after the name of the S3 bucket where the log
        ///          files are published.</p>
        public let s3KeyPrefix: Swift.String?
        /// <p>The ARN of the SNS topic that is used for notifications of log file delivery.</p>
        public let snsTopicArn: Swift.String?
        /// <p>The name of the SNS topic that is used for notifications of log file delivery.</p>
        public let snsTopicName: Swift.String?
        /// <p>The ARN of the trail.</p>
        public let trailArn: Swift.String?

        public init (
            cloudWatchLogsLogGroupArn: Swift.String? = nil,
            cloudWatchLogsRoleArn: Swift.String? = nil,
            hasCustomEventSelectors: Swift.Bool = false,
            homeRegion: Swift.String? = nil,
            includeGlobalServiceEvents: Swift.Bool = false,
            isMultiRegionTrail: Swift.Bool = false,
            isOrganizationTrail: Swift.Bool = false,
            kmsKeyId: Swift.String? = nil,
            logFileValidationEnabled: Swift.Bool = false,
            name: Swift.String? = nil,
            s3BucketName: Swift.String? = nil,
            s3KeyPrefix: Swift.String? = nil,
            snsTopicArn: Swift.String? = nil,
            snsTopicName: Swift.String? = nil,
            trailArn: Swift.String? = nil
        )
        {
            self.cloudWatchLogsLogGroupArn = cloudWatchLogsLogGroupArn
            self.cloudWatchLogsRoleArn = cloudWatchLogsRoleArn
            self.hasCustomEventSelectors = hasCustomEventSelectors
            self.homeRegion = homeRegion
            self.includeGlobalServiceEvents = includeGlobalServiceEvents
            self.isMultiRegionTrail = isMultiRegionTrail
            self.isOrganizationTrail = isOrganizationTrail
            self.kmsKeyId = kmsKeyId
            self.logFileValidationEnabled = logFileValidationEnabled
            self.name = name
            self.s3BucketName = s3BucketName
            self.s3KeyPrefix = s3KeyPrefix
            self.snsTopicArn = snsTopicArn
            self.snsTopicName = snsTopicName
            self.trailArn = trailArn
        }
    }

}

extension SecurityHubClientTypes.AwsCodeBuildProjectDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case encryptionKey = "EncryptionKey"
        case environment = "Environment"
        case name = "Name"
        case serviceRole = "ServiceRole"
        case source = "Source"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let encryptionKey = encryptionKey {
            try encodeContainer.encode(encryptionKey, forKey: .encryptionKey)
        }
        if let environment = environment {
            try encodeContainer.encode(environment, forKey: .environment)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let serviceRole = serviceRole {
            try encodeContainer.encode(serviceRole, forKey: .serviceRole)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let encryptionKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionKey)
        encryptionKey = encryptionKeyDecoded
        let environmentDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCodeBuildProjectEnvironment.self, forKey: .environment)
        environment = environmentDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCodeBuildProjectSource.self, forKey: .source)
        source = sourceDecoded
        let serviceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serviceRole)
        serviceRole = serviceRoleDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCodeBuildProjectVpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
    }
}

extension SecurityHubClientTypes.AwsCodeBuildProjectDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCodeBuildProjectDetails(encryptionKey: \(Swift.String(describing: encryptionKey)), environment: \(Swift.String(describing: environment)), name: \(Swift.String(describing: name)), serviceRole: \(Swift.String(describing: serviceRole)), source: \(Swift.String(describing: source)), vpcConfig: \(Swift.String(describing: vpcConfig)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about an AWS CodeBuild project.</p>
    public struct AwsCodeBuildProjectDetails: Swift.Equatable {
        /// <p>The AWS Key Management Service (AWS KMS) customer master key (CMK) used to encrypt the
        ///          build output artifacts.</p>
        ///          <p>You can specify either the Amazon Resource Name (ARN) of the CMK or, if available, the
        ///          CMK alias (using the format alias/alias-name). </p>
        public let encryptionKey: Swift.String?
        /// <p>Information about the build environment for this build project.</p>
        public let environment: SecurityHubClientTypes.AwsCodeBuildProjectEnvironment?
        /// <p>The name of the build project.</p>
        public let name: Swift.String?
        /// <p>The ARN of the IAM role that enables AWS CodeBuild to interact with dependent AWS
        ///          services on behalf of the AWS account.</p>
        public let serviceRole: Swift.String?
        /// <p>Information about the build input source code for this build project.</p>
        public let source: SecurityHubClientTypes.AwsCodeBuildProjectSource?
        /// <p>Information about the VPC configuration that AWS CodeBuild accesses.</p>
        public let vpcConfig: SecurityHubClientTypes.AwsCodeBuildProjectVpcConfig?

        public init (
            encryptionKey: Swift.String? = nil,
            environment: SecurityHubClientTypes.AwsCodeBuildProjectEnvironment? = nil,
            name: Swift.String? = nil,
            serviceRole: Swift.String? = nil,
            source: SecurityHubClientTypes.AwsCodeBuildProjectSource? = nil,
            vpcConfig: SecurityHubClientTypes.AwsCodeBuildProjectVpcConfig? = nil
        )
        {
            self.encryptionKey = encryptionKey
            self.environment = environment
            self.name = name
            self.serviceRole = serviceRole
            self.source = source
            self.vpcConfig = vpcConfig
        }
    }

}

extension SecurityHubClientTypes.AwsCodeBuildProjectEnvironment: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case certificate = "Certificate"
        case imagePullCredentialsType = "ImagePullCredentialsType"
        case registryCredential = "RegistryCredential"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let certificate = certificate {
            try encodeContainer.encode(certificate, forKey: .certificate)
        }
        if let imagePullCredentialsType = imagePullCredentialsType {
            try encodeContainer.encode(imagePullCredentialsType, forKey: .imagePullCredentialsType)
        }
        if let registryCredential = registryCredential {
            try encodeContainer.encode(registryCredential, forKey: .registryCredential)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let certificateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .certificate)
        certificate = certificateDecoded
        let imagePullCredentialsTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imagePullCredentialsType)
        imagePullCredentialsType = imagePullCredentialsTypeDecoded
        let registryCredentialDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCodeBuildProjectEnvironmentRegistryCredential.self, forKey: .registryCredential)
        registryCredential = registryCredentialDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension SecurityHubClientTypes.AwsCodeBuildProjectEnvironment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCodeBuildProjectEnvironment(certificate: \(Swift.String(describing: certificate)), imagePullCredentialsType: \(Swift.String(describing: imagePullCredentialsType)), registryCredential: \(Swift.String(describing: registryCredential)), type: \(Swift.String(describing: type)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the build environment for this build project.</p>
    public struct AwsCodeBuildProjectEnvironment: Swift.Equatable {
        /// <p>The certificate to use with this build project.</p>
        public let certificate: Swift.String?
        /// <p>The type of credentials AWS CodeBuild uses to pull images in your build.</p>
        ///          <p>Valid values:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>CODEBUILD</code> specifies that AWS CodeBuild uses its own credentials. This
        ///                requires that you modify your ECR repository policy to trust the AWS CodeBuild
        ///                service principal.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SERVICE_ROLE</code> specifies that AWS CodeBuild uses your build project's
        ///                service role.</p>
        ///             </li>
        ///          </ul>
        ///          <p>When you use a cross-account or private registry image, you must use
        ///             <code>SERVICE_ROLE</code> credentials. When you use an AWS CodeBuild curated image, you
        ///          must use <code>CODEBUILD</code> credentials.</p>
        public let imagePullCredentialsType: Swift.String?
        /// <p>The credentials for access to a private registry.</p>
        public let registryCredential: SecurityHubClientTypes.AwsCodeBuildProjectEnvironmentRegistryCredential?
        /// <p>The type of build environment to use for related builds.</p>
        ///          <p>The environment type <code>ARM_CONTAINER</code> is available only in Regions US East (N.
        ///          Virginia), US East (Ohio), US West (Oregon), Europe (Ireland), Asia Pacific (Mumbai), Asia
        ///          Pacific (Tokyo), Asia Pacific (Sydney), and Europe (Frankfurt).</p>
        ///          <p>The environment type <code>LINUX_CONTAINER</code> with compute type
        ///          build.general1.2xlarge is available only in Regions US East (N. Virginia), US East (N.
        ///          Virginia), US West (Oregon), Canada (Central), Europe (Ireland), Europe (London), Europe
        ///          (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul), Asia Pacific (Singapore), Asia
        ///          Pacific (Sydney), China (Beijing), and China (Ningxia).</p>
        ///          <p>The environment type <code>LINUX_GPU_CONTAINER</code> is available only in Regions US
        ///          East (N. Virginia), US East (N. Virginia), US West (Oregon), Canada (Central), Europe
        ///          (Ireland), Europe (London), Europe (Frankfurt), Asia Pacific (Tokyo), Asia Pacific (Seoul),
        ///          Asia Pacific (Singapore), Asia Pacific (Sydney), China (Beijing), and China
        ///          (Ningxia).</p>
        ///          <p>Valid values: <code>WINDOWS_CONTAINER</code> | <code>LINUX_CONTAINER</code> |
        ///             <code>LINUX_GPU_CONTAINER</code> | <code>ARM_CONTAINER</code>
        ///          </p>
        public let type: Swift.String?

        public init (
            certificate: Swift.String? = nil,
            imagePullCredentialsType: Swift.String? = nil,
            registryCredential: SecurityHubClientTypes.AwsCodeBuildProjectEnvironmentRegistryCredential? = nil,
            type: Swift.String? = nil
        )
        {
            self.certificate = certificate
            self.imagePullCredentialsType = imagePullCredentialsType
            self.registryCredential = registryCredential
            self.type = type
        }
    }

}

extension SecurityHubClientTypes.AwsCodeBuildProjectEnvironmentRegistryCredential: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case credential = "Credential"
        case credentialProvider = "CredentialProvider"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let credential = credential {
            try encodeContainer.encode(credential, forKey: .credential)
        }
        if let credentialProvider = credentialProvider {
            try encodeContainer.encode(credentialProvider, forKey: .credentialProvider)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let credentialDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .credential)
        credential = credentialDecoded
        let credentialProviderDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .credentialProvider)
        credentialProvider = credentialProviderDecoded
    }
}

extension SecurityHubClientTypes.AwsCodeBuildProjectEnvironmentRegistryCredential: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCodeBuildProjectEnvironmentRegistryCredential(credential: \(Swift.String(describing: credential)), credentialProvider: \(Swift.String(describing: credentialProvider)))"}
}

extension SecurityHubClientTypes {
    /// <p>The credentials for access to a private registry.</p>
    public struct AwsCodeBuildProjectEnvironmentRegistryCredential: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) or name of credentials created using AWS Secrets
        ///          Manager.</p>
        ///          <note>
        ///             <p>The credential can use the name of the credentials only if they exist in your current
        ///             AWS Region. </p>
        ///          </note>
        public let credential: Swift.String?
        /// <p>The service that created the credentials to access a private Docker registry.</p>
        ///          <p>The valid value,<code> SECRETS_MANAGER</code>, is for AWS Secrets Manager.</p>
        public let credentialProvider: Swift.String?

        public init (
            credential: Swift.String? = nil,
            credentialProvider: Swift.String? = nil
        )
        {
            self.credential = credential
            self.credentialProvider = credentialProvider
        }
    }

}

extension SecurityHubClientTypes.AwsCodeBuildProjectSource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case gitCloneDepth = "GitCloneDepth"
        case insecureSsl = "InsecureSsl"
        case location = "Location"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if gitCloneDepth != 0 {
            try encodeContainer.encode(gitCloneDepth, forKey: .gitCloneDepth)
        }
        if insecureSsl != false {
            try encodeContainer.encode(insecureSsl, forKey: .insecureSsl)
        }
        if let location = location {
            try encodeContainer.encode(location, forKey: .location)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let locationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .location)
        location = locationDecoded
        let gitCloneDepthDecoded = try containerValues.decode(Swift.Int.self, forKey: .gitCloneDepth)
        gitCloneDepth = gitCloneDepthDecoded
        let insecureSslDecoded = try containerValues.decode(Swift.Bool.self, forKey: .insecureSsl)
        insecureSsl = insecureSslDecoded
    }
}

extension SecurityHubClientTypes.AwsCodeBuildProjectSource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCodeBuildProjectSource(gitCloneDepth: \(Swift.String(describing: gitCloneDepth)), insecureSsl: \(Swift.String(describing: insecureSsl)), location: \(Swift.String(describing: location)), type: \(Swift.String(describing: type)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the build input source code for this build project.</p>
    public struct AwsCodeBuildProjectSource: Swift.Equatable {
        /// <p>Information about the Git clone depth for the build project.</p>
        public let gitCloneDepth: Swift.Int
        /// <p>Whether to ignore SSL warnings while connecting to the project source code.</p>
        public let insecureSsl: Swift.Bool
        /// <p>Information about the location of the source code to be built.</p>
        ///          <p>Valid values include:</p>
        ///          <ul>
        ///             <li>
        ///                <p>For source code settings that are specified in the source action of a pipeline in
        ///                AWS CodePipeline, location should not be specified. If it is specified, AWS
        ///                CodePipeline ignores it. This is because AWS CodePipeline uses the settings in a
        ///                pipeline's source action instead of this value.</p>
        ///             </li>
        ///             <li>
        ///                <p>For source code in an AWS CodeCommit repository, the HTTPS clone URL to the
        ///                repository that contains the source code and the build spec file (for example,
        ///                   <code>https://git-codecommit.region-ID.amazonaws.com/v1/repos/repo-name</code>
        ///                ).</p>
        ///             </li>
        ///             <li>
        ///                <p>For source code in an S3 input bucket, one of the following.</p>
        ///                <ul>
        ///                   <li>
        ///                      <p>The path to the ZIP file that contains the source code (for example,
        ///                         <code>bucket-name/path/to/object-name.zip</code>).</p>
        ///                   </li>
        ///                   <li>
        ///                      <p> The path to the folder that contains the source code (for example,
        ///                         <code>bucket-name/path/to/source-code/folder/</code>).</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <p>For source code in a GitHub repository, the HTTPS clone URL to the repository that
        ///                contains the source and the build spec file.</p>
        ///             </li>
        ///             <li>
        ///                <p>For source code in a Bitbucket repository, the HTTPS clone URL to the repository
        ///                that contains the source and the build spec file. </p>
        ///             </li>
        ///          </ul>
        public let location: Swift.String?
        /// <p>The type of repository that contains the source code to be built. Valid values
        ///          are:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>BITBUCKET</code> - The source code is in a Bitbucket repository.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>CODECOMMIT</code> - The source code is in an AWS CodeCommit
        ///                repository.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>CODEPIPELINE</code> - The source code settings are specified in the source
        ///                action of a pipeline in AWS CodePipeline.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>GITHUB</code> - The source code is in a GitHub repository.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>GITHUB_ENTERPRISE</code> - The source code is in a GitHub Enterprise
        ///                repository.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NO_SOURCE</code> - The project does not have input source code.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>S3</code> - The source code is in an S3 input bucket. </p>
        ///             </li>
        ///          </ul>
        public let type: Swift.String?

        public init (
            gitCloneDepth: Swift.Int = 0,
            insecureSsl: Swift.Bool = false,
            location: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.gitCloneDepth = gitCloneDepth
            self.insecureSsl = insecureSsl
            self.location = location
            self.type = type
        }
    }

}

extension SecurityHubClientTypes.AwsCodeBuildProjectVpcConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupIds = "SecurityGroupIds"
        case subnets = "Subnets"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for nonemptystringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(nonemptystringlist0)
            }
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for nonemptystringlist0 in subnets {
                try subnetsContainer.encode(nonemptystringlist0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
    }
}

extension SecurityHubClientTypes.AwsCodeBuildProjectVpcConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCodeBuildProjectVpcConfig(securityGroupIds: \(Swift.String(describing: securityGroupIds)), subnets: \(Swift.String(describing: subnets)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the VPC configuration that AWS CodeBuild accesses.</p>
    public struct AwsCodeBuildProjectVpcConfig: Swift.Equatable {
        /// <p>A list of one or more security group IDs in your Amazon VPC.</p>
        public let securityGroupIds: [Swift.String]?
        /// <p>A list of one or more subnet IDs in your Amazon VPC.</p>
        public let subnets: [Swift.String]?
        /// <p>The ID of the VPC.</p>
        public let vpcId: Swift.String?

        public init (
            securityGroupIds: [Swift.String]? = nil,
            subnets: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnets = subnets
            self.vpcId = vpcId
        }
    }

}

extension SecurityHubClientTypes.AwsCorsConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowCredentials = "AllowCredentials"
        case allowHeaders = "AllowHeaders"
        case allowMethods = "AllowMethods"
        case allowOrigins = "AllowOrigins"
        case exposeHeaders = "ExposeHeaders"
        case maxAge = "MaxAge"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allowCredentials != false {
            try encodeContainer.encode(allowCredentials, forKey: .allowCredentials)
        }
        if let allowHeaders = allowHeaders {
            var allowHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowHeaders)
            for nonemptystringlist0 in allowHeaders {
                try allowHeadersContainer.encode(nonemptystringlist0)
            }
        }
        if let allowMethods = allowMethods {
            var allowMethodsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowMethods)
            for nonemptystringlist0 in allowMethods {
                try allowMethodsContainer.encode(nonemptystringlist0)
            }
        }
        if let allowOrigins = allowOrigins {
            var allowOriginsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .allowOrigins)
            for nonemptystringlist0 in allowOrigins {
                try allowOriginsContainer.encode(nonemptystringlist0)
            }
        }
        if let exposeHeaders = exposeHeaders {
            var exposeHeadersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .exposeHeaders)
            for nonemptystringlist0 in exposeHeaders {
                try exposeHeadersContainer.encode(nonemptystringlist0)
            }
        }
        if maxAge != 0 {
            try encodeContainer.encode(maxAge, forKey: .maxAge)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowOriginsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowOrigins)
        var allowOriginsDecoded0:[Swift.String]? = nil
        if let allowOriginsContainer = allowOriginsContainer {
            allowOriginsDecoded0 = [Swift.String]()
            for string0 in allowOriginsContainer {
                if let string0 = string0 {
                    allowOriginsDecoded0?.append(string0)
                }
            }
        }
        allowOrigins = allowOriginsDecoded0
        let allowCredentialsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowCredentials)
        allowCredentials = allowCredentialsDecoded
        let exposeHeadersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .exposeHeaders)
        var exposeHeadersDecoded0:[Swift.String]? = nil
        if let exposeHeadersContainer = exposeHeadersContainer {
            exposeHeadersDecoded0 = [Swift.String]()
            for string0 in exposeHeadersContainer {
                if let string0 = string0 {
                    exposeHeadersDecoded0?.append(string0)
                }
            }
        }
        exposeHeaders = exposeHeadersDecoded0
        let maxAgeDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxAge)
        maxAge = maxAgeDecoded
        let allowMethodsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowMethods)
        var allowMethodsDecoded0:[Swift.String]? = nil
        if let allowMethodsContainer = allowMethodsContainer {
            allowMethodsDecoded0 = [Swift.String]()
            for string0 in allowMethodsContainer {
                if let string0 = string0 {
                    allowMethodsDecoded0?.append(string0)
                }
            }
        }
        allowMethods = allowMethodsDecoded0
        let allowHeadersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .allowHeaders)
        var allowHeadersDecoded0:[Swift.String]? = nil
        if let allowHeadersContainer = allowHeadersContainer {
            allowHeadersDecoded0 = [Swift.String]()
            for string0 in allowHeadersContainer {
                if let string0 = string0 {
                    allowHeadersDecoded0?.append(string0)
                }
            }
        }
        allowHeaders = allowHeadersDecoded0
    }
}

extension SecurityHubClientTypes.AwsCorsConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsCorsConfiguration(allowCredentials: \(Swift.String(describing: allowCredentials)), allowHeaders: \(Swift.String(describing: allowHeaders)), allowMethods: \(Swift.String(describing: allowMethods)), allowOrigins: \(Swift.String(describing: allowOrigins)), exposeHeaders: \(Swift.String(describing: exposeHeaders)), maxAge: \(Swift.String(describing: maxAge)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains the cross-origin resource sharing (CORS) configuration for the API. CORS is
    ///          only supported for HTTP APIs.</p>
    public struct AwsCorsConfiguration: Swift.Equatable {
        /// <p>Indicates whether the CORS request includes credentials.</p>
        public let allowCredentials: Swift.Bool
        /// <p>The allowed headers for CORS requests.</p>
        public let allowHeaders: [Swift.String]?
        /// <p>The allowed methods for CORS requests.</p>
        public let allowMethods: [Swift.String]?
        /// <p>The allowed origins for CORS requests.</p>
        public let allowOrigins: [Swift.String]?
        /// <p>The exposed headers for CORS requests.</p>
        public let exposeHeaders: [Swift.String]?
        /// <p>The number of seconds for which the browser caches preflight request results.</p>
        public let maxAge: Swift.Int

        public init (
            allowCredentials: Swift.Bool = false,
            allowHeaders: [Swift.String]? = nil,
            allowMethods: [Swift.String]? = nil,
            allowOrigins: [Swift.String]? = nil,
            exposeHeaders: [Swift.String]? = nil,
            maxAge: Swift.Int = 0
        )
        {
            self.allowCredentials = allowCredentials
            self.allowHeaders = allowHeaders
            self.allowMethods = allowMethods
            self.allowOrigins = allowOrigins
            self.exposeHeaders = exposeHeaders
            self.maxAge = maxAge
        }
    }

}

extension SecurityHubClientTypes.AwsDynamoDbTableAttributeDefinition: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case attributeType = "AttributeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let attributeType = attributeType {
            try encodeContainer.encode(attributeType, forKey: .attributeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let attributeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeType)
        attributeType = attributeTypeDecoded
    }
}

extension SecurityHubClientTypes.AwsDynamoDbTableAttributeDefinition: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsDynamoDbTableAttributeDefinition(attributeName: \(Swift.String(describing: attributeName)), attributeType: \(Swift.String(describing: attributeType)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains a definition of an attribute for the table.</p>
    public struct AwsDynamoDbTableAttributeDefinition: Swift.Equatable {
        /// <p>The name of the attribute.</p>
        public let attributeName: Swift.String?
        /// <p>The type of the attribute.</p>
        public let attributeType: Swift.String?

        public init (
            attributeName: Swift.String? = nil,
            attributeType: Swift.String? = nil
        )
        {
            self.attributeName = attributeName
            self.attributeType = attributeType
        }
    }

}

extension SecurityHubClientTypes.AwsDynamoDbTableBillingModeSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case billingMode = "BillingMode"
        case lastUpdateToPayPerRequestDateTime = "LastUpdateToPayPerRequestDateTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let billingMode = billingMode {
            try encodeContainer.encode(billingMode, forKey: .billingMode)
        }
        if let lastUpdateToPayPerRequestDateTime = lastUpdateToPayPerRequestDateTime {
            try encodeContainer.encode(lastUpdateToPayPerRequestDateTime, forKey: .lastUpdateToPayPerRequestDateTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let billingModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .billingMode)
        billingMode = billingModeDecoded
        let lastUpdateToPayPerRequestDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastUpdateToPayPerRequestDateTime)
        lastUpdateToPayPerRequestDateTime = lastUpdateToPayPerRequestDateTimeDecoded
    }
}

extension SecurityHubClientTypes.AwsDynamoDbTableBillingModeSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsDynamoDbTableBillingModeSummary(billingMode: \(Swift.String(describing: billingMode)), lastUpdateToPayPerRequestDateTime: \(Swift.String(describing: lastUpdateToPayPerRequestDateTime)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about the billing for read/write capacity on the table.</p>
    public struct AwsDynamoDbTableBillingModeSummary: Swift.Equatable {
        /// <p>The method used to charge for read and write throughput and to manage capacity.</p>
        public let billingMode: Swift.String?
        /// <p>If the billing mode is <code>PAY_PER_REQUEST</code>, indicates when the billing mode was
        ///          set to that value.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let lastUpdateToPayPerRequestDateTime: Swift.String?

        public init (
            billingMode: Swift.String? = nil,
            lastUpdateToPayPerRequestDateTime: Swift.String? = nil
        )
        {
            self.billingMode = billingMode
            self.lastUpdateToPayPerRequestDateTime = lastUpdateToPayPerRequestDateTime
        }
    }

}

extension SecurityHubClientTypes.AwsDynamoDbTableDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeDefinitions = "AttributeDefinitions"
        case billingModeSummary = "BillingModeSummary"
        case creationDateTime = "CreationDateTime"
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case globalTableVersion = "GlobalTableVersion"
        case itemCount = "ItemCount"
        case keySchema = "KeySchema"
        case latestStreamArn = "LatestStreamArn"
        case latestStreamLabel = "LatestStreamLabel"
        case localSecondaryIndexes = "LocalSecondaryIndexes"
        case provisionedThroughput = "ProvisionedThroughput"
        case replicas = "Replicas"
        case restoreSummary = "RestoreSummary"
        case sseDescription = "SseDescription"
        case streamSpecification = "StreamSpecification"
        case tableId = "TableId"
        case tableName = "TableName"
        case tableSizeBytes = "TableSizeBytes"
        case tableStatus = "TableStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeDefinitions = attributeDefinitions {
            var attributeDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attributeDefinitions)
            for awsdynamodbtableattributedefinitionlist0 in attributeDefinitions {
                try attributeDefinitionsContainer.encode(awsdynamodbtableattributedefinitionlist0)
            }
        }
        if let billingModeSummary = billingModeSummary {
            try encodeContainer.encode(billingModeSummary, forKey: .billingModeSummary)
        }
        if let creationDateTime = creationDateTime {
            try encodeContainer.encode(creationDateTime, forKey: .creationDateTime)
        }
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for awsdynamodbtableglobalsecondaryindexlist0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(awsdynamodbtableglobalsecondaryindexlist0)
            }
        }
        if let globalTableVersion = globalTableVersion {
            try encodeContainer.encode(globalTableVersion, forKey: .globalTableVersion)
        }
        if itemCount != 0 {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for awsdynamodbtablekeyschemalist0 in keySchema {
                try keySchemaContainer.encode(awsdynamodbtablekeyschemalist0)
            }
        }
        if let latestStreamArn = latestStreamArn {
            try encodeContainer.encode(latestStreamArn, forKey: .latestStreamArn)
        }
        if let latestStreamLabel = latestStreamLabel {
            try encodeContainer.encode(latestStreamLabel, forKey: .latestStreamLabel)
        }
        if let localSecondaryIndexes = localSecondaryIndexes {
            var localSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .localSecondaryIndexes)
            for awsdynamodbtablelocalsecondaryindexlist0 in localSecondaryIndexes {
                try localSecondaryIndexesContainer.encode(awsdynamodbtablelocalsecondaryindexlist0)
            }
        }
        if let provisionedThroughput = provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
        if let replicas = replicas {
            var replicasContainer = encodeContainer.nestedUnkeyedContainer(forKey: .replicas)
            for awsdynamodbtablereplicalist0 in replicas {
                try replicasContainer.encode(awsdynamodbtablereplicalist0)
            }
        }
        if let restoreSummary = restoreSummary {
            try encodeContainer.encode(restoreSummary, forKey: .restoreSummary)
        }
        if let sseDescription = sseDescription {
            try encodeContainer.encode(sseDescription, forKey: .sseDescription)
        }
        if let streamSpecification = streamSpecification {
            try encodeContainer.encode(streamSpecification, forKey: .streamSpecification)
        }
        if let tableId = tableId {
            try encodeContainer.encode(tableId, forKey: .tableId)
        }
        if let tableName = tableName {
            try encodeContainer.encode(tableName, forKey: .tableName)
        }
        if tableSizeBytes != 0 {
            try encodeContainer.encode(tableSizeBytes, forKey: .tableSizeBytes)
        }
        if let tableStatus = tableStatus {
            try encodeContainer.encode(tableStatus, forKey: .tableStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeDefinitionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsDynamoDbTableAttributeDefinition?].self, forKey: .attributeDefinitions)
        var attributeDefinitionsDecoded0:[SecurityHubClientTypes.AwsDynamoDbTableAttributeDefinition]? = nil
        if let attributeDefinitionsContainer = attributeDefinitionsContainer {
            attributeDefinitionsDecoded0 = [SecurityHubClientTypes.AwsDynamoDbTableAttributeDefinition]()
            for structure0 in attributeDefinitionsContainer {
                if let structure0 = structure0 {
                    attributeDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        attributeDefinitions = attributeDefinitionsDecoded0
        let billingModeSummaryDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsDynamoDbTableBillingModeSummary.self, forKey: .billingModeSummary)
        billingModeSummary = billingModeSummaryDecoded
        let creationDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDateTime)
        creationDateTime = creationDateTimeDecoded
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsDynamoDbTableGlobalSecondaryIndex?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[SecurityHubClientTypes.AwsDynamoDbTableGlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [SecurityHubClientTypes.AwsDynamoDbTableGlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let globalTableVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .globalTableVersion)
        globalTableVersion = globalTableVersionDecoded
        let itemCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsDynamoDbTableKeySchema?].self, forKey: .keySchema)
        var keySchemaDecoded0:[SecurityHubClientTypes.AwsDynamoDbTableKeySchema]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [SecurityHubClientTypes.AwsDynamoDbTableKeySchema]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let latestStreamArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestStreamArn)
        latestStreamArn = latestStreamArnDecoded
        let latestStreamLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestStreamLabel)
        latestStreamLabel = latestStreamLabelDecoded
        let localSecondaryIndexesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsDynamoDbTableLocalSecondaryIndex?].self, forKey: .localSecondaryIndexes)
        var localSecondaryIndexesDecoded0:[SecurityHubClientTypes.AwsDynamoDbTableLocalSecondaryIndex]? = nil
        if let localSecondaryIndexesContainer = localSecondaryIndexesContainer {
            localSecondaryIndexesDecoded0 = [SecurityHubClientTypes.AwsDynamoDbTableLocalSecondaryIndex]()
            for structure0 in localSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    localSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        localSecondaryIndexes = localSecondaryIndexesDecoded0
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
        let replicasContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsDynamoDbTableReplica?].self, forKey: .replicas)
        var replicasDecoded0:[SecurityHubClientTypes.AwsDynamoDbTableReplica]? = nil
        if let replicasContainer = replicasContainer {
            replicasDecoded0 = [SecurityHubClientTypes.AwsDynamoDbTableReplica]()
            for structure0 in replicasContainer {
                if let structure0 = structure0 {
                    replicasDecoded0?.append(structure0)
                }
            }
        }
        replicas = replicasDecoded0
        let restoreSummaryDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsDynamoDbTableRestoreSummary.self, forKey: .restoreSummary)
        restoreSummary = restoreSummaryDecoded
        let sseDescriptionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsDynamoDbTableSseDescription.self, forKey: .sseDescription)
        sseDescription = sseDescriptionDecoded
        let streamSpecificationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsDynamoDbTableStreamSpecification.self, forKey: .streamSpecification)
        streamSpecification = streamSpecificationDecoded
        let tableIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableId)
        tableId = tableIdDecoded
        let tableNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let tableSizeBytesDecoded = try containerValues.decode(Swift.Int.self, forKey: .tableSizeBytes)
        tableSizeBytes = tableSizeBytesDecoded
        let tableStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tableStatus)
        tableStatus = tableStatusDecoded
    }
}

extension SecurityHubClientTypes.AwsDynamoDbTableDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsDynamoDbTableDetails(attributeDefinitions: \(Swift.String(describing: attributeDefinitions)), billingModeSummary: \(Swift.String(describing: billingModeSummary)), creationDateTime: \(Swift.String(describing: creationDateTime)), globalSecondaryIndexes: \(Swift.String(describing: globalSecondaryIndexes)), globalTableVersion: \(Swift.String(describing: globalTableVersion)), itemCount: \(Swift.String(describing: itemCount)), keySchema: \(Swift.String(describing: keySchema)), latestStreamArn: \(Swift.String(describing: latestStreamArn)), latestStreamLabel: \(Swift.String(describing: latestStreamLabel)), localSecondaryIndexes: \(Swift.String(describing: localSecondaryIndexes)), provisionedThroughput: \(Swift.String(describing: provisionedThroughput)), replicas: \(Swift.String(describing: replicas)), restoreSummary: \(Swift.String(describing: restoreSummary)), sseDescription: \(Swift.String(describing: sseDescription)), streamSpecification: \(Swift.String(describing: streamSpecification)), tableId: \(Swift.String(describing: tableId)), tableName: \(Swift.String(describing: tableName)), tableSizeBytes: \(Swift.String(describing: tableSizeBytes)), tableStatus: \(Swift.String(describing: tableStatus)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides details about a DynamoDB table.</p>
    public struct AwsDynamoDbTableDetails: Swift.Equatable {
        /// <p>A list of attribute definitions for the table.</p>
        public let attributeDefinitions: [SecurityHubClientTypes.AwsDynamoDbTableAttributeDefinition]?
        /// <p>Information about the billing for read/write capacity on the table.</p>
        public let billingModeSummary: SecurityHubClientTypes.AwsDynamoDbTableBillingModeSummary?
        /// <p>Indicates when the table was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let creationDateTime: Swift.String?
        /// <p>List of global secondary indexes for the table.</p>
        public let globalSecondaryIndexes: [SecurityHubClientTypes.AwsDynamoDbTableGlobalSecondaryIndex]?
        /// <p>The version of global tables being used.</p>
        public let globalTableVersion: Swift.String?
        /// <p>The number of items in the table.</p>
        public let itemCount: Swift.Int
        /// <p>The primary key structure for the table.</p>
        public let keySchema: [SecurityHubClientTypes.AwsDynamoDbTableKeySchema]?
        /// <p>The ARN of the latest stream for the table.</p>
        public let latestStreamArn: Swift.String?
        /// <p>The label of the latest stream. The label is not a unique identifier.</p>
        public let latestStreamLabel: Swift.String?
        /// <p>The list of local secondary indexes for the table.</p>
        public let localSecondaryIndexes: [SecurityHubClientTypes.AwsDynamoDbTableLocalSecondaryIndex]?
        /// <p>Information about the provisioned throughput for the table.</p>
        public let provisionedThroughput: SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughput?
        /// <p>The list of replicas of this table.</p>
        public let replicas: [SecurityHubClientTypes.AwsDynamoDbTableReplica]?
        /// <p>Information about the restore for the table.</p>
        public let restoreSummary: SecurityHubClientTypes.AwsDynamoDbTableRestoreSummary?
        /// <p>Information about the server-side encryption for the table.</p>
        public let sseDescription: SecurityHubClientTypes.AwsDynamoDbTableSseDescription?
        /// <p>The current DynamoDB Streams configuration for the table.</p>
        public let streamSpecification: SecurityHubClientTypes.AwsDynamoDbTableStreamSpecification?
        /// <p>The identifier of the table.</p>
        public let tableId: Swift.String?
        /// <p>The name of the table.</p>
        public let tableName: Swift.String?
        /// <p>The total size of the table in bytes.</p>
        public let tableSizeBytes: Swift.Int
        /// <p>The current status of the table.</p>
        public let tableStatus: Swift.String?

        public init (
            attributeDefinitions: [SecurityHubClientTypes.AwsDynamoDbTableAttributeDefinition]? = nil,
            billingModeSummary: SecurityHubClientTypes.AwsDynamoDbTableBillingModeSummary? = nil,
            creationDateTime: Swift.String? = nil,
            globalSecondaryIndexes: [SecurityHubClientTypes.AwsDynamoDbTableGlobalSecondaryIndex]? = nil,
            globalTableVersion: Swift.String? = nil,
            itemCount: Swift.Int = 0,
            keySchema: [SecurityHubClientTypes.AwsDynamoDbTableKeySchema]? = nil,
            latestStreamArn: Swift.String? = nil,
            latestStreamLabel: Swift.String? = nil,
            localSecondaryIndexes: [SecurityHubClientTypes.AwsDynamoDbTableLocalSecondaryIndex]? = nil,
            provisionedThroughput: SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughput? = nil,
            replicas: [SecurityHubClientTypes.AwsDynamoDbTableReplica]? = nil,
            restoreSummary: SecurityHubClientTypes.AwsDynamoDbTableRestoreSummary? = nil,
            sseDescription: SecurityHubClientTypes.AwsDynamoDbTableSseDescription? = nil,
            streamSpecification: SecurityHubClientTypes.AwsDynamoDbTableStreamSpecification? = nil,
            tableId: Swift.String? = nil,
            tableName: Swift.String? = nil,
            tableSizeBytes: Swift.Int = 0,
            tableStatus: Swift.String? = nil
        )
        {
            self.attributeDefinitions = attributeDefinitions
            self.billingModeSummary = billingModeSummary
            self.creationDateTime = creationDateTime
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.globalTableVersion = globalTableVersion
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.latestStreamArn = latestStreamArn
            self.latestStreamLabel = latestStreamLabel
            self.localSecondaryIndexes = localSecondaryIndexes
            self.provisionedThroughput = provisionedThroughput
            self.replicas = replicas
            self.restoreSummary = restoreSummary
            self.sseDescription = sseDescription
            self.streamSpecification = streamSpecification
            self.tableId = tableId
            self.tableName = tableName
            self.tableSizeBytes = tableSizeBytes
            self.tableStatus = tableStatus
        }
    }

}

extension SecurityHubClientTypes.AwsDynamoDbTableGlobalSecondaryIndex: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case backfilling = "Backfilling"
        case indexArn = "IndexArn"
        case indexName = "IndexName"
        case indexSizeBytes = "IndexSizeBytes"
        case indexStatus = "IndexStatus"
        case itemCount = "ItemCount"
        case keySchema = "KeySchema"
        case projection = "Projection"
        case provisionedThroughput = "ProvisionedThroughput"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if backfilling != false {
            try encodeContainer.encode(backfilling, forKey: .backfilling)
        }
        if let indexArn = indexArn {
            try encodeContainer.encode(indexArn, forKey: .indexArn)
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if indexSizeBytes != 0 {
            try encodeContainer.encode(indexSizeBytes, forKey: .indexSizeBytes)
        }
        if let indexStatus = indexStatus {
            try encodeContainer.encode(indexStatus, forKey: .indexStatus)
        }
        if itemCount != 0 {
            try encodeContainer.encode(itemCount, forKey: .itemCount)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for awsdynamodbtablekeyschemalist0 in keySchema {
                try keySchemaContainer.encode(awsdynamodbtablekeyschemalist0)
            }
        }
        if let projection = projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
        if let provisionedThroughput = provisionedThroughput {
            try encodeContainer.encode(provisionedThroughput, forKey: .provisionedThroughput)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let backfillingDecoded = try containerValues.decode(Swift.Bool.self, forKey: .backfilling)
        backfilling = backfillingDecoded
        let indexArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexArn)
        indexArn = indexArnDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let indexSizeBytesDecoded = try containerValues.decode(Swift.Int.self, forKey: .indexSizeBytes)
        indexSizeBytes = indexSizeBytesDecoded
        let indexStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexStatus)
        indexStatus = indexStatusDecoded
        let itemCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .itemCount)
        itemCount = itemCountDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsDynamoDbTableKeySchema?].self, forKey: .keySchema)
        var keySchemaDecoded0:[SecurityHubClientTypes.AwsDynamoDbTableKeySchema]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [SecurityHubClientTypes.AwsDynamoDbTableKeySchema]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsDynamoDbTableProjection.self, forKey: .projection)
        projection = projectionDecoded
        let provisionedThroughputDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughput.self, forKey: .provisionedThroughput)
        provisionedThroughput = provisionedThroughputDecoded
    }
}

extension SecurityHubClientTypes.AwsDynamoDbTableGlobalSecondaryIndex: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsDynamoDbTableGlobalSecondaryIndex(backfilling: \(Swift.String(describing: backfilling)), indexArn: \(Swift.String(describing: indexArn)), indexName: \(Swift.String(describing: indexName)), indexSizeBytes: \(Swift.String(describing: indexSizeBytes)), indexStatus: \(Swift.String(describing: indexStatus)), itemCount: \(Swift.String(describing: itemCount)), keySchema: \(Swift.String(describing: keySchema)), projection: \(Swift.String(describing: projection)), provisionedThroughput: \(Swift.String(describing: provisionedThroughput)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information abut a global secondary index for the table.</p>
    public struct AwsDynamoDbTableGlobalSecondaryIndex: Swift.Equatable {
        /// <p>Whether the index is currently backfilling.</p>
        public let backfilling: Swift.Bool
        /// <p>The ARN of the index.</p>
        public let indexArn: Swift.String?
        /// <p>The name of the index.</p>
        public let indexName: Swift.String?
        /// <p>The total size in bytes of the index.</p>
        public let indexSizeBytes: Swift.Int
        /// <p>The current status of the index.</p>
        public let indexStatus: Swift.String?
        /// <p>The number of items in the index.</p>
        public let itemCount: Swift.Int
        /// <p>The key schema for the index.</p>
        public let keySchema: [SecurityHubClientTypes.AwsDynamoDbTableKeySchema]?
        /// <p>Attributes that are copied from the table into an index.</p>
        public let projection: SecurityHubClientTypes.AwsDynamoDbTableProjection?
        /// <p>Information about the provisioned throughput settings for the indexes.</p>
        public let provisionedThroughput: SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughput?

        public init (
            backfilling: Swift.Bool = false,
            indexArn: Swift.String? = nil,
            indexName: Swift.String? = nil,
            indexSizeBytes: Swift.Int = 0,
            indexStatus: Swift.String? = nil,
            itemCount: Swift.Int = 0,
            keySchema: [SecurityHubClientTypes.AwsDynamoDbTableKeySchema]? = nil,
            projection: SecurityHubClientTypes.AwsDynamoDbTableProjection? = nil,
            provisionedThroughput: SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughput? = nil
        )
        {
            self.backfilling = backfilling
            self.indexArn = indexArn
            self.indexName = indexName
            self.indexSizeBytes = indexSizeBytes
            self.indexStatus = indexStatus
            self.itemCount = itemCount
            self.keySchema = keySchema
            self.projection = projection
            self.provisionedThroughput = provisionedThroughput
        }
    }

}

extension SecurityHubClientTypes.AwsDynamoDbTableKeySchema: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributeName = "AttributeName"
        case keyType = "KeyType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributeName = attributeName {
            try encodeContainer.encode(attributeName, forKey: .attributeName)
        }
        if let keyType = keyType {
            try encodeContainer.encode(keyType, forKey: .keyType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributeNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attributeName)
        attributeName = attributeNameDecoded
        let keyTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyType)
        keyType = keyTypeDecoded
    }
}

extension SecurityHubClientTypes.AwsDynamoDbTableKeySchema: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsDynamoDbTableKeySchema(attributeName: \(Swift.String(describing: attributeName)), keyType: \(Swift.String(describing: keyType)))"}
}

extension SecurityHubClientTypes {
    /// <p>A component of the key schema for the DynamoDB table, a global secondary index, or a
    ///          local secondary index.</p>
    public struct AwsDynamoDbTableKeySchema: Swift.Equatable {
        /// <p>The name of the key schema attribute.</p>
        public let attributeName: Swift.String?
        /// <p>The type of key used for the key schema attribute.</p>
        public let keyType: Swift.String?

        public init (
            attributeName: Swift.String? = nil,
            keyType: Swift.String? = nil
        )
        {
            self.attributeName = attributeName
            self.keyType = keyType
        }
    }

}

extension SecurityHubClientTypes.AwsDynamoDbTableLocalSecondaryIndex: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexArn = "IndexArn"
        case indexName = "IndexName"
        case keySchema = "KeySchema"
        case projection = "Projection"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexArn = indexArn {
            try encodeContainer.encode(indexArn, forKey: .indexArn)
        }
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let keySchema = keySchema {
            var keySchemaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keySchema)
            for awsdynamodbtablekeyschemalist0 in keySchema {
                try keySchemaContainer.encode(awsdynamodbtablekeyschemalist0)
            }
        }
        if let projection = projection {
            try encodeContainer.encode(projection, forKey: .projection)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexArn)
        indexArn = indexArnDecoded
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let keySchemaContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsDynamoDbTableKeySchema?].self, forKey: .keySchema)
        var keySchemaDecoded0:[SecurityHubClientTypes.AwsDynamoDbTableKeySchema]? = nil
        if let keySchemaContainer = keySchemaContainer {
            keySchemaDecoded0 = [SecurityHubClientTypes.AwsDynamoDbTableKeySchema]()
            for structure0 in keySchemaContainer {
                if let structure0 = structure0 {
                    keySchemaDecoded0?.append(structure0)
                }
            }
        }
        keySchema = keySchemaDecoded0
        let projectionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsDynamoDbTableProjection.self, forKey: .projection)
        projection = projectionDecoded
    }
}

extension SecurityHubClientTypes.AwsDynamoDbTableLocalSecondaryIndex: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsDynamoDbTableLocalSecondaryIndex(indexArn: \(Swift.String(describing: indexArn)), indexName: \(Swift.String(describing: indexName)), keySchema: \(Swift.String(describing: keySchema)), projection: \(Swift.String(describing: projection)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about a local secondary index for a DynamoDB table.</p>
    public struct AwsDynamoDbTableLocalSecondaryIndex: Swift.Equatable {
        /// <p>The ARN of the index.</p>
        public let indexArn: Swift.String?
        /// <p>The name of the index.</p>
        public let indexName: Swift.String?
        /// <p>The complete key schema for the index.</p>
        public let keySchema: [SecurityHubClientTypes.AwsDynamoDbTableKeySchema]?
        /// <p>Attributes that are copied from the table into the index. These are in addition to the
        ///          primary key attributes and index key attributes, which are automatically projected.</p>
        public let projection: SecurityHubClientTypes.AwsDynamoDbTableProjection?

        public init (
            indexArn: Swift.String? = nil,
            indexName: Swift.String? = nil,
            keySchema: [SecurityHubClientTypes.AwsDynamoDbTableKeySchema]? = nil,
            projection: SecurityHubClientTypes.AwsDynamoDbTableProjection? = nil
        )
        {
            self.indexArn = indexArn
            self.indexName = indexName
            self.keySchema = keySchema
            self.projection = projection
        }
    }

}

extension SecurityHubClientTypes.AwsDynamoDbTableProjection: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nonKeyAttributes = "NonKeyAttributes"
        case projectionType = "ProjectionType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nonKeyAttributes = nonKeyAttributes {
            var nonKeyAttributesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .nonKeyAttributes)
            for stringlist0 in nonKeyAttributes {
                try nonKeyAttributesContainer.encode(stringlist0)
            }
        }
        if let projectionType = projectionType {
            try encodeContainer.encode(projectionType, forKey: .projectionType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nonKeyAttributesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .nonKeyAttributes)
        var nonKeyAttributesDecoded0:[Swift.String]? = nil
        if let nonKeyAttributesContainer = nonKeyAttributesContainer {
            nonKeyAttributesDecoded0 = [Swift.String]()
            for string0 in nonKeyAttributesContainer {
                if let string0 = string0 {
                    nonKeyAttributesDecoded0?.append(string0)
                }
            }
        }
        nonKeyAttributes = nonKeyAttributesDecoded0
        let projectionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .projectionType)
        projectionType = projectionTypeDecoded
    }
}

extension SecurityHubClientTypes.AwsDynamoDbTableProjection: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsDynamoDbTableProjection(nonKeyAttributes: \(Swift.String(describing: nonKeyAttributes)), projectionType: \(Swift.String(describing: projectionType)))"}
}

extension SecurityHubClientTypes {
    /// <p>For global and local secondary indexes, identifies the attributes that are copied from
    ///          the table into the index.</p>
    public struct AwsDynamoDbTableProjection: Swift.Equatable {
        /// <p>The nonkey attributes that are projected into the index. For each attribute, provide the
        ///          attribute name.</p>
        public let nonKeyAttributes: [Swift.String]?
        /// <p>The types of attributes that are projected into the index.</p>
        public let projectionType: Swift.String?

        public init (
            nonKeyAttributes: [Swift.String]? = nil,
            projectionType: Swift.String? = nil
        )
        {
            self.nonKeyAttributes = nonKeyAttributes
            self.projectionType = projectionType
        }
    }

}

extension SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughput: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lastDecreaseDateTime = "LastDecreaseDateTime"
        case lastIncreaseDateTime = "LastIncreaseDateTime"
        case numberOfDecreasesToday = "NumberOfDecreasesToday"
        case readCapacityUnits = "ReadCapacityUnits"
        case writeCapacityUnits = "WriteCapacityUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lastDecreaseDateTime = lastDecreaseDateTime {
            try encodeContainer.encode(lastDecreaseDateTime, forKey: .lastDecreaseDateTime)
        }
        if let lastIncreaseDateTime = lastIncreaseDateTime {
            try encodeContainer.encode(lastIncreaseDateTime, forKey: .lastIncreaseDateTime)
        }
        if numberOfDecreasesToday != 0 {
            try encodeContainer.encode(numberOfDecreasesToday, forKey: .numberOfDecreasesToday)
        }
        if readCapacityUnits != 0 {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
        if writeCapacityUnits != 0 {
            try encodeContainer.encode(writeCapacityUnits, forKey: .writeCapacityUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastDecreaseDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastDecreaseDateTime)
        lastDecreaseDateTime = lastDecreaseDateTimeDecoded
        let lastIncreaseDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastIncreaseDateTime)
        lastIncreaseDateTime = lastIncreaseDateTimeDecoded
        let numberOfDecreasesTodayDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfDecreasesToday)
        numberOfDecreasesToday = numberOfDecreasesTodayDecoded
        let readCapacityUnitsDecoded = try containerValues.decode(Swift.Int.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
        let writeCapacityUnitsDecoded = try containerValues.decode(Swift.Int.self, forKey: .writeCapacityUnits)
        writeCapacityUnits = writeCapacityUnitsDecoded
    }
}

extension SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsDynamoDbTableProvisionedThroughput(lastDecreaseDateTime: \(Swift.String(describing: lastDecreaseDateTime)), lastIncreaseDateTime: \(Swift.String(describing: lastIncreaseDateTime)), numberOfDecreasesToday: \(Swift.String(describing: numberOfDecreasesToday)), readCapacityUnits: \(Swift.String(describing: readCapacityUnits)), writeCapacityUnits: \(Swift.String(describing: writeCapacityUnits)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the provisioned throughput for the table or for a global secondary
    ///          index.</p>
    public struct AwsDynamoDbTableProvisionedThroughput: Swift.Equatable {
        /// <p>Indicates when the provisioned throughput was last decreased.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let lastDecreaseDateTime: Swift.String?
        /// <p>Indicates when the provisioned throughput was last increased.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let lastIncreaseDateTime: Swift.String?
        /// <p>The number of times during the current UTC calendar day that the provisioned throughput
        ///          was decreased.</p>
        public let numberOfDecreasesToday: Swift.Int
        /// <p>The maximum number of strongly consistent reads consumed per second before DynamoDB
        ///          returns a <code>ThrottlingException</code>.</p>
        public let readCapacityUnits: Swift.Int
        /// <p>The maximum number of writes consumed per second before DynamoDB returns a
        ///             <code>ThrottlingException</code>.</p>
        public let writeCapacityUnits: Swift.Int

        public init (
            lastDecreaseDateTime: Swift.String? = nil,
            lastIncreaseDateTime: Swift.String? = nil,
            numberOfDecreasesToday: Swift.Int = 0,
            readCapacityUnits: Swift.Int = 0,
            writeCapacityUnits: Swift.Int = 0
        )
        {
            self.lastDecreaseDateTime = lastDecreaseDateTime
            self.lastIncreaseDateTime = lastIncreaseDateTime
            self.numberOfDecreasesToday = numberOfDecreasesToday
            self.readCapacityUnits = readCapacityUnits
            self.writeCapacityUnits = writeCapacityUnits
        }
    }

}

extension SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughputOverride: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case readCapacityUnits = "ReadCapacityUnits"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if readCapacityUnits != 0 {
            try encodeContainer.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let readCapacityUnitsDecoded = try containerValues.decode(Swift.Int.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
    }
}

extension SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughputOverride: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsDynamoDbTableProvisionedThroughputOverride(readCapacityUnits: \(Swift.String(describing: readCapacityUnits)))"}
}

extension SecurityHubClientTypes {
    /// <p>Replica-specific configuration for the provisioned throughput.</p>
    public struct AwsDynamoDbTableProvisionedThroughputOverride: Swift.Equatable {
        /// <p>The read capacity units for the replica.</p>
        public let readCapacityUnits: Swift.Int

        public init (
            readCapacityUnits: Swift.Int = 0
        )
        {
            self.readCapacityUnits = readCapacityUnits
        }
    }

}

extension SecurityHubClientTypes.AwsDynamoDbTableReplica: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case kmsMasterKeyId = "KmsMasterKeyId"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case regionName = "RegionName"
        case replicaStatus = "ReplicaStatus"
        case replicaStatusDescription = "ReplicaStatusDescription"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for awsdynamodbtablereplicaglobalsecondaryindexlist0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(awsdynamodbtablereplicaglobalsecondaryindexlist0)
            }
        }
        if let kmsMasterKeyId = kmsMasterKeyId {
            try encodeContainer.encode(kmsMasterKeyId, forKey: .kmsMasterKeyId)
        }
        if let provisionedThroughputOverride = provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
        if let regionName = regionName {
            try encodeContainer.encode(regionName, forKey: .regionName)
        }
        if let replicaStatus = replicaStatus {
            try encodeContainer.encode(replicaStatus, forKey: .replicaStatus)
        }
        if let replicaStatusDescription = replicaStatusDescription {
            try encodeContainer.encode(replicaStatusDescription, forKey: .replicaStatusDescription)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsDynamoDbTableReplicaGlobalSecondaryIndex?].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[SecurityHubClientTypes.AwsDynamoDbTableReplicaGlobalSecondaryIndex]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [SecurityHubClientTypes.AwsDynamoDbTableReplicaGlobalSecondaryIndex]()
            for structure0 in globalSecondaryIndexesContainer {
                if let structure0 = structure0 {
                    globalSecondaryIndexesDecoded0?.append(structure0)
                }
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let kmsMasterKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsMasterKeyId)
        kmsMasterKeyId = kmsMasterKeyIdDecoded
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughputOverride.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
        let regionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let replicaStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicaStatus)
        replicaStatus = replicaStatusDecoded
        let replicaStatusDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .replicaStatusDescription)
        replicaStatusDescription = replicaStatusDescriptionDecoded
    }
}

extension SecurityHubClientTypes.AwsDynamoDbTableReplica: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsDynamoDbTableReplica(globalSecondaryIndexes: \(Swift.String(describing: globalSecondaryIndexes)), kmsMasterKeyId: \(Swift.String(describing: kmsMasterKeyId)), provisionedThroughputOverride: \(Swift.String(describing: provisionedThroughputOverride)), regionName: \(Swift.String(describing: regionName)), replicaStatus: \(Swift.String(describing: replicaStatus)), replicaStatusDescription: \(Swift.String(describing: replicaStatusDescription)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about a replica of a DynamoDB table.</p>
    public struct AwsDynamoDbTableReplica: Swift.Equatable {
        /// <p>List of global secondary indexes for the replica.</p>
        public let globalSecondaryIndexes: [SecurityHubClientTypes.AwsDynamoDbTableReplicaGlobalSecondaryIndex]?
        /// <p>The identifier of the AWS KMS customer master key (CMK) that will be used for AWS KMS
        ///          encryption for the replica.</p>
        public let kmsMasterKeyId: Swift.String?
        /// <p>Replica-specific configuration for the provisioned throughput.</p>
        public let provisionedThroughputOverride: SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughputOverride?
        /// <p>The name of the Region where the replica is located.</p>
        public let regionName: Swift.String?
        /// <p>The current status of the replica.</p>
        public let replicaStatus: Swift.String?
        /// <p>Detailed information about the replica status.</p>
        public let replicaStatusDescription: Swift.String?

        public init (
            globalSecondaryIndexes: [SecurityHubClientTypes.AwsDynamoDbTableReplicaGlobalSecondaryIndex]? = nil,
            kmsMasterKeyId: Swift.String? = nil,
            provisionedThroughputOverride: SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughputOverride? = nil,
            regionName: Swift.String? = nil,
            replicaStatus: Swift.String? = nil,
            replicaStatusDescription: Swift.String? = nil
        )
        {
            self.globalSecondaryIndexes = globalSecondaryIndexes
            self.kmsMasterKeyId = kmsMasterKeyId
            self.provisionedThroughputOverride = provisionedThroughputOverride
            self.regionName = regionName
            self.replicaStatus = replicaStatus
            self.replicaStatusDescription = replicaStatusDescription
        }
    }

}

extension SecurityHubClientTypes.AwsDynamoDbTableReplicaGlobalSecondaryIndex: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case indexName = "IndexName"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let indexName = indexName {
            try encodeContainer.encode(indexName, forKey: .indexName)
        }
        if let provisionedThroughputOverride = provisionedThroughputOverride {
            try encodeContainer.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let indexNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .indexName)
        indexName = indexNameDecoded
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughputOverride.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
    }
}

extension SecurityHubClientTypes.AwsDynamoDbTableReplicaGlobalSecondaryIndex: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsDynamoDbTableReplicaGlobalSecondaryIndex(indexName: \(Swift.String(describing: indexName)), provisionedThroughputOverride: \(Swift.String(describing: provisionedThroughputOverride)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about a global secondary index for a DynamoDB table replica.</p>
    public struct AwsDynamoDbTableReplicaGlobalSecondaryIndex: Swift.Equatable {
        /// <p>The name of the index.</p>
        public let indexName: Swift.String?
        /// <p>Replica-specific configuration for the provisioned throughput for the index.</p>
        public let provisionedThroughputOverride: SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughputOverride?

        public init (
            indexName: Swift.String? = nil,
            provisionedThroughputOverride: SecurityHubClientTypes.AwsDynamoDbTableProvisionedThroughputOverride? = nil
        )
        {
            self.indexName = indexName
            self.provisionedThroughputOverride = provisionedThroughputOverride
        }
    }

}

extension SecurityHubClientTypes.AwsDynamoDbTableRestoreSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case restoreDateTime = "RestoreDateTime"
        case restoreInProgress = "RestoreInProgress"
        case sourceBackupArn = "SourceBackupArn"
        case sourceTableArn = "SourceTableArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let restoreDateTime = restoreDateTime {
            try encodeContainer.encode(restoreDateTime, forKey: .restoreDateTime)
        }
        if restoreInProgress != false {
            try encodeContainer.encode(restoreInProgress, forKey: .restoreInProgress)
        }
        if let sourceBackupArn = sourceBackupArn {
            try encodeContainer.encode(sourceBackupArn, forKey: .sourceBackupArn)
        }
        if let sourceTableArn = sourceTableArn {
            try encodeContainer.encode(sourceTableArn, forKey: .sourceTableArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sourceBackupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceBackupArn)
        sourceBackupArn = sourceBackupArnDecoded
        let sourceTableArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceTableArn)
        sourceTableArn = sourceTableArnDecoded
        let restoreDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .restoreDateTime)
        restoreDateTime = restoreDateTimeDecoded
        let restoreInProgressDecoded = try containerValues.decode(Swift.Bool.self, forKey: .restoreInProgress)
        restoreInProgress = restoreInProgressDecoded
    }
}

extension SecurityHubClientTypes.AwsDynamoDbTableRestoreSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsDynamoDbTableRestoreSummary(restoreDateTime: \(Swift.String(describing: restoreDateTime)), restoreInProgress: \(Swift.String(describing: restoreInProgress)), sourceBackupArn: \(Swift.String(describing: sourceBackupArn)), sourceTableArn: \(Swift.String(describing: sourceTableArn)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the restore for the table.</p>
    public struct AwsDynamoDbTableRestoreSummary: Swift.Equatable {
        /// <p>Indicates the point in time that the table was restored to.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let restoreDateTime: Swift.String?
        /// <p>Whether a restore is currently in progress.</p>
        public let restoreInProgress: Swift.Bool
        /// <p>The ARN of the source backup from which the table was restored.</p>
        public let sourceBackupArn: Swift.String?
        /// <p>The ARN of the source table for the backup.</p>
        public let sourceTableArn: Swift.String?

        public init (
            restoreDateTime: Swift.String? = nil,
            restoreInProgress: Swift.Bool = false,
            sourceBackupArn: Swift.String? = nil,
            sourceTableArn: Swift.String? = nil
        )
        {
            self.restoreDateTime = restoreDateTime
            self.restoreInProgress = restoreInProgress
            self.sourceBackupArn = sourceBackupArn
            self.sourceTableArn = sourceTableArn
        }
    }

}

extension SecurityHubClientTypes.AwsDynamoDbTableSseDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case inaccessibleEncryptionDateTime = "InaccessibleEncryptionDateTime"
        case kmsMasterKeyArn = "KmsMasterKeyArn"
        case sseType = "SseType"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTime {
            try encodeContainer.encode(inaccessibleEncryptionDateTime, forKey: .inaccessibleEncryptionDateTime)
        }
        if let kmsMasterKeyArn = kmsMasterKeyArn {
            try encodeContainer.encode(kmsMasterKeyArn, forKey: .kmsMasterKeyArn)
        }
        if let sseType = sseType {
            try encodeContainer.encode(sseType, forKey: .sseType)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let inaccessibleEncryptionDateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .inaccessibleEncryptionDateTime)
        inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTimeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let sseTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sseType)
        sseType = sseTypeDecoded
        let kmsMasterKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsMasterKeyArn)
        kmsMasterKeyArn = kmsMasterKeyArnDecoded
    }
}

extension SecurityHubClientTypes.AwsDynamoDbTableSseDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsDynamoDbTableSseDescription(inaccessibleEncryptionDateTime: \(Swift.String(describing: inaccessibleEncryptionDateTime)), kmsMasterKeyArn: \(Swift.String(describing: kmsMasterKeyArn)), sseType: \(Swift.String(describing: sseType)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the server-side encryption for the table.</p>
    public struct AwsDynamoDbTableSseDescription: Swift.Equatable {
        /// <p>If the key is inaccessible, the date and time when DynamoDB detected that the key was
        ///          inaccessible.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let inaccessibleEncryptionDateTime: Swift.String?
        /// <p>The ARN of the AWS KMS customer master key (CMK) that is used for the AWS KMS
        ///          encryption.</p>
        public let kmsMasterKeyArn: Swift.String?
        /// <p>The type of server-side encryption.</p>
        public let sseType: Swift.String?
        /// <p>The status of the server-side encryption.</p>
        public let status: Swift.String?

        public init (
            inaccessibleEncryptionDateTime: Swift.String? = nil,
            kmsMasterKeyArn: Swift.String? = nil,
            sseType: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTime
            self.kmsMasterKeyArn = kmsMasterKeyArn
            self.sseType = sseType
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.AwsDynamoDbTableStreamSpecification: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case streamEnabled = "StreamEnabled"
        case streamViewType = "StreamViewType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if streamEnabled != false {
            try encodeContainer.encode(streamEnabled, forKey: .streamEnabled)
        }
        if let streamViewType = streamViewType {
            try encodeContainer.encode(streamViewType, forKey: .streamViewType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let streamEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .streamEnabled)
        streamEnabled = streamEnabledDecoded
        let streamViewTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .streamViewType)
        streamViewType = streamViewTypeDecoded
    }
}

extension SecurityHubClientTypes.AwsDynamoDbTableStreamSpecification: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsDynamoDbTableStreamSpecification(streamEnabled: \(Swift.String(describing: streamEnabled)), streamViewType: \(Swift.String(describing: streamViewType)))"}
}

extension SecurityHubClientTypes {
    /// <p>The current DynamoDB Streams configuration for the table.</p>
    public struct AwsDynamoDbTableStreamSpecification: Swift.Equatable {
        /// <p>Indicates whether DynamoDB Streams is enabled on the table.</p>
        public let streamEnabled: Swift.Bool
        /// <p>Determines the information that is written to the table.</p>
        public let streamViewType: Swift.String?

        public init (
            streamEnabled: Swift.Bool = false,
            streamViewType: Swift.String? = nil
        )
        {
            self.streamEnabled = streamEnabled
            self.streamViewType = streamViewType
        }
    }

}

extension SecurityHubClientTypes.AwsEc2EipDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocationId = "AllocationId"
        case associationId = "AssociationId"
        case domain = "Domain"
        case instanceId = "InstanceId"
        case networkBorderGroup = "NetworkBorderGroup"
        case networkInterfaceId = "NetworkInterfaceId"
        case networkInterfaceOwnerId = "NetworkInterfaceOwnerId"
        case privateIpAddress = "PrivateIpAddress"
        case publicIp = "PublicIp"
        case publicIpv4Pool = "PublicIpv4Pool"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allocationId = allocationId {
            try encodeContainer.encode(allocationId, forKey: .allocationId)
        }
        if let associationId = associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let networkBorderGroup = networkBorderGroup {
            try encodeContainer.encode(networkBorderGroup, forKey: .networkBorderGroup)
        }
        if let networkInterfaceId = networkInterfaceId {
            try encodeContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)
        }
        if let networkInterfaceOwnerId = networkInterfaceOwnerId {
            try encodeContainer.encode(networkInterfaceOwnerId, forKey: .networkInterfaceOwnerId)
        }
        if let privateIpAddress = privateIpAddress {
            try encodeContainer.encode(privateIpAddress, forKey: .privateIpAddress)
        }
        if let publicIp = publicIp {
            try encodeContainer.encode(publicIp, forKey: .publicIp)
        }
        if let publicIpv4Pool = publicIpv4Pool {
            try encodeContainer.encode(publicIpv4Pool, forKey: .publicIpv4Pool)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let publicIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicIp)
        publicIp = publicIpDecoded
        let allocationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .allocationId)
        allocationId = allocationIdDecoded
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let publicIpv4PoolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicIpv4Pool)
        publicIpv4Pool = publicIpv4PoolDecoded
        let networkBorderGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkBorderGroup)
        networkBorderGroup = networkBorderGroupDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let networkInterfaceOwnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceOwnerId)
        networkInterfaceOwnerId = networkInterfaceOwnerIdDecoded
        let privateIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateIpAddress)
        privateIpAddress = privateIpAddressDecoded
    }
}

extension SecurityHubClientTypes.AwsEc2EipDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2EipDetails(allocationId: \(Swift.String(describing: allocationId)), associationId: \(Swift.String(describing: associationId)), domain: \(Swift.String(describing: domain)), instanceId: \(Swift.String(describing: instanceId)), networkBorderGroup: \(Swift.String(describing: networkBorderGroup)), networkInterfaceId: \(Swift.String(describing: networkInterfaceId)), networkInterfaceOwnerId: \(Swift.String(describing: networkInterfaceOwnerId)), privateIpAddress: \(Swift.String(describing: privateIpAddress)), publicIp: \(Swift.String(describing: publicIp)), publicIpv4Pool: \(Swift.String(describing: publicIpv4Pool)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about an Elastic IP address.</p>
    public struct AwsEc2EipDetails: Swift.Equatable {
        /// <p>The identifier that AWS assigns to represent the allocation of the Elastic IP address
        ///          for use with Amazon VPC.</p>
        public let allocationId: Swift.String?
        /// <p>The identifier that represents the association of the Elastic IP address with an EC2
        ///          instance.</p>
        public let associationId: Swift.String?
        /// <p>The domain in which to allocate the address.</p>
        ///          <p>If the address is for use with EC2 instances in a VPC, then <code>Domain</code> is
        ///             <code>vpc</code>. Otherwise, <code>Domain</code> is <code>standard</code>. </p>
        public let domain: Swift.String?
        /// <p>The identifier of the EC2 instance.</p>
        public let instanceId: Swift.String?
        /// <p>The name of the location from which the Elastic IP address is advertised.</p>
        public let networkBorderGroup: Swift.String?
        /// <p>The identifier of the network interface.</p>
        public let networkInterfaceId: Swift.String?
        /// <p>The AWS account ID of the owner of the network interface.</p>
        public let networkInterfaceOwnerId: Swift.String?
        /// <p>The private IP address that is associated with the Elastic IP address.</p>
        public let privateIpAddress: Swift.String?
        /// <p>A public IP address that is associated with the EC2 instance.</p>
        public let publicIp: Swift.String?
        /// <p>The identifier of an IP address pool. This parameter allows Amazon EC2 to select an IP
        ///          address from the address pool.</p>
        public let publicIpv4Pool: Swift.String?

        public init (
            allocationId: Swift.String? = nil,
            associationId: Swift.String? = nil,
            domain: Swift.String? = nil,
            instanceId: Swift.String? = nil,
            networkBorderGroup: Swift.String? = nil,
            networkInterfaceId: Swift.String? = nil,
            networkInterfaceOwnerId: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil,
            publicIp: Swift.String? = nil,
            publicIpv4Pool: Swift.String? = nil
        )
        {
            self.allocationId = allocationId
            self.associationId = associationId
            self.domain = domain
            self.instanceId = instanceId
            self.networkBorderGroup = networkBorderGroup
            self.networkInterfaceId = networkInterfaceId
            self.networkInterfaceOwnerId = networkInterfaceOwnerId
            self.privateIpAddress = privateIpAddress
            self.publicIp = publicIp
            self.publicIpv4Pool = publicIpv4Pool
        }
    }

}

extension SecurityHubClientTypes.AwsEc2InstanceDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case iamInstanceProfileArn = "IamInstanceProfileArn"
        case imageId = "ImageId"
        case ipV4Addresses = "IpV4Addresses"
        case ipV6Addresses = "IpV6Addresses"
        case keyName = "KeyName"
        case launchedAt = "LaunchedAt"
        case subnetId = "SubnetId"
        case type = "Type"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let iamInstanceProfileArn = iamInstanceProfileArn {
            try encodeContainer.encode(iamInstanceProfileArn, forKey: .iamInstanceProfileArn)
        }
        if let imageId = imageId {
            try encodeContainer.encode(imageId, forKey: .imageId)
        }
        if let ipV4Addresses = ipV4Addresses {
            var ipV4AddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipV4Addresses)
            for stringlist0 in ipV4Addresses {
                try ipV4AddressesContainer.encode(stringlist0)
            }
        }
        if let ipV6Addresses = ipV6Addresses {
            var ipV6AddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipV6Addresses)
            for stringlist0 in ipV6Addresses {
                try ipV6AddressesContainer.encode(stringlist0)
            }
        }
        if let keyName = keyName {
            try encodeContainer.encode(keyName, forKey: .keyName)
        }
        if let launchedAt = launchedAt {
            try encodeContainer.encode(launchedAt, forKey: .launchedAt)
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let ipV4AddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipV4Addresses)
        var ipV4AddressesDecoded0:[Swift.String]? = nil
        if let ipV4AddressesContainer = ipV4AddressesContainer {
            ipV4AddressesDecoded0 = [Swift.String]()
            for string0 in ipV4AddressesContainer {
                if let string0 = string0 {
                    ipV4AddressesDecoded0?.append(string0)
                }
            }
        }
        ipV4Addresses = ipV4AddressesDecoded0
        let ipV6AddressesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .ipV6Addresses)
        var ipV6AddressesDecoded0:[Swift.String]? = nil
        if let ipV6AddressesContainer = ipV6AddressesContainer {
            ipV6AddressesDecoded0 = [Swift.String]()
            for string0 in ipV6AddressesContainer {
                if let string0 = string0 {
                    ipV6AddressesDecoded0?.append(string0)
                }
            }
        }
        ipV6Addresses = ipV6AddressesDecoded0
        let keyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyName)
        keyName = keyNameDecoded
        let iamInstanceProfileArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamInstanceProfileArn)
        iamInstanceProfileArn = iamInstanceProfileArnDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let launchedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchedAt)
        launchedAt = launchedAtDecoded
    }
}

extension SecurityHubClientTypes.AwsEc2InstanceDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2InstanceDetails(iamInstanceProfileArn: \(Swift.String(describing: iamInstanceProfileArn)), imageId: \(Swift.String(describing: imageId)), ipV4Addresses: \(Swift.String(describing: ipV4Addresses)), ipV6Addresses: \(Swift.String(describing: ipV6Addresses)), keyName: \(Swift.String(describing: keyName)), launchedAt: \(Swift.String(describing: launchedAt)), subnetId: \(Swift.String(describing: subnetId)), type: \(Swift.String(describing: type)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension SecurityHubClientTypes {
    /// <p>The details of an Amazon EC2 instance.</p>
    public struct AwsEc2InstanceDetails: Swift.Equatable {
        /// <p>The IAM profile ARN of the instance.</p>
        public let iamInstanceProfileArn: Swift.String?
        /// <p>The Amazon Machine Image (AMI) ID of the instance.</p>
        public let imageId: Swift.String?
        /// <p>The IPv4 addresses associated with the instance.</p>
        public let ipV4Addresses: [Swift.String]?
        /// <p>The IPv6 addresses associated with the instance.</p>
        public let ipV6Addresses: [Swift.String]?
        /// <p>The key name associated with the instance.</p>
        public let keyName: Swift.String?
        /// <p>Indicates when the instance was launched.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let launchedAt: Swift.String?
        /// <p>The identifier of the subnet that the instance was launched in.</p>
        public let subnetId: Swift.String?
        /// <p>The instance type of the instance. </p>
        public let type: Swift.String?
        /// <p>The identifier of the VPC that the instance was launched in.</p>
        public let vpcId: Swift.String?

        public init (
            iamInstanceProfileArn: Swift.String? = nil,
            imageId: Swift.String? = nil,
            ipV4Addresses: [Swift.String]? = nil,
            ipV6Addresses: [Swift.String]? = nil,
            keyName: Swift.String? = nil,
            launchedAt: Swift.String? = nil,
            subnetId: Swift.String? = nil,
            type: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.iamInstanceProfileArn = iamInstanceProfileArn
            self.imageId = imageId
            self.ipV4Addresses = ipV4Addresses
            self.ipV6Addresses = ipV6Addresses
            self.keyName = keyName
            self.launchedAt = launchedAt
            self.subnetId = subnetId
            self.type = type
            self.vpcId = vpcId
        }
    }

}

extension SecurityHubClientTypes.AwsEc2NetworkAclAssociation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case networkAclAssociationId = "NetworkAclAssociationId"
        case networkAclId = "NetworkAclId"
        case subnetId = "SubnetId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let networkAclAssociationId = networkAclAssociationId {
            try encodeContainer.encode(networkAclAssociationId, forKey: .networkAclAssociationId)
        }
        if let networkAclId = networkAclId {
            try encodeContainer.encode(networkAclId, forKey: .networkAclId)
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let networkAclAssociationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkAclAssociationId)
        networkAclAssociationId = networkAclAssociationIdDecoded
        let networkAclIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkAclId)
        networkAclId = networkAclIdDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
    }
}

extension SecurityHubClientTypes.AwsEc2NetworkAclAssociation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2NetworkAclAssociation(networkAclAssociationId: \(Swift.String(describing: networkAclAssociationId)), networkAclId: \(Swift.String(describing: networkAclId)), subnetId: \(Swift.String(describing: subnetId)))"}
}

extension SecurityHubClientTypes {
    /// <p>An association between the network ACL and a subnet.</p>
    public struct AwsEc2NetworkAclAssociation: Swift.Equatable {
        /// <p>The identifier of the association between the network ACL and the subnet.</p>
        public let networkAclAssociationId: Swift.String?
        /// <p>The identifier of the network ACL.</p>
        public let networkAclId: Swift.String?
        /// <p>The identifier of the subnet that is associated with the network ACL.</p>
        public let subnetId: Swift.String?

        public init (
            networkAclAssociationId: Swift.String? = nil,
            networkAclId: Swift.String? = nil,
            subnetId: Swift.String? = nil
        )
        {
            self.networkAclAssociationId = networkAclAssociationId
            self.networkAclId = networkAclId
            self.subnetId = subnetId
        }
    }

}

extension SecurityHubClientTypes.AwsEc2NetworkAclDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associations = "Associations"
        case entries = "Entries"
        case isDefault = "IsDefault"
        case networkAclId = "NetworkAclId"
        case ownerId = "OwnerId"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associations = associations {
            var associationsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .associations)
            for awsec2networkaclassociationlist0 in associations {
                try associationsContainer.encode(awsec2networkaclassociationlist0)
            }
        }
        if let entries = entries {
            var entriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .entries)
            for awsec2networkaclentrylist0 in entries {
                try entriesContainer.encode(awsec2networkaclentrylist0)
            }
        }
        if isDefault != false {
            try encodeContainer.encode(isDefault, forKey: .isDefault)
        }
        if let networkAclId = networkAclId {
            try encodeContainer.encode(networkAclId, forKey: .networkAclId)
        }
        if let ownerId = ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isDefaultDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isDefault)
        isDefault = isDefaultDecoded
        let networkAclIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkAclId)
        networkAclId = networkAclIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let associationsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2NetworkAclAssociation?].self, forKey: .associations)
        var associationsDecoded0:[SecurityHubClientTypes.AwsEc2NetworkAclAssociation]? = nil
        if let associationsContainer = associationsContainer {
            associationsDecoded0 = [SecurityHubClientTypes.AwsEc2NetworkAclAssociation]()
            for structure0 in associationsContainer {
                if let structure0 = structure0 {
                    associationsDecoded0?.append(structure0)
                }
            }
        }
        associations = associationsDecoded0
        let entriesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2NetworkAclEntry?].self, forKey: .entries)
        var entriesDecoded0:[SecurityHubClientTypes.AwsEc2NetworkAclEntry]? = nil
        if let entriesContainer = entriesContainer {
            entriesDecoded0 = [SecurityHubClientTypes.AwsEc2NetworkAclEntry]()
            for structure0 in entriesContainer {
                if let structure0 = structure0 {
                    entriesDecoded0?.append(structure0)
                }
            }
        }
        entries = entriesDecoded0
    }
}

extension SecurityHubClientTypes.AwsEc2NetworkAclDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2NetworkAclDetails(associations: \(Swift.String(describing: associations)), entries: \(Swift.String(describing: entries)), isDefault: \(Swift.String(describing: isDefault)), networkAclId: \(Swift.String(describing: networkAclId)), ownerId: \(Swift.String(describing: ownerId)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains details about an EC2 network access control list (ACL).</p>
    public struct AwsEc2NetworkAclDetails: Swift.Equatable {
        /// <p>Associations between the network ACL and subnets.</p>
        public let associations: [SecurityHubClientTypes.AwsEc2NetworkAclAssociation]?
        /// <p>The set of rules in the network ACL.</p>
        public let entries: [SecurityHubClientTypes.AwsEc2NetworkAclEntry]?
        /// <p>Whether this is the default network ACL for the VPC.</p>
        public let isDefault: Swift.Bool
        /// <p>The identifier of the network ACL.</p>
        public let networkAclId: Swift.String?
        /// <p>The identifier of the AWS account that owns the network ACL.</p>
        public let ownerId: Swift.String?
        /// <p>The identifier of the VPC for the network ACL.</p>
        public let vpcId: Swift.String?

        public init (
            associations: [SecurityHubClientTypes.AwsEc2NetworkAclAssociation]? = nil,
            entries: [SecurityHubClientTypes.AwsEc2NetworkAclEntry]? = nil,
            isDefault: Swift.Bool = false,
            networkAclId: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.associations = associations
            self.entries = entries
            self.isDefault = isDefault
            self.networkAclId = networkAclId
            self.ownerId = ownerId
            self.vpcId = vpcId
        }
    }

}

extension SecurityHubClientTypes.AwsEc2NetworkAclEntry: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrBlock = "CidrBlock"
        case egress = "Egress"
        case icmpTypeCode = "IcmpTypeCode"
        case ipv6CidrBlock = "Ipv6CidrBlock"
        case portRange = "PortRange"
        case `protocol` = "Protocol"
        case ruleAction = "RuleAction"
        case ruleNumber = "RuleNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrBlock = cidrBlock {
            try encodeContainer.encode(cidrBlock, forKey: .cidrBlock)
        }
        if egress != false {
            try encodeContainer.encode(egress, forKey: .egress)
        }
        if let icmpTypeCode = icmpTypeCode {
            try encodeContainer.encode(icmpTypeCode, forKey: .icmpTypeCode)
        }
        if let ipv6CidrBlock = ipv6CidrBlock {
            try encodeContainer.encode(ipv6CidrBlock, forKey: .ipv6CidrBlock)
        }
        if let portRange = portRange {
            try encodeContainer.encode(portRange, forKey: .portRange)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`, forKey: .`protocol`)
        }
        if let ruleAction = ruleAction {
            try encodeContainer.encode(ruleAction, forKey: .ruleAction)
        }
        if ruleNumber != 0 {
            try encodeContainer.encode(ruleNumber, forKey: .ruleNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrBlock)
        cidrBlock = cidrBlockDecoded
        let egressDecoded = try containerValues.decode(Swift.Bool.self, forKey: .egress)
        egress = egressDecoded
        let icmpTypeCodeDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.IcmpTypeCode.self, forKey: .icmpTypeCode)
        icmpTypeCode = icmpTypeCodeDecoded
        let ipv6CidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipv6CidrBlock)
        ipv6CidrBlock = ipv6CidrBlockDecoded
        let portRangeDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.PortRangeFromTo.self, forKey: .portRange)
        portRange = portRangeDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let ruleActionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleAction)
        ruleAction = ruleActionDecoded
        let ruleNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .ruleNumber)
        ruleNumber = ruleNumberDecoded
    }
}

extension SecurityHubClientTypes.AwsEc2NetworkAclEntry: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2NetworkAclEntry(cidrBlock: \(Swift.String(describing: cidrBlock)), egress: \(Swift.String(describing: egress)), icmpTypeCode: \(Swift.String(describing: icmpTypeCode)), ipv6CidrBlock: \(Swift.String(describing: ipv6CidrBlock)), portRange: \(Swift.String(describing: portRange)), protocol: \(Swift.String(describing: `protocol`)), ruleAction: \(Swift.String(describing: ruleAction)), ruleNumber: \(Swift.String(describing: ruleNumber)))"}
}

extension SecurityHubClientTypes {
    /// <p>A rule for the network ACL. Each rule allows or denies access based on the IP address, traffic direction, port, and protocol.</p>
    public struct AwsEc2NetworkAclEntry: Swift.Equatable {
        /// <p>The protocol that the rule applies to. To deny or allow access to all protocols, use the value -1.</p>
        public let `protocol`: Swift.String?
        /// <p>The IPV4 network range for which to deny or allow access.</p>
        public let cidrBlock: Swift.String?
        /// <p>Whether the rule is an egress rule. An egress rule is a rule that applies to traffic that leaves the subnet.</p>
        public let egress: Swift.Bool
        /// <p>The Internet Control Message Protocol (ICMP) type and code for which to deny or allow access.</p>
        public let icmpTypeCode: SecurityHubClientTypes.IcmpTypeCode?
        /// <p>The IPV6 network range for which to deny or allow access.</p>
        public let ipv6CidrBlock: Swift.String?
        /// <p>For TCP or UDP protocols, the range of ports that the rule applies to.</p>
        public let portRange: SecurityHubClientTypes.PortRangeFromTo?
        /// <p>Whether the rule is used to allow access or deny access.</p>
        public let ruleAction: Swift.String?
        /// <p>The rule number. The rules are processed in order by their number.</p>
        public let ruleNumber: Swift.Int

        public init (
            `protocol`: Swift.String? = nil,
            cidrBlock: Swift.String? = nil,
            egress: Swift.Bool = false,
            icmpTypeCode: SecurityHubClientTypes.IcmpTypeCode? = nil,
            ipv6CidrBlock: Swift.String? = nil,
            portRange: SecurityHubClientTypes.PortRangeFromTo? = nil,
            ruleAction: Swift.String? = nil,
            ruleNumber: Swift.Int = 0
        )
        {
            self.`protocol` = `protocol`
            self.cidrBlock = cidrBlock
            self.egress = egress
            self.icmpTypeCode = icmpTypeCode
            self.ipv6CidrBlock = ipv6CidrBlock
            self.portRange = portRange
            self.ruleAction = ruleAction
            self.ruleNumber = ruleNumber
        }
    }

}

extension SecurityHubClientTypes.AwsEc2NetworkInterfaceAttachment: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachTime = "AttachTime"
        case attachmentId = "AttachmentId"
        case deleteOnTermination = "DeleteOnTermination"
        case deviceIndex = "DeviceIndex"
        case instanceId = "InstanceId"
        case instanceOwnerId = "InstanceOwnerId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachTime = attachTime {
            try encodeContainer.encode(attachTime, forKey: .attachTime)
        }
        if let attachmentId = attachmentId {
            try encodeContainer.encode(attachmentId, forKey: .attachmentId)
        }
        if deleteOnTermination != false {
            try encodeContainer.encode(deleteOnTermination, forKey: .deleteOnTermination)
        }
        if deviceIndex != 0 {
            try encodeContainer.encode(deviceIndex, forKey: .deviceIndex)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let instanceOwnerId = instanceOwnerId {
            try encodeContainer.encode(instanceOwnerId, forKey: .instanceOwnerId)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachTime)
        attachTime = attachTimeDecoded
        let attachmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachmentId)
        attachmentId = attachmentIdDecoded
        let deleteOnTerminationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .deleteOnTermination)
        deleteOnTermination = deleteOnTerminationDecoded
        let deviceIndexDecoded = try containerValues.decode(Swift.Int.self, forKey: .deviceIndex)
        deviceIndex = deviceIndexDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let instanceOwnerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceOwnerId)
        instanceOwnerId = instanceOwnerIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityHubClientTypes.AwsEc2NetworkInterfaceAttachment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2NetworkInterfaceAttachment(attachTime: \(Swift.String(describing: attachTime)), attachmentId: \(Swift.String(describing: attachmentId)), deleteOnTermination: \(Swift.String(describing: deleteOnTermination)), deviceIndex: \(Swift.String(describing: deviceIndex)), instanceId: \(Swift.String(describing: instanceId)), instanceOwnerId: \(Swift.String(describing: instanceOwnerId)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the network interface attachment.</p>
    public struct AwsEc2NetworkInterfaceAttachment: Swift.Equatable {
        /// <p>Indicates when the attachment initiated.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let attachTime: Swift.String?
        /// <p>The identifier of the network interface attachment</p>
        public let attachmentId: Swift.String?
        /// <p>Indicates whether the network interface is deleted when the instance is
        ///          terminated.</p>
        public let deleteOnTermination: Swift.Bool
        /// <p>The device index of the network interface attachment on the instance.</p>
        public let deviceIndex: Swift.Int
        /// <p>The ID of the instance.</p>
        public let instanceId: Swift.String?
        /// <p>The AWS account ID of the owner of the instance.</p>
        public let instanceOwnerId: Swift.String?
        /// <p>The attachment state.</p>
        ///          <p>Valid values: <code>attaching</code> | <code>attached</code> | <code>detaching</code> |
        ///             <code>detached</code>
        ///          </p>
        public let status: Swift.String?

        public init (
            attachTime: Swift.String? = nil,
            attachmentId: Swift.String? = nil,
            deleteOnTermination: Swift.Bool = false,
            deviceIndex: Swift.Int = 0,
            instanceId: Swift.String? = nil,
            instanceOwnerId: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.attachTime = attachTime
            self.attachmentId = attachmentId
            self.deleteOnTermination = deleteOnTermination
            self.deviceIndex = deviceIndex
            self.instanceId = instanceId
            self.instanceOwnerId = instanceOwnerId
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.AwsEc2NetworkInterfaceDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachment = "Attachment"
        case ipV6Addresses = "IpV6Addresses"
        case networkInterfaceId = "NetworkInterfaceId"
        case privateIpAddresses = "PrivateIpAddresses"
        case publicDnsName = "PublicDnsName"
        case publicIp = "PublicIp"
        case securityGroups = "SecurityGroups"
        case sourceDestCheck = "SourceDestCheck"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachment = attachment {
            try encodeContainer.encode(attachment, forKey: .attachment)
        }
        if let ipV6Addresses = ipV6Addresses {
            var ipV6AddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipV6Addresses)
            for awsec2networkinterfaceipv6addresslist0 in ipV6Addresses {
                try ipV6AddressesContainer.encode(awsec2networkinterfaceipv6addresslist0)
            }
        }
        if let networkInterfaceId = networkInterfaceId {
            try encodeContainer.encode(networkInterfaceId, forKey: .networkInterfaceId)
        }
        if let privateIpAddresses = privateIpAddresses {
            var privateIpAddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .privateIpAddresses)
            for awsec2networkinterfaceprivateipaddresslist0 in privateIpAddresses {
                try privateIpAddressesContainer.encode(awsec2networkinterfaceprivateipaddresslist0)
            }
        }
        if let publicDnsName = publicDnsName {
            try encodeContainer.encode(publicDnsName, forKey: .publicDnsName)
        }
        if let publicIp = publicIp {
            try encodeContainer.encode(publicIp, forKey: .publicIp)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for awsec2networkinterfacesecuritygrouplist0 in securityGroups {
                try securityGroupsContainer.encode(awsec2networkinterfacesecuritygrouplist0)
            }
        }
        if sourceDestCheck != false {
            try encodeContainer.encode(sourceDestCheck, forKey: .sourceDestCheck)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachmentDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2NetworkInterfaceAttachment.self, forKey: .attachment)
        attachment = attachmentDecoded
        let networkInterfaceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .networkInterfaceId)
        networkInterfaceId = networkInterfaceIdDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2NetworkInterfaceSecurityGroup?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[SecurityHubClientTypes.AwsEc2NetworkInterfaceSecurityGroup]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [SecurityHubClientTypes.AwsEc2NetworkInterfaceSecurityGroup]()
            for structure0 in securityGroupsContainer {
                if let structure0 = structure0 {
                    securityGroupsDecoded0?.append(structure0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let sourceDestCheckDecoded = try containerValues.decode(Swift.Bool.self, forKey: .sourceDestCheck)
        sourceDestCheck = sourceDestCheckDecoded
        let ipV6AddressesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2NetworkInterfaceIpV6AddressDetail?].self, forKey: .ipV6Addresses)
        var ipV6AddressesDecoded0:[SecurityHubClientTypes.AwsEc2NetworkInterfaceIpV6AddressDetail]? = nil
        if let ipV6AddressesContainer = ipV6AddressesContainer {
            ipV6AddressesDecoded0 = [SecurityHubClientTypes.AwsEc2NetworkInterfaceIpV6AddressDetail]()
            for structure0 in ipV6AddressesContainer {
                if let structure0 = structure0 {
                    ipV6AddressesDecoded0?.append(structure0)
                }
            }
        }
        ipV6Addresses = ipV6AddressesDecoded0
        let privateIpAddressesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2NetworkInterfacePrivateIpAddressDetail?].self, forKey: .privateIpAddresses)
        var privateIpAddressesDecoded0:[SecurityHubClientTypes.AwsEc2NetworkInterfacePrivateIpAddressDetail]? = nil
        if let privateIpAddressesContainer = privateIpAddressesContainer {
            privateIpAddressesDecoded0 = [SecurityHubClientTypes.AwsEc2NetworkInterfacePrivateIpAddressDetail]()
            for structure0 in privateIpAddressesContainer {
                if let structure0 = structure0 {
                    privateIpAddressesDecoded0?.append(structure0)
                }
            }
        }
        privateIpAddresses = privateIpAddressesDecoded0
        let publicDnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicDnsName)
        publicDnsName = publicDnsNameDecoded
        let publicIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicIp)
        publicIp = publicIpDecoded
    }
}

extension SecurityHubClientTypes.AwsEc2NetworkInterfaceDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2NetworkInterfaceDetails(attachment: \(Swift.String(describing: attachment)), ipV6Addresses: \(Swift.String(describing: ipV6Addresses)), networkInterfaceId: \(Swift.String(describing: networkInterfaceId)), privateIpAddresses: \(Swift.String(describing: privateIpAddresses)), publicDnsName: \(Swift.String(describing: publicDnsName)), publicIp: \(Swift.String(describing: publicIp)), securityGroups: \(Swift.String(describing: securityGroups)), sourceDestCheck: \(Swift.String(describing: sourceDestCheck)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about the network interface</p>
    public struct AwsEc2NetworkInterfaceDetails: Swift.Equatable {
        /// <p>The network interface attachment.</p>
        public let attachment: SecurityHubClientTypes.AwsEc2NetworkInterfaceAttachment?
        /// <p>The IPv6 addresses associated with the network interface.</p>
        public let ipV6Addresses: [SecurityHubClientTypes.AwsEc2NetworkInterfaceIpV6AddressDetail]?
        /// <p>The ID of the network interface.</p>
        public let networkInterfaceId: Swift.String?
        /// <p>The private IPv4 addresses associated with the network interface.</p>
        public let privateIpAddresses: [SecurityHubClientTypes.AwsEc2NetworkInterfacePrivateIpAddressDetail]?
        /// <p>The public DNS name of the network interface.</p>
        public let publicDnsName: Swift.String?
        /// <p>The address of the Elastic IP address bound to the network interface.</p>
        public let publicIp: Swift.String?
        /// <p>Security groups for the network interface.</p>
        public let securityGroups: [SecurityHubClientTypes.AwsEc2NetworkInterfaceSecurityGroup]?
        /// <p>Indicates whether traffic to or from the instance is validated.</p>
        public let sourceDestCheck: Swift.Bool

        public init (
            attachment: SecurityHubClientTypes.AwsEc2NetworkInterfaceAttachment? = nil,
            ipV6Addresses: [SecurityHubClientTypes.AwsEc2NetworkInterfaceIpV6AddressDetail]? = nil,
            networkInterfaceId: Swift.String? = nil,
            privateIpAddresses: [SecurityHubClientTypes.AwsEc2NetworkInterfacePrivateIpAddressDetail]? = nil,
            publicDnsName: Swift.String? = nil,
            publicIp: Swift.String? = nil,
            securityGroups: [SecurityHubClientTypes.AwsEc2NetworkInterfaceSecurityGroup]? = nil,
            sourceDestCheck: Swift.Bool = false
        )
        {
            self.attachment = attachment
            self.ipV6Addresses = ipV6Addresses
            self.networkInterfaceId = networkInterfaceId
            self.privateIpAddresses = privateIpAddresses
            self.publicDnsName = publicDnsName
            self.publicIp = publicIp
            self.securityGroups = securityGroups
            self.sourceDestCheck = sourceDestCheck
        }
    }

}

extension SecurityHubClientTypes.AwsEc2NetworkInterfaceIpV6AddressDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ipV6Address = "IpV6Address"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ipV6Address = ipV6Address {
            try encodeContainer.encode(ipV6Address, forKey: .ipV6Address)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipV6AddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipV6Address)
        ipV6Address = ipV6AddressDecoded
    }
}

extension SecurityHubClientTypes.AwsEc2NetworkInterfaceIpV6AddressDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2NetworkInterfaceIpV6AddressDetail(ipV6Address: \(Swift.String(describing: ipV6Address)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about an IPV6 address that is associated with the network
    ///          interface.</p>
    public struct AwsEc2NetworkInterfaceIpV6AddressDetail: Swift.Equatable {
        /// <p>The IPV6 address.</p>
        public let ipV6Address: Swift.String?

        public init (
            ipV6Address: Swift.String? = nil
        )
        {
            self.ipV6Address = ipV6Address
        }
    }

}

extension SecurityHubClientTypes.AwsEc2NetworkInterfacePrivateIpAddressDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case privateDnsName = "PrivateDnsName"
        case privateIpAddress = "PrivateIpAddress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let privateDnsName = privateDnsName {
            try encodeContainer.encode(privateDnsName, forKey: .privateDnsName)
        }
        if let privateIpAddress = privateIpAddress {
            try encodeContainer.encode(privateIpAddress, forKey: .privateIpAddress)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let privateIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateIpAddress)
        privateIpAddress = privateIpAddressDecoded
        let privateDnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateDnsName)
        privateDnsName = privateDnsNameDecoded
    }
}

extension SecurityHubClientTypes.AwsEc2NetworkInterfacePrivateIpAddressDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2NetworkInterfacePrivateIpAddressDetail(privateDnsName: \(Swift.String(describing: privateDnsName)), privateIpAddress: \(Swift.String(describing: privateIpAddress)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about a private IPv4 address that is with the network
    ///          interface.</p>
    public struct AwsEc2NetworkInterfacePrivateIpAddressDetail: Swift.Equatable {
        /// <p>The private DNS name for the IP address.</p>
        public let privateDnsName: Swift.String?
        /// <p>The IP address.</p>
        public let privateIpAddress: Swift.String?

        public init (
            privateDnsName: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil
        )
        {
            self.privateDnsName = privateDnsName
            self.privateIpAddress = privateIpAddress
        }
    }

}

extension SecurityHubClientTypes.AwsEc2NetworkInterfaceSecurityGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupId = "GroupId"
        case groupName = "GroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupId = groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
    }
}

extension SecurityHubClientTypes.AwsEc2NetworkInterfaceSecurityGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2NetworkInterfaceSecurityGroup(groupId: \(Swift.String(describing: groupId)), groupName: \(Swift.String(describing: groupName)))"}
}

extension SecurityHubClientTypes {
    /// <p>A security group associated with the network interface.</p>
    public struct AwsEc2NetworkInterfaceSecurityGroup: Swift.Equatable {
        /// <p>The ID of the security group.</p>
        public let groupId: Swift.String?
        /// <p>The name of the security group.</p>
        public let groupName: Swift.String?

        public init (
            groupId: Swift.String? = nil,
            groupName: Swift.String? = nil
        )
        {
            self.groupId = groupId
            self.groupName = groupName
        }
    }

}

extension SecurityHubClientTypes.AwsEc2SecurityGroupDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupId = "GroupId"
        case groupName = "GroupName"
        case ipPermissions = "IpPermissions"
        case ipPermissionsEgress = "IpPermissionsEgress"
        case ownerId = "OwnerId"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupId = groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let ipPermissions = ipPermissions {
            var ipPermissionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipPermissions)
            for awsec2securitygroupippermissionlist0 in ipPermissions {
                try ipPermissionsContainer.encode(awsec2securitygroupippermissionlist0)
            }
        }
        if let ipPermissionsEgress = ipPermissionsEgress {
            var ipPermissionsEgressContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipPermissionsEgress)
            for awsec2securitygroupippermissionlist0 in ipPermissionsEgress {
                try ipPermissionsEgressContainer.encode(awsec2securitygroupippermissionlist0)
            }
        }
        if let ownerId = ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let ipPermissionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission?].self, forKey: .ipPermissions)
        var ipPermissionsDecoded0:[SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission]? = nil
        if let ipPermissionsContainer = ipPermissionsContainer {
            ipPermissionsDecoded0 = [SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission]()
            for structure0 in ipPermissionsContainer {
                if let structure0 = structure0 {
                    ipPermissionsDecoded0?.append(structure0)
                }
            }
        }
        ipPermissions = ipPermissionsDecoded0
        let ipPermissionsEgressContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission?].self, forKey: .ipPermissionsEgress)
        var ipPermissionsEgressDecoded0:[SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission]? = nil
        if let ipPermissionsEgressContainer = ipPermissionsEgressContainer {
            ipPermissionsEgressDecoded0 = [SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission]()
            for structure0 in ipPermissionsEgressContainer {
                if let structure0 = structure0 {
                    ipPermissionsEgressDecoded0?.append(structure0)
                }
            }
        }
        ipPermissionsEgress = ipPermissionsEgressDecoded0
    }
}

extension SecurityHubClientTypes.AwsEc2SecurityGroupDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2SecurityGroupDetails(groupId: \(Swift.String(describing: groupId)), groupName: \(Swift.String(describing: groupName)), ipPermissions: \(Swift.String(describing: ipPermissions)), ipPermissionsEgress: \(Swift.String(describing: ipPermissionsEgress)), ownerId: \(Swift.String(describing: ownerId)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about an EC2 security group.</p>
    public struct AwsEc2SecurityGroupDetails: Swift.Equatable {
        /// <p>The ID of the security group.</p>
        public let groupId: Swift.String?
        /// <p>The name of the security group.</p>
        public let groupName: Swift.String?
        /// <p>The inbound rules associated with the security group.</p>
        public let ipPermissions: [SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission]?
        /// <p>[VPC only] The outbound rules associated with the security group.</p>
        public let ipPermissionsEgress: [SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission]?
        /// <p>The AWS account ID of the owner of the security group.</p>
        public let ownerId: Swift.String?
        /// <p>[VPC only] The ID of the VPC for the security group.</p>
        public let vpcId: Swift.String?

        public init (
            groupId: Swift.String? = nil,
            groupName: Swift.String? = nil,
            ipPermissions: [SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission]? = nil,
            ipPermissionsEgress: [SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission]? = nil,
            ownerId: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.groupId = groupId
            self.groupName = groupName
            self.ipPermissions = ipPermissions
            self.ipPermissionsEgress = ipPermissionsEgress
            self.ownerId = ownerId
            self.vpcId = vpcId
        }
    }

}

extension SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case fromPort = "FromPort"
        case ipProtocol = "IpProtocol"
        case ipRanges = "IpRanges"
        case ipv6Ranges = "Ipv6Ranges"
        case prefixListIds = "PrefixListIds"
        case toPort = "ToPort"
        case userIdGroupPairs = "UserIdGroupPairs"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if fromPort != 0 {
            try encodeContainer.encode(fromPort, forKey: .fromPort)
        }
        if let ipProtocol = ipProtocol {
            try encodeContainer.encode(ipProtocol, forKey: .ipProtocol)
        }
        if let ipRanges = ipRanges {
            var ipRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipRanges)
            for awsec2securitygroupiprangelist0 in ipRanges {
                try ipRangesContainer.encode(awsec2securitygroupiprangelist0)
            }
        }
        if let ipv6Ranges = ipv6Ranges {
            var ipv6RangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6Ranges)
            for awsec2securitygroupipv6rangelist0 in ipv6Ranges {
                try ipv6RangesContainer.encode(awsec2securitygroupipv6rangelist0)
            }
        }
        if let prefixListIds = prefixListIds {
            var prefixListIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .prefixListIds)
            for awsec2securitygroupprefixlistidlist0 in prefixListIds {
                try prefixListIdsContainer.encode(awsec2securitygroupprefixlistidlist0)
            }
        }
        if toPort != 0 {
            try encodeContainer.encode(toPort, forKey: .toPort)
        }
        if let userIdGroupPairs = userIdGroupPairs {
            var userIdGroupPairsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userIdGroupPairs)
            for awsec2securitygroupuseridgrouppairlist0 in userIdGroupPairs {
                try userIdGroupPairsContainer.encode(awsec2securitygroupuseridgrouppairlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ipProtocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipProtocol)
        ipProtocol = ipProtocolDecoded
        let fromPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .fromPort)
        fromPort = fromPortDecoded
        let toPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .toPort)
        toPort = toPortDecoded
        let userIdGroupPairsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2SecurityGroupUserIdGroupPair?].self, forKey: .userIdGroupPairs)
        var userIdGroupPairsDecoded0:[SecurityHubClientTypes.AwsEc2SecurityGroupUserIdGroupPair]? = nil
        if let userIdGroupPairsContainer = userIdGroupPairsContainer {
            userIdGroupPairsDecoded0 = [SecurityHubClientTypes.AwsEc2SecurityGroupUserIdGroupPair]()
            for structure0 in userIdGroupPairsContainer {
                if let structure0 = structure0 {
                    userIdGroupPairsDecoded0?.append(structure0)
                }
            }
        }
        userIdGroupPairs = userIdGroupPairsDecoded0
        let ipRangesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2SecurityGroupIpRange?].self, forKey: .ipRanges)
        var ipRangesDecoded0:[SecurityHubClientTypes.AwsEc2SecurityGroupIpRange]? = nil
        if let ipRangesContainer = ipRangesContainer {
            ipRangesDecoded0 = [SecurityHubClientTypes.AwsEc2SecurityGroupIpRange]()
            for structure0 in ipRangesContainer {
                if let structure0 = structure0 {
                    ipRangesDecoded0?.append(structure0)
                }
            }
        }
        ipRanges = ipRangesDecoded0
        let ipv6RangesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2SecurityGroupIpv6Range?].self, forKey: .ipv6Ranges)
        var ipv6RangesDecoded0:[SecurityHubClientTypes.AwsEc2SecurityGroupIpv6Range]? = nil
        if let ipv6RangesContainer = ipv6RangesContainer {
            ipv6RangesDecoded0 = [SecurityHubClientTypes.AwsEc2SecurityGroupIpv6Range]()
            for structure0 in ipv6RangesContainer {
                if let structure0 = structure0 {
                    ipv6RangesDecoded0?.append(structure0)
                }
            }
        }
        ipv6Ranges = ipv6RangesDecoded0
        let prefixListIdsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2SecurityGroupPrefixListId?].self, forKey: .prefixListIds)
        var prefixListIdsDecoded0:[SecurityHubClientTypes.AwsEc2SecurityGroupPrefixListId]? = nil
        if let prefixListIdsContainer = prefixListIdsContainer {
            prefixListIdsDecoded0 = [SecurityHubClientTypes.AwsEc2SecurityGroupPrefixListId]()
            for structure0 in prefixListIdsContainer {
                if let structure0 = structure0 {
                    prefixListIdsDecoded0?.append(structure0)
                }
            }
        }
        prefixListIds = prefixListIdsDecoded0
    }
}

extension SecurityHubClientTypes.AwsEc2SecurityGroupIpPermission: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2SecurityGroupIpPermission(fromPort: \(Swift.String(describing: fromPort)), ipProtocol: \(Swift.String(describing: ipProtocol)), ipRanges: \(Swift.String(describing: ipRanges)), ipv6Ranges: \(Swift.String(describing: ipv6Ranges)), prefixListIds: \(Swift.String(describing: prefixListIds)), toPort: \(Swift.String(describing: toPort)), userIdGroupPairs: \(Swift.String(describing: userIdGroupPairs)))"}
}

extension SecurityHubClientTypes {
    /// <p>An IP permission for an EC2 security group.</p>
    public struct AwsEc2SecurityGroupIpPermission: Swift.Equatable {
        /// <p>The start of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 type
        ///          number.</p>
        ///          <p>A value of -1 indicates all ICMP/ICMPv6 types. If you specify all ICMP/ICMPv6 types, you
        ///          must specify all codes. </p>
        public let fromPort: Swift.Int
        /// <p>The IP protocol name (<code>tcp</code>, <code>udp</code>, <code>icmp</code>,
        ///             <code>icmpv6</code>) or number.</p>
        ///          <p>[VPC only] Use <code>-1</code> to specify all protocols.</p>
        ///          <p>When authorizing security group rules, specifying -1 or a protocol number other than
        ///             <code>tcp</code>, <code>udp</code>, <code>icmp</code>, or <code>icmpv6</code> allows
        ///          traffic on all ports, regardless of any port range you specify.</p>
        ///          <p>For <code>tcp</code>, <code>udp</code>, and <code>icmp</code>, you must specify a port
        ///          range.</p>
        ///          <p>For <code>icmpv6</code>, the port range is optional. If you omit the port range, traffic
        ///          for all types and codes is allowed. </p>
        public let ipProtocol: Swift.String?
        /// <p>The IPv4 ranges.</p>
        public let ipRanges: [SecurityHubClientTypes.AwsEc2SecurityGroupIpRange]?
        /// <p>The IPv6 ranges.</p>
        public let ipv6Ranges: [SecurityHubClientTypes.AwsEc2SecurityGroupIpv6Range]?
        /// <p>[VPC only] The prefix list IDs for an AWS service. With outbound rules, this is the AWS
        ///          service to access through a VPC endpoint from instances associated with the security
        ///          group.</p>
        public let prefixListIds: [SecurityHubClientTypes.AwsEc2SecurityGroupPrefixListId]?
        /// <p>The end of the port range for the TCP and UDP protocols, or an ICMP/ICMPv6 code.</p>
        ///          <p>A value of -1 indicates all ICMP/ICMPv6 codes. If you specify all ICMP/ICMPv6 types, you
        ///          must specify all codes.</p>
        public let toPort: Swift.Int
        /// <p>The security group and AWS account ID pairs.</p>
        public let userIdGroupPairs: [SecurityHubClientTypes.AwsEc2SecurityGroupUserIdGroupPair]?

        public init (
            fromPort: Swift.Int = 0,
            ipProtocol: Swift.String? = nil,
            ipRanges: [SecurityHubClientTypes.AwsEc2SecurityGroupIpRange]? = nil,
            ipv6Ranges: [SecurityHubClientTypes.AwsEc2SecurityGroupIpv6Range]? = nil,
            prefixListIds: [SecurityHubClientTypes.AwsEc2SecurityGroupPrefixListId]? = nil,
            toPort: Swift.Int = 0,
            userIdGroupPairs: [SecurityHubClientTypes.AwsEc2SecurityGroupUserIdGroupPair]? = nil
        )
        {
            self.fromPort = fromPort
            self.ipProtocol = ipProtocol
            self.ipRanges = ipRanges
            self.ipv6Ranges = ipv6Ranges
            self.prefixListIds = prefixListIds
            self.toPort = toPort
            self.userIdGroupPairs = userIdGroupPairs
        }
    }

}

extension SecurityHubClientTypes.AwsEc2SecurityGroupIpRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrIp = "CidrIp"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrIp = cidrIp {
            try encodeContainer.encode(cidrIp, forKey: .cidrIp)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrIp)
        cidrIp = cidrIpDecoded
    }
}

extension SecurityHubClientTypes.AwsEc2SecurityGroupIpRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2SecurityGroupIpRange(cidrIp: \(Swift.String(describing: cidrIp)))"}
}

extension SecurityHubClientTypes {
    /// <p>A range of IPv4 addresses.</p>
    public struct AwsEc2SecurityGroupIpRange: Swift.Equatable {
        /// <p>The IPv4 CIDR range. You can specify either a CIDR range or a source security group, but
        ///          not both. To specify a single IPv4 address, use the /32 prefix length.</p>
        public let cidrIp: Swift.String?

        public init (
            cidrIp: Swift.String? = nil
        )
        {
            self.cidrIp = cidrIp
        }
    }

}

extension SecurityHubClientTypes.AwsEc2SecurityGroupIpv6Range: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrIpv6 = "CidrIpv6"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrIpv6 = cidrIpv6 {
            try encodeContainer.encode(cidrIpv6, forKey: .cidrIpv6)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrIpv6Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrIpv6)
        cidrIpv6 = cidrIpv6Decoded
    }
}

extension SecurityHubClientTypes.AwsEc2SecurityGroupIpv6Range: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2SecurityGroupIpv6Range(cidrIpv6: \(Swift.String(describing: cidrIpv6)))"}
}

extension SecurityHubClientTypes {
    /// <p>A range of IPv6 addresses.</p>
    public struct AwsEc2SecurityGroupIpv6Range: Swift.Equatable {
        /// <p>The IPv6 CIDR range. You can specify either a CIDR range or a source security group, but
        ///          not both. To specify a single IPv6 address, use the /128 prefix length.</p>
        public let cidrIpv6: Swift.String?

        public init (
            cidrIpv6: Swift.String? = nil
        )
        {
            self.cidrIpv6 = cidrIpv6
        }
    }

}

extension SecurityHubClientTypes.AwsEc2SecurityGroupPrefixListId: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case prefixListId = "PrefixListId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let prefixListId = prefixListId {
            try encodeContainer.encode(prefixListId, forKey: .prefixListId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let prefixListIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .prefixListId)
        prefixListId = prefixListIdDecoded
    }
}

extension SecurityHubClientTypes.AwsEc2SecurityGroupPrefixListId: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2SecurityGroupPrefixListId(prefixListId: \(Swift.String(describing: prefixListId)))"}
}

extension SecurityHubClientTypes {
    /// <p>A prefix list ID.</p>
    public struct AwsEc2SecurityGroupPrefixListId: Swift.Equatable {
        /// <p>The ID of the prefix.</p>
        public let prefixListId: Swift.String?

        public init (
            prefixListId: Swift.String? = nil
        )
        {
            self.prefixListId = prefixListId
        }
    }

}

extension SecurityHubClientTypes.AwsEc2SecurityGroupUserIdGroupPair: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupId = "GroupId"
        case groupName = "GroupName"
        case peeringStatus = "PeeringStatus"
        case userId = "UserId"
        case vpcId = "VpcId"
        case vpcPeeringConnectionId = "VpcPeeringConnectionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupId = groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let peeringStatus = peeringStatus {
            try encodeContainer.encode(peeringStatus, forKey: .peeringStatus)
        }
        if let userId = userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let vpcPeeringConnectionId = vpcPeeringConnectionId {
            try encodeContainer.encode(vpcPeeringConnectionId, forKey: .vpcPeeringConnectionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let peeringStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .peeringStatus)
        peeringStatus = peeringStatusDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let vpcPeeringConnectionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcPeeringConnectionId)
        vpcPeeringConnectionId = vpcPeeringConnectionIdDecoded
    }
}

extension SecurityHubClientTypes.AwsEc2SecurityGroupUserIdGroupPair: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2SecurityGroupUserIdGroupPair(groupId: \(Swift.String(describing: groupId)), groupName: \(Swift.String(describing: groupName)), peeringStatus: \(Swift.String(describing: peeringStatus)), userId: \(Swift.String(describing: userId)), vpcId: \(Swift.String(describing: vpcId)), vpcPeeringConnectionId: \(Swift.String(describing: vpcPeeringConnectionId)))"}
}

extension SecurityHubClientTypes {
    /// <p>A relationship between a security group and a user.</p>
    public struct AwsEc2SecurityGroupUserIdGroupPair: Swift.Equatable {
        /// <p>The ID of the security group.</p>
        public let groupId: Swift.String?
        /// <p>The name of the security group.</p>
        public let groupName: Swift.String?
        /// <p>The status of a VPC peering connection, if applicable.</p>
        public let peeringStatus: Swift.String?
        /// <p>The ID of an AWS account.</p>
        ///          <p>For a referenced security group in another VPC, the account ID of the referenced
        ///          security group is returned in the response. If the referenced security group is deleted,
        ///          this value is not returned.</p>
        ///          <p>[EC2-Classic] Required when adding or removing rules that reference a security group in
        ///          another AWS. </p>
        public let userId: Swift.String?
        /// <p>The ID of the VPC for the referenced security group, if applicable.</p>
        public let vpcId: Swift.String?
        /// <p>The ID of the VPC peering connection, if applicable.</p>
        public let vpcPeeringConnectionId: Swift.String?

        public init (
            groupId: Swift.String? = nil,
            groupName: Swift.String? = nil,
            peeringStatus: Swift.String? = nil,
            userId: Swift.String? = nil,
            vpcId: Swift.String? = nil,
            vpcPeeringConnectionId: Swift.String? = nil
        )
        {
            self.groupId = groupId
            self.groupName = groupName
            self.peeringStatus = peeringStatus
            self.userId = userId
            self.vpcId = vpcId
            self.vpcPeeringConnectionId = vpcPeeringConnectionId
        }
    }

}

extension SecurityHubClientTypes.AwsEc2SubnetDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assignIpv6AddressOnCreation = "AssignIpv6AddressOnCreation"
        case availabilityZone = "AvailabilityZone"
        case availabilityZoneId = "AvailabilityZoneId"
        case availableIpAddressCount = "AvailableIpAddressCount"
        case cidrBlock = "CidrBlock"
        case defaultForAz = "DefaultForAz"
        case ipv6CidrBlockAssociationSet = "Ipv6CidrBlockAssociationSet"
        case mapPublicIpOnLaunch = "MapPublicIpOnLaunch"
        case ownerId = "OwnerId"
        case state = "State"
        case subnetArn = "SubnetArn"
        case subnetId = "SubnetId"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if assignIpv6AddressOnCreation != false {
            try encodeContainer.encode(assignIpv6AddressOnCreation, forKey: .assignIpv6AddressOnCreation)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let availabilityZoneId = availabilityZoneId {
            try encodeContainer.encode(availabilityZoneId, forKey: .availabilityZoneId)
        }
        if availableIpAddressCount != 0 {
            try encodeContainer.encode(availableIpAddressCount, forKey: .availableIpAddressCount)
        }
        if let cidrBlock = cidrBlock {
            try encodeContainer.encode(cidrBlock, forKey: .cidrBlock)
        }
        if defaultForAz != false {
            try encodeContainer.encode(defaultForAz, forKey: .defaultForAz)
        }
        if let ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet {
            var ipv6CidrBlockAssociationSetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6CidrBlockAssociationSet)
            for ipv6cidrblockassociationlist0 in ipv6CidrBlockAssociationSet {
                try ipv6CidrBlockAssociationSetContainer.encode(ipv6cidrblockassociationlist0)
            }
        }
        if mapPublicIpOnLaunch != false {
            try encodeContainer.encode(mapPublicIpOnLaunch, forKey: .mapPublicIpOnLaunch)
        }
        if let ownerId = ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let subnetArn = subnetArn {
            try encodeContainer.encode(subnetArn, forKey: .subnetArn)
        }
        if let subnetId = subnetId {
            try encodeContainer.encode(subnetId, forKey: .subnetId)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assignIpv6AddressOnCreationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .assignIpv6AddressOnCreation)
        assignIpv6AddressOnCreation = assignIpv6AddressOnCreationDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let availabilityZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZoneId)
        availabilityZoneId = availabilityZoneIdDecoded
        let availableIpAddressCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .availableIpAddressCount)
        availableIpAddressCount = availableIpAddressCountDecoded
        let cidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrBlock)
        cidrBlock = cidrBlockDecoded
        let defaultForAzDecoded = try containerValues.decode(Swift.Bool.self, forKey: .defaultForAz)
        defaultForAz = defaultForAzDecoded
        let mapPublicIpOnLaunchDecoded = try containerValues.decode(Swift.Bool.self, forKey: .mapPublicIpOnLaunch)
        mapPublicIpOnLaunch = mapPublicIpOnLaunchDecoded
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
        let subnetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetArn)
        subnetArn = subnetArnDecoded
        let subnetIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetId)
        subnetId = subnetIdDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let ipv6CidrBlockAssociationSetContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Ipv6CidrBlockAssociation?].self, forKey: .ipv6CidrBlockAssociationSet)
        var ipv6CidrBlockAssociationSetDecoded0:[SecurityHubClientTypes.Ipv6CidrBlockAssociation]? = nil
        if let ipv6CidrBlockAssociationSetContainer = ipv6CidrBlockAssociationSetContainer {
            ipv6CidrBlockAssociationSetDecoded0 = [SecurityHubClientTypes.Ipv6CidrBlockAssociation]()
            for structure0 in ipv6CidrBlockAssociationSetContainer {
                if let structure0 = structure0 {
                    ipv6CidrBlockAssociationSetDecoded0?.append(structure0)
                }
            }
        }
        ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSetDecoded0
    }
}

extension SecurityHubClientTypes.AwsEc2SubnetDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2SubnetDetails(assignIpv6AddressOnCreation: \(Swift.String(describing: assignIpv6AddressOnCreation)), availabilityZone: \(Swift.String(describing: availabilityZone)), availabilityZoneId: \(Swift.String(describing: availabilityZoneId)), availableIpAddressCount: \(Swift.String(describing: availableIpAddressCount)), cidrBlock: \(Swift.String(describing: cidrBlock)), defaultForAz: \(Swift.String(describing: defaultForAz)), ipv6CidrBlockAssociationSet: \(Swift.String(describing: ipv6CidrBlockAssociationSet)), mapPublicIpOnLaunch: \(Swift.String(describing: mapPublicIpOnLaunch)), ownerId: \(Swift.String(describing: ownerId)), state: \(Swift.String(describing: state)), subnetArn: \(Swift.String(describing: subnetArn)), subnetId: \(Swift.String(describing: subnetId)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about a subnet in EC2.</p>
    public struct AwsEc2SubnetDetails: Swift.Equatable {
        /// <p>Whether to assign an IPV6 address to a network interface that is created in this subnet.</p>
        public let assignIpv6AddressOnCreation: Swift.Bool
        /// <p>The Availability Zone for the subnet.</p>
        public let availabilityZone: Swift.String?
        /// <p>The identifier of the Availability Zone for the subnet.</p>
        public let availabilityZoneId: Swift.String?
        /// <p>The number of available IPV4 addresses in the subnet. Does not include addresses for stopped instances.</p>
        public let availableIpAddressCount: Swift.Int
        /// <p>The IPV4 CIDR block that is assigned to the subnet.</p>
        public let cidrBlock: Swift.String?
        /// <p>Whether this subnet is the default subnet for the Availability Zone.</p>
        public let defaultForAz: Swift.Bool
        /// <p>The IPV6 CIDR blocks that are associated with the subnet.</p>
        public let ipv6CidrBlockAssociationSet: [SecurityHubClientTypes.Ipv6CidrBlockAssociation]?
        /// <p>Whether instances in this subnet receive a public IP address.</p>
        public let mapPublicIpOnLaunch: Swift.Bool
        /// <p>The identifier of the AWS account that owns the subnet.</p>
        public let ownerId: Swift.String?
        /// <p>The current state of the subnet.</p>
        public let state: Swift.String?
        /// <p>The ARN of the subnet.</p>
        public let subnetArn: Swift.String?
        /// <p>The identifier of the subnet.</p>
        public let subnetId: Swift.String?
        /// <p>The identifier of the VPC that contains the subnet.</p>
        public let vpcId: Swift.String?

        public init (
            assignIpv6AddressOnCreation: Swift.Bool = false,
            availabilityZone: Swift.String? = nil,
            availabilityZoneId: Swift.String? = nil,
            availableIpAddressCount: Swift.Int = 0,
            cidrBlock: Swift.String? = nil,
            defaultForAz: Swift.Bool = false,
            ipv6CidrBlockAssociationSet: [SecurityHubClientTypes.Ipv6CidrBlockAssociation]? = nil,
            mapPublicIpOnLaunch: Swift.Bool = false,
            ownerId: Swift.String? = nil,
            state: Swift.String? = nil,
            subnetArn: Swift.String? = nil,
            subnetId: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.assignIpv6AddressOnCreation = assignIpv6AddressOnCreation
            self.availabilityZone = availabilityZone
            self.availabilityZoneId = availabilityZoneId
            self.availableIpAddressCount = availableIpAddressCount
            self.cidrBlock = cidrBlock
            self.defaultForAz = defaultForAz
            self.ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet
            self.mapPublicIpOnLaunch = mapPublicIpOnLaunch
            self.ownerId = ownerId
            self.state = state
            self.subnetArn = subnetArn
            self.subnetId = subnetId
            self.vpcId = vpcId
        }
    }

}

extension SecurityHubClientTypes.AwsEc2VolumeAttachment: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachTime = "AttachTime"
        case deleteOnTermination = "DeleteOnTermination"
        case instanceId = "InstanceId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachTime = attachTime {
            try encodeContainer.encode(attachTime, forKey: .attachTime)
        }
        if deleteOnTermination != false {
            try encodeContainer.encode(deleteOnTermination, forKey: .deleteOnTermination)
        }
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .attachTime)
        attachTime = attachTimeDecoded
        let deleteOnTerminationDecoded = try containerValues.decode(Swift.Bool.self, forKey: .deleteOnTermination)
        deleteOnTermination = deleteOnTerminationDecoded
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityHubClientTypes.AwsEc2VolumeAttachment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2VolumeAttachment(attachTime: \(Swift.String(describing: attachTime)), deleteOnTermination: \(Swift.String(describing: deleteOnTermination)), instanceId: \(Swift.String(describing: instanceId)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>An attachment to an AWS EC2 volume.</p>
    public struct AwsEc2VolumeAttachment: Swift.Equatable {
        /// <p>The datetime when the attachment initiated.</p>
        public let attachTime: Swift.String?
        /// <p>Whether the EBS volume is deleted when the EC2 instance is terminated.</p>
        public let deleteOnTermination: Swift.Bool
        /// <p>The identifier of the EC2 instance.</p>
        public let instanceId: Swift.String?
        /// <p>The attachment state of the volume.</p>
        public let status: Swift.String?

        public init (
            attachTime: Swift.String? = nil,
            deleteOnTermination: Swift.Bool = false,
            instanceId: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.attachTime = attachTime
            self.deleteOnTermination = deleteOnTermination
            self.instanceId = instanceId
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.AwsEc2VolumeDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachments = "Attachments"
        case createTime = "CreateTime"
        case encrypted = "Encrypted"
        case kmsKeyId = "KmsKeyId"
        case size = "Size"
        case snapshotId = "SnapshotId"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachments = attachments {
            var attachmentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachments)
            for awsec2volumeattachmentlist0 in attachments {
                try attachmentsContainer.encode(awsec2volumeattachmentlist0)
            }
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime, forKey: .createTime)
        }
        if encrypted != false {
            try encodeContainer.encode(encrypted, forKey: .encrypted)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if size != 0 {
            try encodeContainer.encode(size, forKey: .size)
        }
        if let snapshotId = snapshotId {
            try encodeContainer.encode(snapshotId, forKey: .snapshotId)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let createTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createTime)
        createTime = createTimeDecoded
        let encryptedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let sizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .size)
        size = sizeDecoded
        let snapshotIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotId)
        snapshotId = snapshotIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let attachmentsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsEc2VolumeAttachment?].self, forKey: .attachments)
        var attachmentsDecoded0:[SecurityHubClientTypes.AwsEc2VolumeAttachment]? = nil
        if let attachmentsContainer = attachmentsContainer {
            attachmentsDecoded0 = [SecurityHubClientTypes.AwsEc2VolumeAttachment]()
            for structure0 in attachmentsContainer {
                if let structure0 = structure0 {
                    attachmentsDecoded0?.append(structure0)
                }
            }
        }
        attachments = attachmentsDecoded0
    }
}

extension SecurityHubClientTypes.AwsEc2VolumeDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2VolumeDetails(attachments: \(Swift.String(describing: attachments)), createTime: \(Swift.String(describing: createTime)), encrypted: \(Swift.String(describing: encrypted)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), size: \(Swift.String(describing: size)), snapshotId: \(Swift.String(describing: snapshotId)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about an EC2 volume.</p>
    public struct AwsEc2VolumeDetails: Swift.Equatable {
        /// <p>The volume attachments.</p>
        public let attachments: [SecurityHubClientTypes.AwsEc2VolumeAttachment]?
        /// <p>Indicates when the volume was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createTime: Swift.String?
        /// <p>Whether the volume is encrypted.</p>
        public let encrypted: Swift.Bool
        /// <p>The ARN of the AWS Key Management Service (AWS KMS) customer master key (CMK) that was
        ///          used to protect the volume encryption key for the volume.</p>
        public let kmsKeyId: Swift.String?
        /// <p>The size of the volume, in GiBs.</p>
        public let size: Swift.Int
        /// <p>The snapshot from which the volume was created.</p>
        public let snapshotId: Swift.String?
        /// <p>The volume state.</p>
        public let status: Swift.String?

        public init (
            attachments: [SecurityHubClientTypes.AwsEc2VolumeAttachment]? = nil,
            createTime: Swift.String? = nil,
            encrypted: Swift.Bool = false,
            kmsKeyId: Swift.String? = nil,
            size: Swift.Int = 0,
            snapshotId: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.attachments = attachments
            self.createTime = createTime
            self.encrypted = encrypted
            self.kmsKeyId = kmsKeyId
            self.size = size
            self.snapshotId = snapshotId
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.AwsEc2VpcDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidrBlockAssociationSet = "CidrBlockAssociationSet"
        case dhcpOptionsId = "DhcpOptionsId"
        case ipv6CidrBlockAssociationSet = "Ipv6CidrBlockAssociationSet"
        case state = "State"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidrBlockAssociationSet = cidrBlockAssociationSet {
            var cidrBlockAssociationSetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cidrBlockAssociationSet)
            for cidrblockassociationlist0 in cidrBlockAssociationSet {
                try cidrBlockAssociationSetContainer.encode(cidrblockassociationlist0)
            }
        }
        if let dhcpOptionsId = dhcpOptionsId {
            try encodeContainer.encode(dhcpOptionsId, forKey: .dhcpOptionsId)
        }
        if let ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet {
            var ipv6CidrBlockAssociationSetContainer = encodeContainer.nestedUnkeyedContainer(forKey: .ipv6CidrBlockAssociationSet)
            for ipv6cidrblockassociationlist0 in ipv6CidrBlockAssociationSet {
                try ipv6CidrBlockAssociationSetContainer.encode(ipv6cidrblockassociationlist0)
            }
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrBlockAssociationSetContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.CidrBlockAssociation?].self, forKey: .cidrBlockAssociationSet)
        var cidrBlockAssociationSetDecoded0:[SecurityHubClientTypes.CidrBlockAssociation]? = nil
        if let cidrBlockAssociationSetContainer = cidrBlockAssociationSetContainer {
            cidrBlockAssociationSetDecoded0 = [SecurityHubClientTypes.CidrBlockAssociation]()
            for structure0 in cidrBlockAssociationSetContainer {
                if let structure0 = structure0 {
                    cidrBlockAssociationSetDecoded0?.append(structure0)
                }
            }
        }
        cidrBlockAssociationSet = cidrBlockAssociationSetDecoded0
        let ipv6CidrBlockAssociationSetContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Ipv6CidrBlockAssociation?].self, forKey: .ipv6CidrBlockAssociationSet)
        var ipv6CidrBlockAssociationSetDecoded0:[SecurityHubClientTypes.Ipv6CidrBlockAssociation]? = nil
        if let ipv6CidrBlockAssociationSetContainer = ipv6CidrBlockAssociationSetContainer {
            ipv6CidrBlockAssociationSetDecoded0 = [SecurityHubClientTypes.Ipv6CidrBlockAssociation]()
            for structure0 in ipv6CidrBlockAssociationSetContainer {
                if let structure0 = structure0 {
                    ipv6CidrBlockAssociationSetDecoded0?.append(structure0)
                }
            }
        }
        ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSetDecoded0
        let dhcpOptionsIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dhcpOptionsId)
        dhcpOptionsId = dhcpOptionsIdDecoded
        let stateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .state)
        state = stateDecoded
    }
}

extension SecurityHubClientTypes.AwsEc2VpcDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsEc2VpcDetails(cidrBlockAssociationSet: \(Swift.String(describing: cidrBlockAssociationSet)), dhcpOptionsId: \(Swift.String(describing: dhcpOptionsId)), ipv6CidrBlockAssociationSet: \(Swift.String(describing: ipv6CidrBlockAssociationSet)), state: \(Swift.String(describing: state)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about an EC2 VPC.</p>
    public struct AwsEc2VpcDetails: Swift.Equatable {
        /// <p>Information about the IPv4 CIDR blocks associated with the VPC.</p>
        public let cidrBlockAssociationSet: [SecurityHubClientTypes.CidrBlockAssociation]?
        /// <p>The identifier of the set of Dynamic Host Configuration Protocol (DHCP) options that are
        ///          associated with the VPC. If the default options are associated with the VPC, then this is
        ///          default.</p>
        public let dhcpOptionsId: Swift.String?
        /// <p>Information about the IPv6 CIDR blocks associated with the VPC.</p>
        public let ipv6CidrBlockAssociationSet: [SecurityHubClientTypes.Ipv6CidrBlockAssociation]?
        /// <p>The current state of the VPC.</p>
        public let state: Swift.String?

        public init (
            cidrBlockAssociationSet: [SecurityHubClientTypes.CidrBlockAssociation]? = nil,
            dhcpOptionsId: Swift.String? = nil,
            ipv6CidrBlockAssociationSet: [SecurityHubClientTypes.Ipv6CidrBlockAssociation]? = nil,
            state: Swift.String? = nil
        )
        {
            self.cidrBlockAssociationSet = cidrBlockAssociationSet
            self.dhcpOptionsId = dhcpOptionsId
            self.ipv6CidrBlockAssociationSet = ipv6CidrBlockAssociationSet
            self.state = state
        }
    }

}

extension SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applicationName = "ApplicationName"
        case cname = "Cname"
        case dateCreated = "DateCreated"
        case dateUpdated = "DateUpdated"
        case description = "Description"
        case endpointUrl = "EndpointUrl"
        case environmentArn = "EnvironmentArn"
        case environmentId = "EnvironmentId"
        case environmentLinks = "EnvironmentLinks"
        case environmentName = "EnvironmentName"
        case optionSettings = "OptionSettings"
        case platformArn = "PlatformArn"
        case solutionStackName = "SolutionStackName"
        case status = "Status"
        case tier = "Tier"
        case versionLabel = "VersionLabel"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applicationName = applicationName {
            try encodeContainer.encode(applicationName, forKey: .applicationName)
        }
        if let cname = cname {
            try encodeContainer.encode(cname, forKey: .cname)
        }
        if let dateCreated = dateCreated {
            try encodeContainer.encode(dateCreated, forKey: .dateCreated)
        }
        if let dateUpdated = dateUpdated {
            try encodeContainer.encode(dateUpdated, forKey: .dateUpdated)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let endpointUrl = endpointUrl {
            try encodeContainer.encode(endpointUrl, forKey: .endpointUrl)
        }
        if let environmentArn = environmentArn {
            try encodeContainer.encode(environmentArn, forKey: .environmentArn)
        }
        if let environmentId = environmentId {
            try encodeContainer.encode(environmentId, forKey: .environmentId)
        }
        if let environmentLinks = environmentLinks {
            var environmentLinksContainer = encodeContainer.nestedUnkeyedContainer(forKey: .environmentLinks)
            for awselasticbeanstalkenvironmentenvironmentlinks0 in environmentLinks {
                try environmentLinksContainer.encode(awselasticbeanstalkenvironmentenvironmentlinks0)
            }
        }
        if let environmentName = environmentName {
            try encodeContainer.encode(environmentName, forKey: .environmentName)
        }
        if let optionSettings = optionSettings {
            var optionSettingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .optionSettings)
            for awselasticbeanstalkenvironmentoptionsettings0 in optionSettings {
                try optionSettingsContainer.encode(awselasticbeanstalkenvironmentoptionsettings0)
            }
        }
        if let platformArn = platformArn {
            try encodeContainer.encode(platformArn, forKey: .platformArn)
        }
        if let solutionStackName = solutionStackName {
            try encodeContainer.encode(solutionStackName, forKey: .solutionStackName)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let tier = tier {
            try encodeContainer.encode(tier, forKey: .tier)
        }
        if let versionLabel = versionLabel {
            try encodeContainer.encode(versionLabel, forKey: .versionLabel)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applicationNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applicationName)
        applicationName = applicationNameDecoded
        let cnameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cname)
        cname = cnameDecoded
        let dateCreatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dateCreated)
        dateCreated = dateCreatedDecoded
        let dateUpdatedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dateUpdated)
        dateUpdated = dateUpdatedDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let endpointUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpointUrl)
        endpointUrl = endpointUrlDecoded
        let environmentArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentArn)
        environmentArn = environmentArnDecoded
        let environmentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentId)
        environmentId = environmentIdDecoded
        let environmentLinksContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentEnvironmentLink?].self, forKey: .environmentLinks)
        var environmentLinksDecoded0:[SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentEnvironmentLink]? = nil
        if let environmentLinksContainer = environmentLinksContainer {
            environmentLinksDecoded0 = [SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentEnvironmentLink]()
            for structure0 in environmentLinksContainer {
                if let structure0 = structure0 {
                    environmentLinksDecoded0?.append(structure0)
                }
            }
        }
        environmentLinks = environmentLinksDecoded0
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let optionSettingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentOptionSetting?].self, forKey: .optionSettings)
        var optionSettingsDecoded0:[SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentOptionSetting]? = nil
        if let optionSettingsContainer = optionSettingsContainer {
            optionSettingsDecoded0 = [SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentOptionSetting]()
            for structure0 in optionSettingsContainer {
                if let structure0 = structure0 {
                    optionSettingsDecoded0?.append(structure0)
                }
            }
        }
        optionSettings = optionSettingsDecoded0
        let platformArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .platformArn)
        platformArn = platformArnDecoded
        let solutionStackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .solutionStackName)
        solutionStackName = solutionStackNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let tierDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentTier.self, forKey: .tier)
        tier = tierDecoded
        let versionLabelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionLabel)
        versionLabel = versionLabelDecoded
    }
}

extension SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElasticBeanstalkEnvironmentDetails(applicationName: \(Swift.String(describing: applicationName)), cname: \(Swift.String(describing: cname)), dateCreated: \(Swift.String(describing: dateCreated)), dateUpdated: \(Swift.String(describing: dateUpdated)), description: \(Swift.String(describing: description)), endpointUrl: \(Swift.String(describing: endpointUrl)), environmentArn: \(Swift.String(describing: environmentArn)), environmentId: \(Swift.String(describing: environmentId)), environmentLinks: \(Swift.String(describing: environmentLinks)), environmentName: \(Swift.String(describing: environmentName)), optionSettings: \(Swift.String(describing: optionSettings)), platformArn: \(Swift.String(describing: platformArn)), solutionStackName: \(Swift.String(describing: solutionStackName)), status: \(Swift.String(describing: status)), tier: \(Swift.String(describing: tier)), versionLabel: \(Swift.String(describing: versionLabel)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains details about an Elastic Beanstalk environment.</p>
    public struct AwsElasticBeanstalkEnvironmentDetails: Swift.Equatable {
        /// <p>The name of the application that is associated with the environment.</p>
        public let applicationName: Swift.String?
        /// <p>The URL to the CNAME for this environment.</p>
        public let cname: Swift.String?
        /// <p>The creation date for this environment.</p>
        public let dateCreated: Swift.String?
        /// <p>The date when this environment was last modified.</p>
        public let dateUpdated: Swift.String?
        /// <p>A description of the environment.</p>
        public let description: Swift.String?
        /// <p>For load-balanced, autoscaling environments, the URL to the load balancer. For single-instance environments, the IP address of the instance.</p>
        public let endpointUrl: Swift.String?
        /// <p>The ARN of the environment.</p>
        public let environmentArn: Swift.String?
        /// <p>The identifier of the environment.</p>
        public let environmentId: Swift.String?
        /// <p>Links to other environments in the same group.</p>
        public let environmentLinks: [SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentEnvironmentLink]?
        /// <p>The name of the environment.</p>
        public let environmentName: Swift.String?
        /// <p>The configuration setting for the environment.</p>
        public let optionSettings: [SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentOptionSetting]?
        /// <p>The ARN of the platform version for the environment.</p>
        public let platformArn: Swift.String?
        /// <p>The name of the solution stack that is deployed with the environment.</p>
        public let solutionStackName: Swift.String?
        /// <p>The current operational status of the environment.</p>
        public let status: Swift.String?
        /// <p>The tier of the environment.</p>
        public let tier: SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentTier?
        /// <p>The application version of the environment.</p>
        public let versionLabel: Swift.String?

        public init (
            applicationName: Swift.String? = nil,
            cname: Swift.String? = nil,
            dateCreated: Swift.String? = nil,
            dateUpdated: Swift.String? = nil,
            description: Swift.String? = nil,
            endpointUrl: Swift.String? = nil,
            environmentArn: Swift.String? = nil,
            environmentId: Swift.String? = nil,
            environmentLinks: [SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentEnvironmentLink]? = nil,
            environmentName: Swift.String? = nil,
            optionSettings: [SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentOptionSetting]? = nil,
            platformArn: Swift.String? = nil,
            solutionStackName: Swift.String? = nil,
            status: Swift.String? = nil,
            tier: SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentTier? = nil,
            versionLabel: Swift.String? = nil
        )
        {
            self.applicationName = applicationName
            self.cname = cname
            self.dateCreated = dateCreated
            self.dateUpdated = dateUpdated
            self.description = description
            self.endpointUrl = endpointUrl
            self.environmentArn = environmentArn
            self.environmentId = environmentId
            self.environmentLinks = environmentLinks
            self.environmentName = environmentName
            self.optionSettings = optionSettings
            self.platformArn = platformArn
            self.solutionStackName = solutionStackName
            self.status = status
            self.tier = tier
            self.versionLabel = versionLabel
        }
    }

}

extension SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentEnvironmentLink: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case environmentName = "EnvironmentName"
        case linkName = "LinkName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let environmentName = environmentName {
            try encodeContainer.encode(environmentName, forKey: .environmentName)
        }
        if let linkName = linkName {
            try encodeContainer.encode(linkName, forKey: .linkName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let environmentNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .environmentName)
        environmentName = environmentNameDecoded
        let linkNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .linkName)
        linkName = linkNameDecoded
    }
}

extension SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentEnvironmentLink: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElasticBeanstalkEnvironmentEnvironmentLink(environmentName: \(Swift.String(describing: environmentName)), linkName: \(Swift.String(describing: linkName)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about a link to another environment that is in the same group.</p>
    public struct AwsElasticBeanstalkEnvironmentEnvironmentLink: Swift.Equatable {
        /// <p>The name of the linked environment.</p>
        public let environmentName: Swift.String?
        /// <p>The name of the environment link.</p>
        public let linkName: Swift.String?

        public init (
            environmentName: Swift.String? = nil,
            linkName: Swift.String? = nil
        )
        {
            self.environmentName = environmentName
            self.linkName = linkName
        }
    }

}

extension SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentOptionSetting: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case namespace = "Namespace"
        case optionName = "OptionName"
        case resourceName = "ResourceName"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let namespace = namespace {
            try encodeContainer.encode(namespace, forKey: .namespace)
        }
        if let optionName = optionName {
            try encodeContainer.encode(optionName, forKey: .optionName)
        }
        if let resourceName = resourceName {
            try encodeContainer.encode(resourceName, forKey: .resourceName)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let namespaceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .namespace)
        namespace = namespaceDecoded
        let optionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optionName)
        optionName = optionNameDecoded
        let resourceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceName)
        resourceName = resourceNameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentOptionSetting: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElasticBeanstalkEnvironmentOptionSetting(namespace: \(Swift.String(describing: namespace)), optionName: \(Swift.String(describing: optionName)), resourceName: \(Swift.String(describing: resourceName)), value: \(Swift.String(describing: value)))"}
}

extension SecurityHubClientTypes {
    /// <p>A configuration option setting for the environment.</p>
    public struct AwsElasticBeanstalkEnvironmentOptionSetting: Swift.Equatable {
        /// <p>The type of resource that the configuration option is associated with.</p>
        public let namespace: Swift.String?
        /// <p>The name of the option.</p>
        public let optionName: Swift.String?
        /// <p>The name of the resource.</p>
        public let resourceName: Swift.String?
        /// <p>The value of the configuration setting.</p>
        public let value: Swift.String?

        public init (
            namespace: Swift.String? = nil,
            optionName: Swift.String? = nil,
            resourceName: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.namespace = namespace
            self.optionName = optionName
            self.resourceName = resourceName
            self.value = value
        }
    }

}

extension SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentTier: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case type = "Type"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentTier: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElasticBeanstalkEnvironmentTier(name: \(Swift.String(describing: name)), type: \(Swift.String(describing: type)), version: \(Swift.String(describing: version)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about the tier of the environment.</p>
    public struct AwsElasticBeanstalkEnvironmentTier: Swift.Equatable {
        /// <p>The name of the environment tier.</p>
        public let name: Swift.String?
        /// <p>The type of environment tier.</p>
        public let type: Swift.String?
        /// <p>The version of the environment tier.</p>
        public let version: Swift.String?

        public init (
            name: Swift.String? = nil,
            type: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.name = name
            self.type = type
            self.version = version
        }
    }

}

extension SecurityHubClientTypes.AwsElasticsearchDomainDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessPolicies = "AccessPolicies"
        case domainEndpointOptions = "DomainEndpointOptions"
        case domainId = "DomainId"
        case domainName = "DomainName"
        case elasticsearchVersion = "ElasticsearchVersion"
        case encryptionAtRestOptions = "EncryptionAtRestOptions"
        case endpoint = "Endpoint"
        case endpoints = "Endpoints"
        case nodeToNodeEncryptionOptions = "NodeToNodeEncryptionOptions"
        case vPCOptions = "VPCOptions"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessPolicies = accessPolicies {
            try encodeContainer.encode(accessPolicies, forKey: .accessPolicies)
        }
        if let domainEndpointOptions = domainEndpointOptions {
            try encodeContainer.encode(domainEndpointOptions, forKey: .domainEndpointOptions)
        }
        if let domainId = domainId {
            try encodeContainer.encode(domainId, forKey: .domainId)
        }
        if let domainName = domainName {
            try encodeContainer.encode(domainName, forKey: .domainName)
        }
        if let elasticsearchVersion = elasticsearchVersion {
            try encodeContainer.encode(elasticsearchVersion, forKey: .elasticsearchVersion)
        }
        if let encryptionAtRestOptions = encryptionAtRestOptions {
            try encodeContainer.encode(encryptionAtRestOptions, forKey: .encryptionAtRestOptions)
        }
        if let endpoint = endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let endpoints = endpoints {
            var endpointsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .endpoints)
            for (dictKey0, fieldmap0) in endpoints {
                try endpointsContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions {
            try encodeContainer.encode(nodeToNodeEncryptionOptions, forKey: .nodeToNodeEncryptionOptions)
        }
        if let vPCOptions = vPCOptions {
            try encodeContainer.encode(vPCOptions, forKey: .vPCOptions)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessPoliciesDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessPolicies)
        accessPolicies = accessPoliciesDecoded
        let domainEndpointOptionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElasticsearchDomainDomainEndpointOptions.self, forKey: .domainEndpointOptions)
        domainEndpointOptions = domainEndpointOptionsDecoded
        let domainIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainId)
        domainId = domainIdDecoded
        let domainNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domainName)
        domainName = domainNameDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let endpointsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .endpoints)
        var endpointsDecoded0: [Swift.String:Swift.String]? = nil
        if let endpointsContainer = endpointsContainer {
            endpointsDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in endpointsContainer {
                if let nonemptystring0 = nonemptystring0 {
                    endpointsDecoded0?[key0] = nonemptystring0
                }
            }
        }
        endpoints = endpointsDecoded0
        let elasticsearchVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticsearchVersion)
        elasticsearchVersion = elasticsearchVersionDecoded
        let encryptionAtRestOptionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElasticsearchDomainEncryptionAtRestOptions.self, forKey: .encryptionAtRestOptions)
        encryptionAtRestOptions = encryptionAtRestOptionsDecoded
        let nodeToNodeEncryptionOptionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElasticsearchDomainNodeToNodeEncryptionOptions.self, forKey: .nodeToNodeEncryptionOptions)
        nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptionsDecoded
        let vPCOptionsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElasticsearchDomainVPCOptions.self, forKey: .vPCOptions)
        vPCOptions = vPCOptionsDecoded
    }
}

extension SecurityHubClientTypes.AwsElasticsearchDomainDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElasticsearchDomainDetails(accessPolicies: \(Swift.String(describing: accessPolicies)), domainEndpointOptions: \(Swift.String(describing: domainEndpointOptions)), domainId: \(Swift.String(describing: domainId)), domainName: \(Swift.String(describing: domainName)), elasticsearchVersion: \(Swift.String(describing: elasticsearchVersion)), encryptionAtRestOptions: \(Swift.String(describing: encryptionAtRestOptions)), endpoint: \(Swift.String(describing: endpoint)), endpoints: \(Swift.String(describing: endpoints)), nodeToNodeEncryptionOptions: \(Swift.String(describing: nodeToNodeEncryptionOptions)), vPCOptions: \(Swift.String(describing: vPCOptions)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about an Elasticsearch domain.</p>
    public struct AwsElasticsearchDomainDetails: Swift.Equatable {
        /// <p>IAM policy document specifying the access policies for the new Amazon ES domain.</p>
        public let accessPolicies: Swift.String?
        /// <p>Additional options for the domain endpoint.</p>
        public let domainEndpointOptions: SecurityHubClientTypes.AwsElasticsearchDomainDomainEndpointOptions?
        /// <p>Unique identifier for an Amazon ES domain.</p>
        public let domainId: Swift.String?
        /// <p>Name of an Amazon ES domain.</p>
        ///          <p>Domain names are unique across all domains owned by the same account within an AWS
        ///          Region.</p>
        ///          <p>Domain names must start with a lowercase letter and must be between 3 and 28
        ///          characters.</p>
        ///          <p>Valid characters are a-z (lowercase only), 0-9, and – (hyphen). </p>
        public let domainName: Swift.String?
        /// <p>Elasticsearch version.</p>
        public let elasticsearchVersion: Swift.String?
        /// <p>Details about the configuration for encryption at rest.</p>
        public let encryptionAtRestOptions: SecurityHubClientTypes.AwsElasticsearchDomainEncryptionAtRestOptions?
        /// <p>Domain-specific endpoint used to submit index, search, and data upload requests to an
        ///          Amazon ES domain.</p>
        ///          <p>The endpoint is a service URL. </p>
        public let endpoint: Swift.String?
        /// <p>The key-value pair that exists if the Amazon ES domain uses VPC endpoints.</p>
        public let endpoints: [Swift.String:Swift.String]?
        /// <p>Details about the configuration for node-to-node encryption.</p>
        public let nodeToNodeEncryptionOptions: SecurityHubClientTypes.AwsElasticsearchDomainNodeToNodeEncryptionOptions?
        /// <p>Information that Amazon ES derives based on <code>VPCOptions</code> for the
        ///          domain.</p>
        public let vPCOptions: SecurityHubClientTypes.AwsElasticsearchDomainVPCOptions?

        public init (
            accessPolicies: Swift.String? = nil,
            domainEndpointOptions: SecurityHubClientTypes.AwsElasticsearchDomainDomainEndpointOptions? = nil,
            domainId: Swift.String? = nil,
            domainName: Swift.String? = nil,
            elasticsearchVersion: Swift.String? = nil,
            encryptionAtRestOptions: SecurityHubClientTypes.AwsElasticsearchDomainEncryptionAtRestOptions? = nil,
            endpoint: Swift.String? = nil,
            endpoints: [Swift.String:Swift.String]? = nil,
            nodeToNodeEncryptionOptions: SecurityHubClientTypes.AwsElasticsearchDomainNodeToNodeEncryptionOptions? = nil,
            vPCOptions: SecurityHubClientTypes.AwsElasticsearchDomainVPCOptions? = nil
        )
        {
            self.accessPolicies = accessPolicies
            self.domainEndpointOptions = domainEndpointOptions
            self.domainId = domainId
            self.domainName = domainName
            self.elasticsearchVersion = elasticsearchVersion
            self.encryptionAtRestOptions = encryptionAtRestOptions
            self.endpoint = endpoint
            self.endpoints = endpoints
            self.nodeToNodeEncryptionOptions = nodeToNodeEncryptionOptions
            self.vPCOptions = vPCOptions
        }
    }

}

extension SecurityHubClientTypes.AwsElasticsearchDomainDomainEndpointOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enforceHTTPS = "EnforceHTTPS"
        case tLSSecurityPolicy = "TLSSecurityPolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enforceHTTPS != false {
            try encodeContainer.encode(enforceHTTPS, forKey: .enforceHTTPS)
        }
        if let tLSSecurityPolicy = tLSSecurityPolicy {
            try encodeContainer.encode(tLSSecurityPolicy, forKey: .tLSSecurityPolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enforceHTTPSDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enforceHTTPS)
        enforceHTTPS = enforceHTTPSDecoded
        let tLSSecurityPolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tLSSecurityPolicy)
        tLSSecurityPolicy = tLSSecurityPolicyDecoded
    }
}

extension SecurityHubClientTypes.AwsElasticsearchDomainDomainEndpointOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElasticsearchDomainDomainEndpointOptions(enforceHTTPS: \(Swift.String(describing: enforceHTTPS)), tLSSecurityPolicy: \(Swift.String(describing: tLSSecurityPolicy)))"}
}

extension SecurityHubClientTypes {
    /// <p>Additional options for the domain endpoint, such as whether to require HTTPS for all
    ///          traffic.</p>
    public struct AwsElasticsearchDomainDomainEndpointOptions: Swift.Equatable {
        /// <p>Whether to require that all traffic to the domain arrive over HTTPS.</p>
        public let enforceHTTPS: Swift.Bool
        /// <p>The TLS security policy to apply to the HTTPS endpoint of the Elasticsearch
        ///          domain.</p>
        ///          <p>Valid values:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>Policy-Min-TLS-1-0-2019-07</code>, which supports TLSv1.0 and higher</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Policy-Min-TLS-1-2-2019-07</code>, which only supports TLSv1.2</p>
        ///             </li>
        ///          </ul>
        public let tLSSecurityPolicy: Swift.String?

        public init (
            enforceHTTPS: Swift.Bool = false,
            tLSSecurityPolicy: Swift.String? = nil
        )
        {
            self.enforceHTTPS = enforceHTTPS
            self.tLSSecurityPolicy = tLSSecurityPolicy
        }
    }

}

extension SecurityHubClientTypes.AwsElasticsearchDomainEncryptionAtRestOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case kmsKeyId = "KmsKeyId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
    }
}

extension SecurityHubClientTypes.AwsElasticsearchDomainEncryptionAtRestOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElasticsearchDomainEncryptionAtRestOptions(enabled: \(Swift.String(describing: enabled)), kmsKeyId: \(Swift.String(describing: kmsKeyId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about the configuration for encryption at rest.</p>
    public struct AwsElasticsearchDomainEncryptionAtRestOptions: Swift.Equatable {
        /// <p>Whether encryption at rest is enabled.</p>
        public let enabled: Swift.Bool
        /// <p>The KMS key ID. Takes the form 1a2a3a4-1a2a-3a4a-5a6a-1a2a3a4a5a6a.</p>
        public let kmsKeyId: Swift.String?

        public init (
            enabled: Swift.Bool = false,
            kmsKeyId: Swift.String? = nil
        )
        {
            self.enabled = enabled
            self.kmsKeyId = kmsKeyId
        }
    }

}

extension SecurityHubClientTypes.AwsElasticsearchDomainNodeToNodeEncryptionOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension SecurityHubClientTypes.AwsElasticsearchDomainNodeToNodeEncryptionOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElasticsearchDomainNodeToNodeEncryptionOptions(enabled: \(Swift.String(describing: enabled)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about the configuration for node-to-node encryption.</p>
    public struct AwsElasticsearchDomainNodeToNodeEncryptionOptions: Swift.Equatable {
        /// <p>Whether node-to-node encryption is enabled.</p>
        public let enabled: Swift.Bool

        public init (
            enabled: Swift.Bool = false
        )
        {
            self.enabled = enabled
        }
    }

}

extension SecurityHubClientTypes.AwsElasticsearchDomainVPCOptions: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case securityGroupIds = "SecurityGroupIds"
        case subnetIds = "SubnetIds"
        case vPCId = "VPCId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for nonemptystringlist0 in availabilityZones {
                try availabilityZonesContainer.encode(nonemptystringlist0)
            }
        }
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for nonemptystringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(nonemptystringlist0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for nonemptystringlist0 in subnetIds {
                try subnetIdsContainer.encode(nonemptystringlist0)
            }
        }
        if let vPCId = vPCId {
            try encodeContainer.encode(vPCId, forKey: .vPCId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let vPCIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vPCId)
        vPCId = vPCIdDecoded
    }
}

extension SecurityHubClientTypes.AwsElasticsearchDomainVPCOptions: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElasticsearchDomainVPCOptions(availabilityZones: \(Swift.String(describing: availabilityZones)), securityGroupIds: \(Swift.String(describing: securityGroupIds)), subnetIds: \(Swift.String(describing: subnetIds)), vPCId: \(Swift.String(describing: vPCId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information that Amazon ES derives based on <code>VPCOptions</code> for the
    ///          domain.</p>
    public struct AwsElasticsearchDomainVPCOptions: Swift.Equatable {
        /// <p>The list of Availability Zones associated with the VPC subnets.</p>
        public let availabilityZones: [Swift.String]?
        /// <p>The list of security group IDs associated with the VPC endpoints for the domain.</p>
        public let securityGroupIds: [Swift.String]?
        /// <p>A list of subnet IDs associated with the VPC endpoints for the domain.</p>
        public let subnetIds: [Swift.String]?
        /// <p>ID for the VPC.</p>
        public let vPCId: Swift.String?

        public init (
            availabilityZones: [Swift.String]? = nil,
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil,
            vPCId: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vPCId = vPCId
        }
    }

}

extension SecurityHubClientTypes.AwsElbAppCookieStickinessPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cookieName = "CookieName"
        case policyName = "PolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cookieName = cookieName {
            try encodeContainer.encode(cookieName, forKey: .cookieName)
        }
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cookieNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cookieName)
        cookieName = cookieNameDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
    }
}

extension SecurityHubClientTypes.AwsElbAppCookieStickinessPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbAppCookieStickinessPolicy(cookieName: \(Swift.String(describing: cookieName)), policyName: \(Swift.String(describing: policyName)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about a stickiness policy that was created using
    ///             <code>CreateAppCookieStickinessPolicy</code>.</p>
    public struct AwsElbAppCookieStickinessPolicy: Swift.Equatable {
        /// <p>The name of the application cookie used for stickiness.</p>
        public let cookieName: Swift.String?
        /// <p>The mnemonic name for the policy being created. The name must be unique within the set
        ///          of policies for the load balancer.</p>
        public let policyName: Swift.String?

        public init (
            cookieName: Swift.String? = nil,
            policyName: Swift.String? = nil
        )
        {
            self.cookieName = cookieName
            self.policyName = policyName
        }
    }

}

extension SecurityHubClientTypes.AwsElbLbCookieStickinessPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cookieExpirationPeriod = "CookieExpirationPeriod"
        case policyName = "PolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if cookieExpirationPeriod != 0 {
            try encodeContainer.encode(cookieExpirationPeriod, forKey: .cookieExpirationPeriod)
        }
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cookieExpirationPeriodDecoded = try containerValues.decode(Swift.Int.self, forKey: .cookieExpirationPeriod)
        cookieExpirationPeriod = cookieExpirationPeriodDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
    }
}

extension SecurityHubClientTypes.AwsElbLbCookieStickinessPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbLbCookieStickinessPolicy(cookieExpirationPeriod: \(Swift.String(describing: cookieExpirationPeriod)), policyName: \(Swift.String(describing: policyName)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about a stickiness policy that was created using
    ///             <code>CreateLBCookieStickinessPolicy</code>.</p>
    public struct AwsElbLbCookieStickinessPolicy: Swift.Equatable {
        /// <p>The amount of time, in seconds, after which the cookie is considered stale. If an
        ///          expiration period is not specified, the stickiness session lasts for the duration of the
        ///          browser session.</p>
        public let cookieExpirationPeriod: Swift.Int
        /// <p>The name of the policy. The name must be unique within the set of policies for the load
        ///          balancer.</p>
        public let policyName: Swift.String?

        public init (
            cookieExpirationPeriod: Swift.Int = 0,
            policyName: Swift.String? = nil
        )
        {
            self.cookieExpirationPeriod = cookieExpirationPeriod
            self.policyName = policyName
        }
    }

}

extension SecurityHubClientTypes.AwsElbLoadBalancerAccessLog: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case emitInterval = "EmitInterval"
        case enabled = "Enabled"
        case s3BucketName = "S3BucketName"
        case s3BucketPrefix = "S3BucketPrefix"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if emitInterval != 0 {
            try encodeContainer.encode(emitInterval, forKey: .emitInterval)
        }
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if let s3BucketName = s3BucketName {
            try encodeContainer.encode(s3BucketName, forKey: .s3BucketName)
        }
        if let s3BucketPrefix = s3BucketPrefix {
            try encodeContainer.encode(s3BucketPrefix, forKey: .s3BucketPrefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let emitIntervalDecoded = try containerValues.decode(Swift.Int.self, forKey: .emitInterval)
        emitInterval = emitIntervalDecoded
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let s3BucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketName)
        s3BucketName = s3BucketNameDecoded
        let s3BucketPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3BucketPrefix)
        s3BucketPrefix = s3BucketPrefixDecoded
    }
}

extension SecurityHubClientTypes.AwsElbLoadBalancerAccessLog: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbLoadBalancerAccessLog(emitInterval: \(Swift.String(describing: emitInterval)), enabled: \(Swift.String(describing: enabled)), s3BucketName: \(Swift.String(describing: s3BucketName)), s3BucketPrefix: \(Swift.String(describing: s3BucketPrefix)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about the access log configuration for the load balancer.</p>
    public struct AwsElbLoadBalancerAccessLog: Swift.Equatable {
        /// <p>The interval in minutes for publishing the access logs.</p>
        ///          <p>You can publish access logs either every 5 minutes or every 60 minutes.</p>
        public let emitInterval: Swift.Int
        /// <p>Indicates whether access logs are enabled for the load balancer.</p>
        public let enabled: Swift.Bool
        /// <p>The name of the S3 bucket where the access logs are stored.</p>
        public let s3BucketName: Swift.String?
        /// <p>The logical hierarchy that was created for the S3 bucket.</p>
        ///          <p>If a prefix is not provided, the log is placed at the root level of the bucket.</p>
        public let s3BucketPrefix: Swift.String?

        public init (
            emitInterval: Swift.Int = 0,
            enabled: Swift.Bool = false,
            s3BucketName: Swift.String? = nil,
            s3BucketPrefix: Swift.String? = nil
        )
        {
            self.emitInterval = emitInterval
            self.enabled = enabled
            self.s3BucketName = s3BucketName
            self.s3BucketPrefix = s3BucketPrefix
        }
    }

}

extension SecurityHubClientTypes.AwsElbLoadBalancerAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessLog = "AccessLog"
        case connectionDraining = "ConnectionDraining"
        case connectionSettings = "ConnectionSettings"
        case crossZoneLoadBalancing = "CrossZoneLoadBalancing"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessLog = accessLog {
            try encodeContainer.encode(accessLog, forKey: .accessLog)
        }
        if let connectionDraining = connectionDraining {
            try encodeContainer.encode(connectionDraining, forKey: .connectionDraining)
        }
        if let connectionSettings = connectionSettings {
            try encodeContainer.encode(connectionSettings, forKey: .connectionSettings)
        }
        if let crossZoneLoadBalancing = crossZoneLoadBalancing {
            try encodeContainer.encode(crossZoneLoadBalancing, forKey: .crossZoneLoadBalancing)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accessLogDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerAccessLog.self, forKey: .accessLog)
        accessLog = accessLogDecoded
        let connectionDrainingDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerConnectionDraining.self, forKey: .connectionDraining)
        connectionDraining = connectionDrainingDecoded
        let connectionSettingsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerConnectionSettings.self, forKey: .connectionSettings)
        connectionSettings = connectionSettingsDecoded
        let crossZoneLoadBalancingDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerCrossZoneLoadBalancing.self, forKey: .crossZoneLoadBalancing)
        crossZoneLoadBalancing = crossZoneLoadBalancingDecoded
    }
}

extension SecurityHubClientTypes.AwsElbLoadBalancerAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbLoadBalancerAttributes(accessLog: \(Swift.String(describing: accessLog)), connectionDraining: \(Swift.String(describing: connectionDraining)), connectionSettings: \(Swift.String(describing: connectionSettings)), crossZoneLoadBalancing: \(Swift.String(describing: crossZoneLoadBalancing)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains attributes for the load balancer.</p>
    public struct AwsElbLoadBalancerAttributes: Swift.Equatable {
        /// <p>Information about the access log configuration for the load balancer.</p>
        ///          <p>If the access log is enabled, the load balancer captures detailed information about all
        ///          requests. It delivers the information to a specified S3 bucket.</p>
        public let accessLog: SecurityHubClientTypes.AwsElbLoadBalancerAccessLog?
        /// <p>Information about the connection draining configuration for the load balancer.</p>
        ///          <p>If connection draining is enabled, the load balancer allows existing requests to
        ///          complete before it shifts traffic away from a deregistered or unhealthy instance.</p>
        public let connectionDraining: SecurityHubClientTypes.AwsElbLoadBalancerConnectionDraining?
        /// <p>Connection settings for the load balancer.</p>
        ///          <p>If an idle timeout is configured, the load balancer allows connections to remain idle
        ///          for the specified duration. When a connection is idle, no data is sent over the
        ///          connection.</p>
        public let connectionSettings: SecurityHubClientTypes.AwsElbLoadBalancerConnectionSettings?
        /// <p>Cross-zone load balancing settings for the load balancer.</p>
        ///          <p>If cross-zone load balancing is enabled, the load balancer routes the request traffic
        ///          evenly across all instances regardless of the Availability Zones.</p>
        public let crossZoneLoadBalancing: SecurityHubClientTypes.AwsElbLoadBalancerCrossZoneLoadBalancing?

        public init (
            accessLog: SecurityHubClientTypes.AwsElbLoadBalancerAccessLog? = nil,
            connectionDraining: SecurityHubClientTypes.AwsElbLoadBalancerConnectionDraining? = nil,
            connectionSettings: SecurityHubClientTypes.AwsElbLoadBalancerConnectionSettings? = nil,
            crossZoneLoadBalancing: SecurityHubClientTypes.AwsElbLoadBalancerCrossZoneLoadBalancing? = nil
        )
        {
            self.accessLog = accessLog
            self.connectionDraining = connectionDraining
            self.connectionSettings = connectionSettings
            self.crossZoneLoadBalancing = crossZoneLoadBalancing
        }
    }

}

extension SecurityHubClientTypes.AwsElbLoadBalancerBackendServerDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instancePort = "InstancePort"
        case policyNames = "PolicyNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if instancePort != 0 {
            try encodeContainer.encode(instancePort, forKey: .instancePort)
        }
        if let policyNames = policyNames {
            var policyNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policyNames)
            for stringlist0 in policyNames {
                try policyNamesContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancePortDecoded = try containerValues.decode(Swift.Int.self, forKey: .instancePort)
        instancePort = instancePortDecoded
        let policyNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .policyNames)
        var policyNamesDecoded0:[Swift.String]? = nil
        if let policyNamesContainer = policyNamesContainer {
            policyNamesDecoded0 = [Swift.String]()
            for string0 in policyNamesContainer {
                if let string0 = string0 {
                    policyNamesDecoded0?.append(string0)
                }
            }
        }
        policyNames = policyNamesDecoded0
    }
}

extension SecurityHubClientTypes.AwsElbLoadBalancerBackendServerDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbLoadBalancerBackendServerDescription(instancePort: \(Swift.String(describing: instancePort)), policyNames: \(Swift.String(describing: policyNames)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about the configuration of an EC2 instance for the load
    ///          balancer.</p>
    public struct AwsElbLoadBalancerBackendServerDescription: Swift.Equatable {
        /// <p>The port on which the EC2 instance is listening.</p>
        public let instancePort: Swift.Int
        /// <p>The names of the policies that are enabled for the EC2 instance.</p>
        public let policyNames: [Swift.String]?

        public init (
            instancePort: Swift.Int = 0,
            policyNames: [Swift.String]? = nil
        )
        {
            self.instancePort = instancePort
            self.policyNames = policyNames
        }
    }

}

extension SecurityHubClientTypes.AwsElbLoadBalancerConnectionDraining: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
        case timeout = "Timeout"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
        if timeout != 0 {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
        let timeoutDecoded = try containerValues.decode(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
    }
}

extension SecurityHubClientTypes.AwsElbLoadBalancerConnectionDraining: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbLoadBalancerConnectionDraining(enabled: \(Swift.String(describing: enabled)), timeout: \(Swift.String(describing: timeout)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about the connection draining configuration for the load
    ///          balancer.</p>
    public struct AwsElbLoadBalancerConnectionDraining: Swift.Equatable {
        /// <p>Indicates whether connection draining is enabled for the load balancer.</p>
        public let enabled: Swift.Bool
        /// <p>The maximum time, in seconds, to keep the existing connections open before deregistering
        ///          the instances.</p>
        public let timeout: Swift.Int

        public init (
            enabled: Swift.Bool = false,
            timeout: Swift.Int = 0
        )
        {
            self.enabled = enabled
            self.timeout = timeout
        }
    }

}

extension SecurityHubClientTypes.AwsElbLoadBalancerConnectionSettings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case idleTimeout = "IdleTimeout"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if idleTimeout != 0 {
            try encodeContainer.encode(idleTimeout, forKey: .idleTimeout)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idleTimeoutDecoded = try containerValues.decode(Swift.Int.self, forKey: .idleTimeout)
        idleTimeout = idleTimeoutDecoded
    }
}

extension SecurityHubClientTypes.AwsElbLoadBalancerConnectionSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbLoadBalancerConnectionSettings(idleTimeout: \(Swift.String(describing: idleTimeout)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains connection settings for the load balancer.</p>
    public struct AwsElbLoadBalancerConnectionSettings: Swift.Equatable {
        /// <p>The time, in seconds, that the connection can be idle (no data is sent over the
        ///          connection) before it is closed by the load balancer.</p>
        public let idleTimeout: Swift.Int

        public init (
            idleTimeout: Swift.Int = 0
        )
        {
            self.idleTimeout = idleTimeout
        }
    }

}

extension SecurityHubClientTypes.AwsElbLoadBalancerCrossZoneLoadBalancing: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enabled = "Enabled"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enabled != false {
            try encodeContainer.encode(enabled, forKey: .enabled)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let enabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabled)
        enabled = enabledDecoded
    }
}

extension SecurityHubClientTypes.AwsElbLoadBalancerCrossZoneLoadBalancing: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbLoadBalancerCrossZoneLoadBalancing(enabled: \(Swift.String(describing: enabled)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains cross-zone load balancing settings for the load balancer.</p>
    public struct AwsElbLoadBalancerCrossZoneLoadBalancing: Swift.Equatable {
        /// <p>Indicates whether cross-zone load balancing is enabled for the load balancer.</p>
        public let enabled: Swift.Bool

        public init (
            enabled: Swift.Bool = false
        )
        {
            self.enabled = enabled
        }
    }

}

extension SecurityHubClientTypes.AwsElbLoadBalancerDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case backendServerDescriptions = "BackendServerDescriptions"
        case canonicalHostedZoneName = "CanonicalHostedZoneName"
        case canonicalHostedZoneNameID = "CanonicalHostedZoneNameID"
        case createdTime = "CreatedTime"
        case dnsName = "DnsName"
        case healthCheck = "HealthCheck"
        case instances = "Instances"
        case listenerDescriptions = "ListenerDescriptions"
        case loadBalancerAttributes = "LoadBalancerAttributes"
        case loadBalancerName = "LoadBalancerName"
        case policies = "Policies"
        case scheme = "Scheme"
        case securityGroups = "SecurityGroups"
        case sourceSecurityGroup = "SourceSecurityGroup"
        case subnets = "Subnets"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for stringlist0 in availabilityZones {
                try availabilityZonesContainer.encode(stringlist0)
            }
        }
        if let backendServerDescriptions = backendServerDescriptions {
            var backendServerDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .backendServerDescriptions)
            for awselbloadbalancerbackendserverdescriptions0 in backendServerDescriptions {
                try backendServerDescriptionsContainer.encode(awselbloadbalancerbackendserverdescriptions0)
            }
        }
        if let canonicalHostedZoneName = canonicalHostedZoneName {
            try encodeContainer.encode(canonicalHostedZoneName, forKey: .canonicalHostedZoneName)
        }
        if let canonicalHostedZoneNameID = canonicalHostedZoneNameID {
            try encodeContainer.encode(canonicalHostedZoneNameID, forKey: .canonicalHostedZoneNameID)
        }
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime, forKey: .createdTime)
        }
        if let dnsName = dnsName {
            try encodeContainer.encode(dnsName, forKey: .dnsName)
        }
        if let healthCheck = healthCheck {
            try encodeContainer.encode(healthCheck, forKey: .healthCheck)
        }
        if let instances = instances {
            var instancesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instances)
            for awselbloadbalancerinstances0 in instances {
                try instancesContainer.encode(awselbloadbalancerinstances0)
            }
        }
        if let listenerDescriptions = listenerDescriptions {
            var listenerDescriptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .listenerDescriptions)
            for awselbloadbalancerlistenerdescriptions0 in listenerDescriptions {
                try listenerDescriptionsContainer.encode(awselbloadbalancerlistenerdescriptions0)
            }
        }
        if let loadBalancerAttributes = loadBalancerAttributes {
            try encodeContainer.encode(loadBalancerAttributes, forKey: .loadBalancerAttributes)
        }
        if let loadBalancerName = loadBalancerName {
            try encodeContainer.encode(loadBalancerName, forKey: .loadBalancerName)
        }
        if let policies = policies {
            try encodeContainer.encode(policies, forKey: .policies)
        }
        if let scheme = scheme {
            try encodeContainer.encode(scheme, forKey: .scheme)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for stringlist0 in securityGroups {
                try securityGroupsContainer.encode(stringlist0)
            }
        }
        if let sourceSecurityGroup = sourceSecurityGroup {
            try encodeContainer.encode(sourceSecurityGroup, forKey: .sourceSecurityGroup)
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for stringlist0 in subnets {
                try subnetsContainer.encode(stringlist0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let backendServerDescriptionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsElbLoadBalancerBackendServerDescription?].self, forKey: .backendServerDescriptions)
        var backendServerDescriptionsDecoded0:[SecurityHubClientTypes.AwsElbLoadBalancerBackendServerDescription]? = nil
        if let backendServerDescriptionsContainer = backendServerDescriptionsContainer {
            backendServerDescriptionsDecoded0 = [SecurityHubClientTypes.AwsElbLoadBalancerBackendServerDescription]()
            for structure0 in backendServerDescriptionsContainer {
                if let structure0 = structure0 {
                    backendServerDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        backendServerDescriptions = backendServerDescriptionsDecoded0
        let canonicalHostedZoneNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .canonicalHostedZoneName)
        canonicalHostedZoneName = canonicalHostedZoneNameDecoded
        let canonicalHostedZoneNameIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .canonicalHostedZoneNameID)
        canonicalHostedZoneNameID = canonicalHostedZoneNameIDDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let dnsNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dnsName)
        dnsName = dnsNameDecoded
        let healthCheckDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerHealthCheck.self, forKey: .healthCheck)
        healthCheck = healthCheckDecoded
        let instancesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsElbLoadBalancerInstance?].self, forKey: .instances)
        var instancesDecoded0:[SecurityHubClientTypes.AwsElbLoadBalancerInstance]? = nil
        if let instancesContainer = instancesContainer {
            instancesDecoded0 = [SecurityHubClientTypes.AwsElbLoadBalancerInstance]()
            for structure0 in instancesContainer {
                if let structure0 = structure0 {
                    instancesDecoded0?.append(structure0)
                }
            }
        }
        instances = instancesDecoded0
        let listenerDescriptionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsElbLoadBalancerListenerDescription?].self, forKey: .listenerDescriptions)
        var listenerDescriptionsDecoded0:[SecurityHubClientTypes.AwsElbLoadBalancerListenerDescription]? = nil
        if let listenerDescriptionsContainer = listenerDescriptionsContainer {
            listenerDescriptionsDecoded0 = [SecurityHubClientTypes.AwsElbLoadBalancerListenerDescription]()
            for structure0 in listenerDescriptionsContainer {
                if let structure0 = structure0 {
                    listenerDescriptionsDecoded0?.append(structure0)
                }
            }
        }
        listenerDescriptions = listenerDescriptionsDecoded0
        let loadBalancerAttributesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerAttributes.self, forKey: .loadBalancerAttributes)
        loadBalancerAttributes = loadBalancerAttributesDecoded
        let loadBalancerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .loadBalancerName)
        loadBalancerName = loadBalancerNameDecoded
        let policiesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerPolicies.self, forKey: .policies)
        policies = policiesDecoded
        let schemeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheme)
        scheme = schemeDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let sourceSecurityGroupDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerSourceSecurityGroup.self, forKey: .sourceSecurityGroup)
        sourceSecurityGroup = sourceSecurityGroupDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnets)
        var subnetsDecoded0:[Swift.String]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [Swift.String]()
            for string0 in subnetsContainer {
                if let string0 = string0 {
                    subnetsDecoded0?.append(string0)
                }
            }
        }
        subnets = subnetsDecoded0
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
    }
}

extension SecurityHubClientTypes.AwsElbLoadBalancerDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbLoadBalancerDetails(availabilityZones: \(Swift.String(describing: availabilityZones)), backendServerDescriptions: \(Swift.String(describing: backendServerDescriptions)), canonicalHostedZoneName: \(Swift.String(describing: canonicalHostedZoneName)), canonicalHostedZoneNameID: \(Swift.String(describing: canonicalHostedZoneNameID)), createdTime: \(Swift.String(describing: createdTime)), dnsName: \(Swift.String(describing: dnsName)), healthCheck: \(Swift.String(describing: healthCheck)), instances: \(Swift.String(describing: instances)), listenerDescriptions: \(Swift.String(describing: listenerDescriptions)), loadBalancerAttributes: \(Swift.String(describing: loadBalancerAttributes)), loadBalancerName: \(Swift.String(describing: loadBalancerName)), policies: \(Swift.String(describing: policies)), scheme: \(Swift.String(describing: scheme)), securityGroups: \(Swift.String(describing: securityGroups)), sourceSecurityGroup: \(Swift.String(describing: sourceSecurityGroup)), subnets: \(Swift.String(describing: subnets)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains details about a Classic Load Balancer.</p>
    public struct AwsElbLoadBalancerDetails: Swift.Equatable {
        /// <p>The list of Availability Zones for the load balancer.</p>
        public let availabilityZones: [Swift.String]?
        /// <p>Information about the configuration of the EC2 instances.</p>
        public let backendServerDescriptions: [SecurityHubClientTypes.AwsElbLoadBalancerBackendServerDescription]?
        /// <p>The name of the Amazon Route 53 hosted zone for the load balancer.</p>
        public let canonicalHostedZoneName: Swift.String?
        /// <p>The ID of the Amazon Route 53 hosted zone for the load balancer.</p>
        public let canonicalHostedZoneNameID: Swift.String?
        /// <p>Indicates when the load balancer was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createdTime: Swift.String?
        /// <p>The DNS name of the load balancer.</p>
        public let dnsName: Swift.String?
        /// <p>Information about the health checks that are conducted on the load balancer.</p>
        public let healthCheck: SecurityHubClientTypes.AwsElbLoadBalancerHealthCheck?
        /// <p>List of EC2 instances for the load balancer.</p>
        public let instances: [SecurityHubClientTypes.AwsElbLoadBalancerInstance]?
        /// <p>The policies that are enabled for the load balancer listeners.</p>
        public let listenerDescriptions: [SecurityHubClientTypes.AwsElbLoadBalancerListenerDescription]?
        /// <p>The attributes for a load balancer.</p>
        public let loadBalancerAttributes: SecurityHubClientTypes.AwsElbLoadBalancerAttributes?
        /// <p>The name of the load balancer.</p>
        public let loadBalancerName: Swift.String?
        /// <p>The policies for a load balancer.</p>
        public let policies: SecurityHubClientTypes.AwsElbLoadBalancerPolicies?
        /// <p>The type of load balancer. Only provided if the load balancer is in a VPC.</p>
        ///          <p>If <code>Scheme</code> is <code>internet-facing</code>, the load balancer has a public
        ///          DNS name that resolves to a public IP address.</p>
        ///          <p>If <code>Scheme</code> is <code>internal</code>, the load balancer has a public DNS name
        ///          that resolves to a private IP address.</p>
        public let scheme: Swift.String?
        /// <p>The security groups for the load balancer. Only provided if the load balancer is in a
        ///          VPC.</p>
        public let securityGroups: [Swift.String]?
        /// <p>Information about the security group for the load balancer. This is the security group
        ///          that is used for inbound rules.</p>
        public let sourceSecurityGroup: SecurityHubClientTypes.AwsElbLoadBalancerSourceSecurityGroup?
        /// <p>The list of subnet identifiers for the load balancer.</p>
        public let subnets: [Swift.String]?
        /// <p>The identifier of the VPC for the load balancer.</p>
        public let vpcId: Swift.String?

        public init (
            availabilityZones: [Swift.String]? = nil,
            backendServerDescriptions: [SecurityHubClientTypes.AwsElbLoadBalancerBackendServerDescription]? = nil,
            canonicalHostedZoneName: Swift.String? = nil,
            canonicalHostedZoneNameID: Swift.String? = nil,
            createdTime: Swift.String? = nil,
            dnsName: Swift.String? = nil,
            healthCheck: SecurityHubClientTypes.AwsElbLoadBalancerHealthCheck? = nil,
            instances: [SecurityHubClientTypes.AwsElbLoadBalancerInstance]? = nil,
            listenerDescriptions: [SecurityHubClientTypes.AwsElbLoadBalancerListenerDescription]? = nil,
            loadBalancerAttributes: SecurityHubClientTypes.AwsElbLoadBalancerAttributes? = nil,
            loadBalancerName: Swift.String? = nil,
            policies: SecurityHubClientTypes.AwsElbLoadBalancerPolicies? = nil,
            scheme: Swift.String? = nil,
            securityGroups: [Swift.String]? = nil,
            sourceSecurityGroup: SecurityHubClientTypes.AwsElbLoadBalancerSourceSecurityGroup? = nil,
            subnets: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.backendServerDescriptions = backendServerDescriptions
            self.canonicalHostedZoneName = canonicalHostedZoneName
            self.canonicalHostedZoneNameID = canonicalHostedZoneNameID
            self.createdTime = createdTime
            self.dnsName = dnsName
            self.healthCheck = healthCheck
            self.instances = instances
            self.listenerDescriptions = listenerDescriptions
            self.loadBalancerAttributes = loadBalancerAttributes
            self.loadBalancerName = loadBalancerName
            self.policies = policies
            self.scheme = scheme
            self.securityGroups = securityGroups
            self.sourceSecurityGroup = sourceSecurityGroup
            self.subnets = subnets
            self.vpcId = vpcId
        }
    }

}

extension SecurityHubClientTypes.AwsElbLoadBalancerHealthCheck: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case healthyThreshold = "HealthyThreshold"
        case interval = "Interval"
        case target = "Target"
        case timeout = "Timeout"
        case unhealthyThreshold = "UnhealthyThreshold"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if healthyThreshold != 0 {
            try encodeContainer.encode(healthyThreshold, forKey: .healthyThreshold)
        }
        if interval != 0 {
            try encodeContainer.encode(interval, forKey: .interval)
        }
        if let target = target {
            try encodeContainer.encode(target, forKey: .target)
        }
        if timeout != 0 {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if unhealthyThreshold != 0 {
            try encodeContainer.encode(unhealthyThreshold, forKey: .unhealthyThreshold)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let healthyThresholdDecoded = try containerValues.decode(Swift.Int.self, forKey: .healthyThreshold)
        healthyThreshold = healthyThresholdDecoded
        let intervalDecoded = try containerValues.decode(Swift.Int.self, forKey: .interval)
        interval = intervalDecoded
        let targetDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .target)
        target = targetDecoded
        let timeoutDecoded = try containerValues.decode(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let unhealthyThresholdDecoded = try containerValues.decode(Swift.Int.self, forKey: .unhealthyThreshold)
        unhealthyThreshold = unhealthyThresholdDecoded
    }
}

extension SecurityHubClientTypes.AwsElbLoadBalancerHealthCheck: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbLoadBalancerHealthCheck(healthyThreshold: \(Swift.String(describing: healthyThreshold)), interval: \(Swift.String(describing: interval)), target: \(Swift.String(describing: target)), timeout: \(Swift.String(describing: timeout)), unhealthyThreshold: \(Swift.String(describing: unhealthyThreshold)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about the health checks that are conducted on the load
    ///          balancer.</p>
    public struct AwsElbLoadBalancerHealthCheck: Swift.Equatable {
        /// <p>The number of consecutive health check successes required before the instance is moved
        ///          to the Healthy state.</p>
        public let healthyThreshold: Swift.Int
        /// <p>The approximate interval, in seconds, between health checks of an individual
        ///          instance.</p>
        public let interval: Swift.Int
        /// <p>The instance that is being checked. The target specifies the protocol and port. The
        ///          available protocols are TCP, SSL, HTTP, and HTTPS. The range of valid ports is 1 through
        ///          65535.</p>
        ///          <p>For the HTTP and HTTPS protocols, the target also specifies the ping path.</p>
        ///          <p>For the TCP protocol, the target is specified as <code>TCP:
        ///                <i><port></i>
        ///             </code>.</p>
        ///          <p>For the SSL protocol, the target is specified as
        ///                <code>SSL.<i><port></i>
        ///             </code>.</p>
        ///          <p>For the HTTP and HTTPS protocols, the target is specified as
        ///                <code>
        ///                <i><protocol></i>:<i><port></i>/<i><path
        ///                to ping></i>
        ///             </code>.</p>
        public let target: Swift.String?
        /// <p>The amount of time, in seconds, during which no response means a failed health
        ///          check.</p>
        public let timeout: Swift.Int
        /// <p>The number of consecutive health check failures that must occur before the instance is
        ///          moved to the Unhealthy state.</p>
        public let unhealthyThreshold: Swift.Int

        public init (
            healthyThreshold: Swift.Int = 0,
            interval: Swift.Int = 0,
            target: Swift.String? = nil,
            timeout: Swift.Int = 0,
            unhealthyThreshold: Swift.Int = 0
        )
        {
            self.healthyThreshold = healthyThreshold
            self.interval = interval
            self.target = target
            self.timeout = timeout
            self.unhealthyThreshold = unhealthyThreshold
        }
    }

}

extension SecurityHubClientTypes.AwsElbLoadBalancerInstance: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceId = "InstanceId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceId = instanceId {
            try encodeContainer.encode(instanceId, forKey: .instanceId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceId)
        instanceId = instanceIdDecoded
    }
}

extension SecurityHubClientTypes.AwsElbLoadBalancerInstance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbLoadBalancerInstance(instanceId: \(Swift.String(describing: instanceId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about an EC2 instance for a load balancer.</p>
    public struct AwsElbLoadBalancerInstance: Swift.Equatable {
        /// <p>The instance identifier.</p>
        public let instanceId: Swift.String?

        public init (
            instanceId: Swift.String? = nil
        )
        {
            self.instanceId = instanceId
        }
    }

}

extension SecurityHubClientTypes.AwsElbLoadBalancerListener: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instancePort = "InstancePort"
        case instanceProtocol = "InstanceProtocol"
        case loadBalancerPort = "LoadBalancerPort"
        case `protocol` = "Protocol"
        case sslCertificateId = "SslCertificateId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if instancePort != 0 {
            try encodeContainer.encode(instancePort, forKey: .instancePort)
        }
        if let instanceProtocol = instanceProtocol {
            try encodeContainer.encode(instanceProtocol, forKey: .instanceProtocol)
        }
        if loadBalancerPort != 0 {
            try encodeContainer.encode(loadBalancerPort, forKey: .loadBalancerPort)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`, forKey: .`protocol`)
        }
        if let sslCertificateId = sslCertificateId {
            try encodeContainer.encode(sslCertificateId, forKey: .sslCertificateId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instancePortDecoded = try containerValues.decode(Swift.Int.self, forKey: .instancePort)
        instancePort = instancePortDecoded
        let instanceProtocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceProtocol)
        instanceProtocol = instanceProtocolDecoded
        let loadBalancerPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .loadBalancerPort)
        loadBalancerPort = loadBalancerPortDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let sslCertificateIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sslCertificateId)
        sslCertificateId = sslCertificateIdDecoded
    }
}

extension SecurityHubClientTypes.AwsElbLoadBalancerListener: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbLoadBalancerListener(instancePort: \(Swift.String(describing: instancePort)), instanceProtocol: \(Swift.String(describing: instanceProtocol)), loadBalancerPort: \(Swift.String(describing: loadBalancerPort)), protocol: \(Swift.String(describing: `protocol`)), sslCertificateId: \(Swift.String(describing: sslCertificateId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about a load balancer listener.</p>
    public struct AwsElbLoadBalancerListener: Swift.Equatable {
        /// <p>The load balancer transport protocol to use for routing.</p>
        ///          <p>Valid values: <code>HTTP</code> | <code>HTTPS</code> | <code>TCP</code> |
        ///             <code>SSL</code>
        ///          </p>
        public let `protocol`: Swift.String?
        /// <p>The port on which the instance is listening.</p>
        public let instancePort: Swift.Int
        /// <p>The protocol to use to route traffic to instances.</p>
        ///          <p>Valid values: <code>HTTP</code> | <code>HTTPS</code> | <code>TCP</code> |
        ///             <code>SSL</code>
        ///          </p>
        public let instanceProtocol: Swift.String?
        /// <p>The port on which the load balancer is listening.</p>
        ///          <p>On EC2-VPC, you can specify any port from the range 1-65535.</p>
        ///          <p>On EC2-Classic, you can specify any port from the following list: 25, 80, 443, 465, 587,
        ///          1024-65535.</p>
        public let loadBalancerPort: Swift.Int
        /// <p>The ARN of the server certificate.</p>
        public let sslCertificateId: Swift.String?

        public init (
            `protocol`: Swift.String? = nil,
            instancePort: Swift.Int = 0,
            instanceProtocol: Swift.String? = nil,
            loadBalancerPort: Swift.Int = 0,
            sslCertificateId: Swift.String? = nil
        )
        {
            self.`protocol` = `protocol`
            self.instancePort = instancePort
            self.instanceProtocol = instanceProtocol
            self.loadBalancerPort = loadBalancerPort
            self.sslCertificateId = sslCertificateId
        }
    }

}

extension SecurityHubClientTypes.AwsElbLoadBalancerListenerDescription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case listener = "Listener"
        case policyNames = "PolicyNames"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let listener = listener {
            try encodeContainer.encode(listener, forKey: .listener)
        }
        if let policyNames = policyNames {
            var policyNamesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policyNames)
            for stringlist0 in policyNames {
                try policyNamesContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let listenerDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerListener.self, forKey: .listener)
        listener = listenerDecoded
        let policyNamesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .policyNames)
        var policyNamesDecoded0:[Swift.String]? = nil
        if let policyNamesContainer = policyNamesContainer {
            policyNamesDecoded0 = [Swift.String]()
            for string0 in policyNamesContainer {
                if let string0 = string0 {
                    policyNamesDecoded0?.append(string0)
                }
            }
        }
        policyNames = policyNamesDecoded0
    }
}

extension SecurityHubClientTypes.AwsElbLoadBalancerListenerDescription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbLoadBalancerListenerDescription(listener: \(Swift.String(describing: listener)), policyNames: \(Swift.String(describing: policyNames)))"}
}

extension SecurityHubClientTypes {
    /// <p>Lists the policies that are enabled for a load balancer listener.</p>
    public struct AwsElbLoadBalancerListenerDescription: Swift.Equatable {
        /// <p>Information about the listener.</p>
        public let listener: SecurityHubClientTypes.AwsElbLoadBalancerListener?
        /// <p>The policies enabled for the listener.</p>
        public let policyNames: [Swift.String]?

        public init (
            listener: SecurityHubClientTypes.AwsElbLoadBalancerListener? = nil,
            policyNames: [Swift.String]? = nil
        )
        {
            self.listener = listener
            self.policyNames = policyNames
        }
    }

}

extension SecurityHubClientTypes.AwsElbLoadBalancerPolicies: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case appCookieStickinessPolicies = "AppCookieStickinessPolicies"
        case lbCookieStickinessPolicies = "LbCookieStickinessPolicies"
        case otherPolicies = "OtherPolicies"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let appCookieStickinessPolicies = appCookieStickinessPolicies {
            var appCookieStickinessPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .appCookieStickinessPolicies)
            for awselbappcookiestickinesspolicies0 in appCookieStickinessPolicies {
                try appCookieStickinessPoliciesContainer.encode(awselbappcookiestickinesspolicies0)
            }
        }
        if let lbCookieStickinessPolicies = lbCookieStickinessPolicies {
            var lbCookieStickinessPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lbCookieStickinessPolicies)
            for awselblbcookiestickinesspolicies0 in lbCookieStickinessPolicies {
                try lbCookieStickinessPoliciesContainer.encode(awselblbcookiestickinesspolicies0)
            }
        }
        if let otherPolicies = otherPolicies {
            var otherPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .otherPolicies)
            for stringlist0 in otherPolicies {
                try otherPoliciesContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let appCookieStickinessPoliciesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsElbAppCookieStickinessPolicy?].self, forKey: .appCookieStickinessPolicies)
        var appCookieStickinessPoliciesDecoded0:[SecurityHubClientTypes.AwsElbAppCookieStickinessPolicy]? = nil
        if let appCookieStickinessPoliciesContainer = appCookieStickinessPoliciesContainer {
            appCookieStickinessPoliciesDecoded0 = [SecurityHubClientTypes.AwsElbAppCookieStickinessPolicy]()
            for structure0 in appCookieStickinessPoliciesContainer {
                if let structure0 = structure0 {
                    appCookieStickinessPoliciesDecoded0?.append(structure0)
                }
            }
        }
        appCookieStickinessPolicies = appCookieStickinessPoliciesDecoded0
        let lbCookieStickinessPoliciesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsElbLbCookieStickinessPolicy?].self, forKey: .lbCookieStickinessPolicies)
        var lbCookieStickinessPoliciesDecoded0:[SecurityHubClientTypes.AwsElbLbCookieStickinessPolicy]? = nil
        if let lbCookieStickinessPoliciesContainer = lbCookieStickinessPoliciesContainer {
            lbCookieStickinessPoliciesDecoded0 = [SecurityHubClientTypes.AwsElbLbCookieStickinessPolicy]()
            for structure0 in lbCookieStickinessPoliciesContainer {
                if let structure0 = structure0 {
                    lbCookieStickinessPoliciesDecoded0?.append(structure0)
                }
            }
        }
        lbCookieStickinessPolicies = lbCookieStickinessPoliciesDecoded0
        let otherPoliciesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .otherPolicies)
        var otherPoliciesDecoded0:[Swift.String]? = nil
        if let otherPoliciesContainer = otherPoliciesContainer {
            otherPoliciesDecoded0 = [Swift.String]()
            for string0 in otherPoliciesContainer {
                if let string0 = string0 {
                    otherPoliciesDecoded0?.append(string0)
                }
            }
        }
        otherPolicies = otherPoliciesDecoded0
    }
}

extension SecurityHubClientTypes.AwsElbLoadBalancerPolicies: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbLoadBalancerPolicies(appCookieStickinessPolicies: \(Swift.String(describing: appCookieStickinessPolicies)), lbCookieStickinessPolicies: \(Swift.String(describing: lbCookieStickinessPolicies)), otherPolicies: \(Swift.String(describing: otherPolicies)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about the policies for a load balancer.</p>
    public struct AwsElbLoadBalancerPolicies: Swift.Equatable {
        /// <p>The stickiness policies that are created using
        ///             <code>CreateAppCookieStickinessPolicy</code>.</p>
        public let appCookieStickinessPolicies: [SecurityHubClientTypes.AwsElbAppCookieStickinessPolicy]?
        /// <p>The stickiness policies that are created using
        ///             <code>CreateLBCookieStickinessPolicy</code>.</p>
        public let lbCookieStickinessPolicies: [SecurityHubClientTypes.AwsElbLbCookieStickinessPolicy]?
        /// <p>The policies other than the stickiness policies.</p>
        public let otherPolicies: [Swift.String]?

        public init (
            appCookieStickinessPolicies: [SecurityHubClientTypes.AwsElbAppCookieStickinessPolicy]? = nil,
            lbCookieStickinessPolicies: [SecurityHubClientTypes.AwsElbLbCookieStickinessPolicy]? = nil,
            otherPolicies: [Swift.String]? = nil
        )
        {
            self.appCookieStickinessPolicies = appCookieStickinessPolicies
            self.lbCookieStickinessPolicies = lbCookieStickinessPolicies
            self.otherPolicies = otherPolicies
        }
    }

}

extension SecurityHubClientTypes.AwsElbLoadBalancerSourceSecurityGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupName = "GroupName"
        case ownerAlias = "OwnerAlias"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let ownerAlias = ownerAlias {
            try encodeContainer.encode(ownerAlias, forKey: .ownerAlias)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let ownerAliasDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerAlias)
        ownerAlias = ownerAliasDecoded
    }
}

extension SecurityHubClientTypes.AwsElbLoadBalancerSourceSecurityGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbLoadBalancerSourceSecurityGroup(groupName: \(Swift.String(describing: groupName)), ownerAlias: \(Swift.String(describing: ownerAlias)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about the security group for the load balancer.</p>
    public struct AwsElbLoadBalancerSourceSecurityGroup: Swift.Equatable {
        /// <p>The name of the security group.</p>
        public let groupName: Swift.String?
        /// <p>The owner of the security group.</p>
        public let ownerAlias: Swift.String?

        public init (
            groupName: Swift.String? = nil,
            ownerAlias: Swift.String? = nil
        )
        {
            self.groupName = groupName
            self.ownerAlias = ownerAlias
        }
    }

}

extension SecurityHubClientTypes.AwsElbv2LoadBalancerDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case availabilityZones = "AvailabilityZones"
        case canonicalHostedZoneId = "CanonicalHostedZoneId"
        case createdTime = "CreatedTime"
        case dNSName = "DNSName"
        case ipAddressType = "IpAddressType"
        case scheme = "Scheme"
        case securityGroups = "SecurityGroups"
        case state = "State"
        case type = "Type"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for availabilityzones0 in availabilityZones {
                try availabilityZonesContainer.encode(availabilityzones0)
            }
        }
        if let canonicalHostedZoneId = canonicalHostedZoneId {
            try encodeContainer.encode(canonicalHostedZoneId, forKey: .canonicalHostedZoneId)
        }
        if let createdTime = createdTime {
            try encodeContainer.encode(createdTime, forKey: .createdTime)
        }
        if let dNSName = dNSName {
            try encodeContainer.encode(dNSName, forKey: .dNSName)
        }
        if let ipAddressType = ipAddressType {
            try encodeContainer.encode(ipAddressType, forKey: .ipAddressType)
        }
        if let scheme = scheme {
            try encodeContainer.encode(scheme, forKey: .scheme)
        }
        if let securityGroups = securityGroups {
            var securityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroups)
            for securitygroups0 in securityGroups {
                try securityGroupsContainer.encode(securitygroups0)
            }
        }
        if let state = state {
            try encodeContainer.encode(state, forKey: .state)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZonesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AvailabilityZone?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[SecurityHubClientTypes.AvailabilityZone]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [SecurityHubClientTypes.AvailabilityZone]()
            for structure0 in availabilityZonesContainer {
                if let structure0 = structure0 {
                    availabilityZonesDecoded0?.append(structure0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let canonicalHostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .canonicalHostedZoneId)
        canonicalHostedZoneId = canonicalHostedZoneIdDecoded
        let createdTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdTime)
        createdTime = createdTimeDecoded
        let dNSNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dNSName)
        dNSName = dNSNameDecoded
        let ipAddressTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipAddressType)
        ipAddressType = ipAddressTypeDecoded
        let schemeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .scheme)
        scheme = schemeDecoded
        let securityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroups)
        var securityGroupsDecoded0:[Swift.String]? = nil
        if let securityGroupsContainer = securityGroupsContainer {
            securityGroupsDecoded0 = [Swift.String]()
            for string0 in securityGroupsContainer {
                if let string0 = string0 {
                    securityGroupsDecoded0?.append(string0)
                }
            }
        }
        securityGroups = securityGroupsDecoded0
        let stateDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.LoadBalancerState.self, forKey: .state)
        state = stateDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
    }
}

extension SecurityHubClientTypes.AwsElbv2LoadBalancerDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsElbv2LoadBalancerDetails(availabilityZones: \(Swift.String(describing: availabilityZones)), canonicalHostedZoneId: \(Swift.String(describing: canonicalHostedZoneId)), createdTime: \(Swift.String(describing: createdTime)), dNSName: \(Swift.String(describing: dNSName)), ipAddressType: \(Swift.String(describing: ipAddressType)), scheme: \(Swift.String(describing: scheme)), securityGroups: \(Swift.String(describing: securityGroups)), state: \(Swift.String(describing: state)), type: \(Swift.String(describing: type)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about a load balancer.</p>
    public struct AwsElbv2LoadBalancerDetails: Swift.Equatable {
        /// <p>The Availability Zones for the load balancer.</p>
        public let availabilityZones: [SecurityHubClientTypes.AvailabilityZone]?
        /// <p>The ID of the Amazon Route 53 hosted zone associated with the load balancer.</p>
        public let canonicalHostedZoneId: Swift.String?
        /// <p>Indicates when the load balancer was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createdTime: Swift.String?
        /// <p>The public DNS name of the load balancer.</p>
        public let dNSName: Swift.String?
        /// <p>The type of IP addresses used by the subnets for your load balancer. The possible values
        ///          are <code>ipv4</code> (for IPv4 addresses) and <code>dualstack</code> (for IPv4 and IPv6
        ///          addresses).</p>
        public let ipAddressType: Swift.String?
        /// <p>The nodes of an Internet-facing load balancer have public IP addresses.</p>
        public let scheme: Swift.String?
        /// <p>The IDs of the security groups for the load balancer.</p>
        public let securityGroups: [Swift.String]?
        /// <p>The state of the load balancer.</p>
        public let state: SecurityHubClientTypes.LoadBalancerState?
        /// <p>The type of load balancer.</p>
        public let type: Swift.String?
        /// <p>The ID of the VPC for the load balancer.</p>
        public let vpcId: Swift.String?

        public init (
            availabilityZones: [SecurityHubClientTypes.AvailabilityZone]? = nil,
            canonicalHostedZoneId: Swift.String? = nil,
            createdTime: Swift.String? = nil,
            dNSName: Swift.String? = nil,
            ipAddressType: Swift.String? = nil,
            scheme: Swift.String? = nil,
            securityGroups: [Swift.String]? = nil,
            state: SecurityHubClientTypes.LoadBalancerState? = nil,
            type: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.availabilityZones = availabilityZones
            self.canonicalHostedZoneId = canonicalHostedZoneId
            self.createdTime = createdTime
            self.dNSName = dNSName
            self.ipAddressType = ipAddressType
            self.scheme = scheme
            self.securityGroups = securityGroups
            self.state = state
            self.type = type
            self.vpcId = vpcId
        }
    }

}

extension SecurityHubClientTypes.AwsIamAccessKeyDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accessKeyId = "AccessKeyId"
        case accountId = "AccountId"
        case createdAt = "CreatedAt"
        case principalId = "PrincipalId"
        case principalName = "PrincipalName"
        case principalType = "PrincipalType"
        case sessionContext = "SessionContext"
        case status = "Status"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accessKeyId = accessKeyId {
            try encodeContainer.encode(accessKeyId, forKey: .accessKeyId)
        }
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let principalId = principalId {
            try encodeContainer.encode(principalId, forKey: .principalId)
        }
        if let principalName = principalName {
            try encodeContainer.encode(principalName, forKey: .principalName)
        }
        if let principalType = principalType {
            try encodeContainer.encode(principalType, forKey: .principalType)
        }
        if let sessionContext = sessionContext {
            try encodeContainer.encode(sessionContext, forKey: .sessionContext)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let userName = userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamAccessKeyStatus.self, forKey: .status)
        status = statusDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let principalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principalId)
        principalId = principalIdDecoded
        let principalTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principalType)
        principalType = principalTypeDecoded
        let principalNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principalName)
        principalName = principalNameDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let accessKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accessKeyId)
        accessKeyId = accessKeyIdDecoded
        let sessionContextDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamAccessKeySessionContext.self, forKey: .sessionContext)
        sessionContext = sessionContextDecoded
    }
}

extension SecurityHubClientTypes.AwsIamAccessKeyDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamAccessKeyDetails(accessKeyId: \(Swift.String(describing: accessKeyId)), accountId: \(Swift.String(describing: accountId)), createdAt: \(Swift.String(describing: createdAt)), principalId: \(Swift.String(describing: principalId)), principalName: \(Swift.String(describing: principalName)), principalType: \(Swift.String(describing: principalType)), sessionContext: \(Swift.String(describing: sessionContext)), status: \(Swift.String(describing: status)), userName: \(Swift.String(describing: userName)))"}
}

extension SecurityHubClientTypes {
    /// <p>IAM access key details related to a finding.</p>
    public struct AwsIamAccessKeyDetails: Swift.Equatable {
        /// <p>The identifier of the access key.</p>
        public let accessKeyId: Swift.String?
        /// <p>The AWS account ID of the account for the key.</p>
        public let accountId: Swift.String?
        /// <p>Indicates when the IAM access key was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createdAt: Swift.String?
        /// <p>The ID of the principal associated with an access key.</p>
        public let principalId: Swift.String?
        /// <p>The name of the principal.</p>
        public let principalName: Swift.String?
        /// <p>The type of principal associated with an access key.</p>
        public let principalType: Swift.String?
        /// <p>Information about the session that the key was used for.</p>
        public let sessionContext: SecurityHubClientTypes.AwsIamAccessKeySessionContext?
        /// <p>The status of the IAM access key related to a finding.</p>
        public let status: SecurityHubClientTypes.AwsIamAccessKeyStatus?
        /// <p>The user associated with the IAM access key related to a finding.</p>
        ///          <p>The <code>UserName</code> parameter has been replaced with the
        ///             <code>PrincipalName</code> parameter because access keys can also be assigned to
        ///          principals that are not IAM users.</p>
        @available(*, deprecated, message: "This field is deprecated, use PrincipalName instead.")
        public let userName: Swift.String?

        public init (
            accessKeyId: Swift.String? = nil,
            accountId: Swift.String? = nil,
            createdAt: Swift.String? = nil,
            principalId: Swift.String? = nil,
            principalName: Swift.String? = nil,
            principalType: Swift.String? = nil,
            sessionContext: SecurityHubClientTypes.AwsIamAccessKeySessionContext? = nil,
            status: SecurityHubClientTypes.AwsIamAccessKeyStatus? = nil,
            userName: Swift.String? = nil
        )
        {
            self.accessKeyId = accessKeyId
            self.accountId = accountId
            self.createdAt = createdAt
            self.principalId = principalId
            self.principalName = principalName
            self.principalType = principalType
            self.sessionContext = sessionContext
            self.status = status
            self.userName = userName
        }
    }

}

extension SecurityHubClientTypes.AwsIamAccessKeySessionContext: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attributes = "Attributes"
        case sessionIssuer = "SessionIssuer"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attributes = attributes {
            try encodeContainer.encode(attributes, forKey: .attributes)
        }
        if let sessionIssuer = sessionIssuer {
            try encodeContainer.encode(sessionIssuer, forKey: .sessionIssuer)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attributesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamAccessKeySessionContextAttributes.self, forKey: .attributes)
        attributes = attributesDecoded
        let sessionIssuerDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamAccessKeySessionContextSessionIssuer.self, forKey: .sessionIssuer)
        sessionIssuer = sessionIssuerDecoded
    }
}

extension SecurityHubClientTypes.AwsIamAccessKeySessionContext: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamAccessKeySessionContext(attributes: \(Swift.String(describing: attributes)), sessionIssuer: \(Swift.String(describing: sessionIssuer)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about the session that the key was used for.</p>
    public struct AwsIamAccessKeySessionContext: Swift.Equatable {
        /// <p>Attributes of the session that the key was used for.</p>
        public let attributes: SecurityHubClientTypes.AwsIamAccessKeySessionContextAttributes?
        /// <p>Information about the entity that created the session.</p>
        public let sessionIssuer: SecurityHubClientTypes.AwsIamAccessKeySessionContextSessionIssuer?

        public init (
            attributes: SecurityHubClientTypes.AwsIamAccessKeySessionContextAttributes? = nil,
            sessionIssuer: SecurityHubClientTypes.AwsIamAccessKeySessionContextSessionIssuer? = nil
        )
        {
            self.attributes = attributes
            self.sessionIssuer = sessionIssuer
        }
    }

}

extension SecurityHubClientTypes.AwsIamAccessKeySessionContextAttributes: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationDate = "CreationDate"
        case mfaAuthenticated = "MfaAuthenticated"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationDate = creationDate {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if mfaAuthenticated != false {
            try encodeContainer.encode(mfaAuthenticated, forKey: .mfaAuthenticated)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mfaAuthenticatedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .mfaAuthenticated)
        mfaAuthenticated = mfaAuthenticatedDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}

extension SecurityHubClientTypes.AwsIamAccessKeySessionContextAttributes: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamAccessKeySessionContextAttributes(creationDate: \(Swift.String(describing: creationDate)), mfaAuthenticated: \(Swift.String(describing: mfaAuthenticated)))"}
}

extension SecurityHubClientTypes {
    /// <p>Attributes of the session that the key was used for.</p>
    public struct AwsIamAccessKeySessionContextAttributes: Swift.Equatable {
        /// <p>Indicates when the session was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let creationDate: Swift.String?
        /// <p>Indicates whether the session used multi-factor authentication (MFA).</p>
        public let mfaAuthenticated: Swift.Bool

        public init (
            creationDate: Swift.String? = nil,
            mfaAuthenticated: Swift.Bool = false
        )
        {
            self.creationDate = creationDate
            self.mfaAuthenticated = mfaAuthenticated
        }
    }

}

extension SecurityHubClientTypes.AwsIamAccessKeySessionContextSessionIssuer: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case arn = "Arn"
        case principalId = "PrincipalId"
        case type = "Type"
        case userName = "UserName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let principalId = principalId {
            try encodeContainer.encode(principalId, forKey: .principalId)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
        if let userName = userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let principalIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .principalId)
        principalId = principalIdDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
    }
}

extension SecurityHubClientTypes.AwsIamAccessKeySessionContextSessionIssuer: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamAccessKeySessionContextSessionIssuer(accountId: \(Swift.String(describing: accountId)), arn: \(Swift.String(describing: arn)), principalId: \(Swift.String(describing: principalId)), type: \(Swift.String(describing: type)), userName: \(Swift.String(describing: userName)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the entity that created the session.</p>
    public struct AwsIamAccessKeySessionContextSessionIssuer: Swift.Equatable {
        /// <p>The identifier of the AWS account that created the session.</p>
        public let accountId: Swift.String?
        /// <p>The ARN of the session.</p>
        public let arn: Swift.String?
        /// <p>The principal ID of the principal (user, role, or group) that created the
        ///          session.</p>
        public let principalId: Swift.String?
        /// <p>The type of principal (user, role, or group) that created the session.</p>
        public let type: Swift.String?
        /// <p>The name of the principal that created the session.</p>
        public let userName: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            arn: Swift.String? = nil,
            principalId: Swift.String? = nil,
            type: Swift.String? = nil,
            userName: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.arn = arn
            self.principalId = principalId
            self.type = type
            self.userName = userName
        }
    }

}

extension SecurityHubClientTypes {
    public enum AwsIamAccessKeyStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case inactive
        case sdkUnknown(Swift.String)

        public static var allCases: [AwsIamAccessKeyStatus] {
            return [
                .active,
                .inactive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .inactive: return "Inactive"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = AwsIamAccessKeyStatus(rawValue: rawValue) ?? AwsIamAccessKeyStatus.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes.AwsIamAttachedManagedPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyArn = "PolicyArn"
        case policyName = "PolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyArn = policyArn {
            try encodeContainer.encode(policyArn, forKey: .policyArn)
        }
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyArn)
        policyArn = policyArnDecoded
    }
}

extension SecurityHubClientTypes.AwsIamAttachedManagedPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamAttachedManagedPolicy(policyArn: \(Swift.String(describing: policyArn)), policyName: \(Swift.String(describing: policyName)))"}
}

extension SecurityHubClientTypes {
    /// <p>A managed policy that is attached to an IAM principal.</p>
    public struct AwsIamAttachedManagedPolicy: Swift.Equatable {
        /// <p>The ARN of the policy.</p>
        public let policyArn: Swift.String?
        /// <p>The name of the policy.</p>
        public let policyName: Swift.String?

        public init (
            policyArn: Swift.String? = nil,
            policyName: Swift.String? = nil
        )
        {
            self.policyArn = policyArn
            self.policyName = policyName
        }
    }

}

extension SecurityHubClientTypes.AwsIamGroupDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachedManagedPolicies = "AttachedManagedPolicies"
        case createDate = "CreateDate"
        case groupId = "GroupId"
        case groupName = "GroupName"
        case groupPolicyList = "GroupPolicyList"
        case path = "Path"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachedManagedPolicies = attachedManagedPolicies {
            var attachedManagedPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachedManagedPolicies)
            for awsiamattachedmanagedpolicylist0 in attachedManagedPolicies {
                try attachedManagedPoliciesContainer.encode(awsiamattachedmanagedpolicylist0)
            }
        }
        if let createDate = createDate {
            try encodeContainer.encode(createDate, forKey: .createDate)
        }
        if let groupId = groupId {
            try encodeContainer.encode(groupId, forKey: .groupId)
        }
        if let groupName = groupName {
            try encodeContainer.encode(groupName, forKey: .groupName)
        }
        if let groupPolicyList = groupPolicyList {
            var groupPolicyListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groupPolicyList)
            for awsiamgrouppolicylist0 in groupPolicyList {
                try groupPolicyListContainer.encode(awsiamgrouppolicylist0)
            }
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachedManagedPoliciesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsIamAttachedManagedPolicy?].self, forKey: .attachedManagedPolicies)
        var attachedManagedPoliciesDecoded0:[SecurityHubClientTypes.AwsIamAttachedManagedPolicy]? = nil
        if let attachedManagedPoliciesContainer = attachedManagedPoliciesContainer {
            attachedManagedPoliciesDecoded0 = [SecurityHubClientTypes.AwsIamAttachedManagedPolicy]()
            for structure0 in attachedManagedPoliciesContainer {
                if let structure0 = structure0 {
                    attachedManagedPoliciesDecoded0?.append(structure0)
                }
            }
        }
        attachedManagedPolicies = attachedManagedPoliciesDecoded0
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        createDate = createDateDecoded
        let groupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupId)
        groupId = groupIdDecoded
        let groupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupName)
        groupName = groupNameDecoded
        let groupPolicyListContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsIamGroupPolicy?].self, forKey: .groupPolicyList)
        var groupPolicyListDecoded0:[SecurityHubClientTypes.AwsIamGroupPolicy]? = nil
        if let groupPolicyListContainer = groupPolicyListContainer {
            groupPolicyListDecoded0 = [SecurityHubClientTypes.AwsIamGroupPolicy]()
            for structure0 in groupPolicyListContainer {
                if let structure0 = structure0 {
                    groupPolicyListDecoded0?.append(structure0)
                }
            }
        }
        groupPolicyList = groupPolicyListDecoded0
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
    }
}

extension SecurityHubClientTypes.AwsIamGroupDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamGroupDetails(attachedManagedPolicies: \(Swift.String(describing: attachedManagedPolicies)), createDate: \(Swift.String(describing: createDate)), groupId: \(Swift.String(describing: groupId)), groupName: \(Swift.String(describing: groupName)), groupPolicyList: \(Swift.String(describing: groupPolicyList)), path: \(Swift.String(describing: path)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains details about an IAM group.</p>
    public struct AwsIamGroupDetails: Swift.Equatable {
        /// <p>A list of the managed policies that are attached to the IAM group.</p>
        public let attachedManagedPolicies: [SecurityHubClientTypes.AwsIamAttachedManagedPolicy]?
        /// <p>Indicates when the IAM group was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createDate: Swift.String?
        /// <p>The identifier of the IAM group.</p>
        public let groupId: Swift.String?
        /// <p>The name of the IAM group.</p>
        public let groupName: Swift.String?
        /// <p>The list of inline policies that are embedded in the group.</p>
        public let groupPolicyList: [SecurityHubClientTypes.AwsIamGroupPolicy]?
        /// <p>The path to the group.</p>
        public let path: Swift.String?

        public init (
            attachedManagedPolicies: [SecurityHubClientTypes.AwsIamAttachedManagedPolicy]? = nil,
            createDate: Swift.String? = nil,
            groupId: Swift.String? = nil,
            groupName: Swift.String? = nil,
            groupPolicyList: [SecurityHubClientTypes.AwsIamGroupPolicy]? = nil,
            path: Swift.String? = nil
        )
        {
            self.attachedManagedPolicies = attachedManagedPolicies
            self.createDate = createDate
            self.groupId = groupId
            self.groupName = groupName
            self.groupPolicyList = groupPolicyList
            self.path = path
        }
    }

}

extension SecurityHubClientTypes.AwsIamGroupPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName = "PolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
    }
}

extension SecurityHubClientTypes.AwsIamGroupPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamGroupPolicy(policyName: \(Swift.String(describing: policyName)))"}
}

extension SecurityHubClientTypes {
    /// <p>A managed policy that is attached to the IAM group.</p>
    public struct AwsIamGroupPolicy: Swift.Equatable {
        /// <p>The name of the policy.</p>
        public let policyName: Swift.String?

        public init (
            policyName: Swift.String? = nil
        )
        {
            self.policyName = policyName
        }
    }

}

extension SecurityHubClientTypes.AwsIamInstanceProfile: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case createDate = "CreateDate"
        case instanceProfileId = "InstanceProfileId"
        case instanceProfileName = "InstanceProfileName"
        case path = "Path"
        case roles = "Roles"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let createDate = createDate {
            try encodeContainer.encode(createDate, forKey: .createDate)
        }
        if let instanceProfileId = instanceProfileId {
            try encodeContainer.encode(instanceProfileId, forKey: .instanceProfileId)
        }
        if let instanceProfileName = instanceProfileName {
            try encodeContainer.encode(instanceProfileName, forKey: .instanceProfileName)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let roles = roles {
            var rolesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .roles)
            for awsiaminstanceprofileroles0 in roles {
                try rolesContainer.encode(awsiaminstanceprofileroles0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        createDate = createDateDecoded
        let instanceProfileIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceProfileId)
        instanceProfileId = instanceProfileIdDecoded
        let instanceProfileNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceProfileName)
        instanceProfileName = instanceProfileNameDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let rolesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsIamInstanceProfileRole?].self, forKey: .roles)
        var rolesDecoded0:[SecurityHubClientTypes.AwsIamInstanceProfileRole]? = nil
        if let rolesContainer = rolesContainer {
            rolesDecoded0 = [SecurityHubClientTypes.AwsIamInstanceProfileRole]()
            for structure0 in rolesContainer {
                if let structure0 = structure0 {
                    rolesDecoded0?.append(structure0)
                }
            }
        }
        roles = rolesDecoded0
    }
}

extension SecurityHubClientTypes.AwsIamInstanceProfile: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamInstanceProfile(arn: \(Swift.String(describing: arn)), createDate: \(Swift.String(describing: createDate)), instanceProfileId: \(Swift.String(describing: instanceProfileId)), instanceProfileName: \(Swift.String(describing: instanceProfileName)), path: \(Swift.String(describing: path)), roles: \(Swift.String(describing: roles)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about an instance profile.</p>
    public struct AwsIamInstanceProfile: Swift.Equatable {
        /// <p>The ARN of the instance profile.</p>
        public let arn: Swift.String?
        /// <p>Indicates when the instance profile was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createDate: Swift.String?
        /// <p>The identifier of the instance profile.</p>
        public let instanceProfileId: Swift.String?
        /// <p>The name of the instance profile.</p>
        public let instanceProfileName: Swift.String?
        /// <p>The path to the instance profile.</p>
        public let path: Swift.String?
        /// <p>The roles associated with the instance profile.</p>
        public let roles: [SecurityHubClientTypes.AwsIamInstanceProfileRole]?

        public init (
            arn: Swift.String? = nil,
            createDate: Swift.String? = nil,
            instanceProfileId: Swift.String? = nil,
            instanceProfileName: Swift.String? = nil,
            path: Swift.String? = nil,
            roles: [SecurityHubClientTypes.AwsIamInstanceProfileRole]? = nil
        )
        {
            self.arn = arn
            self.createDate = createDate
            self.instanceProfileId = instanceProfileId
            self.instanceProfileName = instanceProfileName
            self.path = path
            self.roles = roles
        }
    }

}

extension SecurityHubClientTypes.AwsIamInstanceProfileRole: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case assumeRolePolicyDocument = "AssumeRolePolicyDocument"
        case createDate = "CreateDate"
        case path = "Path"
        case roleId = "RoleId"
        case roleName = "RoleName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if let assumeRolePolicyDocument = assumeRolePolicyDocument {
            try encodeContainer.encode(assumeRolePolicyDocument, forKey: .assumeRolePolicyDocument)
        }
        if let createDate = createDate {
            try encodeContainer.encode(createDate, forKey: .createDate)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let roleId = roleId {
            try encodeContainer.encode(roleId, forKey: .roleId)
        }
        if let roleName = roleName {
            try encodeContainer.encode(roleName, forKey: .roleName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let assumeRolePolicyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assumeRolePolicyDocument)
        assumeRolePolicyDocument = assumeRolePolicyDocumentDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        createDate = createDateDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let roleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleId)
        roleId = roleIdDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleName)
        roleName = roleNameDecoded
    }
}

extension SecurityHubClientTypes.AwsIamInstanceProfileRole: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamInstanceProfileRole(arn: \(Swift.String(describing: arn)), assumeRolePolicyDocument: \(Swift.String(describing: assumeRolePolicyDocument)), createDate: \(Swift.String(describing: createDate)), path: \(Swift.String(describing: path)), roleId: \(Swift.String(describing: roleId)), roleName: \(Swift.String(describing: roleName)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about a role associated with an instance profile.</p>
    public struct AwsIamInstanceProfileRole: Swift.Equatable {
        /// <p>The ARN of the role.</p>
        public let arn: Swift.String?
        /// <p>The policy that grants an entity permission to assume the role.</p>
        public let assumeRolePolicyDocument: Swift.String?
        /// <p>Indicates when the role was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createDate: Swift.String?
        /// <p>The path to the role.</p>
        public let path: Swift.String?
        /// <p>The identifier of the role.</p>
        public let roleId: Swift.String?
        /// <p>The name of the role.</p>
        public let roleName: Swift.String?

        public init (
            arn: Swift.String? = nil,
            assumeRolePolicyDocument: Swift.String? = nil,
            createDate: Swift.String? = nil,
            path: Swift.String? = nil,
            roleId: Swift.String? = nil,
            roleName: Swift.String? = nil
        )
        {
            self.arn = arn
            self.assumeRolePolicyDocument = assumeRolePolicyDocument
            self.createDate = createDate
            self.path = path
            self.roleId = roleId
            self.roleName = roleName
        }
    }

}

extension SecurityHubClientTypes.AwsIamPermissionsBoundary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case permissionsBoundaryArn = "PermissionsBoundaryArn"
        case permissionsBoundaryType = "PermissionsBoundaryType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let permissionsBoundaryArn = permissionsBoundaryArn {
            try encodeContainer.encode(permissionsBoundaryArn, forKey: .permissionsBoundaryArn)
        }
        if let permissionsBoundaryType = permissionsBoundaryType {
            try encodeContainer.encode(permissionsBoundaryType, forKey: .permissionsBoundaryType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let permissionsBoundaryArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .permissionsBoundaryArn)
        permissionsBoundaryArn = permissionsBoundaryArnDecoded
        let permissionsBoundaryTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .permissionsBoundaryType)
        permissionsBoundaryType = permissionsBoundaryTypeDecoded
    }
}

extension SecurityHubClientTypes.AwsIamPermissionsBoundary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamPermissionsBoundary(permissionsBoundaryArn: \(Swift.String(describing: permissionsBoundaryArn)), permissionsBoundaryType: \(Swift.String(describing: permissionsBoundaryType)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the policy used to set the permissions boundary for an IAM
    ///          principal.</p>
    public struct AwsIamPermissionsBoundary: Swift.Equatable {
        /// <p>The ARN of the policy used to set the permissions boundary.</p>
        public let permissionsBoundaryArn: Swift.String?
        /// <p>The usage type for the permissions boundary.</p>
        public let permissionsBoundaryType: Swift.String?

        public init (
            permissionsBoundaryArn: Swift.String? = nil,
            permissionsBoundaryType: Swift.String? = nil
        )
        {
            self.permissionsBoundaryArn = permissionsBoundaryArn
            self.permissionsBoundaryType = permissionsBoundaryType
        }
    }

}

extension SecurityHubClientTypes.AwsIamPolicyDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachmentCount = "AttachmentCount"
        case createDate = "CreateDate"
        case defaultVersionId = "DefaultVersionId"
        case description = "Description"
        case isAttachable = "IsAttachable"
        case path = "Path"
        case permissionsBoundaryUsageCount = "PermissionsBoundaryUsageCount"
        case policyId = "PolicyId"
        case policyName = "PolicyName"
        case policyVersionList = "PolicyVersionList"
        case updateDate = "UpdateDate"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if attachmentCount != 0 {
            try encodeContainer.encode(attachmentCount, forKey: .attachmentCount)
        }
        if let createDate = createDate {
            try encodeContainer.encode(createDate, forKey: .createDate)
        }
        if let defaultVersionId = defaultVersionId {
            try encodeContainer.encode(defaultVersionId, forKey: .defaultVersionId)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if isAttachable != false {
            try encodeContainer.encode(isAttachable, forKey: .isAttachable)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if permissionsBoundaryUsageCount != 0 {
            try encodeContainer.encode(permissionsBoundaryUsageCount, forKey: .permissionsBoundaryUsageCount)
        }
        if let policyId = policyId {
            try encodeContainer.encode(policyId, forKey: .policyId)
        }
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
        if let policyVersionList = policyVersionList {
            var policyVersionListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .policyVersionList)
            for awsiampolicyversionlist0 in policyVersionList {
                try policyVersionListContainer.encode(awsiampolicyversionlist0)
            }
        }
        if let updateDate = updateDate {
            try encodeContainer.encode(updateDate, forKey: .updateDate)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachmentCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .attachmentCount)
        attachmentCount = attachmentCountDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        createDate = createDateDecoded
        let defaultVersionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultVersionId)
        defaultVersionId = defaultVersionIdDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let isAttachableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isAttachable)
        isAttachable = isAttachableDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let permissionsBoundaryUsageCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .permissionsBoundaryUsageCount)
        permissionsBoundaryUsageCount = permissionsBoundaryUsageCountDecoded
        let policyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyId)
        policyId = policyIdDecoded
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
        let policyVersionListContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsIamPolicyVersion?].self, forKey: .policyVersionList)
        var policyVersionListDecoded0:[SecurityHubClientTypes.AwsIamPolicyVersion]? = nil
        if let policyVersionListContainer = policyVersionListContainer {
            policyVersionListDecoded0 = [SecurityHubClientTypes.AwsIamPolicyVersion]()
            for structure0 in policyVersionListContainer {
                if let structure0 = structure0 {
                    policyVersionListDecoded0?.append(structure0)
                }
            }
        }
        policyVersionList = policyVersionListDecoded0
        let updateDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updateDate)
        updateDate = updateDateDecoded
    }
}

extension SecurityHubClientTypes.AwsIamPolicyDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamPolicyDetails(attachmentCount: \(Swift.String(describing: attachmentCount)), createDate: \(Swift.String(describing: createDate)), defaultVersionId: \(Swift.String(describing: defaultVersionId)), description: \(Swift.String(describing: description)), isAttachable: \(Swift.String(describing: isAttachable)), path: \(Swift.String(describing: path)), permissionsBoundaryUsageCount: \(Swift.String(describing: permissionsBoundaryUsageCount)), policyId: \(Swift.String(describing: policyId)), policyName: \(Swift.String(describing: policyName)), policyVersionList: \(Swift.String(describing: policyVersionList)), updateDate: \(Swift.String(describing: updateDate)))"}
}

extension SecurityHubClientTypes {
    /// <p>Represents an IAM permissions policy.</p>
    public struct AwsIamPolicyDetails: Swift.Equatable {
        /// <p>The number of users, groups, and roles that the policy is attached to.</p>
        public let attachmentCount: Swift.Int
        /// <p>When the policy was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createDate: Swift.String?
        /// <p>The identifier of the default version of the policy.</p>
        public let defaultVersionId: Swift.String?
        /// <p>A description of the policy.</p>
        public let description: Swift.String?
        /// <p>Whether the policy can be attached to a user, group, or role.</p>
        public let isAttachable: Swift.Bool
        /// <p>The path to the policy.</p>
        public let path: Swift.String?
        /// <p>The number of users and roles that use the policy to set the permissions
        ///          boundary.</p>
        public let permissionsBoundaryUsageCount: Swift.Int
        /// <p>The unique identifier of the policy.</p>
        public let policyId: Swift.String?
        /// <p>The name of the policy.</p>
        public let policyName: Swift.String?
        /// <p>List of versions of the policy.</p>
        public let policyVersionList: [SecurityHubClientTypes.AwsIamPolicyVersion]?
        /// <p>When the policy was most recently updated.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let updateDate: Swift.String?

        public init (
            attachmentCount: Swift.Int = 0,
            createDate: Swift.String? = nil,
            defaultVersionId: Swift.String? = nil,
            description: Swift.String? = nil,
            isAttachable: Swift.Bool = false,
            path: Swift.String? = nil,
            permissionsBoundaryUsageCount: Swift.Int = 0,
            policyId: Swift.String? = nil,
            policyName: Swift.String? = nil,
            policyVersionList: [SecurityHubClientTypes.AwsIamPolicyVersion]? = nil,
            updateDate: Swift.String? = nil
        )
        {
            self.attachmentCount = attachmentCount
            self.createDate = createDate
            self.defaultVersionId = defaultVersionId
            self.description = description
            self.isAttachable = isAttachable
            self.path = path
            self.permissionsBoundaryUsageCount = permissionsBoundaryUsageCount
            self.policyId = policyId
            self.policyName = policyName
            self.policyVersionList = policyVersionList
            self.updateDate = updateDate
        }
    }

}

extension SecurityHubClientTypes.AwsIamPolicyVersion: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createDate = "CreateDate"
        case isDefaultVersion = "IsDefaultVersion"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createDate = createDate {
            try encodeContainer.encode(createDate, forKey: .createDate)
        }
        if isDefaultVersion != false {
            try encodeContainer.encode(isDefaultVersion, forKey: .isDefaultVersion)
        }
        if let versionId = versionId {
            try encodeContainer.encode(versionId, forKey: .versionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let isDefaultVersionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isDefaultVersion)
        isDefaultVersion = isDefaultVersionDecoded
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        createDate = createDateDecoded
    }
}

extension SecurityHubClientTypes.AwsIamPolicyVersion: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamPolicyVersion(createDate: \(Swift.String(describing: createDate)), isDefaultVersion: \(Swift.String(describing: isDefaultVersion)), versionId: \(Swift.String(describing: versionId)))"}
}

extension SecurityHubClientTypes {
    /// <p>A version of an IAM policy.</p>
    public struct AwsIamPolicyVersion: Swift.Equatable {
        /// <p>Indicates when the version was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createDate: Swift.String?
        /// <p>Whether the version is the default version.</p>
        public let isDefaultVersion: Swift.Bool
        /// <p>The identifier of the policy version.</p>
        public let versionId: Swift.String?

        public init (
            createDate: Swift.String? = nil,
            isDefaultVersion: Swift.Bool = false,
            versionId: Swift.String? = nil
        )
        {
            self.createDate = createDate
            self.isDefaultVersion = isDefaultVersion
            self.versionId = versionId
        }
    }

}

extension SecurityHubClientTypes.AwsIamRoleDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case assumeRolePolicyDocument = "AssumeRolePolicyDocument"
        case attachedManagedPolicies = "AttachedManagedPolicies"
        case createDate = "CreateDate"
        case instanceProfileList = "InstanceProfileList"
        case maxSessionDuration = "MaxSessionDuration"
        case path = "Path"
        case permissionsBoundary = "PermissionsBoundary"
        case roleId = "RoleId"
        case roleName = "RoleName"
        case rolePolicyList = "RolePolicyList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let assumeRolePolicyDocument = assumeRolePolicyDocument {
            try encodeContainer.encode(assumeRolePolicyDocument, forKey: .assumeRolePolicyDocument)
        }
        if let attachedManagedPolicies = attachedManagedPolicies {
            var attachedManagedPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachedManagedPolicies)
            for awsiamattachedmanagedpolicylist0 in attachedManagedPolicies {
                try attachedManagedPoliciesContainer.encode(awsiamattachedmanagedpolicylist0)
            }
        }
        if let createDate = createDate {
            try encodeContainer.encode(createDate, forKey: .createDate)
        }
        if let instanceProfileList = instanceProfileList {
            var instanceProfileListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceProfileList)
            for awsiaminstanceprofilelist0 in instanceProfileList {
                try instanceProfileListContainer.encode(awsiaminstanceprofilelist0)
            }
        }
        if maxSessionDuration != 0 {
            try encodeContainer.encode(maxSessionDuration, forKey: .maxSessionDuration)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let permissionsBoundary = permissionsBoundary {
            try encodeContainer.encode(permissionsBoundary, forKey: .permissionsBoundary)
        }
        if let roleId = roleId {
            try encodeContainer.encode(roleId, forKey: .roleId)
        }
        if let roleName = roleName {
            try encodeContainer.encode(roleName, forKey: .roleName)
        }
        if let rolePolicyList = rolePolicyList {
            var rolePolicyListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rolePolicyList)
            for awsiamrolepolicylist0 in rolePolicyList {
                try rolePolicyListContainer.encode(awsiamrolepolicylist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let assumeRolePolicyDocumentDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .assumeRolePolicyDocument)
        assumeRolePolicyDocument = assumeRolePolicyDocumentDecoded
        let attachedManagedPoliciesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsIamAttachedManagedPolicy?].self, forKey: .attachedManagedPolicies)
        var attachedManagedPoliciesDecoded0:[SecurityHubClientTypes.AwsIamAttachedManagedPolicy]? = nil
        if let attachedManagedPoliciesContainer = attachedManagedPoliciesContainer {
            attachedManagedPoliciesDecoded0 = [SecurityHubClientTypes.AwsIamAttachedManagedPolicy]()
            for structure0 in attachedManagedPoliciesContainer {
                if let structure0 = structure0 {
                    attachedManagedPoliciesDecoded0?.append(structure0)
                }
            }
        }
        attachedManagedPolicies = attachedManagedPoliciesDecoded0
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        createDate = createDateDecoded
        let instanceProfileListContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsIamInstanceProfile?].self, forKey: .instanceProfileList)
        var instanceProfileListDecoded0:[SecurityHubClientTypes.AwsIamInstanceProfile]? = nil
        if let instanceProfileListContainer = instanceProfileListContainer {
            instanceProfileListDecoded0 = [SecurityHubClientTypes.AwsIamInstanceProfile]()
            for structure0 in instanceProfileListContainer {
                if let structure0 = structure0 {
                    instanceProfileListDecoded0?.append(structure0)
                }
            }
        }
        instanceProfileList = instanceProfileListDecoded0
        let permissionsBoundaryDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamPermissionsBoundary.self, forKey: .permissionsBoundary)
        permissionsBoundary = permissionsBoundaryDecoded
        let roleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleId)
        roleId = roleIdDecoded
        let roleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleName)
        roleName = roleNameDecoded
        let rolePolicyListContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsIamRolePolicy?].self, forKey: .rolePolicyList)
        var rolePolicyListDecoded0:[SecurityHubClientTypes.AwsIamRolePolicy]? = nil
        if let rolePolicyListContainer = rolePolicyListContainer {
            rolePolicyListDecoded0 = [SecurityHubClientTypes.AwsIamRolePolicy]()
            for structure0 in rolePolicyListContainer {
                if let structure0 = structure0 {
                    rolePolicyListDecoded0?.append(structure0)
                }
            }
        }
        rolePolicyList = rolePolicyListDecoded0
        let maxSessionDurationDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxSessionDuration)
        maxSessionDuration = maxSessionDurationDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
    }
}

extension SecurityHubClientTypes.AwsIamRoleDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamRoleDetails(assumeRolePolicyDocument: \(Swift.String(describing: assumeRolePolicyDocument)), attachedManagedPolicies: \(Swift.String(describing: attachedManagedPolicies)), createDate: \(Swift.String(describing: createDate)), instanceProfileList: \(Swift.String(describing: instanceProfileList)), maxSessionDuration: \(Swift.String(describing: maxSessionDuration)), path: \(Swift.String(describing: path)), permissionsBoundary: \(Swift.String(describing: permissionsBoundary)), roleId: \(Swift.String(describing: roleId)), roleName: \(Swift.String(describing: roleName)), rolePolicyList: \(Swift.String(describing: rolePolicyList)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about an IAM role, including all of the role's policies.</p>
    public struct AwsIamRoleDetails: Swift.Equatable {
        /// <p>The trust policy that grants permission to assume the role.</p>
        public let assumeRolePolicyDocument: Swift.String?
        /// <p>The list of the managed policies that are attached to the role.</p>
        public let attachedManagedPolicies: [SecurityHubClientTypes.AwsIamAttachedManagedPolicy]?
        /// <p>Indicates when the role was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createDate: Swift.String?
        /// <p>The list of instance profiles that contain this role.</p>
        public let instanceProfileList: [SecurityHubClientTypes.AwsIamInstanceProfile]?
        /// <p>The maximum session duration (in seconds) that you want to set for the specified role.</p>
        public let maxSessionDuration: Swift.Int
        /// <p>The path to the role.</p>
        public let path: Swift.String?
        /// <p>Information about the policy used to set the permissions boundary for an IAM
        ///          principal.</p>
        public let permissionsBoundary: SecurityHubClientTypes.AwsIamPermissionsBoundary?
        /// <p>The stable and unique string identifying the role.</p>
        public let roleId: Swift.String?
        /// <p>The friendly name that identifies the role.</p>
        public let roleName: Swift.String?
        /// <p>The list of inline policies that are embedded in the role.</p>
        public let rolePolicyList: [SecurityHubClientTypes.AwsIamRolePolicy]?

        public init (
            assumeRolePolicyDocument: Swift.String? = nil,
            attachedManagedPolicies: [SecurityHubClientTypes.AwsIamAttachedManagedPolicy]? = nil,
            createDate: Swift.String? = nil,
            instanceProfileList: [SecurityHubClientTypes.AwsIamInstanceProfile]? = nil,
            maxSessionDuration: Swift.Int = 0,
            path: Swift.String? = nil,
            permissionsBoundary: SecurityHubClientTypes.AwsIamPermissionsBoundary? = nil,
            roleId: Swift.String? = nil,
            roleName: Swift.String? = nil,
            rolePolicyList: [SecurityHubClientTypes.AwsIamRolePolicy]? = nil
        )
        {
            self.assumeRolePolicyDocument = assumeRolePolicyDocument
            self.attachedManagedPolicies = attachedManagedPolicies
            self.createDate = createDate
            self.instanceProfileList = instanceProfileList
            self.maxSessionDuration = maxSessionDuration
            self.path = path
            self.permissionsBoundary = permissionsBoundary
            self.roleId = roleId
            self.roleName = roleName
            self.rolePolicyList = rolePolicyList
        }
    }

}

extension SecurityHubClientTypes.AwsIamRolePolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName = "PolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
    }
}

extension SecurityHubClientTypes.AwsIamRolePolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamRolePolicy(policyName: \(Swift.String(describing: policyName)))"}
}

extension SecurityHubClientTypes {
    /// <p>An inline policy that is embedded in the role.</p>
    public struct AwsIamRolePolicy: Swift.Equatable {
        /// <p>The name of the policy.</p>
        public let policyName: Swift.String?

        public init (
            policyName: Swift.String? = nil
        )
        {
            self.policyName = policyName
        }
    }

}

extension SecurityHubClientTypes.AwsIamUserDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case attachedManagedPolicies = "AttachedManagedPolicies"
        case createDate = "CreateDate"
        case groupList = "GroupList"
        case path = "Path"
        case permissionsBoundary = "PermissionsBoundary"
        case userId = "UserId"
        case userName = "UserName"
        case userPolicyList = "UserPolicyList"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let attachedManagedPolicies = attachedManagedPolicies {
            var attachedManagedPoliciesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .attachedManagedPolicies)
            for awsiamattachedmanagedpolicylist0 in attachedManagedPolicies {
                try attachedManagedPoliciesContainer.encode(awsiamattachedmanagedpolicylist0)
            }
        }
        if let createDate = createDate {
            try encodeContainer.encode(createDate, forKey: .createDate)
        }
        if let groupList = groupList {
            var groupListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .groupList)
            for stringlist0 in groupList {
                try groupListContainer.encode(stringlist0)
            }
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let permissionsBoundary = permissionsBoundary {
            try encodeContainer.encode(permissionsBoundary, forKey: .permissionsBoundary)
        }
        if let userId = userId {
            try encodeContainer.encode(userId, forKey: .userId)
        }
        if let userName = userName {
            try encodeContainer.encode(userName, forKey: .userName)
        }
        if let userPolicyList = userPolicyList {
            var userPolicyListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userPolicyList)
            for awsiamuserpolicylist0 in userPolicyList {
                try userPolicyListContainer.encode(awsiamuserpolicylist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let attachedManagedPoliciesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsIamAttachedManagedPolicy?].self, forKey: .attachedManagedPolicies)
        var attachedManagedPoliciesDecoded0:[SecurityHubClientTypes.AwsIamAttachedManagedPolicy]? = nil
        if let attachedManagedPoliciesContainer = attachedManagedPoliciesContainer {
            attachedManagedPoliciesDecoded0 = [SecurityHubClientTypes.AwsIamAttachedManagedPolicy]()
            for structure0 in attachedManagedPoliciesContainer {
                if let structure0 = structure0 {
                    attachedManagedPoliciesDecoded0?.append(structure0)
                }
            }
        }
        attachedManagedPolicies = attachedManagedPoliciesDecoded0
        let createDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createDate)
        createDate = createDateDecoded
        let groupListContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .groupList)
        var groupListDecoded0:[Swift.String]? = nil
        if let groupListContainer = groupListContainer {
            groupListDecoded0 = [Swift.String]()
            for string0 in groupListContainer {
                if let string0 = string0 {
                    groupListDecoded0?.append(string0)
                }
            }
        }
        groupList = groupListDecoded0
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let permissionsBoundaryDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamPermissionsBoundary.self, forKey: .permissionsBoundary)
        permissionsBoundary = permissionsBoundaryDecoded
        let userIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userId)
        userId = userIdDecoded
        let userNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .userName)
        userName = userNameDecoded
        let userPolicyListContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsIamUserPolicy?].self, forKey: .userPolicyList)
        var userPolicyListDecoded0:[SecurityHubClientTypes.AwsIamUserPolicy]? = nil
        if let userPolicyListContainer = userPolicyListContainer {
            userPolicyListDecoded0 = [SecurityHubClientTypes.AwsIamUserPolicy]()
            for structure0 in userPolicyListContainer {
                if let structure0 = structure0 {
                    userPolicyListDecoded0?.append(structure0)
                }
            }
        }
        userPolicyList = userPolicyListDecoded0
    }
}

extension SecurityHubClientTypes.AwsIamUserDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamUserDetails(attachedManagedPolicies: \(Swift.String(describing: attachedManagedPolicies)), createDate: \(Swift.String(describing: createDate)), groupList: \(Swift.String(describing: groupList)), path: \(Swift.String(describing: path)), permissionsBoundary: \(Swift.String(describing: permissionsBoundary)), userId: \(Swift.String(describing: userId)), userName: \(Swift.String(describing: userName)), userPolicyList: \(Swift.String(describing: userPolicyList)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about an IAM user.</p>
    public struct AwsIamUserDetails: Swift.Equatable {
        /// <p>A list of the managed policies that are attached to the user.</p>
        public let attachedManagedPolicies: [SecurityHubClientTypes.AwsIamAttachedManagedPolicy]?
        /// <p>Indicates when the user was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createDate: Swift.String?
        /// <p>A list of IAM groups that the user belongs to.</p>
        public let groupList: [Swift.String]?
        /// <p>The path to the user.</p>
        public let path: Swift.String?
        /// <p>The permissions boundary for the user.</p>
        public let permissionsBoundary: SecurityHubClientTypes.AwsIamPermissionsBoundary?
        /// <p>The unique identifier for the user.</p>
        public let userId: Swift.String?
        /// <p>The name of the user.</p>
        public let userName: Swift.String?
        /// <p>The list of inline policies that are embedded in the user.</p>
        public let userPolicyList: [SecurityHubClientTypes.AwsIamUserPolicy]?

        public init (
            attachedManagedPolicies: [SecurityHubClientTypes.AwsIamAttachedManagedPolicy]? = nil,
            createDate: Swift.String? = nil,
            groupList: [Swift.String]? = nil,
            path: Swift.String? = nil,
            permissionsBoundary: SecurityHubClientTypes.AwsIamPermissionsBoundary? = nil,
            userId: Swift.String? = nil,
            userName: Swift.String? = nil,
            userPolicyList: [SecurityHubClientTypes.AwsIamUserPolicy]? = nil
        )
        {
            self.attachedManagedPolicies = attachedManagedPolicies
            self.createDate = createDate
            self.groupList = groupList
            self.path = path
            self.permissionsBoundary = permissionsBoundary
            self.userId = userId
            self.userName = userName
            self.userPolicyList = userPolicyList
        }
    }

}

extension SecurityHubClientTypes.AwsIamUserPolicy: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case policyName = "PolicyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let policyName = policyName {
            try encodeContainer.encode(policyName, forKey: .policyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let policyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .policyName)
        policyName = policyNameDecoded
    }
}

extension SecurityHubClientTypes.AwsIamUserPolicy: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsIamUserPolicy(policyName: \(Swift.String(describing: policyName)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about an inline policy that is embedded in the user.</p>
    public struct AwsIamUserPolicy: Swift.Equatable {
        /// <p>The name of the policy.</p>
        public let policyName: Swift.String?

        public init (
            policyName: Swift.String? = nil
        )
        {
            self.policyName = policyName
        }
    }

}

extension SecurityHubClientTypes.AwsKmsKeyDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case aWSAccountId = "AWSAccountId"
        case creationDate = "CreationDate"
        case description = "Description"
        case keyId = "KeyId"
        case keyManager = "KeyManager"
        case keyState = "KeyState"
        case origin = "Origin"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let aWSAccountId = aWSAccountId {
            try encodeContainer.encode(aWSAccountId, forKey: .aWSAccountId)
        }
        if creationDate != 0.0 {
            try encodeContainer.encode(creationDate, forKey: .creationDate)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let keyId = keyId {
            try encodeContainer.encode(keyId, forKey: .keyId)
        }
        if let keyManager = keyManager {
            try encodeContainer.encode(keyManager, forKey: .keyManager)
        }
        if let keyState = keyState {
            try encodeContainer.encode(keyState, forKey: .keyState)
        }
        if let origin = origin {
            try encodeContainer.encode(origin, forKey: .origin)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let aWSAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .aWSAccountId)
        aWSAccountId = aWSAccountIdDecoded
        let creationDateDecoded = try containerValues.decode(Swift.Double.self, forKey: .creationDate)
        creationDate = creationDateDecoded
        let keyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyId)
        keyId = keyIdDecoded
        let keyManagerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyManager)
        keyManager = keyManagerDecoded
        let keyStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyState)
        keyState = keyStateDecoded
        let originDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .origin)
        origin = originDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension SecurityHubClientTypes.AwsKmsKeyDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsKmsKeyDetails(aWSAccountId: \(Swift.String(describing: aWSAccountId)), creationDate: \(Swift.String(describing: creationDate)), description: \(Swift.String(describing: description)), keyId: \(Swift.String(describing: keyId)), keyManager: \(Swift.String(describing: keyManager)), keyState: \(Swift.String(describing: keyState)), origin: \(Swift.String(describing: origin)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains metadata about a customer master key (CMK).</p>
    public struct AwsKmsKeyDetails: Swift.Equatable {
        /// <p>The twelve-digit account ID of the AWS account that owns the CMK.</p>
        public let aWSAccountId: Swift.String?
        /// <p>Indicates when the CMK was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let creationDate: Swift.Double
        /// <p>A description of the key.</p>
        public let description: Swift.String?
        /// <p>The globally unique identifier for the CMK.</p>
        public let keyId: Swift.String?
        /// <p>The manager of the CMK. CMKs in your AWS account are either customer managed or AWS managed.</p>
        public let keyManager: Swift.String?
        /// <p>The state of the CMK.</p>
        public let keyState: Swift.String?
        /// <p>The source of the CMK's key material.</p>
        ///          <p>When this value is <code>AWS_KMS</code>, AWS KMS created the key material.</p>
        ///          <p>When this value is <code>EXTERNAL</code>, the key material was imported from your
        ///          existing key management infrastructure or the CMK lacks key material.</p>
        ///          <p>When this value is <code>AWS_CLOUDHSM</code>, the key material was created in the AWS
        ///          CloudHSM cluster associated with a custom key store.</p>
        public let origin: Swift.String?

        public init (
            aWSAccountId: Swift.String? = nil,
            creationDate: Swift.Double = 0.0,
            description: Swift.String? = nil,
            keyId: Swift.String? = nil,
            keyManager: Swift.String? = nil,
            keyState: Swift.String? = nil,
            origin: Swift.String? = nil
        )
        {
            self.aWSAccountId = aWSAccountId
            self.creationDate = creationDate
            self.description = description
            self.keyId = keyId
            self.keyManager = keyManager
            self.keyState = keyState
            self.origin = origin
        }
    }

}

extension SecurityHubClientTypes.AwsLambdaFunctionCode: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3Bucket = "S3Bucket"
        case s3Key = "S3Key"
        case s3ObjectVersion = "S3ObjectVersion"
        case zipFile = "ZipFile"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3Bucket = s3Bucket {
            try encodeContainer.encode(s3Bucket, forKey: .s3Bucket)
        }
        if let s3Key = s3Key {
            try encodeContainer.encode(s3Key, forKey: .s3Key)
        }
        if let s3ObjectVersion = s3ObjectVersion {
            try encodeContainer.encode(s3ObjectVersion, forKey: .s3ObjectVersion)
        }
        if let zipFile = zipFile {
            try encodeContainer.encode(zipFile, forKey: .zipFile)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3BucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Bucket)
        s3Bucket = s3BucketDecoded
        let s3KeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Key)
        s3Key = s3KeyDecoded
        let s3ObjectVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3ObjectVersion)
        s3ObjectVersion = s3ObjectVersionDecoded
        let zipFileDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .zipFile)
        zipFile = zipFileDecoded
    }
}

extension SecurityHubClientTypes.AwsLambdaFunctionCode: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsLambdaFunctionCode(s3Bucket: \(Swift.String(describing: s3Bucket)), s3Key: \(Swift.String(describing: s3Key)), s3ObjectVersion: \(Swift.String(describing: s3ObjectVersion)), zipFile: \(Swift.String(describing: zipFile)))"}
}

extension SecurityHubClientTypes {
    /// <p>The code for the Lambda function. You can specify either an object in Amazon S3, or upload a deployment package directly.</p>
    public struct AwsLambdaFunctionCode: Swift.Equatable {
        /// <p>An Amazon S3 bucket in the same AWS Region as your function. The bucket can be in a different AWS account.</p>
        public let s3Bucket: Swift.String?
        /// <p>The Amazon S3 key of the deployment package.</p>
        public let s3Key: Swift.String?
        /// <p>For versioned objects, the version of the deployment package object to use.</p>
        public let s3ObjectVersion: Swift.String?
        /// <p>The base64-encoded contents of the deployment package. AWS SDK and AWS CLI clients handle the encoding for you.</p>
        public let zipFile: Swift.String?

        public init (
            s3Bucket: Swift.String? = nil,
            s3Key: Swift.String? = nil,
            s3ObjectVersion: Swift.String? = nil,
            zipFile: Swift.String? = nil
        )
        {
            self.s3Bucket = s3Bucket
            self.s3Key = s3Key
            self.s3ObjectVersion = s3ObjectVersion
            self.zipFile = zipFile
        }
    }

}

extension SecurityHubClientTypes.AwsLambdaFunctionDeadLetterConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case targetArn = "TargetArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let targetArn = targetArn {
            try encodeContainer.encode(targetArn, forKey: .targetArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let targetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .targetArn)
        targetArn = targetArnDecoded
    }
}

extension SecurityHubClientTypes.AwsLambdaFunctionDeadLetterConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsLambdaFunctionDeadLetterConfig(targetArn: \(Swift.String(describing: targetArn)))"}
}

extension SecurityHubClientTypes {
    /// <p>The dead-letter queue for failed asynchronous invocations.</p>
    public struct AwsLambdaFunctionDeadLetterConfig: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of an Amazon SQS queue or Amazon SNS topic.</p>
        public let targetArn: Swift.String?

        public init (
            targetArn: Swift.String? = nil
        )
        {
            self.targetArn = targetArn
        }
    }

}

extension SecurityHubClientTypes.AwsLambdaFunctionDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case codeSha256 = "CodeSha256"
        case deadLetterConfig = "DeadLetterConfig"
        case environment = "Environment"
        case functionName = "FunctionName"
        case handler = "Handler"
        case kmsKeyArn = "KmsKeyArn"
        case lastModified = "LastModified"
        case layers = "Layers"
        case masterArn = "MasterArn"
        case memorySize = "MemorySize"
        case revisionId = "RevisionId"
        case role = "Role"
        case runtime = "Runtime"
        case timeout = "Timeout"
        case tracingConfig = "TracingConfig"
        case version = "Version"
        case vpcConfig = "VpcConfig"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let codeSha256 = codeSha256 {
            try encodeContainer.encode(codeSha256, forKey: .codeSha256)
        }
        if let deadLetterConfig = deadLetterConfig {
            try encodeContainer.encode(deadLetterConfig, forKey: .deadLetterConfig)
        }
        if let environment = environment {
            try encodeContainer.encode(environment, forKey: .environment)
        }
        if let functionName = functionName {
            try encodeContainer.encode(functionName, forKey: .functionName)
        }
        if let handler = handler {
            try encodeContainer.encode(handler, forKey: .handler)
        }
        if let kmsKeyArn = kmsKeyArn {
            try encodeContainer.encode(kmsKeyArn, forKey: .kmsKeyArn)
        }
        if let lastModified = lastModified {
            try encodeContainer.encode(lastModified, forKey: .lastModified)
        }
        if let layers = layers {
            var layersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .layers)
            for awslambdafunctionlayerlist0 in layers {
                try layersContainer.encode(awslambdafunctionlayerlist0)
            }
        }
        if let masterArn = masterArn {
            try encodeContainer.encode(masterArn, forKey: .masterArn)
        }
        if memorySize != 0 {
            try encodeContainer.encode(memorySize, forKey: .memorySize)
        }
        if let revisionId = revisionId {
            try encodeContainer.encode(revisionId, forKey: .revisionId)
        }
        if let role = role {
            try encodeContainer.encode(role, forKey: .role)
        }
        if let runtime = runtime {
            try encodeContainer.encode(runtime, forKey: .runtime)
        }
        if timeout != 0 {
            try encodeContainer.encode(timeout, forKey: .timeout)
        }
        if let tracingConfig = tracingConfig {
            try encodeContainer.encode(tracingConfig, forKey: .tracingConfig)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
        if let vpcConfig = vpcConfig {
            try encodeContainer.encode(vpcConfig, forKey: .vpcConfig)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsLambdaFunctionCode.self, forKey: .code)
        code = codeDecoded
        let codeSha256Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .codeSha256)
        codeSha256 = codeSha256Decoded
        let deadLetterConfigDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsLambdaFunctionDeadLetterConfig.self, forKey: .deadLetterConfig)
        deadLetterConfig = deadLetterConfigDecoded
        let environmentDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsLambdaFunctionEnvironment.self, forKey: .environment)
        environment = environmentDecoded
        let functionNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionName)
        functionName = functionNameDecoded
        let handlerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .handler)
        handler = handlerDecoded
        let kmsKeyArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyArn)
        kmsKeyArn = kmsKeyArnDecoded
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let layersContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsLambdaFunctionLayer?].self, forKey: .layers)
        var layersDecoded0:[SecurityHubClientTypes.AwsLambdaFunctionLayer]? = nil
        if let layersContainer = layersContainer {
            layersDecoded0 = [SecurityHubClientTypes.AwsLambdaFunctionLayer]()
            for structure0 in layersContainer {
                if let structure0 = structure0 {
                    layersDecoded0?.append(structure0)
                }
            }
        }
        layers = layersDecoded0
        let masterArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterArn)
        masterArn = masterArnDecoded
        let memorySizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .memorySize)
        memorySize = memorySizeDecoded
        let revisionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .revisionId)
        revisionId = revisionIdDecoded
        let roleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .role)
        role = roleDecoded
        let runtimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .runtime)
        runtime = runtimeDecoded
        let timeoutDecoded = try containerValues.decode(Swift.Int.self, forKey: .timeout)
        timeout = timeoutDecoded
        let tracingConfigDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsLambdaFunctionTracingConfig.self, forKey: .tracingConfig)
        tracingConfig = tracingConfigDecoded
        let vpcConfigDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsLambdaFunctionVpcConfig.self, forKey: .vpcConfig)
        vpcConfig = vpcConfigDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
    }
}

extension SecurityHubClientTypes.AwsLambdaFunctionDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsLambdaFunctionDetails(code: \(Swift.String(describing: code)), codeSha256: \(Swift.String(describing: codeSha256)), deadLetterConfig: \(Swift.String(describing: deadLetterConfig)), environment: \(Swift.String(describing: environment)), functionName: \(Swift.String(describing: functionName)), handler: \(Swift.String(describing: handler)), kmsKeyArn: \(Swift.String(describing: kmsKeyArn)), lastModified: \(Swift.String(describing: lastModified)), layers: \(Swift.String(describing: layers)), masterArn: \(Swift.String(describing: masterArn)), memorySize: \(Swift.String(describing: memorySize)), revisionId: \(Swift.String(describing: revisionId)), role: \(Swift.String(describing: role)), runtime: \(Swift.String(describing: runtime)), timeout: \(Swift.String(describing: timeout)), tracingConfig: \(Swift.String(describing: tracingConfig)), version: \(Swift.String(describing: version)), vpcConfig: \(Swift.String(describing: vpcConfig)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about a function's configuration.</p>
    public struct AwsLambdaFunctionDetails: Swift.Equatable {
        /// <p>An <code>AwsLambdaFunctionCode</code> object.</p>
        public let code: SecurityHubClientTypes.AwsLambdaFunctionCode?
        /// <p>The SHA256 hash of the function's deployment package.</p>
        public let codeSha256: Swift.String?
        /// <p>The function's dead letter queue.</p>
        public let deadLetterConfig: SecurityHubClientTypes.AwsLambdaFunctionDeadLetterConfig?
        /// <p>The function's environment variables.</p>
        public let environment: SecurityHubClientTypes.AwsLambdaFunctionEnvironment?
        /// <p>The name of the function.</p>
        public let functionName: Swift.String?
        /// <p>The function that Lambda calls to begin executing your function.</p>
        public let handler: Swift.String?
        /// <p>The KMS key that's used to encrypt the function's environment variables. This key is only returned if you've configured a customer managed CMK.</p>
        public let kmsKeyArn: Swift.String?
        /// <p>Indicates when the function was last updated.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let lastModified: Swift.String?
        /// <p>The function's layers.</p>
        public let layers: [SecurityHubClientTypes.AwsLambdaFunctionLayer]?
        /// <p>For Lambda@Edge functions, the ARN of the master function.</p>
        public let masterArn: Swift.String?
        /// <p>The memory that's allocated to the function.</p>
        public let memorySize: Swift.Int
        /// <p>The latest updated revision of the function or alias.</p>
        public let revisionId: Swift.String?
        /// <p>The function's execution role.</p>
        public let role: Swift.String?
        /// <p>The runtime environment for the Lambda function.</p>
        public let runtime: Swift.String?
        /// <p>The amount of time that Lambda allows a function to run before stopping it.</p>
        public let timeout: Swift.Int
        /// <p>The function's AWS X-Ray tracing configuration.</p>
        public let tracingConfig: SecurityHubClientTypes.AwsLambdaFunctionTracingConfig?
        /// <p>The version of the Lambda function.</p>
        public let version: Swift.String?
        /// <p>The function's networking configuration.</p>
        public let vpcConfig: SecurityHubClientTypes.AwsLambdaFunctionVpcConfig?

        public init (
            code: SecurityHubClientTypes.AwsLambdaFunctionCode? = nil,
            codeSha256: Swift.String? = nil,
            deadLetterConfig: SecurityHubClientTypes.AwsLambdaFunctionDeadLetterConfig? = nil,
            environment: SecurityHubClientTypes.AwsLambdaFunctionEnvironment? = nil,
            functionName: Swift.String? = nil,
            handler: Swift.String? = nil,
            kmsKeyArn: Swift.String? = nil,
            lastModified: Swift.String? = nil,
            layers: [SecurityHubClientTypes.AwsLambdaFunctionLayer]? = nil,
            masterArn: Swift.String? = nil,
            memorySize: Swift.Int = 0,
            revisionId: Swift.String? = nil,
            role: Swift.String? = nil,
            runtime: Swift.String? = nil,
            timeout: Swift.Int = 0,
            tracingConfig: SecurityHubClientTypes.AwsLambdaFunctionTracingConfig? = nil,
            version: Swift.String? = nil,
            vpcConfig: SecurityHubClientTypes.AwsLambdaFunctionVpcConfig? = nil
        )
        {
            self.code = code
            self.codeSha256 = codeSha256
            self.deadLetterConfig = deadLetterConfig
            self.environment = environment
            self.functionName = functionName
            self.handler = handler
            self.kmsKeyArn = kmsKeyArn
            self.lastModified = lastModified
            self.layers = layers
            self.masterArn = masterArn
            self.memorySize = memorySize
            self.revisionId = revisionId
            self.role = role
            self.runtime = runtime
            self.timeout = timeout
            self.tracingConfig = tracingConfig
            self.version = version
            self.vpcConfig = vpcConfig
        }
    }

}

extension SecurityHubClientTypes.AwsLambdaFunctionEnvironment: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case error = "Error"
        case variables = "Variables"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let error = error {
            try encodeContainer.encode(error, forKey: .error)
        }
        if let variables = variables {
            var variablesContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .variables)
            for (dictKey0, fieldmap0) in variables {
                try variablesContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let variablesContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .variables)
        var variablesDecoded0: [Swift.String:Swift.String]? = nil
        if let variablesContainer = variablesContainer {
            variablesDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in variablesContainer {
                if let nonemptystring0 = nonemptystring0 {
                    variablesDecoded0?[key0] = nonemptystring0
                }
            }
        }
        variables = variablesDecoded0
        let errorDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsLambdaFunctionEnvironmentError.self, forKey: .error)
        error = errorDecoded
    }
}

extension SecurityHubClientTypes.AwsLambdaFunctionEnvironment: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsLambdaFunctionEnvironment(error: \(Swift.String(describing: error)), variables: \(Swift.String(describing: variables)))"}
}

extension SecurityHubClientTypes {
    /// <p>A function's environment variable settings.</p>
    public struct AwsLambdaFunctionEnvironment: Swift.Equatable {
        /// <p>An <code>AwsLambdaFunctionEnvironmentError</code> object.</p>
        public let error: SecurityHubClientTypes.AwsLambdaFunctionEnvironmentError?
        /// <p>Environment variable key-value pairs.</p>
        public let variables: [Swift.String:Swift.String]?

        public init (
            error: SecurityHubClientTypes.AwsLambdaFunctionEnvironmentError? = nil,
            variables: [Swift.String:Swift.String]? = nil
        )
        {
            self.error = error
            self.variables = variables
        }
    }

}

extension SecurityHubClientTypes.AwsLambdaFunctionEnvironmentError: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case message = "Message"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SecurityHubClientTypes.AwsLambdaFunctionEnvironmentError: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsLambdaFunctionEnvironmentError(errorCode: \(Swift.String(describing: errorCode)), message: \(Swift.String(describing: message)))"}
}

extension SecurityHubClientTypes {
    /// <p>Error messages for environment variables that couldn't be applied.</p>
    public struct AwsLambdaFunctionEnvironmentError: Swift.Equatable {
        /// <p>The error code.</p>
        public let errorCode: Swift.String?
        /// <p>The error message.</p>
        public let message: Swift.String?

        public init (
            errorCode: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.message = message
        }
    }

}

extension SecurityHubClientTypes.AwsLambdaFunctionLayer: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case codeSize = "CodeSize"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if codeSize != 0 {
            try encodeContainer.encode(codeSize, forKey: .codeSize)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let codeSizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .codeSize)
        codeSize = codeSizeDecoded
    }
}

extension SecurityHubClientTypes.AwsLambdaFunctionLayer: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsLambdaFunctionLayer(arn: \(Swift.String(describing: arn)), codeSize: \(Swift.String(describing: codeSize)))"}
}

extension SecurityHubClientTypes {
    /// <p>An AWS Lambda layer.</p>
    public struct AwsLambdaFunctionLayer: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the function layer.</p>
        public let arn: Swift.String?
        /// <p>The size of the layer archive in bytes.</p>
        public let codeSize: Swift.Int

        public init (
            arn: Swift.String? = nil,
            codeSize: Swift.Int = 0
        )
        {
            self.arn = arn
            self.codeSize = codeSize
        }
    }

}

extension SecurityHubClientTypes.AwsLambdaFunctionTracingConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mode = "Mode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mode = mode {
            try encodeContainer.encode(mode, forKey: .mode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mode)
        mode = modeDecoded
    }
}

extension SecurityHubClientTypes.AwsLambdaFunctionTracingConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsLambdaFunctionTracingConfig(mode: \(Swift.String(describing: mode)))"}
}

extension SecurityHubClientTypes {
    /// <p>The function's AWS X-Ray tracing configuration.</p>
    public struct AwsLambdaFunctionTracingConfig: Swift.Equatable {
        /// <p>The tracing mode.</p>
        public let mode: Swift.String?

        public init (
            mode: Swift.String? = nil
        )
        {
            self.mode = mode
        }
    }

}

extension SecurityHubClientTypes.AwsLambdaFunctionVpcConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case securityGroupIds = "SecurityGroupIds"
        case subnetIds = "SubnetIds"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let securityGroupIds = securityGroupIds {
            var securityGroupIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .securityGroupIds)
            for nonemptystringlist0 in securityGroupIds {
                try securityGroupIdsContainer.encode(nonemptystringlist0)
            }
        }
        if let subnetIds = subnetIds {
            var subnetIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnetIds)
            for nonemptystringlist0 in subnetIds {
                try subnetIdsContainer.encode(nonemptystringlist0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let securityGroupIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .securityGroupIds)
        var securityGroupIdsDecoded0:[Swift.String]? = nil
        if let securityGroupIdsContainer = securityGroupIdsContainer {
            securityGroupIdsDecoded0 = [Swift.String]()
            for string0 in securityGroupIdsContainer {
                if let string0 = string0 {
                    securityGroupIdsDecoded0?.append(string0)
                }
            }
        }
        securityGroupIds = securityGroupIdsDecoded0
        let subnetIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subnetIds)
        var subnetIdsDecoded0:[Swift.String]? = nil
        if let subnetIdsContainer = subnetIdsContainer {
            subnetIdsDecoded0 = [Swift.String]()
            for string0 in subnetIdsContainer {
                if let string0 = string0 {
                    subnetIdsDecoded0?.append(string0)
                }
            }
        }
        subnetIds = subnetIdsDecoded0
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
    }
}

extension SecurityHubClientTypes.AwsLambdaFunctionVpcConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsLambdaFunctionVpcConfig(securityGroupIds: \(Swift.String(describing: securityGroupIds)), subnetIds: \(Swift.String(describing: subnetIds)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension SecurityHubClientTypes {
    /// <p>The VPC security groups and subnets that are attached to a Lambda function. For more information, see VPC Settings.</p>
    public struct AwsLambdaFunctionVpcConfig: Swift.Equatable {
        /// <p>A list of VPC security groups IDs.</p>
        public let securityGroupIds: [Swift.String]?
        /// <p>A list of VPC subnet IDs.</p>
        public let subnetIds: [Swift.String]?
        /// <p>The ID of the VPC.</p>
        public let vpcId: Swift.String?

        public init (
            securityGroupIds: [Swift.String]? = nil,
            subnetIds: [Swift.String]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.securityGroupIds = securityGroupIds
            self.subnetIds = subnetIds
            self.vpcId = vpcId
        }
    }

}

extension SecurityHubClientTypes.AwsLambdaLayerVersionDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case compatibleRuntimes = "CompatibleRuntimes"
        case createdDate = "CreatedDate"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let compatibleRuntimes = compatibleRuntimes {
            var compatibleRuntimesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .compatibleRuntimes)
            for nonemptystringlist0 in compatibleRuntimes {
                try compatibleRuntimesContainer.encode(nonemptystringlist0)
            }
        }
        if let createdDate = createdDate {
            try encodeContainer.encode(createdDate, forKey: .createdDate)
        }
        if version != 0 {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decode(Swift.Int.self, forKey: .version)
        version = versionDecoded
        let compatibleRuntimesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .compatibleRuntimes)
        var compatibleRuntimesDecoded0:[Swift.String]? = nil
        if let compatibleRuntimesContainer = compatibleRuntimesContainer {
            compatibleRuntimesDecoded0 = [Swift.String]()
            for string0 in compatibleRuntimesContainer {
                if let string0 = string0 {
                    compatibleRuntimesDecoded0?.append(string0)
                }
            }
        }
        compatibleRuntimes = compatibleRuntimesDecoded0
        let createdDateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdDate)
        createdDate = createdDateDecoded
    }
}

extension SecurityHubClientTypes.AwsLambdaLayerVersionDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsLambdaLayerVersionDetails(compatibleRuntimes: \(Swift.String(describing: compatibleRuntimes)), createdDate: \(Swift.String(describing: createdDate)), version: \(Swift.String(describing: version)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about a Lambda layer version.</p>
    public struct AwsLambdaLayerVersionDetails: Swift.Equatable {
        /// <p>The layer's compatible runtimes. Maximum number of five items.</p>
        ///          <p>Valid values: <code>nodejs10.x</code> | <code>nodejs12.x</code> | <code>java8</code> |
        ///             <code>java11</code> | <code>python2.7</code> | <code>python3.6</code> |
        ///             <code>python3.7</code> | <code>python3.8</code> | <code>dotnetcore1.0</code> |
        ///             <code>dotnetcore2.1</code> | <code>go1.x</code> | <code>ruby2.5</code> |
        ///             <code>provided</code>
        ///          </p>
        public let compatibleRuntimes: [Swift.String]?
        /// <p>Indicates when the version was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createdDate: Swift.String?
        /// <p>The version number.</p>
        public let version: Swift.Int

        public init (
            compatibleRuntimes: [Swift.String]? = nil,
            createdDate: Swift.String? = nil,
            version: Swift.Int = 0
        )
        {
            self.compatibleRuntimes = compatibleRuntimes
            self.createdDate = createdDate
            self.version = version
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbClusterAssociatedRole: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case roleArn = "RoleArn"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbClusterAssociatedRole: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbClusterAssociatedRole(roleArn: \(Swift.String(describing: roleArn)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>An IAM role that is associated with the Amazon RDS DB cluster.</p>
    public struct AwsRdsDbClusterAssociatedRole: Swift.Equatable {
        /// <p>The ARN of the IAM role.</p>
        public let roleArn: Swift.String?
        /// <p>The status of the association between the IAM role and the DB cluster.</p>
        public let status: Swift.String?

        public init (
            roleArn: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.roleArn = roleArn
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbClusterDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activityStreamStatus = "ActivityStreamStatus"
        case allocatedStorage = "AllocatedStorage"
        case associatedRoles = "AssociatedRoles"
        case availabilityZones = "AvailabilityZones"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case clusterCreateTime = "ClusterCreateTime"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case crossAccountClone = "CrossAccountClone"
        case customEndpoints = "CustomEndpoints"
        case databaseName = "DatabaseName"
        case dbClusterIdentifier = "DbClusterIdentifier"
        case dbClusterMembers = "DbClusterMembers"
        case dbClusterOptionGroupMemberships = "DbClusterOptionGroupMemberships"
        case dbClusterParameterGroup = "DbClusterParameterGroup"
        case dbClusterResourceId = "DbClusterResourceId"
        case dbSubnetGroup = "DbSubnetGroup"
        case deletionProtection = "DeletionProtection"
        case domainMemberships = "DomainMemberships"
        case enabledCloudWatchLogsExports = "EnabledCloudWatchLogsExports"
        case endpoint = "Endpoint"
        case engine = "Engine"
        case engineMode = "EngineMode"
        case engineVersion = "EngineVersion"
        case hostedZoneId = "HostedZoneId"
        case httpEndpointEnabled = "HttpEndpointEnabled"
        case iamDatabaseAuthenticationEnabled = "IamDatabaseAuthenticationEnabled"
        case kmsKeyId = "KmsKeyId"
        case masterUsername = "MasterUsername"
        case multiAz = "MultiAz"
        case port = "Port"
        case preferredBackupWindow = "PreferredBackupWindow"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case readReplicaIdentifiers = "ReadReplicaIdentifiers"
        case readerEndpoint = "ReaderEndpoint"
        case status = "Status"
        case storageEncrypted = "StorageEncrypted"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activityStreamStatus = activityStreamStatus {
            try encodeContainer.encode(activityStreamStatus, forKey: .activityStreamStatus)
        }
        if allocatedStorage != 0 {
            try encodeContainer.encode(allocatedStorage, forKey: .allocatedStorage)
        }
        if let associatedRoles = associatedRoles {
            var associatedRolesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .associatedRoles)
            for awsrdsdbclusterassociatedroles0 in associatedRoles {
                try associatedRolesContainer.encode(awsrdsdbclusterassociatedroles0)
            }
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for stringlist0 in availabilityZones {
                try availabilityZonesContainer.encode(stringlist0)
            }
        }
        if backupRetentionPeriod != 0 {
            try encodeContainer.encode(backupRetentionPeriod, forKey: .backupRetentionPeriod)
        }
        if let clusterCreateTime = clusterCreateTime {
            try encodeContainer.encode(clusterCreateTime, forKey: .clusterCreateTime)
        }
        if copyTagsToSnapshot != false {
            try encodeContainer.encode(copyTagsToSnapshot, forKey: .copyTagsToSnapshot)
        }
        if crossAccountClone != false {
            try encodeContainer.encode(crossAccountClone, forKey: .crossAccountClone)
        }
        if let customEndpoints = customEndpoints {
            var customEndpointsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .customEndpoints)
            for stringlist0 in customEndpoints {
                try customEndpointsContainer.encode(stringlist0)
            }
        }
        if let databaseName = databaseName {
            try encodeContainer.encode(databaseName, forKey: .databaseName)
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try encodeContainer.encode(dbClusterIdentifier, forKey: .dbClusterIdentifier)
        }
        if let dbClusterMembers = dbClusterMembers {
            var dbClusterMembersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dbClusterMembers)
            for awsrdsdbclustermembers0 in dbClusterMembers {
                try dbClusterMembersContainer.encode(awsrdsdbclustermembers0)
            }
        }
        if let dbClusterOptionGroupMemberships = dbClusterOptionGroupMemberships {
            var dbClusterOptionGroupMembershipsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dbClusterOptionGroupMemberships)
            for awsrdsdbclusteroptiongroupmemberships0 in dbClusterOptionGroupMemberships {
                try dbClusterOptionGroupMembershipsContainer.encode(awsrdsdbclusteroptiongroupmemberships0)
            }
        }
        if let dbClusterParameterGroup = dbClusterParameterGroup {
            try encodeContainer.encode(dbClusterParameterGroup, forKey: .dbClusterParameterGroup)
        }
        if let dbClusterResourceId = dbClusterResourceId {
            try encodeContainer.encode(dbClusterResourceId, forKey: .dbClusterResourceId)
        }
        if let dbSubnetGroup = dbSubnetGroup {
            try encodeContainer.encode(dbSubnetGroup, forKey: .dbSubnetGroup)
        }
        if deletionProtection != false {
            try encodeContainer.encode(deletionProtection, forKey: .deletionProtection)
        }
        if let domainMemberships = domainMemberships {
            var domainMembershipsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainMemberships)
            for awsrdsdbdomainmemberships0 in domainMemberships {
                try domainMembershipsContainer.encode(awsrdsdbdomainmemberships0)
            }
        }
        if let enabledCloudWatchLogsExports = enabledCloudWatchLogsExports {
            var enabledCloudWatchLogsExportsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .enabledCloudWatchLogsExports)
            for stringlist0 in enabledCloudWatchLogsExports {
                try enabledCloudWatchLogsExportsContainer.encode(stringlist0)
            }
        }
        if let endpoint = endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let engine = engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let engineMode = engineMode {
            try encodeContainer.encode(engineMode, forKey: .engineMode)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let hostedZoneId = hostedZoneId {
            try encodeContainer.encode(hostedZoneId, forKey: .hostedZoneId)
        }
        if httpEndpointEnabled != false {
            try encodeContainer.encode(httpEndpointEnabled, forKey: .httpEndpointEnabled)
        }
        if iamDatabaseAuthenticationEnabled != false {
            try encodeContainer.encode(iamDatabaseAuthenticationEnabled, forKey: .iamDatabaseAuthenticationEnabled)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let masterUsername = masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if multiAz != false {
            try encodeContainer.encode(multiAz, forKey: .multiAz)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try encodeContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let readReplicaIdentifiers = readReplicaIdentifiers {
            var readReplicaIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readReplicaIdentifiers)
            for stringlist0 in readReplicaIdentifiers {
                try readReplicaIdentifiersContainer.encode(stringlist0)
            }
        }
        if let readerEndpoint = readerEndpoint {
            try encodeContainer.encode(readerEndpoint, forKey: .readerEndpoint)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if storageEncrypted != false {
            try encodeContainer.encode(storageEncrypted, forKey: .storageEncrypted)
        }
        if let vpcSecurityGroups = vpcSecurityGroups {
            var vpcSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcSecurityGroups)
            for awsrdsdbinstancevpcsecuritygroups0 in vpcSecurityGroups {
                try vpcSecurityGroupsContainer.encode(awsrdsdbinstancevpcsecuritygroups0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allocatedStorageDecoded = try containerValues.decode(Swift.Int.self, forKey: .allocatedStorage)
        allocatedStorage = allocatedStorageDecoded
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let backupRetentionPeriodDecoded = try containerValues.decode(Swift.Int.self, forKey: .backupRetentionPeriod)
        backupRetentionPeriod = backupRetentionPeriodDecoded
        let databaseNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .databaseName)
        databaseName = databaseNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let readerEndpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .readerEndpoint)
        readerEndpoint = readerEndpointDecoded
        let customEndpointsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .customEndpoints)
        var customEndpointsDecoded0:[Swift.String]? = nil
        if let customEndpointsContainer = customEndpointsContainer {
            customEndpointsDecoded0 = [Swift.String]()
            for string0 in customEndpointsContainer {
                if let string0 = string0 {
                    customEndpointsDecoded0?.append(string0)
                }
            }
        }
        customEndpoints = customEndpointsDecoded0
        let multiAzDecoded = try containerValues.decode(Swift.Bool.self, forKey: .multiAz)
        multiAz = multiAzDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let portDecoded = try containerValues.decode(Swift.Int.self, forKey: .port)
        port = portDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let readReplicaIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readReplicaIdentifiers)
        var readReplicaIdentifiersDecoded0:[Swift.String]? = nil
        if let readReplicaIdentifiersContainer = readReplicaIdentifiersContainer {
            readReplicaIdentifiersDecoded0 = [Swift.String]()
            for string0 in readReplicaIdentifiersContainer {
                if let string0 = string0 {
                    readReplicaIdentifiersDecoded0?.append(string0)
                }
            }
        }
        readReplicaIdentifiers = readReplicaIdentifiersDecoded0
        let vpcSecurityGroupsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup?].self, forKey: .vpcSecurityGroups)
        var vpcSecurityGroupsDecoded0:[SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup]? = nil
        if let vpcSecurityGroupsContainer = vpcSecurityGroupsContainer {
            vpcSecurityGroupsDecoded0 = [SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup]()
            for structure0 in vpcSecurityGroupsContainer {
                if let structure0 = structure0 {
                    vpcSecurityGroupsDecoded0?.append(structure0)
                }
            }
        }
        vpcSecurityGroups = vpcSecurityGroupsDecoded0
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
        let storageEncryptedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .storageEncrypted)
        storageEncrypted = storageEncryptedDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let dbClusterResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbClusterResourceId)
        dbClusterResourceId = dbClusterResourceIdDecoded
        let associatedRolesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbClusterAssociatedRole?].self, forKey: .associatedRoles)
        var associatedRolesDecoded0:[SecurityHubClientTypes.AwsRdsDbClusterAssociatedRole]? = nil
        if let associatedRolesContainer = associatedRolesContainer {
            associatedRolesDecoded0 = [SecurityHubClientTypes.AwsRdsDbClusterAssociatedRole]()
            for structure0 in associatedRolesContainer {
                if let structure0 = structure0 {
                    associatedRolesDecoded0?.append(structure0)
                }
            }
        }
        associatedRoles = associatedRolesDecoded0
        let clusterCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterCreateTime)
        clusterCreateTime = clusterCreateTimeDecoded
        let enabledCloudWatchLogsExportsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .enabledCloudWatchLogsExports)
        var enabledCloudWatchLogsExportsDecoded0:[Swift.String]? = nil
        if let enabledCloudWatchLogsExportsContainer = enabledCloudWatchLogsExportsContainer {
            enabledCloudWatchLogsExportsDecoded0 = [Swift.String]()
            for string0 in enabledCloudWatchLogsExportsContainer {
                if let string0 = string0 {
                    enabledCloudWatchLogsExportsDecoded0?.append(string0)
                }
            }
        }
        enabledCloudWatchLogsExports = enabledCloudWatchLogsExportsDecoded0
        let engineModeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineMode)
        engineMode = engineModeDecoded
        let deletionProtectionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .deletionProtection)
        deletionProtection = deletionProtectionDecoded
        let httpEndpointEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .httpEndpointEnabled)
        httpEndpointEnabled = httpEndpointEnabledDecoded
        let activityStreamStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activityStreamStatus)
        activityStreamStatus = activityStreamStatusDecoded
        let copyTagsToSnapshotDecoded = try containerValues.decode(Swift.Bool.self, forKey: .copyTagsToSnapshot)
        copyTagsToSnapshot = copyTagsToSnapshotDecoded
        let crossAccountCloneDecoded = try containerValues.decode(Swift.Bool.self, forKey: .crossAccountClone)
        crossAccountClone = crossAccountCloneDecoded
        let domainMembershipsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbDomainMembership?].self, forKey: .domainMemberships)
        var domainMembershipsDecoded0:[SecurityHubClientTypes.AwsRdsDbDomainMembership]? = nil
        if let domainMembershipsContainer = domainMembershipsContainer {
            domainMembershipsDecoded0 = [SecurityHubClientTypes.AwsRdsDbDomainMembership]()
            for structure0 in domainMembershipsContainer {
                if let structure0 = structure0 {
                    domainMembershipsDecoded0?.append(structure0)
                }
            }
        }
        domainMemberships = domainMembershipsDecoded0
        let dbClusterParameterGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbClusterParameterGroup)
        dbClusterParameterGroup = dbClusterParameterGroupDecoded
        let dbSubnetGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbSubnetGroup)
        dbSubnetGroup = dbSubnetGroupDecoded
        let dbClusterOptionGroupMembershipsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbClusterOptionGroupMembership?].self, forKey: .dbClusterOptionGroupMemberships)
        var dbClusterOptionGroupMembershipsDecoded0:[SecurityHubClientTypes.AwsRdsDbClusterOptionGroupMembership]? = nil
        if let dbClusterOptionGroupMembershipsContainer = dbClusterOptionGroupMembershipsContainer {
            dbClusterOptionGroupMembershipsDecoded0 = [SecurityHubClientTypes.AwsRdsDbClusterOptionGroupMembership]()
            for structure0 in dbClusterOptionGroupMembershipsContainer {
                if let structure0 = structure0 {
                    dbClusterOptionGroupMembershipsDecoded0?.append(structure0)
                }
            }
        }
        dbClusterOptionGroupMemberships = dbClusterOptionGroupMembershipsDecoded0
        let dbClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbClusterIdentifier)
        dbClusterIdentifier = dbClusterIdentifierDecoded
        let dbClusterMembersContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbClusterMember?].self, forKey: .dbClusterMembers)
        var dbClusterMembersDecoded0:[SecurityHubClientTypes.AwsRdsDbClusterMember]? = nil
        if let dbClusterMembersContainer = dbClusterMembersContainer {
            dbClusterMembersDecoded0 = [SecurityHubClientTypes.AwsRdsDbClusterMember]()
            for structure0 in dbClusterMembersContainer {
                if let structure0 = structure0 {
                    dbClusterMembersDecoded0?.append(structure0)
                }
            }
        }
        dbClusterMembers = dbClusterMembersDecoded0
        let iamDatabaseAuthenticationEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .iamDatabaseAuthenticationEnabled)
        iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabledDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbClusterDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbClusterDetails(activityStreamStatus: \(Swift.String(describing: activityStreamStatus)), allocatedStorage: \(Swift.String(describing: allocatedStorage)), associatedRoles: \(Swift.String(describing: associatedRoles)), availabilityZones: \(Swift.String(describing: availabilityZones)), backupRetentionPeriod: \(Swift.String(describing: backupRetentionPeriod)), clusterCreateTime: \(Swift.String(describing: clusterCreateTime)), copyTagsToSnapshot: \(Swift.String(describing: copyTagsToSnapshot)), crossAccountClone: \(Swift.String(describing: crossAccountClone)), customEndpoints: \(Swift.String(describing: customEndpoints)), databaseName: \(Swift.String(describing: databaseName)), dbClusterIdentifier: \(Swift.String(describing: dbClusterIdentifier)), dbClusterMembers: \(Swift.String(describing: dbClusterMembers)), dbClusterOptionGroupMemberships: \(Swift.String(describing: dbClusterOptionGroupMemberships)), dbClusterParameterGroup: \(Swift.String(describing: dbClusterParameterGroup)), dbClusterResourceId: \(Swift.String(describing: dbClusterResourceId)), dbSubnetGroup: \(Swift.String(describing: dbSubnetGroup)), deletionProtection: \(Swift.String(describing: deletionProtection)), domainMemberships: \(Swift.String(describing: domainMemberships)), enabledCloudWatchLogsExports: \(Swift.String(describing: enabledCloudWatchLogsExports)), endpoint: \(Swift.String(describing: endpoint)), engine: \(Swift.String(describing: engine)), engineMode: \(Swift.String(describing: engineMode)), engineVersion: \(Swift.String(describing: engineVersion)), hostedZoneId: \(Swift.String(describing: hostedZoneId)), httpEndpointEnabled: \(Swift.String(describing: httpEndpointEnabled)), iamDatabaseAuthenticationEnabled: \(Swift.String(describing: iamDatabaseAuthenticationEnabled)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), masterUsername: \(Swift.String(describing: masterUsername)), multiAz: \(Swift.String(describing: multiAz)), port: \(Swift.String(describing: port)), preferredBackupWindow: \(Swift.String(describing: preferredBackupWindow)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), readReplicaIdentifiers: \(Swift.String(describing: readReplicaIdentifiers)), readerEndpoint: \(Swift.String(describing: readerEndpoint)), status: \(Swift.String(describing: status)), storageEncrypted: \(Swift.String(describing: storageEncrypted)), vpcSecurityGroups: \(Swift.String(describing: vpcSecurityGroups)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about an Amazon RDS DB cluster.</p>
    public struct AwsRdsDbClusterDetails: Swift.Equatable {
        /// <p>The status of the database activity stream.</p>
        public let activityStreamStatus: Swift.String?
        /// <p>For all database engines except Aurora, specifies the allocated storage size in
        ///          gibibytes (GiB).</p>
        public let allocatedStorage: Swift.Int
        /// <p>A list of the IAM roles that are associated with the DB cluster.</p>
        public let associatedRoles: [SecurityHubClientTypes.AwsRdsDbClusterAssociatedRole]?
        /// <p>A list of Availability Zones (AZs) where instances in the DB cluster can be
        ///          created.</p>
        public let availabilityZones: [Swift.String]?
        /// <p>The number of days for which automated backups are retained.</p>
        public let backupRetentionPeriod: Swift.Int
        /// <p>Indicates when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let clusterCreateTime: Swift.String?
        /// <p>Whether tags are copied from the DB cluster to snapshots of the DB cluster.</p>
        public let copyTagsToSnapshot: Swift.Bool
        /// <p>Whether the DB cluster is a clone of a DB cluster owned by a different AWS
        ///          account.</p>
        public let crossAccountClone: Swift.Bool
        /// <p>A list of custom endpoints for the DB cluster.</p>
        public let customEndpoints: [Swift.String]?
        /// <p>The name of the database.</p>
        public let databaseName: Swift.String?
        /// <p>The DB cluster identifier that the user assigned to the cluster. This identifier is the
        ///          unique key that identifies a DB cluster.</p>
        public let dbClusterIdentifier: Swift.String?
        /// <p>The list of instances that make up the DB cluster.</p>
        public let dbClusterMembers: [SecurityHubClientTypes.AwsRdsDbClusterMember]?
        /// <p>The list of option group memberships for this DB cluster.</p>
        public let dbClusterOptionGroupMemberships: [SecurityHubClientTypes.AwsRdsDbClusterOptionGroupMembership]?
        /// <p>The name of the DB cluster parameter group for the DB cluster.</p>
        public let dbClusterParameterGroup: Swift.String?
        /// <p>The identifier of the DB cluster. The identifier must be unique within each AWS Region
        ///          and is immutable.</p>
        public let dbClusterResourceId: Swift.String?
        /// <p>The subnet group that is associated with the DB cluster, including the name,
        ///          description, and subnets in the subnet group.</p>
        public let dbSubnetGroup: Swift.String?
        /// <p>Whether the DB cluster has deletion protection enabled.</p>
        public let deletionProtection: Swift.Bool
        /// <p>The Active Directory domain membership records that are associated with the DB
        ///          cluster.</p>
        public let domainMemberships: [SecurityHubClientTypes.AwsRdsDbDomainMembership]?
        /// <p>A list of log types that this DB cluster is configured to export to CloudWatch
        ///          Logs.</p>
        public let enabledCloudWatchLogsExports: [Swift.String]?
        /// <p>The connection endpoint for the primary instance of the DB cluster.</p>
        public let endpoint: Swift.String?
        /// <p>The name of the database engine to use for this DB cluster.</p>
        public let engine: Swift.String?
        /// <p>The database engine mode of the DB cluster.</p>
        public let engineMode: Swift.String?
        /// <p>The version number of the database engine to use.</p>
        public let engineVersion: Swift.String?
        /// <p>Specifies the identifier that Amazon Route 53 assigns when you create a hosted
        ///          zone.</p>
        public let hostedZoneId: Swift.String?
        /// <p>Whether the HTTP endpoint for an Aurora Serverless DB cluster is enabled.</p>
        public let httpEndpointEnabled: Swift.Bool
        /// <p>Whether the mapping of IAM accounts to database accounts is enabled.</p>
        public let iamDatabaseAuthenticationEnabled: Swift.Bool
        /// <p>The ARN of the AWS KMS master key that is used to encrypt the database instances in the
        ///          DB cluster.</p>
        public let kmsKeyId: Swift.String?
        /// <p>The name of the master user for the DB cluster.</p>
        public let masterUsername: Swift.String?
        /// <p>Whether the DB cluster has instances in multiple Availability Zones.</p>
        public let multiAz: Swift.Bool
        /// <p>The port number on which the DB instances in the DB cluster accept connections.</p>
        public let port: Swift.Int
        /// <p>The range of time each day when automated backups are created, if automated backups are
        ///          enabled.</p>
        ///          <p>Uses the format <code>HH:MM-HH:MM</code>. For example, <code>04:52-05:22</code>.</p>
        public let preferredBackupWindow: Swift.String?
        /// <p>The weekly time range during which system maintenance can occur, in Universal
        ///          Coordinated Time (UTC).</p>
        ///          <p>Uses the format <code><day>:HH:MM-<day>:HH:MM</code>.</p>
        ///          <p>For the day values, use
        ///             <code>mon</code>|<code>tue</code>|<code>wed</code>|<code>thu</code>|<code>fri</code>|<code>sat</code>|<code>sun</code>.</p>
        ///          <p>For example, <code>sun:09:32-sun:10:02</code>.</p>
        public let preferredMaintenanceWindow: Swift.String?
        /// <p>The identifiers of the read replicas that are associated with this DB cluster.</p>
        public let readReplicaIdentifiers: [Swift.String]?
        /// <p>The reader endpoint for the DB cluster.</p>
        public let readerEndpoint: Swift.String?
        /// <p>The current status of this DB cluster.</p>
        public let status: Swift.String?
        /// <p>Whether the DB cluster is encrypted.</p>
        public let storageEncrypted: Swift.Bool
        /// <p>A list of VPC security groups that the DB cluster belongs to.</p>
        public let vpcSecurityGroups: [SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup]?

        public init (
            activityStreamStatus: Swift.String? = nil,
            allocatedStorage: Swift.Int = 0,
            associatedRoles: [SecurityHubClientTypes.AwsRdsDbClusterAssociatedRole]? = nil,
            availabilityZones: [Swift.String]? = nil,
            backupRetentionPeriod: Swift.Int = 0,
            clusterCreateTime: Swift.String? = nil,
            copyTagsToSnapshot: Swift.Bool = false,
            crossAccountClone: Swift.Bool = false,
            customEndpoints: [Swift.String]? = nil,
            databaseName: Swift.String? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            dbClusterMembers: [SecurityHubClientTypes.AwsRdsDbClusterMember]? = nil,
            dbClusterOptionGroupMemberships: [SecurityHubClientTypes.AwsRdsDbClusterOptionGroupMembership]? = nil,
            dbClusterParameterGroup: Swift.String? = nil,
            dbClusterResourceId: Swift.String? = nil,
            dbSubnetGroup: Swift.String? = nil,
            deletionProtection: Swift.Bool = false,
            domainMemberships: [SecurityHubClientTypes.AwsRdsDbDomainMembership]? = nil,
            enabledCloudWatchLogsExports: [Swift.String]? = nil,
            endpoint: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineMode: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            hostedZoneId: Swift.String? = nil,
            httpEndpointEnabled: Swift.Bool = false,
            iamDatabaseAuthenticationEnabled: Swift.Bool = false,
            kmsKeyId: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            multiAz: Swift.Bool = false,
            port: Swift.Int = 0,
            preferredBackupWindow: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            readReplicaIdentifiers: [Swift.String]? = nil,
            readerEndpoint: Swift.String? = nil,
            status: Swift.String? = nil,
            storageEncrypted: Swift.Bool = false,
            vpcSecurityGroups: [SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup]? = nil
        )
        {
            self.activityStreamStatus = activityStreamStatus
            self.allocatedStorage = allocatedStorage
            self.associatedRoles = associatedRoles
            self.availabilityZones = availabilityZones
            self.backupRetentionPeriod = backupRetentionPeriod
            self.clusterCreateTime = clusterCreateTime
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.crossAccountClone = crossAccountClone
            self.customEndpoints = customEndpoints
            self.databaseName = databaseName
            self.dbClusterIdentifier = dbClusterIdentifier
            self.dbClusterMembers = dbClusterMembers
            self.dbClusterOptionGroupMemberships = dbClusterOptionGroupMemberships
            self.dbClusterParameterGroup = dbClusterParameterGroup
            self.dbClusterResourceId = dbClusterResourceId
            self.dbSubnetGroup = dbSubnetGroup
            self.deletionProtection = deletionProtection
            self.domainMemberships = domainMemberships
            self.enabledCloudWatchLogsExports = enabledCloudWatchLogsExports
            self.endpoint = endpoint
            self.engine = engine
            self.engineMode = engineMode
            self.engineVersion = engineVersion
            self.hostedZoneId = hostedZoneId
            self.httpEndpointEnabled = httpEndpointEnabled
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.kmsKeyId = kmsKeyId
            self.masterUsername = masterUsername
            self.multiAz = multiAz
            self.port = port
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.readReplicaIdentifiers = readReplicaIdentifiers
            self.readerEndpoint = readerEndpoint
            self.status = status
            self.storageEncrypted = storageEncrypted
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbClusterMember: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterParameterGroupStatus = "DbClusterParameterGroupStatus"
        case dbInstanceIdentifier = "DbInstanceIdentifier"
        case isClusterWriter = "IsClusterWriter"
        case promotionTier = "PromotionTier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dbClusterParameterGroupStatus = dbClusterParameterGroupStatus {
            try encodeContainer.encode(dbClusterParameterGroupStatus, forKey: .dbClusterParameterGroupStatus)
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try encodeContainer.encode(dbInstanceIdentifier, forKey: .dbInstanceIdentifier)
        }
        if isClusterWriter != false {
            try encodeContainer.encode(isClusterWriter, forKey: .isClusterWriter)
        }
        if promotionTier != 0 {
            try encodeContainer.encode(promotionTier, forKey: .promotionTier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let isClusterWriterDecoded = try containerValues.decode(Swift.Bool.self, forKey: .isClusterWriter)
        isClusterWriter = isClusterWriterDecoded
        let promotionTierDecoded = try containerValues.decode(Swift.Int.self, forKey: .promotionTier)
        promotionTier = promotionTierDecoded
        let dbInstanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbInstanceIdentifier)
        dbInstanceIdentifier = dbInstanceIdentifierDecoded
        let dbClusterParameterGroupStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbClusterParameterGroupStatus)
        dbClusterParameterGroupStatus = dbClusterParameterGroupStatusDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbClusterMember: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbClusterMember(dbClusterParameterGroupStatus: \(Swift.String(describing: dbClusterParameterGroupStatus)), dbInstanceIdentifier: \(Swift.String(describing: dbInstanceIdentifier)), isClusterWriter: \(Swift.String(describing: isClusterWriter)), promotionTier: \(Swift.String(describing: promotionTier)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about an instance in the DB cluster.</p>
    public struct AwsRdsDbClusterMember: Swift.Equatable {
        /// <p>The status of the DB cluster parameter group for this member of the DB cluster.</p>
        public let dbClusterParameterGroupStatus: Swift.String?
        /// <p>The instance identifier for this member of the DB cluster.</p>
        public let dbInstanceIdentifier: Swift.String?
        /// <p>Whether the cluster member is the primary instance for the DB cluster.</p>
        public let isClusterWriter: Swift.Bool
        /// <p>Specifies the order in which an Aurora replica is promoted to the primary instance when
        ///          the existing primary instance fails.</p>
        public let promotionTier: Swift.Int

        public init (
            dbClusterParameterGroupStatus: Swift.String? = nil,
            dbInstanceIdentifier: Swift.String? = nil,
            isClusterWriter: Swift.Bool = false,
            promotionTier: Swift.Int = 0
        )
        {
            self.dbClusterParameterGroupStatus = dbClusterParameterGroupStatus
            self.dbInstanceIdentifier = dbInstanceIdentifier
            self.isClusterWriter = isClusterWriter
            self.promotionTier = promotionTier
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbClusterOptionGroupMembership: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbClusterOptionGroupName = "DbClusterOptionGroupName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dbClusterOptionGroupName = dbClusterOptionGroupName {
            try encodeContainer.encode(dbClusterOptionGroupName, forKey: .dbClusterOptionGroupName)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dbClusterOptionGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbClusterOptionGroupName)
        dbClusterOptionGroupName = dbClusterOptionGroupNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbClusterOptionGroupMembership: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbClusterOptionGroupMembership(dbClusterOptionGroupName: \(Swift.String(describing: dbClusterOptionGroupName)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about an option group membership for a DB cluster.</p>
    public struct AwsRdsDbClusterOptionGroupMembership: Swift.Equatable {
        /// <p>The name of the DB cluster option group.</p>
        public let dbClusterOptionGroupName: Swift.String?
        /// <p>The status of the DB cluster option group.</p>
        public let status: Swift.String?

        public init (
            dbClusterOptionGroupName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.dbClusterOptionGroupName = dbClusterOptionGroupName
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbClusterSnapshotDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case availabilityZones = "AvailabilityZones"
        case clusterCreateTime = "ClusterCreateTime"
        case dbClusterIdentifier = "DbClusterIdentifier"
        case dbClusterSnapshotIdentifier = "DbClusterSnapshotIdentifier"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case iamDatabaseAuthenticationEnabled = "IamDatabaseAuthenticationEnabled"
        case kmsKeyId = "KmsKeyId"
        case licenseModel = "LicenseModel"
        case masterUsername = "MasterUsername"
        case percentProgress = "PercentProgress"
        case port = "Port"
        case snapshotCreateTime = "SnapshotCreateTime"
        case snapshotType = "SnapshotType"
        case status = "Status"
        case storageEncrypted = "StorageEncrypted"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedStorage != 0 {
            try encodeContainer.encode(allocatedStorage, forKey: .allocatedStorage)
        }
        if let availabilityZones = availabilityZones {
            var availabilityZonesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .availabilityZones)
            for stringlist0 in availabilityZones {
                try availabilityZonesContainer.encode(stringlist0)
            }
        }
        if let clusterCreateTime = clusterCreateTime {
            try encodeContainer.encode(clusterCreateTime, forKey: .clusterCreateTime)
        }
        if let dbClusterIdentifier = dbClusterIdentifier {
            try encodeContainer.encode(dbClusterIdentifier, forKey: .dbClusterIdentifier)
        }
        if let dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier {
            try encodeContainer.encode(dbClusterSnapshotIdentifier, forKey: .dbClusterSnapshotIdentifier)
        }
        if let engine = engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if iamDatabaseAuthenticationEnabled != false {
            try encodeContainer.encode(iamDatabaseAuthenticationEnabled, forKey: .iamDatabaseAuthenticationEnabled)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let licenseModel = licenseModel {
            try encodeContainer.encode(licenseModel, forKey: .licenseModel)
        }
        if let masterUsername = masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if percentProgress != 0 {
            try encodeContainer.encode(percentProgress, forKey: .percentProgress)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let snapshotCreateTime = snapshotCreateTime {
            try encodeContainer.encode(snapshotCreateTime, forKey: .snapshotCreateTime)
        }
        if let snapshotType = snapshotType {
            try encodeContainer.encode(snapshotType, forKey: .snapshotType)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if storageEncrypted != false {
            try encodeContainer.encode(storageEncrypted, forKey: .storageEncrypted)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let availabilityZonesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .availabilityZones)
        var availabilityZonesDecoded0:[Swift.String]? = nil
        if let availabilityZonesContainer = availabilityZonesContainer {
            availabilityZonesDecoded0 = [Swift.String]()
            for string0 in availabilityZonesContainer {
                if let string0 = string0 {
                    availabilityZonesDecoded0?.append(string0)
                }
            }
        }
        availabilityZones = availabilityZonesDecoded0
        let snapshotCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotCreateTime)
        snapshotCreateTime = snapshotCreateTimeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let allocatedStorageDecoded = try containerValues.decode(Swift.Int.self, forKey: .allocatedStorage)
        allocatedStorage = allocatedStorageDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let portDecoded = try containerValues.decode(Swift.Int.self, forKey: .port)
        port = portDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let clusterCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterCreateTime)
        clusterCreateTime = clusterCreateTimeDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let licenseModelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseModel)
        licenseModel = licenseModelDecoded
        let snapshotTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotType)
        snapshotType = snapshotTypeDecoded
        let percentProgressDecoded = try containerValues.decode(Swift.Int.self, forKey: .percentProgress)
        percentProgress = percentProgressDecoded
        let storageEncryptedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .storageEncrypted)
        storageEncrypted = storageEncryptedDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let dbClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbClusterIdentifier)
        dbClusterIdentifier = dbClusterIdentifierDecoded
        let dbClusterSnapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbClusterSnapshotIdentifier)
        dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifierDecoded
        let iamDatabaseAuthenticationEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .iamDatabaseAuthenticationEnabled)
        iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabledDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbClusterSnapshotDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbClusterSnapshotDetails(allocatedStorage: \(Swift.String(describing: allocatedStorage)), availabilityZones: \(Swift.String(describing: availabilityZones)), clusterCreateTime: \(Swift.String(describing: clusterCreateTime)), dbClusterIdentifier: \(Swift.String(describing: dbClusterIdentifier)), dbClusterSnapshotIdentifier: \(Swift.String(describing: dbClusterSnapshotIdentifier)), engine: \(Swift.String(describing: engine)), engineVersion: \(Swift.String(describing: engineVersion)), iamDatabaseAuthenticationEnabled: \(Swift.String(describing: iamDatabaseAuthenticationEnabled)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), licenseModel: \(Swift.String(describing: licenseModel)), masterUsername: \(Swift.String(describing: masterUsername)), percentProgress: \(Swift.String(describing: percentProgress)), port: \(Swift.String(describing: port)), snapshotCreateTime: \(Swift.String(describing: snapshotCreateTime)), snapshotType: \(Swift.String(describing: snapshotType)), status: \(Swift.String(describing: status)), storageEncrypted: \(Swift.String(describing: storageEncrypted)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about an Amazon RDS DB cluster snapshot.</p>
    public struct AwsRdsDbClusterSnapshotDetails: Swift.Equatable {
        /// <p>Specifies the allocated storage size in gibibytes (GiB).</p>
        public let allocatedStorage: Swift.Int
        /// <p>A list of Availability Zones where instances in the DB cluster can be created.</p>
        public let availabilityZones: [Swift.String]?
        /// <p>Indicates when the DB cluster was created, in Universal Coordinated Time (UTC).</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let clusterCreateTime: Swift.String?
        /// <p>The DB cluster identifier.</p>
        public let dbClusterIdentifier: Swift.String?
        /// <p>The identifier of the DB cluster snapshot.</p>
        public let dbClusterSnapshotIdentifier: Swift.String?
        /// <p>The name of the database engine that you want to use for this DB instance.</p>
        public let engine: Swift.String?
        /// <p>The version of the database engine to use.</p>
        public let engineVersion: Swift.String?
        /// <p>Whether mapping of IAM accounts to database accounts is enabled.</p>
        public let iamDatabaseAuthenticationEnabled: Swift.Bool
        /// <p>The ARN of the AWS KMS master key that is used to encrypt the database instances in the
        ///          DB cluster.</p>
        public let kmsKeyId: Swift.String?
        /// <p>The license model information for this DB cluster snapshot.</p>
        public let licenseModel: Swift.String?
        /// <p>The name of the master user for the DB cluster.</p>
        public let masterUsername: Swift.String?
        /// <p>Specifies the percentage of the estimated data that has been transferred.</p>
        public let percentProgress: Swift.Int
        /// <p>The port number on which the DB instances in the DB cluster accept connections.</p>
        public let port: Swift.Int
        /// <p>Indicates when the snapshot was taken.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let snapshotCreateTime: Swift.String?
        /// <p>The type of DB cluster snapshot.</p>
        public let snapshotType: Swift.String?
        /// <p>The status of this DB cluster snapshot.</p>
        public let status: Swift.String?
        /// <p>Whether the DB cluster is encrypted.</p>
        public let storageEncrypted: Swift.Bool
        /// <p>The VPC ID that is associated with the DB cluster snapshot.</p>
        public let vpcId: Swift.String?

        public init (
            allocatedStorage: Swift.Int = 0,
            availabilityZones: [Swift.String]? = nil,
            clusterCreateTime: Swift.String? = nil,
            dbClusterIdentifier: Swift.String? = nil,
            dbClusterSnapshotIdentifier: Swift.String? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            iamDatabaseAuthenticationEnabled: Swift.Bool = false,
            kmsKeyId: Swift.String? = nil,
            licenseModel: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            percentProgress: Swift.Int = 0,
            port: Swift.Int = 0,
            snapshotCreateTime: Swift.String? = nil,
            snapshotType: Swift.String? = nil,
            status: Swift.String? = nil,
            storageEncrypted: Swift.Bool = false,
            vpcId: Swift.String? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.availabilityZones = availabilityZones
            self.clusterCreateTime = clusterCreateTime
            self.dbClusterIdentifier = dbClusterIdentifier
            self.dbClusterSnapshotIdentifier = dbClusterSnapshotIdentifier
            self.engine = engine
            self.engineVersion = engineVersion
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.kmsKeyId = kmsKeyId
            self.licenseModel = licenseModel
            self.masterUsername = masterUsername
            self.percentProgress = percentProgress
            self.port = port
            self.snapshotCreateTime = snapshotCreateTime
            self.snapshotType = snapshotType
            self.status = status
            self.storageEncrypted = storageEncrypted
            self.vpcId = vpcId
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbDomainMembership: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case domain = "Domain"
        case fqdn = "Fqdn"
        case iamRoleName = "IamRoleName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let fqdn = fqdn {
            try encodeContainer.encode(fqdn, forKey: .fqdn)
        }
        if let iamRoleName = iamRoleName {
            try encodeContainer.encode(iamRoleName, forKey: .iamRoleName)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let fqdnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .fqdn)
        fqdn = fqdnDecoded
        let iamRoleNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleName)
        iamRoleName = iamRoleNameDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbDomainMembership: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbDomainMembership(domain: \(Swift.String(describing: domain)), fqdn: \(Swift.String(describing: fqdn)), iamRoleName: \(Swift.String(describing: iamRoleName)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about an Active Directory domain membership record associated with the DB
    ///          instance.</p>
    public struct AwsRdsDbDomainMembership: Swift.Equatable {
        /// <p>The identifier of the Active Directory domain.</p>
        public let domain: Swift.String?
        /// <p>The fully qualified domain name of the Active Directory domain.</p>
        public let fqdn: Swift.String?
        /// <p>The name of the IAM role to use when making API calls to the Directory Service.</p>
        public let iamRoleName: Swift.String?
        /// <p>The status of the Active Directory Domain membership for the DB instance.</p>
        public let status: Swift.String?

        public init (
            domain: Swift.String? = nil,
            fqdn: Swift.String? = nil,
            iamRoleName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.domain = domain
            self.fqdn = fqdn
            self.iamRoleName = iamRoleName
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbInstanceAssociatedRole: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case featureName = "FeatureName"
        case roleArn = "RoleArn"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let featureName = featureName {
            try encodeContainer.encode(featureName, forKey: .featureName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let roleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .roleArn)
        roleArn = roleArnDecoded
        let featureNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .featureName)
        featureName = featureNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbInstanceAssociatedRole: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbInstanceAssociatedRole(featureName: \(Swift.String(describing: featureName)), roleArn: \(Swift.String(describing: roleArn)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>An AWS Identity and Access Management (IAM) role associated with the DB instance.</p>
    public struct AwsRdsDbInstanceAssociatedRole: Swift.Equatable {
        /// <p>The name of the feature associated with the IAM)role.</p>
        public let featureName: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the IAM role that is associated with the DB
        ///          instance.</p>
        public let roleArn: Swift.String?
        /// <p>Describes the state of the association between the IAM role and the DB instance. The
        ///             <code>Status</code> property returns one of the following values:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>ACTIVE</code> - The IAM role ARN is associated with the DB instance and can
        ///                be used to access other AWS services on your behalf.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>PENDING</code> - The IAM role ARN is being associated with the DB
        ///                instance.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>INVALID</code> - The IAM role ARN is associated with the DB instance. But
        ///                the DB instance is unable to assume the IAM role in order to access other AWS
        ///                services on your behalf. </p>
        ///             </li>
        ///          </ul>
        public let status: Swift.String?

        public init (
            featureName: Swift.String? = nil,
            roleArn: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.featureName = featureName
            self.roleArn = roleArn
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbInstanceDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case associatedRoles = "AssociatedRoles"
        case autoMinorVersionUpgrade = "AutoMinorVersionUpgrade"
        case availabilityZone = "AvailabilityZone"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case cACertificateIdentifier = "CACertificateIdentifier"
        case characterSetName = "CharacterSetName"
        case copyTagsToSnapshot = "CopyTagsToSnapshot"
        case dBClusterIdentifier = "DBClusterIdentifier"
        case dBInstanceClass = "DBInstanceClass"
        case dBInstanceIdentifier = "DBInstanceIdentifier"
        case dBName = "DBName"
        case dbInstancePort = "DbInstancePort"
        case dbInstanceStatus = "DbInstanceStatus"
        case dbParameterGroups = "DbParameterGroups"
        case dbSecurityGroups = "DbSecurityGroups"
        case dbSubnetGroup = "DbSubnetGroup"
        case dbiResourceId = "DbiResourceId"
        case deletionProtection = "DeletionProtection"
        case domainMemberships = "DomainMemberships"
        case enabledCloudWatchLogsExports = "EnabledCloudWatchLogsExports"
        case endpoint = "Endpoint"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case enhancedMonitoringResourceArn = "EnhancedMonitoringResourceArn"
        case iAMDatabaseAuthenticationEnabled = "IAMDatabaseAuthenticationEnabled"
        case instanceCreateTime = "InstanceCreateTime"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case latestRestorableTime = "LatestRestorableTime"
        case licenseModel = "LicenseModel"
        case listenerEndpoint = "ListenerEndpoint"
        case masterUsername = "MasterUsername"
        case maxAllocatedStorage = "MaxAllocatedStorage"
        case monitoringInterval = "MonitoringInterval"
        case monitoringRoleArn = "MonitoringRoleArn"
        case multiAz = "MultiAz"
        case optionGroupMemberships = "OptionGroupMemberships"
        case pendingModifiedValues = "PendingModifiedValues"
        case performanceInsightsEnabled = "PerformanceInsightsEnabled"
        case performanceInsightsKmsKeyId = "PerformanceInsightsKmsKeyId"
        case performanceInsightsRetentionPeriod = "PerformanceInsightsRetentionPeriod"
        case preferredBackupWindow = "PreferredBackupWindow"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case processorFeatures = "ProcessorFeatures"
        case promotionTier = "PromotionTier"
        case publiclyAccessible = "PubliclyAccessible"
        case readReplicaDBClusterIdentifiers = "ReadReplicaDBClusterIdentifiers"
        case readReplicaDBInstanceIdentifiers = "ReadReplicaDBInstanceIdentifiers"
        case readReplicaSourceDBInstanceIdentifier = "ReadReplicaSourceDBInstanceIdentifier"
        case secondaryAvailabilityZone = "SecondaryAvailabilityZone"
        case statusInfos = "StatusInfos"
        case storageEncrypted = "StorageEncrypted"
        case storageType = "StorageType"
        case tdeCredentialArn = "TdeCredentialArn"
        case timezone = "Timezone"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedStorage != 0 {
            try encodeContainer.encode(allocatedStorage, forKey: .allocatedStorage)
        }
        if let associatedRoles = associatedRoles {
            var associatedRolesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .associatedRoles)
            for awsrdsdbinstanceassociatedroles0 in associatedRoles {
                try associatedRolesContainer.encode(awsrdsdbinstanceassociatedroles0)
            }
        }
        if autoMinorVersionUpgrade != false {
            try encodeContainer.encode(autoMinorVersionUpgrade, forKey: .autoMinorVersionUpgrade)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if backupRetentionPeriod != 0 {
            try encodeContainer.encode(backupRetentionPeriod, forKey: .backupRetentionPeriod)
        }
        if let cACertificateIdentifier = cACertificateIdentifier {
            try encodeContainer.encode(cACertificateIdentifier, forKey: .cACertificateIdentifier)
        }
        if let characterSetName = characterSetName {
            try encodeContainer.encode(characterSetName, forKey: .characterSetName)
        }
        if copyTagsToSnapshot != false {
            try encodeContainer.encode(copyTagsToSnapshot, forKey: .copyTagsToSnapshot)
        }
        if let dBClusterIdentifier = dBClusterIdentifier {
            try encodeContainer.encode(dBClusterIdentifier, forKey: .dBClusterIdentifier)
        }
        if let dBInstanceClass = dBInstanceClass {
            try encodeContainer.encode(dBInstanceClass, forKey: .dBInstanceClass)
        }
        if let dBInstanceIdentifier = dBInstanceIdentifier {
            try encodeContainer.encode(dBInstanceIdentifier, forKey: .dBInstanceIdentifier)
        }
        if let dBName = dBName {
            try encodeContainer.encode(dBName, forKey: .dBName)
        }
        if dbInstancePort != 0 {
            try encodeContainer.encode(dbInstancePort, forKey: .dbInstancePort)
        }
        if let dbInstanceStatus = dbInstanceStatus {
            try encodeContainer.encode(dbInstanceStatus, forKey: .dbInstanceStatus)
        }
        if let dbParameterGroups = dbParameterGroups {
            var dbParameterGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dbParameterGroups)
            for awsrdsdbparametergroups0 in dbParameterGroups {
                try dbParameterGroupsContainer.encode(awsrdsdbparametergroups0)
            }
        }
        if let dbSecurityGroups = dbSecurityGroups {
            var dbSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .dbSecurityGroups)
            for stringlist0 in dbSecurityGroups {
                try dbSecurityGroupsContainer.encode(stringlist0)
            }
        }
        if let dbSubnetGroup = dbSubnetGroup {
            try encodeContainer.encode(dbSubnetGroup, forKey: .dbSubnetGroup)
        }
        if let dbiResourceId = dbiResourceId {
            try encodeContainer.encode(dbiResourceId, forKey: .dbiResourceId)
        }
        if deletionProtection != false {
            try encodeContainer.encode(deletionProtection, forKey: .deletionProtection)
        }
        if let domainMemberships = domainMemberships {
            var domainMembershipsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .domainMemberships)
            for awsrdsdbdomainmemberships0 in domainMemberships {
                try domainMembershipsContainer.encode(awsrdsdbdomainmemberships0)
            }
        }
        if let enabledCloudWatchLogsExports = enabledCloudWatchLogsExports {
            var enabledCloudWatchLogsExportsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .enabledCloudWatchLogsExports)
            for stringlist0 in enabledCloudWatchLogsExports {
                try enabledCloudWatchLogsExportsContainer.encode(stringlist0)
            }
        }
        if let endpoint = endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let engine = engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if let enhancedMonitoringResourceArn = enhancedMonitoringResourceArn {
            try encodeContainer.encode(enhancedMonitoringResourceArn, forKey: .enhancedMonitoringResourceArn)
        }
        if iAMDatabaseAuthenticationEnabled != false {
            try encodeContainer.encode(iAMDatabaseAuthenticationEnabled, forKey: .iAMDatabaseAuthenticationEnabled)
        }
        if let instanceCreateTime = instanceCreateTime {
            try encodeContainer.encode(instanceCreateTime, forKey: .instanceCreateTime)
        }
        if iops != 0 {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let latestRestorableTime = latestRestorableTime {
            try encodeContainer.encode(latestRestorableTime, forKey: .latestRestorableTime)
        }
        if let licenseModel = licenseModel {
            try encodeContainer.encode(licenseModel, forKey: .licenseModel)
        }
        if let listenerEndpoint = listenerEndpoint {
            try encodeContainer.encode(listenerEndpoint, forKey: .listenerEndpoint)
        }
        if let masterUsername = masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if maxAllocatedStorage != 0 {
            try encodeContainer.encode(maxAllocatedStorage, forKey: .maxAllocatedStorage)
        }
        if monitoringInterval != 0 {
            try encodeContainer.encode(monitoringInterval, forKey: .monitoringInterval)
        }
        if let monitoringRoleArn = monitoringRoleArn {
            try encodeContainer.encode(monitoringRoleArn, forKey: .monitoringRoleArn)
        }
        if multiAz != false {
            try encodeContainer.encode(multiAz, forKey: .multiAz)
        }
        if let optionGroupMemberships = optionGroupMemberships {
            var optionGroupMembershipsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .optionGroupMemberships)
            for awsrdsdboptiongroupmemberships0 in optionGroupMemberships {
                try optionGroupMembershipsContainer.encode(awsrdsdboptiongroupmemberships0)
            }
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try encodeContainer.encode(pendingModifiedValues, forKey: .pendingModifiedValues)
        }
        if performanceInsightsEnabled != false {
            try encodeContainer.encode(performanceInsightsEnabled, forKey: .performanceInsightsEnabled)
        }
        if let performanceInsightsKmsKeyId = performanceInsightsKmsKeyId {
            try encodeContainer.encode(performanceInsightsKmsKeyId, forKey: .performanceInsightsKmsKeyId)
        }
        if performanceInsightsRetentionPeriod != 0 {
            try encodeContainer.encode(performanceInsightsRetentionPeriod, forKey: .performanceInsightsRetentionPeriod)
        }
        if let preferredBackupWindow = preferredBackupWindow {
            try encodeContainer.encode(preferredBackupWindow, forKey: .preferredBackupWindow)
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if let processorFeatures = processorFeatures {
            var processorFeaturesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processorFeatures)
            for awsrdsdbprocessorfeatures0 in processorFeatures {
                try processorFeaturesContainer.encode(awsrdsdbprocessorfeatures0)
            }
        }
        if promotionTier != 0 {
            try encodeContainer.encode(promotionTier, forKey: .promotionTier)
        }
        if publiclyAccessible != false {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let readReplicaDBClusterIdentifiers = readReplicaDBClusterIdentifiers {
            var readReplicaDBClusterIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readReplicaDBClusterIdentifiers)
            for stringlist0 in readReplicaDBClusterIdentifiers {
                try readReplicaDBClusterIdentifiersContainer.encode(stringlist0)
            }
        }
        if let readReplicaDBInstanceIdentifiers = readReplicaDBInstanceIdentifiers {
            var readReplicaDBInstanceIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .readReplicaDBInstanceIdentifiers)
            for stringlist0 in readReplicaDBInstanceIdentifiers {
                try readReplicaDBInstanceIdentifiersContainer.encode(stringlist0)
            }
        }
        if let readReplicaSourceDBInstanceIdentifier = readReplicaSourceDBInstanceIdentifier {
            try encodeContainer.encode(readReplicaSourceDBInstanceIdentifier, forKey: .readReplicaSourceDBInstanceIdentifier)
        }
        if let secondaryAvailabilityZone = secondaryAvailabilityZone {
            try encodeContainer.encode(secondaryAvailabilityZone, forKey: .secondaryAvailabilityZone)
        }
        if let statusInfos = statusInfos {
            var statusInfosContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statusInfos)
            for awsrdsdbstatusinfos0 in statusInfos {
                try statusInfosContainer.encode(awsrdsdbstatusinfos0)
            }
        }
        if storageEncrypted != false {
            try encodeContainer.encode(storageEncrypted, forKey: .storageEncrypted)
        }
        if let storageType = storageType {
            try encodeContainer.encode(storageType, forKey: .storageType)
        }
        if let tdeCredentialArn = tdeCredentialArn {
            try encodeContainer.encode(tdeCredentialArn, forKey: .tdeCredentialArn)
        }
        if let timezone = timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
        if let vpcSecurityGroups = vpcSecurityGroups {
            var vpcSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcSecurityGroups)
            for awsrdsdbinstancevpcsecuritygroups0 in vpcSecurityGroups {
                try vpcSecurityGroupsContainer.encode(awsrdsdbinstancevpcsecuritygroups0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associatedRolesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbInstanceAssociatedRole?].self, forKey: .associatedRoles)
        var associatedRolesDecoded0:[SecurityHubClientTypes.AwsRdsDbInstanceAssociatedRole]? = nil
        if let associatedRolesContainer = associatedRolesContainer {
            associatedRolesDecoded0 = [SecurityHubClientTypes.AwsRdsDbInstanceAssociatedRole]()
            for structure0 in associatedRolesContainer {
                if let structure0 = structure0 {
                    associatedRolesDecoded0?.append(structure0)
                }
            }
        }
        associatedRoles = associatedRolesDecoded0
        let cACertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cACertificateIdentifier)
        cACertificateIdentifier = cACertificateIdentifierDecoded
        let dBClusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBClusterIdentifier)
        dBClusterIdentifier = dBClusterIdentifierDecoded
        let dBInstanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBInstanceIdentifier)
        dBInstanceIdentifier = dBInstanceIdentifierDecoded
        let dBInstanceClassDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBInstanceClass)
        dBInstanceClass = dBInstanceClassDecoded
        let dbInstancePortDecoded = try containerValues.decode(Swift.Int.self, forKey: .dbInstancePort)
        dbInstancePort = dbInstancePortDecoded
        let dbiResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbiResourceId)
        dbiResourceId = dbiResourceIdDecoded
        let dBNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBName)
        dBName = dBNameDecoded
        let deletionProtectionDecoded = try containerValues.decode(Swift.Bool.self, forKey: .deletionProtection)
        deletionProtection = deletionProtectionDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbInstanceEndpoint.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let iAMDatabaseAuthenticationEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .iAMDatabaseAuthenticationEnabled)
        iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabledDecoded
        let instanceCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceCreateTime)
        instanceCreateTime = instanceCreateTimeDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let publiclyAccessibleDecoded = try containerValues.decode(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let storageEncryptedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .storageEncrypted)
        storageEncrypted = storageEncryptedDecoded
        let tdeCredentialArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tdeCredentialArn)
        tdeCredentialArn = tdeCredentialArnDecoded
        let vpcSecurityGroupsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup?].self, forKey: .vpcSecurityGroups)
        var vpcSecurityGroupsDecoded0:[SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup]? = nil
        if let vpcSecurityGroupsContainer = vpcSecurityGroupsContainer {
            vpcSecurityGroupsDecoded0 = [SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup]()
            for structure0 in vpcSecurityGroupsContainer {
                if let structure0 = structure0 {
                    vpcSecurityGroupsDecoded0?.append(structure0)
                }
            }
        }
        vpcSecurityGroups = vpcSecurityGroupsDecoded0
        let multiAzDecoded = try containerValues.decode(Swift.Bool.self, forKey: .multiAz)
        multiAz = multiAzDecoded
        let enhancedMonitoringResourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .enhancedMonitoringResourceArn)
        enhancedMonitoringResourceArn = enhancedMonitoringResourceArnDecoded
        let dbInstanceStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbInstanceStatus)
        dbInstanceStatus = dbInstanceStatusDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let allocatedStorageDecoded = try containerValues.decode(Swift.Int.self, forKey: .allocatedStorage)
        allocatedStorage = allocatedStorageDecoded
        let preferredBackupWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredBackupWindow)
        preferredBackupWindow = preferredBackupWindowDecoded
        let backupRetentionPeriodDecoded = try containerValues.decode(Swift.Int.self, forKey: .backupRetentionPeriod)
        backupRetentionPeriod = backupRetentionPeriodDecoded
        let dbSecurityGroupsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .dbSecurityGroups)
        var dbSecurityGroupsDecoded0:[Swift.String]? = nil
        if let dbSecurityGroupsContainer = dbSecurityGroupsContainer {
            dbSecurityGroupsDecoded0 = [Swift.String]()
            for string0 in dbSecurityGroupsContainer {
                if let string0 = string0 {
                    dbSecurityGroupsDecoded0?.append(string0)
                }
            }
        }
        dbSecurityGroups = dbSecurityGroupsDecoded0
        let dbParameterGroupsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbParameterGroup?].self, forKey: .dbParameterGroups)
        var dbParameterGroupsDecoded0:[SecurityHubClientTypes.AwsRdsDbParameterGroup]? = nil
        if let dbParameterGroupsContainer = dbParameterGroupsContainer {
            dbParameterGroupsDecoded0 = [SecurityHubClientTypes.AwsRdsDbParameterGroup]()
            for structure0 in dbParameterGroupsContainer {
                if let structure0 = structure0 {
                    dbParameterGroupsDecoded0?.append(structure0)
                }
            }
        }
        dbParameterGroups = dbParameterGroupsDecoded0
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let dbSubnetGroupDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbSubnetGroup.self, forKey: .dbSubnetGroup)
        dbSubnetGroup = dbSubnetGroupDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbPendingModifiedValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        let latestRestorableTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .latestRestorableTime)
        latestRestorableTime = latestRestorableTimeDecoded
        let autoMinorVersionUpgradeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoMinorVersionUpgrade)
        autoMinorVersionUpgrade = autoMinorVersionUpgradeDecoded
        let readReplicaSourceDBInstanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .readReplicaSourceDBInstanceIdentifier)
        readReplicaSourceDBInstanceIdentifier = readReplicaSourceDBInstanceIdentifierDecoded
        let readReplicaDBInstanceIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readReplicaDBInstanceIdentifiers)
        var readReplicaDBInstanceIdentifiersDecoded0:[Swift.String]? = nil
        if let readReplicaDBInstanceIdentifiersContainer = readReplicaDBInstanceIdentifiersContainer {
            readReplicaDBInstanceIdentifiersDecoded0 = [Swift.String]()
            for string0 in readReplicaDBInstanceIdentifiersContainer {
                if let string0 = string0 {
                    readReplicaDBInstanceIdentifiersDecoded0?.append(string0)
                }
            }
        }
        readReplicaDBInstanceIdentifiers = readReplicaDBInstanceIdentifiersDecoded0
        let readReplicaDBClusterIdentifiersContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .readReplicaDBClusterIdentifiers)
        var readReplicaDBClusterIdentifiersDecoded0:[Swift.String]? = nil
        if let readReplicaDBClusterIdentifiersContainer = readReplicaDBClusterIdentifiersContainer {
            readReplicaDBClusterIdentifiersDecoded0 = [Swift.String]()
            for string0 in readReplicaDBClusterIdentifiersContainer {
                if let string0 = string0 {
                    readReplicaDBClusterIdentifiersDecoded0?.append(string0)
                }
            }
        }
        readReplicaDBClusterIdentifiers = readReplicaDBClusterIdentifiersDecoded0
        let licenseModelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseModel)
        licenseModel = licenseModelDecoded
        let iopsDecoded = try containerValues.decode(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
        let optionGroupMembershipsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbOptionGroupMembership?].self, forKey: .optionGroupMemberships)
        var optionGroupMembershipsDecoded0:[SecurityHubClientTypes.AwsRdsDbOptionGroupMembership]? = nil
        if let optionGroupMembershipsContainer = optionGroupMembershipsContainer {
            optionGroupMembershipsDecoded0 = [SecurityHubClientTypes.AwsRdsDbOptionGroupMembership]()
            for structure0 in optionGroupMembershipsContainer {
                if let structure0 = structure0 {
                    optionGroupMembershipsDecoded0?.append(structure0)
                }
            }
        }
        optionGroupMemberships = optionGroupMembershipsDecoded0
        let characterSetNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .characterSetName)
        characterSetName = characterSetNameDecoded
        let secondaryAvailabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .secondaryAvailabilityZone)
        secondaryAvailabilityZone = secondaryAvailabilityZoneDecoded
        let statusInfosContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbStatusInfo?].self, forKey: .statusInfos)
        var statusInfosDecoded0:[SecurityHubClientTypes.AwsRdsDbStatusInfo]? = nil
        if let statusInfosContainer = statusInfosContainer {
            statusInfosDecoded0 = [SecurityHubClientTypes.AwsRdsDbStatusInfo]()
            for structure0 in statusInfosContainer {
                if let structure0 = structure0 {
                    statusInfosDecoded0?.append(structure0)
                }
            }
        }
        statusInfos = statusInfosDecoded0
        let storageTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let domainMembershipsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbDomainMembership?].self, forKey: .domainMemberships)
        var domainMembershipsDecoded0:[SecurityHubClientTypes.AwsRdsDbDomainMembership]? = nil
        if let domainMembershipsContainer = domainMembershipsContainer {
            domainMembershipsDecoded0 = [SecurityHubClientTypes.AwsRdsDbDomainMembership]()
            for structure0 in domainMembershipsContainer {
                if let structure0 = structure0 {
                    domainMembershipsDecoded0?.append(structure0)
                }
            }
        }
        domainMemberships = domainMembershipsDecoded0
        let copyTagsToSnapshotDecoded = try containerValues.decode(Swift.Bool.self, forKey: .copyTagsToSnapshot)
        copyTagsToSnapshot = copyTagsToSnapshotDecoded
        let monitoringIntervalDecoded = try containerValues.decode(Swift.Int.self, forKey: .monitoringInterval)
        monitoringInterval = monitoringIntervalDecoded
        let monitoringRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .monitoringRoleArn)
        monitoringRoleArn = monitoringRoleArnDecoded
        let promotionTierDecoded = try containerValues.decode(Swift.Int.self, forKey: .promotionTier)
        promotionTier = promotionTierDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let performanceInsightsEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .performanceInsightsEnabled)
        performanceInsightsEnabled = performanceInsightsEnabledDecoded
        let performanceInsightsKmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .performanceInsightsKmsKeyId)
        performanceInsightsKmsKeyId = performanceInsightsKmsKeyIdDecoded
        let performanceInsightsRetentionPeriodDecoded = try containerValues.decode(Swift.Int.self, forKey: .performanceInsightsRetentionPeriod)
        performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriodDecoded
        let enabledCloudWatchLogsExportsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .enabledCloudWatchLogsExports)
        var enabledCloudWatchLogsExportsDecoded0:[Swift.String]? = nil
        if let enabledCloudWatchLogsExportsContainer = enabledCloudWatchLogsExportsContainer {
            enabledCloudWatchLogsExportsDecoded0 = [Swift.String]()
            for string0 in enabledCloudWatchLogsExportsContainer {
                if let string0 = string0 {
                    enabledCloudWatchLogsExportsDecoded0?.append(string0)
                }
            }
        }
        enabledCloudWatchLogsExports = enabledCloudWatchLogsExportsDecoded0
        let processorFeaturesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbProcessorFeature?].self, forKey: .processorFeatures)
        var processorFeaturesDecoded0:[SecurityHubClientTypes.AwsRdsDbProcessorFeature]? = nil
        if let processorFeaturesContainer = processorFeaturesContainer {
            processorFeaturesDecoded0 = [SecurityHubClientTypes.AwsRdsDbProcessorFeature]()
            for structure0 in processorFeaturesContainer {
                if let structure0 = structure0 {
                    processorFeaturesDecoded0?.append(structure0)
                }
            }
        }
        processorFeatures = processorFeaturesDecoded0
        let listenerEndpointDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbInstanceEndpoint.self, forKey: .listenerEndpoint)
        listenerEndpoint = listenerEndpointDecoded
        let maxAllocatedStorageDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxAllocatedStorage)
        maxAllocatedStorage = maxAllocatedStorageDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbInstanceDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbInstanceDetails(allocatedStorage: \(Swift.String(describing: allocatedStorage)), associatedRoles: \(Swift.String(describing: associatedRoles)), autoMinorVersionUpgrade: \(Swift.String(describing: autoMinorVersionUpgrade)), availabilityZone: \(Swift.String(describing: availabilityZone)), backupRetentionPeriod: \(Swift.String(describing: backupRetentionPeriod)), cACertificateIdentifier: \(Swift.String(describing: cACertificateIdentifier)), characterSetName: \(Swift.String(describing: characterSetName)), copyTagsToSnapshot: \(Swift.String(describing: copyTagsToSnapshot)), dBClusterIdentifier: \(Swift.String(describing: dBClusterIdentifier)), dBInstanceClass: \(Swift.String(describing: dBInstanceClass)), dBInstanceIdentifier: \(Swift.String(describing: dBInstanceIdentifier)), dBName: \(Swift.String(describing: dBName)), dbInstancePort: \(Swift.String(describing: dbInstancePort)), dbInstanceStatus: \(Swift.String(describing: dbInstanceStatus)), dbParameterGroups: \(Swift.String(describing: dbParameterGroups)), dbSecurityGroups: \(Swift.String(describing: dbSecurityGroups)), dbSubnetGroup: \(Swift.String(describing: dbSubnetGroup)), dbiResourceId: \(Swift.String(describing: dbiResourceId)), deletionProtection: \(Swift.String(describing: deletionProtection)), domainMemberships: \(Swift.String(describing: domainMemberships)), enabledCloudWatchLogsExports: \(Swift.String(describing: enabledCloudWatchLogsExports)), endpoint: \(Swift.String(describing: endpoint)), engine: \(Swift.String(describing: engine)), engineVersion: \(Swift.String(describing: engineVersion)), enhancedMonitoringResourceArn: \(Swift.String(describing: enhancedMonitoringResourceArn)), iAMDatabaseAuthenticationEnabled: \(Swift.String(describing: iAMDatabaseAuthenticationEnabled)), instanceCreateTime: \(Swift.String(describing: instanceCreateTime)), iops: \(Swift.String(describing: iops)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), latestRestorableTime: \(Swift.String(describing: latestRestorableTime)), licenseModel: \(Swift.String(describing: licenseModel)), listenerEndpoint: \(Swift.String(describing: listenerEndpoint)), masterUsername: \(Swift.String(describing: masterUsername)), maxAllocatedStorage: \(Swift.String(describing: maxAllocatedStorage)), monitoringInterval: \(Swift.String(describing: monitoringInterval)), monitoringRoleArn: \(Swift.String(describing: monitoringRoleArn)), multiAz: \(Swift.String(describing: multiAz)), optionGroupMemberships: \(Swift.String(describing: optionGroupMemberships)), pendingModifiedValues: \(Swift.String(describing: pendingModifiedValues)), performanceInsightsEnabled: \(Swift.String(describing: performanceInsightsEnabled)), performanceInsightsKmsKeyId: \(Swift.String(describing: performanceInsightsKmsKeyId)), performanceInsightsRetentionPeriod: \(Swift.String(describing: performanceInsightsRetentionPeriod)), preferredBackupWindow: \(Swift.String(describing: preferredBackupWindow)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), processorFeatures: \(Swift.String(describing: processorFeatures)), promotionTier: \(Swift.String(describing: promotionTier)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), readReplicaDBClusterIdentifiers: \(Swift.String(describing: readReplicaDBClusterIdentifiers)), readReplicaDBInstanceIdentifiers: \(Swift.String(describing: readReplicaDBInstanceIdentifiers)), readReplicaSourceDBInstanceIdentifier: \(Swift.String(describing: readReplicaSourceDBInstanceIdentifier)), secondaryAvailabilityZone: \(Swift.String(describing: secondaryAvailabilityZone)), statusInfos: \(Swift.String(describing: statusInfos)), storageEncrypted: \(Swift.String(describing: storageEncrypted)), storageType: \(Swift.String(describing: storageType)), tdeCredentialArn: \(Swift.String(describing: tdeCredentialArn)), timezone: \(Swift.String(describing: timezone)), vpcSecurityGroups: \(Swift.String(describing: vpcSecurityGroups)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains the details of an Amazon RDS DB instance.</p>
    public struct AwsRdsDbInstanceDetails: Swift.Equatable {
        /// <p>The amount of storage (in gigabytes) to initially allocate for the DB instance.</p>
        public let allocatedStorage: Swift.Int
        /// <p>The AWS Identity and Access Management (IAM) roles associated with the DB
        ///          instance.</p>
        public let associatedRoles: [SecurityHubClientTypes.AwsRdsDbInstanceAssociatedRole]?
        /// <p>Indicates whether minor version patches are applied automatically.</p>
        public let autoMinorVersionUpgrade: Swift.Bool
        /// <p>The Availability Zone where the DB instance will be created.</p>
        public let availabilityZone: Swift.String?
        /// <p>The number of days for which to retain automated backups.</p>
        public let backupRetentionPeriod: Swift.Int
        /// <p>The identifier of the CA certificate for this DB instance.</p>
        public let cACertificateIdentifier: Swift.String?
        /// <p>The name of the character set that this DB instance is associated with.</p>
        public let characterSetName: Swift.String?
        /// <p>Whether to copy resource tags to snapshots of the DB instance.</p>
        public let copyTagsToSnapshot: Swift.Bool
        /// <p>If the DB instance is a member of a DB cluster, contains the name of the DB cluster that
        ///          the DB instance is a member of.</p>
        public let dBClusterIdentifier: Swift.String?
        /// <p>Contains the name of the compute and memory capacity class of the DB instance.</p>
        public let dBInstanceClass: Swift.String?
        /// <p>Contains a user-supplied database identifier. This identifier is the unique key that
        ///          identifies a DB instance.</p>
        public let dBInstanceIdentifier: Swift.String?
        /// <p>The meaning of this parameter differs according to the database engine you use.</p>
        ///          <p>
        ///             <b>MySQL, MariaDB, SQL Server, PostgreSQL</b>
        ///          </p>
        ///          <p>Contains the name of the initial database of this instance that was provided at create
        ///          time, if one was specified when the DB instance was created. This same name is returned for
        ///          the life of the DB instance.</p>
        ///          <p>
        ///             <b>Oracle</b>
        ///          </p>
        ///          <p>Contains the Oracle System ID (SID) of the created DB instance. Not shown when the
        ///          returned parameters do not apply to an Oracle DB instance. </p>
        public let dBName: Swift.String?
        /// <p>Specifies the port that the DB instance listens on. If the DB instance is part of a DB
        ///          cluster, this can be a different port than the DB cluster port.</p>
        public let dbInstancePort: Swift.Int
        /// <p>The current status of the DB instance.</p>
        public let dbInstanceStatus: Swift.String?
        /// <p>A list of the DB parameter groups to assign to the DB instance.</p>
        public let dbParameterGroups: [SecurityHubClientTypes.AwsRdsDbParameterGroup]?
        /// <p>A list of the DB security groups to assign to the DB instance.</p>
        public let dbSecurityGroups: [Swift.String]?
        /// <p>Information about the subnet group that is associated with the DB instance.</p>
        public let dbSubnetGroup: SecurityHubClientTypes.AwsRdsDbSubnetGroup?
        /// <p>The AWS Region-unique, immutable identifier for the DB instance. This identifier is
        ///          found in AWS CloudTrail log entries whenever the AWS KMS key for the DB instance is
        ///          accessed. </p>
        public let dbiResourceId: Swift.String?
        /// <p>Indicates whether the DB instance has deletion protection enabled.</p>
        ///          <p>When deletion protection is enabled, the database cannot be deleted.</p>
        public let deletionProtection: Swift.Bool
        /// <p>The Active Directory domain membership records associated with the DB instance.</p>
        public let domainMemberships: [SecurityHubClientTypes.AwsRdsDbDomainMembership]?
        /// <p>A list of log types that this DB instance is configured to export to CloudWatch
        ///          Logs.</p>
        public let enabledCloudWatchLogsExports: [Swift.String]?
        /// <p>Specifies the connection endpoint.</p>
        public let endpoint: SecurityHubClientTypes.AwsRdsDbInstanceEndpoint?
        /// <p>Provides the name of the database engine to use for this DB instance.</p>
        public let engine: Swift.String?
        /// <p>Indicates the database engine version.</p>
        public let engineVersion: Swift.String?
        /// <p>The ARN of the CloudWatch Logs log stream that receives the enhanced monitoring metrics
        ///          data for the DB instance.</p>
        public let enhancedMonitoringResourceArn: Swift.String?
        /// <p>True if mapping of AWS Identity and Access Management (IAM) accounts to database
        ///          accounts is enabled, and otherwise false.</p>
        ///          <p>IAM database authentication can be enabled for the following database engines.</p>
        ///          <ul>
        ///             <li>
        ///                <p>For MySQL 5.6, minor version 5.6.34 or higher</p>
        ///             </li>
        ///             <li>
        ///                <p>For MySQL 5.7, minor version 5.7.16 or higher</p>
        ///             </li>
        ///             <li>
        ///                <p>Aurora 5.6 or higher</p>
        ///             </li>
        ///          </ul>
        public let iAMDatabaseAuthenticationEnabled: Swift.Bool
        /// <p>Indicates when the DB instance was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let instanceCreateTime: Swift.String?
        /// <p>Specifies the provisioned IOPS (I/O operations per second) for this DB instance.</p>
        public let iops: Swift.Int
        /// <p>If <code>StorageEncrypted</code> is true, the AWS KMS key identifier for the encrypted
        ///          DB instance.</p>
        public let kmsKeyId: Swift.String?
        /// <p>Specifies the latest time to which a database can be restored with point-in-time
        ///          restore.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let latestRestorableTime: Swift.String?
        /// <p>License model information for this DB instance.</p>
        public let licenseModel: Swift.String?
        /// <p>Specifies the connection endpoint.</p>
        public let listenerEndpoint: SecurityHubClientTypes.AwsRdsDbInstanceEndpoint?
        /// <p>The master user name of the DB instance.</p>
        public let masterUsername: Swift.String?
        /// <p>The upper limit to which Amazon RDS can automatically scale the storage of the DB
        ///          instance.</p>
        public let maxAllocatedStorage: Swift.Int
        /// <p>The interval, in seconds, between points when enhanced monitoring metrics are collected
        ///          for the DB instance.</p>
        public let monitoringInterval: Swift.Int
        /// <p>The ARN for the IAM role that permits Amazon RDS to send enhanced monitoring metrics to
        ///          CloudWatch Logs.</p>
        public let monitoringRoleArn: Swift.String?
        /// <p>Whether the DB instance is a multiple Availability Zone deployment.</p>
        public let multiAz: Swift.Bool
        /// <p>The list of option group memberships for this DB instance.</p>
        public let optionGroupMemberships: [SecurityHubClientTypes.AwsRdsDbOptionGroupMembership]?
        /// <p>Changes to the DB instance that are currently pending.</p>
        public let pendingModifiedValues: SecurityHubClientTypes.AwsRdsDbPendingModifiedValues?
        /// <p>Indicates whether Performance Insights is enabled for the DB instance.</p>
        public let performanceInsightsEnabled: Swift.Bool
        /// <p>The identifier of the AWS KMS key used to encrypt the Performance Insights data.</p>
        public let performanceInsightsKmsKeyId: Swift.String?
        /// <p>The number of days to retain Performance Insights data.</p>
        public let performanceInsightsRetentionPeriod: Swift.Int
        /// <p>The range of time each day when automated backups are created, if automated backups are
        ///          enabled.</p>
        ///          <p>Uses the format <code>HH:MM-HH:MM</code>. For example, <code>04:52-05:22</code>.</p>
        public let preferredBackupWindow: Swift.String?
        /// <p>The weekly time range during which system maintenance can occur, in Universal
        ///          Coordinated Time (UTC).</p>
        ///          <p>Uses the format <code><day>:HH:MM-<day>:HH:MM</code>.</p>
        ///          <p>For the day values, use
        ///             <code>mon</code>|<code>tue</code>|<code>wed</code>|<code>thu</code>|<code>fri</code>|<code>sat</code>|<code>sun</code>.</p>
        ///          <p>For example, <code>sun:09:32-sun:10:02</code>.</p>
        public let preferredMaintenanceWindow: Swift.String?
        /// <p>The number of CPU cores and the number of threads per core for the DB instance class of
        ///          the DB instance.</p>
        public let processorFeatures: [SecurityHubClientTypes.AwsRdsDbProcessorFeature]?
        /// <p>The order in which to promote an Aurora replica to the primary instance after a failure
        ///          of the existing primary instance.</p>
        public let promotionTier: Swift.Int
        /// <p>Specifies the accessibility options for the DB instance.</p>
        ///          <p>A value of true specifies an Internet-facing instance with a publicly resolvable DNS
        ///          name, which resolves to a public IP address.</p>
        ///          <p>A value of false specifies an internal instance with a DNS name that resolves to a
        ///          private IP address. </p>
        public let publiclyAccessible: Swift.Bool
        /// <p>List of identifiers of Aurora DB clusters to which the RDS DB instance is replicated as
        ///          a read replica.</p>
        public let readReplicaDBClusterIdentifiers: [Swift.String]?
        /// <p>List of identifiers of the read replicas associated with this DB instance.</p>
        public let readReplicaDBInstanceIdentifiers: [Swift.String]?
        /// <p>If this DB instance is a read replica, contains the identifier of the source DB
        ///          instance.</p>
        public let readReplicaSourceDBInstanceIdentifier: Swift.String?
        /// <p>For a DB instance with multi-Availability Zone support, the name of the secondary
        ///          Availability Zone.</p>
        public let secondaryAvailabilityZone: Swift.String?
        /// <p>The status of a read replica. If the instance isn't a read replica, this is
        ///          empty.</p>
        public let statusInfos: [SecurityHubClientTypes.AwsRdsDbStatusInfo]?
        /// <p>Specifies whether the DB instance is encrypted.</p>
        public let storageEncrypted: Swift.Bool
        /// <p>The storage type for the DB instance.</p>
        public let storageType: Swift.String?
        /// <p>The ARN from the key store with which the instance is associated for TDE
        ///          encryption.</p>
        public let tdeCredentialArn: Swift.String?
        /// <p>The time zone of the DB instance.</p>
        public let timezone: Swift.String?
        /// <p>A list of VPC security groups that the DB instance belongs to.</p>
        public let vpcSecurityGroups: [SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup]?

        public init (
            allocatedStorage: Swift.Int = 0,
            associatedRoles: [SecurityHubClientTypes.AwsRdsDbInstanceAssociatedRole]? = nil,
            autoMinorVersionUpgrade: Swift.Bool = false,
            availabilityZone: Swift.String? = nil,
            backupRetentionPeriod: Swift.Int = 0,
            cACertificateIdentifier: Swift.String? = nil,
            characterSetName: Swift.String? = nil,
            copyTagsToSnapshot: Swift.Bool = false,
            dBClusterIdentifier: Swift.String? = nil,
            dBInstanceClass: Swift.String? = nil,
            dBInstanceIdentifier: Swift.String? = nil,
            dBName: Swift.String? = nil,
            dbInstancePort: Swift.Int = 0,
            dbInstanceStatus: Swift.String? = nil,
            dbParameterGroups: [SecurityHubClientTypes.AwsRdsDbParameterGroup]? = nil,
            dbSecurityGroups: [Swift.String]? = nil,
            dbSubnetGroup: SecurityHubClientTypes.AwsRdsDbSubnetGroup? = nil,
            dbiResourceId: Swift.String? = nil,
            deletionProtection: Swift.Bool = false,
            domainMemberships: [SecurityHubClientTypes.AwsRdsDbDomainMembership]? = nil,
            enabledCloudWatchLogsExports: [Swift.String]? = nil,
            endpoint: SecurityHubClientTypes.AwsRdsDbInstanceEndpoint? = nil,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            enhancedMonitoringResourceArn: Swift.String? = nil,
            iAMDatabaseAuthenticationEnabled: Swift.Bool = false,
            instanceCreateTime: Swift.String? = nil,
            iops: Swift.Int = 0,
            kmsKeyId: Swift.String? = nil,
            latestRestorableTime: Swift.String? = nil,
            licenseModel: Swift.String? = nil,
            listenerEndpoint: SecurityHubClientTypes.AwsRdsDbInstanceEndpoint? = nil,
            masterUsername: Swift.String? = nil,
            maxAllocatedStorage: Swift.Int = 0,
            monitoringInterval: Swift.Int = 0,
            monitoringRoleArn: Swift.String? = nil,
            multiAz: Swift.Bool = false,
            optionGroupMemberships: [SecurityHubClientTypes.AwsRdsDbOptionGroupMembership]? = nil,
            pendingModifiedValues: SecurityHubClientTypes.AwsRdsDbPendingModifiedValues? = nil,
            performanceInsightsEnabled: Swift.Bool = false,
            performanceInsightsKmsKeyId: Swift.String? = nil,
            performanceInsightsRetentionPeriod: Swift.Int = 0,
            preferredBackupWindow: Swift.String? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            processorFeatures: [SecurityHubClientTypes.AwsRdsDbProcessorFeature]? = nil,
            promotionTier: Swift.Int = 0,
            publiclyAccessible: Swift.Bool = false,
            readReplicaDBClusterIdentifiers: [Swift.String]? = nil,
            readReplicaDBInstanceIdentifiers: [Swift.String]? = nil,
            readReplicaSourceDBInstanceIdentifier: Swift.String? = nil,
            secondaryAvailabilityZone: Swift.String? = nil,
            statusInfos: [SecurityHubClientTypes.AwsRdsDbStatusInfo]? = nil,
            storageEncrypted: Swift.Bool = false,
            storageType: Swift.String? = nil,
            tdeCredentialArn: Swift.String? = nil,
            timezone: Swift.String? = nil,
            vpcSecurityGroups: [SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup]? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.associatedRoles = associatedRoles
            self.autoMinorVersionUpgrade = autoMinorVersionUpgrade
            self.availabilityZone = availabilityZone
            self.backupRetentionPeriod = backupRetentionPeriod
            self.cACertificateIdentifier = cACertificateIdentifier
            self.characterSetName = characterSetName
            self.copyTagsToSnapshot = copyTagsToSnapshot
            self.dBClusterIdentifier = dBClusterIdentifier
            self.dBInstanceClass = dBInstanceClass
            self.dBInstanceIdentifier = dBInstanceIdentifier
            self.dBName = dBName
            self.dbInstancePort = dbInstancePort
            self.dbInstanceStatus = dbInstanceStatus
            self.dbParameterGroups = dbParameterGroups
            self.dbSecurityGroups = dbSecurityGroups
            self.dbSubnetGroup = dbSubnetGroup
            self.dbiResourceId = dbiResourceId
            self.deletionProtection = deletionProtection
            self.domainMemberships = domainMemberships
            self.enabledCloudWatchLogsExports = enabledCloudWatchLogsExports
            self.endpoint = endpoint
            self.engine = engine
            self.engineVersion = engineVersion
            self.enhancedMonitoringResourceArn = enhancedMonitoringResourceArn
            self.iAMDatabaseAuthenticationEnabled = iAMDatabaseAuthenticationEnabled
            self.instanceCreateTime = instanceCreateTime
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.latestRestorableTime = latestRestorableTime
            self.licenseModel = licenseModel
            self.listenerEndpoint = listenerEndpoint
            self.masterUsername = masterUsername
            self.maxAllocatedStorage = maxAllocatedStorage
            self.monitoringInterval = monitoringInterval
            self.monitoringRoleArn = monitoringRoleArn
            self.multiAz = multiAz
            self.optionGroupMemberships = optionGroupMemberships
            self.pendingModifiedValues = pendingModifiedValues
            self.performanceInsightsEnabled = performanceInsightsEnabled
            self.performanceInsightsKmsKeyId = performanceInsightsKmsKeyId
            self.performanceInsightsRetentionPeriod = performanceInsightsRetentionPeriod
            self.preferredBackupWindow = preferredBackupWindow
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.processorFeatures = processorFeatures
            self.promotionTier = promotionTier
            self.publiclyAccessible = publiclyAccessible
            self.readReplicaDBClusterIdentifiers = readReplicaDBClusterIdentifiers
            self.readReplicaDBInstanceIdentifiers = readReplicaDBInstanceIdentifiers
            self.readReplicaSourceDBInstanceIdentifier = readReplicaSourceDBInstanceIdentifier
            self.secondaryAvailabilityZone = secondaryAvailabilityZone
            self.statusInfos = statusInfos
            self.storageEncrypted = storageEncrypted
            self.storageType = storageType
            self.tdeCredentialArn = tdeCredentialArn
            self.timezone = timezone
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbInstanceEndpoint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case hostedZoneId = "HostedZoneId"
        case port = "Port"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if let hostedZoneId = hostedZoneId {
            try encodeContainer.encode(hostedZoneId, forKey: .hostedZoneId)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        let portDecoded = try containerValues.decode(Swift.Int.self, forKey: .port)
        port = portDecoded
        let hostedZoneIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hostedZoneId)
        hostedZoneId = hostedZoneIdDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbInstanceEndpoint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbInstanceEndpoint(address: \(Swift.String(describing: address)), hostedZoneId: \(Swift.String(describing: hostedZoneId)), port: \(Swift.String(describing: port)))"}
}

extension SecurityHubClientTypes {
    /// <p>Specifies the connection endpoint.</p>
    public struct AwsRdsDbInstanceEndpoint: Swift.Equatable {
        /// <p>Specifies the DNS address of the DB instance.</p>
        public let address: Swift.String?
        /// <p>Specifies the ID that Amazon Route 53 assigns when you create a hosted zone.</p>
        public let hostedZoneId: Swift.String?
        /// <p>Specifies the port that the database engine is listening on.</p>
        public let port: Swift.Int

        public init (
            address: Swift.String? = nil,
            hostedZoneId: Swift.String? = nil,
            port: Swift.Int = 0
        )
        {
            self.address = address
            self.hostedZoneId = hostedZoneId
            self.port = port
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case vpcSecurityGroupId = "VpcSecurityGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let vpcSecurityGroupId = vpcSecurityGroupId {
            try encodeContainer.encode(vpcSecurityGroupId, forKey: .vpcSecurityGroupId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vpcSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcSecurityGroupId)
        vpcSecurityGroupId = vpcSecurityGroupIdDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbInstanceVpcSecurityGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbInstanceVpcSecurityGroup(status: \(Swift.String(describing: status)), vpcSecurityGroupId: \(Swift.String(describing: vpcSecurityGroupId)))"}
}

extension SecurityHubClientTypes {
    /// <p>A VPC security groups that the DB instance belongs to.</p>
    public struct AwsRdsDbInstanceVpcSecurityGroup: Swift.Equatable {
        /// <p>The status of the VPC security group.</p>
        public let status: Swift.String?
        /// <p>The name of the VPC security group.</p>
        public let vpcSecurityGroupId: Swift.String?

        public init (
            status: Swift.String? = nil,
            vpcSecurityGroupId: Swift.String? = nil
        )
        {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbOptionGroupMembership: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case optionGroupName = "OptionGroupName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let optionGroupName = optionGroupName {
            try encodeContainer.encode(optionGroupName, forKey: .optionGroupName)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let optionGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optionGroupName)
        optionGroupName = optionGroupNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbOptionGroupMembership: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbOptionGroupMembership(optionGroupName: \(Swift.String(describing: optionGroupName)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>An option group membership.</p>
    public struct AwsRdsDbOptionGroupMembership: Swift.Equatable {
        /// <p>The name of the option group.</p>
        public let optionGroupName: Swift.String?
        /// <p>The status of the option group membership.</p>
        public let status: Swift.String?

        public init (
            optionGroupName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.optionGroupName = optionGroupName
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbParameterGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbParameterGroupName = "DbParameterGroupName"
        case parameterApplyStatus = "ParameterApplyStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dbParameterGroupName = dbParameterGroupName {
            try encodeContainer.encode(dbParameterGroupName, forKey: .dbParameterGroupName)
        }
        if let parameterApplyStatus = parameterApplyStatus {
            try encodeContainer.encode(parameterApplyStatus, forKey: .parameterApplyStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dbParameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbParameterGroupName)
        dbParameterGroupName = dbParameterGroupNameDecoded
        let parameterApplyStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterApplyStatus)
        parameterApplyStatus = parameterApplyStatusDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbParameterGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbParameterGroup(dbParameterGroupName: \(Swift.String(describing: dbParameterGroupName)), parameterApplyStatus: \(Swift.String(describing: parameterApplyStatus)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about a parameter group for a DB instance.</p>
    public struct AwsRdsDbParameterGroup: Swift.Equatable {
        /// <p>The name of the parameter group.</p>
        public let dbParameterGroupName: Swift.String?
        /// <p>The status of parameter updates.</p>
        public let parameterApplyStatus: Swift.String?

        public init (
            dbParameterGroupName: Swift.String? = nil,
            parameterApplyStatus: Swift.String? = nil
        )
        {
            self.dbParameterGroupName = dbParameterGroupName
            self.parameterApplyStatus = parameterApplyStatus
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbPendingModifiedValues: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case backupRetentionPeriod = "BackupRetentionPeriod"
        case caCertificateIdentifier = "CaCertificateIdentifier"
        case dbInstanceClass = "DbInstanceClass"
        case dbInstanceIdentifier = "DbInstanceIdentifier"
        case dbSubnetGroupName = "DbSubnetGroupName"
        case engineVersion = "EngineVersion"
        case iops = "Iops"
        case licenseModel = "LicenseModel"
        case masterUserPassword = "MasterUserPassword"
        case multiAZ = "MultiAZ"
        case pendingCloudWatchLogsExports = "PendingCloudWatchLogsExports"
        case port = "Port"
        case processorFeatures = "ProcessorFeatures"
        case storageType = "StorageType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedStorage != 0 {
            try encodeContainer.encode(allocatedStorage, forKey: .allocatedStorage)
        }
        if backupRetentionPeriod != 0 {
            try encodeContainer.encode(backupRetentionPeriod, forKey: .backupRetentionPeriod)
        }
        if let caCertificateIdentifier = caCertificateIdentifier {
            try encodeContainer.encode(caCertificateIdentifier, forKey: .caCertificateIdentifier)
        }
        if let dbInstanceClass = dbInstanceClass {
            try encodeContainer.encode(dbInstanceClass, forKey: .dbInstanceClass)
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try encodeContainer.encode(dbInstanceIdentifier, forKey: .dbInstanceIdentifier)
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try encodeContainer.encode(dbSubnetGroupName, forKey: .dbSubnetGroupName)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if iops != 0 {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let licenseModel = licenseModel {
            try encodeContainer.encode(licenseModel, forKey: .licenseModel)
        }
        if let masterUserPassword = masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
        if multiAZ != false {
            try encodeContainer.encode(multiAZ, forKey: .multiAZ)
        }
        if let pendingCloudWatchLogsExports = pendingCloudWatchLogsExports {
            try encodeContainer.encode(pendingCloudWatchLogsExports, forKey: .pendingCloudWatchLogsExports)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let processorFeatures = processorFeatures {
            var processorFeaturesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processorFeatures)
            for awsrdsdbprocessorfeatures0 in processorFeatures {
                try processorFeaturesContainer.encode(awsrdsdbprocessorfeatures0)
            }
        }
        if let storageType = storageType {
            try encodeContainer.encode(storageType, forKey: .storageType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dbInstanceClassDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbInstanceClass)
        dbInstanceClass = dbInstanceClassDecoded
        let allocatedStorageDecoded = try containerValues.decode(Swift.Int.self, forKey: .allocatedStorage)
        allocatedStorage = allocatedStorageDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let portDecoded = try containerValues.decode(Swift.Int.self, forKey: .port)
        port = portDecoded
        let backupRetentionPeriodDecoded = try containerValues.decode(Swift.Int.self, forKey: .backupRetentionPeriod)
        backupRetentionPeriod = backupRetentionPeriodDecoded
        let multiAZDecoded = try containerValues.decode(Swift.Bool.self, forKey: .multiAZ)
        multiAZ = multiAZDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let licenseModelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseModel)
        licenseModel = licenseModelDecoded
        let iopsDecoded = try containerValues.decode(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
        let dbInstanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbInstanceIdentifier)
        dbInstanceIdentifier = dbInstanceIdentifierDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let caCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .caCertificateIdentifier)
        caCertificateIdentifier = caCertificateIdentifierDecoded
        let dbSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbSubnetGroupName)
        dbSubnetGroupName = dbSubnetGroupNameDecoded
        let pendingCloudWatchLogsExportsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsPendingCloudWatchLogsExports.self, forKey: .pendingCloudWatchLogsExports)
        pendingCloudWatchLogsExports = pendingCloudWatchLogsExportsDecoded
        let processorFeaturesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbProcessorFeature?].self, forKey: .processorFeatures)
        var processorFeaturesDecoded0:[SecurityHubClientTypes.AwsRdsDbProcessorFeature]? = nil
        if let processorFeaturesContainer = processorFeaturesContainer {
            processorFeaturesDecoded0 = [SecurityHubClientTypes.AwsRdsDbProcessorFeature]()
            for structure0 in processorFeaturesContainer {
                if let structure0 = structure0 {
                    processorFeaturesDecoded0?.append(structure0)
                }
            }
        }
        processorFeatures = processorFeaturesDecoded0
    }
}

extension SecurityHubClientTypes.AwsRdsDbPendingModifiedValues: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbPendingModifiedValues(allocatedStorage: \(Swift.String(describing: allocatedStorage)), backupRetentionPeriod: \(Swift.String(describing: backupRetentionPeriod)), caCertificateIdentifier: \(Swift.String(describing: caCertificateIdentifier)), dbInstanceClass: \(Swift.String(describing: dbInstanceClass)), dbInstanceIdentifier: \(Swift.String(describing: dbInstanceIdentifier)), dbSubnetGroupName: \(Swift.String(describing: dbSubnetGroupName)), engineVersion: \(Swift.String(describing: engineVersion)), iops: \(Swift.String(describing: iops)), licenseModel: \(Swift.String(describing: licenseModel)), masterUserPassword: \(Swift.String(describing: masterUserPassword)), multiAZ: \(Swift.String(describing: multiAZ)), pendingCloudWatchLogsExports: \(Swift.String(describing: pendingCloudWatchLogsExports)), port: \(Swift.String(describing: port)), processorFeatures: \(Swift.String(describing: processorFeatures)), storageType: \(Swift.String(describing: storageType)))"}
}

extension SecurityHubClientTypes {
    /// <p>Changes to a DB instance that are currently pending.</p>
    public struct AwsRdsDbPendingModifiedValues: Swift.Equatable {
        /// <p>The new value of the allocated storage for the DB instance.</p>
        public let allocatedStorage: Swift.Int
        /// <p>The new backup retention period for the DB instance.</p>
        public let backupRetentionPeriod: Swift.Int
        /// <p>The new CA certificate identifier for the DB instance.</p>
        public let caCertificateIdentifier: Swift.String?
        /// <p>The new DB instance class for the DB instance.</p>
        public let dbInstanceClass: Swift.String?
        /// <p>The new DB instance identifier for the DB instance.</p>
        public let dbInstanceIdentifier: Swift.String?
        /// <p>The name of the new subnet group for the DB instance.</p>
        public let dbSubnetGroupName: Swift.String?
        /// <p>The new engine version for the DB instance.</p>
        public let engineVersion: Swift.String?
        /// <p>The new provisioned IOPS value for the DB instance.</p>
        public let iops: Swift.Int
        /// <p>The new license model value for the DB instance.</p>
        public let licenseModel: Swift.String?
        /// <p>The new master user password for the DB instance.</p>
        public let masterUserPassword: Swift.String?
        /// <p>Indicates that a single Availability Zone DB instance is changing to a multiple Availability Zone deployment.</p>
        public let multiAZ: Swift.Bool
        /// <p>A list of log types that are being enabled or disabled.</p>
        public let pendingCloudWatchLogsExports: SecurityHubClientTypes.AwsRdsPendingCloudWatchLogsExports?
        /// <p>The new port for the DB instance.</p>
        public let port: Swift.Int
        /// <p>Processor features that are being updated.</p>
        public let processorFeatures: [SecurityHubClientTypes.AwsRdsDbProcessorFeature]?
        /// <p>The new storage type for the DB instance.</p>
        public let storageType: Swift.String?

        public init (
            allocatedStorage: Swift.Int = 0,
            backupRetentionPeriod: Swift.Int = 0,
            caCertificateIdentifier: Swift.String? = nil,
            dbInstanceClass: Swift.String? = nil,
            dbInstanceIdentifier: Swift.String? = nil,
            dbSubnetGroupName: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            iops: Swift.Int = 0,
            licenseModel: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil,
            multiAZ: Swift.Bool = false,
            pendingCloudWatchLogsExports: SecurityHubClientTypes.AwsRdsPendingCloudWatchLogsExports? = nil,
            port: Swift.Int = 0,
            processorFeatures: [SecurityHubClientTypes.AwsRdsDbProcessorFeature]? = nil,
            storageType: Swift.String? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.backupRetentionPeriod = backupRetentionPeriod
            self.caCertificateIdentifier = caCertificateIdentifier
            self.dbInstanceClass = dbInstanceClass
            self.dbInstanceIdentifier = dbInstanceIdentifier
            self.dbSubnetGroupName = dbSubnetGroupName
            self.engineVersion = engineVersion
            self.iops = iops
            self.licenseModel = licenseModel
            self.masterUserPassword = masterUserPassword
            self.multiAZ = multiAZ
            self.pendingCloudWatchLogsExports = pendingCloudWatchLogsExports
            self.port = port
            self.processorFeatures = processorFeatures
            self.storageType = storageType
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbProcessorFeature: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbProcessorFeature: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbProcessorFeature(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension SecurityHubClientTypes {
    /// <p>A processor feature.</p>
    public struct AwsRdsDbProcessorFeature: Swift.Equatable {
        /// <p>The name of the processor feature.</p>
        public let name: Swift.String?
        /// <p>The value of the processor feature.</p>
        public let value: Swift.String?

        public init (
            name: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbSnapshotDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allocatedStorage = "AllocatedStorage"
        case availabilityZone = "AvailabilityZone"
        case dbInstanceIdentifier = "DbInstanceIdentifier"
        case dbSnapshotIdentifier = "DbSnapshotIdentifier"
        case dbiResourceId = "DbiResourceId"
        case encrypted = "Encrypted"
        case engine = "Engine"
        case engineVersion = "EngineVersion"
        case iamDatabaseAuthenticationEnabled = "IamDatabaseAuthenticationEnabled"
        case instanceCreateTime = "InstanceCreateTime"
        case iops = "Iops"
        case kmsKeyId = "KmsKeyId"
        case licenseModel = "LicenseModel"
        case masterUsername = "MasterUsername"
        case optionGroupName = "OptionGroupName"
        case percentProgress = "PercentProgress"
        case port = "Port"
        case processorFeatures = "ProcessorFeatures"
        case snapshotCreateTime = "SnapshotCreateTime"
        case snapshotType = "SnapshotType"
        case sourceDbSnapshotIdentifier = "SourceDbSnapshotIdentifier"
        case sourceRegion = "SourceRegion"
        case status = "Status"
        case storageType = "StorageType"
        case tdeCredentialArn = "TdeCredentialArn"
        case timezone = "Timezone"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allocatedStorage != 0 {
            try encodeContainer.encode(allocatedStorage, forKey: .allocatedStorage)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let dbInstanceIdentifier = dbInstanceIdentifier {
            try encodeContainer.encode(dbInstanceIdentifier, forKey: .dbInstanceIdentifier)
        }
        if let dbSnapshotIdentifier = dbSnapshotIdentifier {
            try encodeContainer.encode(dbSnapshotIdentifier, forKey: .dbSnapshotIdentifier)
        }
        if let dbiResourceId = dbiResourceId {
            try encodeContainer.encode(dbiResourceId, forKey: .dbiResourceId)
        }
        if encrypted != false {
            try encodeContainer.encode(encrypted, forKey: .encrypted)
        }
        if let engine = engine {
            try encodeContainer.encode(engine, forKey: .engine)
        }
        if let engineVersion = engineVersion {
            try encodeContainer.encode(engineVersion, forKey: .engineVersion)
        }
        if iamDatabaseAuthenticationEnabled != false {
            try encodeContainer.encode(iamDatabaseAuthenticationEnabled, forKey: .iamDatabaseAuthenticationEnabled)
        }
        if let instanceCreateTime = instanceCreateTime {
            try encodeContainer.encode(instanceCreateTime, forKey: .instanceCreateTime)
        }
        if iops != 0 {
            try encodeContainer.encode(iops, forKey: .iops)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let licenseModel = licenseModel {
            try encodeContainer.encode(licenseModel, forKey: .licenseModel)
        }
        if let masterUsername = masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if let optionGroupName = optionGroupName {
            try encodeContainer.encode(optionGroupName, forKey: .optionGroupName)
        }
        if percentProgress != 0 {
            try encodeContainer.encode(percentProgress, forKey: .percentProgress)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
        if let processorFeatures = processorFeatures {
            var processorFeaturesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processorFeatures)
            for awsrdsdbprocessorfeatures0 in processorFeatures {
                try processorFeaturesContainer.encode(awsrdsdbprocessorfeatures0)
            }
        }
        if let snapshotCreateTime = snapshotCreateTime {
            try encodeContainer.encode(snapshotCreateTime, forKey: .snapshotCreateTime)
        }
        if let snapshotType = snapshotType {
            try encodeContainer.encode(snapshotType, forKey: .snapshotType)
        }
        if let sourceDbSnapshotIdentifier = sourceDbSnapshotIdentifier {
            try encodeContainer.encode(sourceDbSnapshotIdentifier, forKey: .sourceDbSnapshotIdentifier)
        }
        if let sourceRegion = sourceRegion {
            try encodeContainer.encode(sourceRegion, forKey: .sourceRegion)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let storageType = storageType {
            try encodeContainer.encode(storageType, forKey: .storageType)
        }
        if let tdeCredentialArn = tdeCredentialArn {
            try encodeContainer.encode(tdeCredentialArn, forKey: .tdeCredentialArn)
        }
        if let timezone = timezone {
            try encodeContainer.encode(timezone, forKey: .timezone)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dbSnapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbSnapshotIdentifier)
        dbSnapshotIdentifier = dbSnapshotIdentifierDecoded
        let dbInstanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbInstanceIdentifier)
        dbInstanceIdentifier = dbInstanceIdentifierDecoded
        let snapshotCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotCreateTime)
        snapshotCreateTime = snapshotCreateTimeDecoded
        let engineDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engine)
        engine = engineDecoded
        let allocatedStorageDecoded = try containerValues.decode(Swift.Int.self, forKey: .allocatedStorage)
        allocatedStorage = allocatedStorageDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let portDecoded = try containerValues.decode(Swift.Int.self, forKey: .port)
        port = portDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let instanceCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceCreateTime)
        instanceCreateTime = instanceCreateTimeDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let engineVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .engineVersion)
        engineVersion = engineVersionDecoded
        let licenseModelDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .licenseModel)
        licenseModel = licenseModelDecoded
        let snapshotTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotType)
        snapshotType = snapshotTypeDecoded
        let iopsDecoded = try containerValues.decode(Swift.Int.self, forKey: .iops)
        iops = iopsDecoded
        let optionGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .optionGroupName)
        optionGroupName = optionGroupNameDecoded
        let percentProgressDecoded = try containerValues.decode(Swift.Int.self, forKey: .percentProgress)
        percentProgress = percentProgressDecoded
        let sourceRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceRegion)
        sourceRegion = sourceRegionDecoded
        let sourceDbSnapshotIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceDbSnapshotIdentifier)
        sourceDbSnapshotIdentifier = sourceDbSnapshotIdentifierDecoded
        let storageTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .storageType)
        storageType = storageTypeDecoded
        let tdeCredentialArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tdeCredentialArn)
        tdeCredentialArn = tdeCredentialArnDecoded
        let encryptedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let timezoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .timezone)
        timezone = timezoneDecoded
        let iamDatabaseAuthenticationEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .iamDatabaseAuthenticationEnabled)
        iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabledDecoded
        let processorFeaturesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbProcessorFeature?].self, forKey: .processorFeatures)
        var processorFeaturesDecoded0:[SecurityHubClientTypes.AwsRdsDbProcessorFeature]? = nil
        if let processorFeaturesContainer = processorFeaturesContainer {
            processorFeaturesDecoded0 = [SecurityHubClientTypes.AwsRdsDbProcessorFeature]()
            for structure0 in processorFeaturesContainer {
                if let structure0 = structure0 {
                    processorFeaturesDecoded0?.append(structure0)
                }
            }
        }
        processorFeatures = processorFeaturesDecoded0
        let dbiResourceIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbiResourceId)
        dbiResourceId = dbiResourceIdDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbSnapshotDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbSnapshotDetails(allocatedStorage: \(Swift.String(describing: allocatedStorage)), availabilityZone: \(Swift.String(describing: availabilityZone)), dbInstanceIdentifier: \(Swift.String(describing: dbInstanceIdentifier)), dbSnapshotIdentifier: \(Swift.String(describing: dbSnapshotIdentifier)), dbiResourceId: \(Swift.String(describing: dbiResourceId)), encrypted: \(Swift.String(describing: encrypted)), engine: \(Swift.String(describing: engine)), engineVersion: \(Swift.String(describing: engineVersion)), iamDatabaseAuthenticationEnabled: \(Swift.String(describing: iamDatabaseAuthenticationEnabled)), instanceCreateTime: \(Swift.String(describing: instanceCreateTime)), iops: \(Swift.String(describing: iops)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), licenseModel: \(Swift.String(describing: licenseModel)), masterUsername: \(Swift.String(describing: masterUsername)), optionGroupName: \(Swift.String(describing: optionGroupName)), percentProgress: \(Swift.String(describing: percentProgress)), port: \(Swift.String(describing: port)), processorFeatures: \(Swift.String(describing: processorFeatures)), snapshotCreateTime: \(Swift.String(describing: snapshotCreateTime)), snapshotType: \(Swift.String(describing: snapshotType)), sourceDbSnapshotIdentifier: \(Swift.String(describing: sourceDbSnapshotIdentifier)), sourceRegion: \(Swift.String(describing: sourceRegion)), status: \(Swift.String(describing: status)), storageType: \(Swift.String(describing: storageType)), tdeCredentialArn: \(Swift.String(describing: tdeCredentialArn)), timezone: \(Swift.String(describing: timezone)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides details about an Amazon RDS DB cluster snapshot.</p>
    public struct AwsRdsDbSnapshotDetails: Swift.Equatable {
        /// <p>The amount of storage (in gigabytes) to be initially allocated for the database instance.</p>
        public let allocatedStorage: Swift.Int
        /// <p>Specifies the name of the Availability Zone in which the DB instance was located at the time of the DB snapshot.</p>
        public let availabilityZone: Swift.String?
        /// <p>A name for the DB instance.</p>
        public let dbInstanceIdentifier: Swift.String?
        /// <p>The name or ARN of the DB snapshot that is used to restore the DB instance.</p>
        public let dbSnapshotIdentifier: Swift.String?
        /// <p>The identifier for the source DB instance.</p>
        public let dbiResourceId: Swift.String?
        /// <p>Whether the DB snapshot is encrypted.</p>
        public let encrypted: Swift.Bool
        /// <p>The name of the database engine to use for this DB instance.</p>
        public let engine: Swift.String?
        /// <p>The version of the database engine.</p>
        public let engineVersion: Swift.String?
        /// <p>Whether mapping of IAM accounts to database accounts is enabled.</p>
        public let iamDatabaseAuthenticationEnabled: Swift.Bool
        /// <p>Specifies the time in Coordinated Universal Time (UTC) when the DB instance, from which the snapshot was taken, was created.</p>
        public let instanceCreateTime: Swift.String?
        /// <p>The provisioned IOPS (I/O operations per second) value of the DB instance at the time of the snapshot.</p>
        public let iops: Swift.Int
        /// <p>If <code>Encrypted</code> is <code>true</code>, the AWS KMS key identifier for the encrypted DB snapshot.</p>
        public let kmsKeyId: Swift.String?
        /// <p>License model information for the restored DB instance.</p>
        public let licenseModel: Swift.String?
        /// <p>The master user name for the DB snapshot.</p>
        public let masterUsername: Swift.String?
        /// <p>The option group name for the DB snapshot.</p>
        public let optionGroupName: Swift.String?
        /// <p>The percentage of the estimated data that has been transferred.</p>
        public let percentProgress: Swift.Int
        /// <p>The port that the database engine was listening on at the time of the snapshot.</p>
        public let port: Swift.Int
        /// <p>The number of CPU cores and the number of threads per core for the DB instance class of the DB instance.</p>
        public let processorFeatures: [SecurityHubClientTypes.AwsRdsDbProcessorFeature]?
        /// <p>When the snapshot was taken in Coordinated Universal Time (UTC).</p>
        public let snapshotCreateTime: Swift.String?
        /// <p>The type of the DB snapshot.</p>
        public let snapshotType: Swift.String?
        /// <p>The DB snapshot ARN that the DB snapshot was copied from.</p>
        public let sourceDbSnapshotIdentifier: Swift.String?
        /// <p>The AWS Region that the DB snapshot was created in or copied from.</p>
        public let sourceRegion: Swift.String?
        /// <p>The status of this DB snapshot.</p>
        public let status: Swift.String?
        /// <p>The storage type associated with the DB snapshot.</p>
        public let storageType: Swift.String?
        /// <p>The ARN from the key store with which to associate the instance for TDE encryption.</p>
        public let tdeCredentialArn: Swift.String?
        /// <p>The time zone of the DB snapshot.</p>
        public let timezone: Swift.String?
        /// <p>The VPC ID associated with the DB snapshot.</p>
        public let vpcId: Swift.String?

        public init (
            allocatedStorage: Swift.Int = 0,
            availabilityZone: Swift.String? = nil,
            dbInstanceIdentifier: Swift.String? = nil,
            dbSnapshotIdentifier: Swift.String? = nil,
            dbiResourceId: Swift.String? = nil,
            encrypted: Swift.Bool = false,
            engine: Swift.String? = nil,
            engineVersion: Swift.String? = nil,
            iamDatabaseAuthenticationEnabled: Swift.Bool = false,
            instanceCreateTime: Swift.String? = nil,
            iops: Swift.Int = 0,
            kmsKeyId: Swift.String? = nil,
            licenseModel: Swift.String? = nil,
            masterUsername: Swift.String? = nil,
            optionGroupName: Swift.String? = nil,
            percentProgress: Swift.Int = 0,
            port: Swift.Int = 0,
            processorFeatures: [SecurityHubClientTypes.AwsRdsDbProcessorFeature]? = nil,
            snapshotCreateTime: Swift.String? = nil,
            snapshotType: Swift.String? = nil,
            sourceDbSnapshotIdentifier: Swift.String? = nil,
            sourceRegion: Swift.String? = nil,
            status: Swift.String? = nil,
            storageType: Swift.String? = nil,
            tdeCredentialArn: Swift.String? = nil,
            timezone: Swift.String? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.allocatedStorage = allocatedStorage
            self.availabilityZone = availabilityZone
            self.dbInstanceIdentifier = dbInstanceIdentifier
            self.dbSnapshotIdentifier = dbSnapshotIdentifier
            self.dbiResourceId = dbiResourceId
            self.encrypted = encrypted
            self.engine = engine
            self.engineVersion = engineVersion
            self.iamDatabaseAuthenticationEnabled = iamDatabaseAuthenticationEnabled
            self.instanceCreateTime = instanceCreateTime
            self.iops = iops
            self.kmsKeyId = kmsKeyId
            self.licenseModel = licenseModel
            self.masterUsername = masterUsername
            self.optionGroupName = optionGroupName
            self.percentProgress = percentProgress
            self.port = port
            self.processorFeatures = processorFeatures
            self.snapshotCreateTime = snapshotCreateTime
            self.snapshotType = snapshotType
            self.sourceDbSnapshotIdentifier = sourceDbSnapshotIdentifier
            self.sourceRegion = sourceRegion
            self.status = status
            self.storageType = storageType
            self.tdeCredentialArn = tdeCredentialArn
            self.timezone = timezone
            self.vpcId = vpcId
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbStatusInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
        case normal = "Normal"
        case status = "Status"
        case statusType = "StatusType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
        if normal != false {
            try encodeContainer.encode(normal, forKey: .normal)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let statusType = statusType {
            try encodeContainer.encode(statusType, forKey: .statusType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusType)
        statusType = statusTypeDecoded
        let normalDecoded = try containerValues.decode(Swift.Bool.self, forKey: .normal)
        normal = normalDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbStatusInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbStatusInfo(message: \(Swift.String(describing: message)), normal: \(Swift.String(describing: normal)), status: \(Swift.String(describing: status)), statusType: \(Swift.String(describing: statusType)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the status of a read replica.</p>
    public struct AwsRdsDbStatusInfo: Swift.Equatable {
        /// <p>If the read replica is currently in an error state, provides the error details.</p>
        public let message: Swift.String?
        /// <p>Whether the read replica instance is operating normally.</p>
        public let normal: Swift.Bool
        /// <p>The status of the read replica instance.</p>
        public let status: Swift.String?
        /// <p>The type of status. For a read replica, the status type is read replication.</p>
        public let statusType: Swift.String?

        public init (
            message: Swift.String? = nil,
            normal: Swift.Bool = false,
            status: Swift.String? = nil,
            statusType: Swift.String? = nil
        )
        {
            self.message = message
            self.normal = normal
            self.status = status
            self.statusType = statusType
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbSubnetGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dbSubnetGroupArn = "DbSubnetGroupArn"
        case dbSubnetGroupDescription = "DbSubnetGroupDescription"
        case dbSubnetGroupName = "DbSubnetGroupName"
        case subnetGroupStatus = "SubnetGroupStatus"
        case subnets = "Subnets"
        case vpcId = "VpcId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dbSubnetGroupArn = dbSubnetGroupArn {
            try encodeContainer.encode(dbSubnetGroupArn, forKey: .dbSubnetGroupArn)
        }
        if let dbSubnetGroupDescription = dbSubnetGroupDescription {
            try encodeContainer.encode(dbSubnetGroupDescription, forKey: .dbSubnetGroupDescription)
        }
        if let dbSubnetGroupName = dbSubnetGroupName {
            try encodeContainer.encode(dbSubnetGroupName, forKey: .dbSubnetGroupName)
        }
        if let subnetGroupStatus = subnetGroupStatus {
            try encodeContainer.encode(subnetGroupStatus, forKey: .subnetGroupStatus)
        }
        if let subnets = subnets {
            var subnetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subnets)
            for awsrdsdbsubnetgroupsubnets0 in subnets {
                try subnetsContainer.encode(awsrdsdbsubnetgroupsubnets0)
            }
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let dbSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbSubnetGroupName)
        dbSubnetGroupName = dbSubnetGroupNameDecoded
        let dbSubnetGroupDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbSubnetGroupDescription)
        dbSubnetGroupDescription = dbSubnetGroupDescriptionDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let subnetGroupStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetGroupStatus)
        subnetGroupStatus = subnetGroupStatusDecoded
        let subnetsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRdsDbSubnetGroupSubnet?].self, forKey: .subnets)
        var subnetsDecoded0:[SecurityHubClientTypes.AwsRdsDbSubnetGroupSubnet]? = nil
        if let subnetsContainer = subnetsContainer {
            subnetsDecoded0 = [SecurityHubClientTypes.AwsRdsDbSubnetGroupSubnet]()
            for structure0 in subnetsContainer {
                if let structure0 = structure0 {
                    subnetsDecoded0?.append(structure0)
                }
            }
        }
        subnets = subnetsDecoded0
        let dbSubnetGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dbSubnetGroupArn)
        dbSubnetGroupArn = dbSubnetGroupArnDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbSubnetGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbSubnetGroup(dbSubnetGroupArn: \(Swift.String(describing: dbSubnetGroupArn)), dbSubnetGroupDescription: \(Swift.String(describing: dbSubnetGroupDescription)), dbSubnetGroupName: \(Swift.String(describing: dbSubnetGroupName)), subnetGroupStatus: \(Swift.String(describing: subnetGroupStatus)), subnets: \(Swift.String(describing: subnets)), vpcId: \(Swift.String(describing: vpcId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the subnet group for the database instance.</p>
    public struct AwsRdsDbSubnetGroup: Swift.Equatable {
        /// <p>The ARN of the subnet group.</p>
        public let dbSubnetGroupArn: Swift.String?
        /// <p>The description of the subnet group.</p>
        public let dbSubnetGroupDescription: Swift.String?
        /// <p>The name of the subnet group.</p>
        public let dbSubnetGroupName: Swift.String?
        /// <p>The status of the subnet group.</p>
        public let subnetGroupStatus: Swift.String?
        /// <p>A list of subnets in the subnet group.</p>
        public let subnets: [SecurityHubClientTypes.AwsRdsDbSubnetGroupSubnet]?
        /// <p>The VPC ID of the subnet group.</p>
        public let vpcId: Swift.String?

        public init (
            dbSubnetGroupArn: Swift.String? = nil,
            dbSubnetGroupDescription: Swift.String? = nil,
            dbSubnetGroupName: Swift.String? = nil,
            subnetGroupStatus: Swift.String? = nil,
            subnets: [SecurityHubClientTypes.AwsRdsDbSubnetGroupSubnet]? = nil,
            vpcId: Swift.String? = nil
        )
        {
            self.dbSubnetGroupArn = dbSubnetGroupArn
            self.dbSubnetGroupDescription = dbSubnetGroupDescription
            self.dbSubnetGroupName = dbSubnetGroupName
            self.subnetGroupStatus = subnetGroupStatus
            self.subnets = subnets
            self.vpcId = vpcId
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbSubnetGroupSubnet: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case subnetAvailabilityZone = "SubnetAvailabilityZone"
        case subnetIdentifier = "SubnetIdentifier"
        case subnetStatus = "SubnetStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let subnetAvailabilityZone = subnetAvailabilityZone {
            try encodeContainer.encode(subnetAvailabilityZone, forKey: .subnetAvailabilityZone)
        }
        if let subnetIdentifier = subnetIdentifier {
            try encodeContainer.encode(subnetIdentifier, forKey: .subnetIdentifier)
        }
        if let subnetStatus = subnetStatus {
            try encodeContainer.encode(subnetStatus, forKey: .subnetStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let subnetIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetIdentifier)
        subnetIdentifier = subnetIdentifierDecoded
        let subnetAvailabilityZoneDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbSubnetGroupSubnetAvailabilityZone.self, forKey: .subnetAvailabilityZone)
        subnetAvailabilityZone = subnetAvailabilityZoneDecoded
        let subnetStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subnetStatus)
        subnetStatus = subnetStatusDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbSubnetGroupSubnet: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbSubnetGroupSubnet(subnetAvailabilityZone: \(Swift.String(describing: subnetAvailabilityZone)), subnetIdentifier: \(Swift.String(describing: subnetIdentifier)), subnetStatus: \(Swift.String(describing: subnetStatus)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about a subnet in a subnet group.</p>
    public struct AwsRdsDbSubnetGroupSubnet: Swift.Equatable {
        /// <p>Information about the Availability Zone for a subnet in the subnet group.</p>
        public let subnetAvailabilityZone: SecurityHubClientTypes.AwsRdsDbSubnetGroupSubnetAvailabilityZone?
        /// <p>The identifier of a subnet in the subnet group.</p>
        public let subnetIdentifier: Swift.String?
        /// <p>The status of a subnet in the subnet group.</p>
        public let subnetStatus: Swift.String?

        public init (
            subnetAvailabilityZone: SecurityHubClientTypes.AwsRdsDbSubnetGroupSubnetAvailabilityZone? = nil,
            subnetIdentifier: Swift.String? = nil,
            subnetStatus: Swift.String? = nil
        )
        {
            self.subnetAvailabilityZone = subnetAvailabilityZone
            self.subnetIdentifier = subnetIdentifier
            self.subnetStatus = subnetStatus
        }
    }

}

extension SecurityHubClientTypes.AwsRdsDbSubnetGroupSubnetAvailabilityZone: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
    }
}

extension SecurityHubClientTypes.AwsRdsDbSubnetGroupSubnetAvailabilityZone: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsDbSubnetGroupSubnetAvailabilityZone(name: \(Swift.String(describing: name)))"}
}

extension SecurityHubClientTypes {
    /// <p>An Availability Zone for a subnet in a subnet group.</p>
    public struct AwsRdsDbSubnetGroupSubnetAvailabilityZone: Swift.Equatable {
        /// <p>The name of the Availability Zone for a subnet in the subnet group.</p>
        public let name: Swift.String?

        public init (
            name: Swift.String? = nil
        )
        {
            self.name = name
        }
    }

}

extension SecurityHubClientTypes.AwsRdsPendingCloudWatchLogsExports: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case logTypesToDisable = "LogTypesToDisable"
        case logTypesToEnable = "LogTypesToEnable"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let logTypesToDisable = logTypesToDisable {
            var logTypesToDisableContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logTypesToDisable)
            for stringlist0 in logTypesToDisable {
                try logTypesToDisableContainer.encode(stringlist0)
            }
        }
        if let logTypesToEnable = logTypesToEnable {
            var logTypesToEnableContainer = encodeContainer.nestedUnkeyedContainer(forKey: .logTypesToEnable)
            for stringlist0 in logTypesToEnable {
                try logTypesToEnableContainer.encode(stringlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let logTypesToEnableContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logTypesToEnable)
        var logTypesToEnableDecoded0:[Swift.String]? = nil
        if let logTypesToEnableContainer = logTypesToEnableContainer {
            logTypesToEnableDecoded0 = [Swift.String]()
            for string0 in logTypesToEnableContainer {
                if let string0 = string0 {
                    logTypesToEnableDecoded0?.append(string0)
                }
            }
        }
        logTypesToEnable = logTypesToEnableDecoded0
        let logTypesToDisableContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .logTypesToDisable)
        var logTypesToDisableDecoded0:[Swift.String]? = nil
        if let logTypesToDisableContainer = logTypesToDisableContainer {
            logTypesToDisableDecoded0 = [Swift.String]()
            for string0 in logTypesToDisableContainer {
                if let string0 = string0 {
                    logTypesToDisableDecoded0?.append(string0)
                }
            }
        }
        logTypesToDisable = logTypesToDisableDecoded0
    }
}

extension SecurityHubClientTypes.AwsRdsPendingCloudWatchLogsExports: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRdsPendingCloudWatchLogsExports(logTypesToDisable: \(Swift.String(describing: logTypesToDisable)), logTypesToEnable: \(Swift.String(describing: logTypesToEnable)))"}
}

extension SecurityHubClientTypes {
    /// <p>Identifies the log types to enable and disable.</p>
    public struct AwsRdsPendingCloudWatchLogsExports: Swift.Equatable {
        /// <p>A list of log types that are being disabled.</p>
        public let logTypesToDisable: [Swift.String]?
        /// <p>A list of log types that are being enabled.</p>
        public let logTypesToEnable: [Swift.String]?

        public init (
            logTypesToDisable: [Swift.String]? = nil,
            logTypesToEnable: [Swift.String]? = nil
        )
        {
            self.logTypesToDisable = logTypesToDisable
            self.logTypesToEnable = logTypesToEnable
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterClusterNode: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nodeRole = "NodeRole"
        case privateIpAddress = "PrivateIpAddress"
        case publicIpAddress = "PublicIpAddress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let nodeRole = nodeRole {
            try encodeContainer.encode(nodeRole, forKey: .nodeRole)
        }
        if let privateIpAddress = privateIpAddress {
            try encodeContainer.encode(privateIpAddress, forKey: .privateIpAddress)
        }
        if let publicIpAddress = publicIpAddress {
            try encodeContainer.encode(publicIpAddress, forKey: .publicIpAddress)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nodeRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeRole)
        nodeRole = nodeRoleDecoded
        let privateIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .privateIpAddress)
        privateIpAddress = privateIpAddressDecoded
        let publicIpAddressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .publicIpAddress)
        publicIpAddress = publicIpAddressDecoded
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterClusterNode: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterClusterNode(nodeRole: \(Swift.String(describing: nodeRole)), privateIpAddress: \(Swift.String(describing: privateIpAddress)), publicIpAddress: \(Swift.String(describing: publicIpAddress)))"}
}

extension SecurityHubClientTypes {
    /// <p>A node in an Amazon Redshift cluster.</p>
    public struct AwsRedshiftClusterClusterNode: Swift.Equatable {
        /// <p>The role of the node. A node might be a leader node or a compute node.</p>
        public let nodeRole: Swift.String?
        /// <p>The private IP address of the node.</p>
        public let privateIpAddress: Swift.String?
        /// <p>The public IP address of the node.</p>
        public let publicIpAddress: Swift.String?

        public init (
            nodeRole: Swift.String? = nil,
            privateIpAddress: Swift.String? = nil,
            publicIpAddress: Swift.String? = nil
        )
        {
            self.nodeRole = nodeRole
            self.privateIpAddress = privateIpAddress
            self.publicIpAddress = publicIpAddress
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterClusterParameterGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterParameterStatusList = "ClusterParameterStatusList"
        case parameterApplyStatus = "ParameterApplyStatus"
        case parameterGroupName = "ParameterGroupName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterParameterStatusList = clusterParameterStatusList {
            var clusterParameterStatusListContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterParameterStatusList)
            for awsredshiftclusterclusterparameterstatuslist0 in clusterParameterStatusList {
                try clusterParameterStatusListContainer.encode(awsredshiftclusterclusterparameterstatuslist0)
            }
        }
        if let parameterApplyStatus = parameterApplyStatus {
            try encodeContainer.encode(parameterApplyStatus, forKey: .parameterApplyStatus)
        }
        if let parameterGroupName = parameterGroupName {
            try encodeContainer.encode(parameterGroupName, forKey: .parameterGroupName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterParameterStatusListContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRedshiftClusterClusterParameterStatus?].self, forKey: .clusterParameterStatusList)
        var clusterParameterStatusListDecoded0:[SecurityHubClientTypes.AwsRedshiftClusterClusterParameterStatus]? = nil
        if let clusterParameterStatusListContainer = clusterParameterStatusListContainer {
            clusterParameterStatusListDecoded0 = [SecurityHubClientTypes.AwsRedshiftClusterClusterParameterStatus]()
            for structure0 in clusterParameterStatusListContainer {
                if let structure0 = structure0 {
                    clusterParameterStatusListDecoded0?.append(structure0)
                }
            }
        }
        clusterParameterStatusList = clusterParameterStatusListDecoded0
        let parameterApplyStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterApplyStatus)
        parameterApplyStatus = parameterApplyStatusDecoded
        let parameterGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterGroupName)
        parameterGroupName = parameterGroupNameDecoded
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterClusterParameterGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterClusterParameterGroup(clusterParameterStatusList: \(Swift.String(describing: clusterParameterStatusList)), parameterApplyStatus: \(Swift.String(describing: parameterApplyStatus)), parameterGroupName: \(Swift.String(describing: parameterGroupName)))"}
}

extension SecurityHubClientTypes {
    /// <p>A cluster parameter group that is associated with an Amazon Redshift cluster.</p>
    public struct AwsRedshiftClusterClusterParameterGroup: Swift.Equatable {
        /// <p>The list of parameter statuses.</p>
        public let clusterParameterStatusList: [SecurityHubClientTypes.AwsRedshiftClusterClusterParameterStatus]?
        /// <p>The status of updates to the parameters.</p>
        public let parameterApplyStatus: Swift.String?
        /// <p>The name of the parameter group.</p>
        public let parameterGroupName: Swift.String?

        public init (
            clusterParameterStatusList: [SecurityHubClientTypes.AwsRedshiftClusterClusterParameterStatus]? = nil,
            parameterApplyStatus: Swift.String? = nil,
            parameterGroupName: Swift.String? = nil
        )
        {
            self.clusterParameterStatusList = clusterParameterStatusList
            self.parameterApplyStatus = parameterApplyStatus
            self.parameterGroupName = parameterGroupName
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterClusterParameterStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case parameterApplyErrorDescription = "ParameterApplyErrorDescription"
        case parameterApplyStatus = "ParameterApplyStatus"
        case parameterName = "ParameterName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let parameterApplyErrorDescription = parameterApplyErrorDescription {
            try encodeContainer.encode(parameterApplyErrorDescription, forKey: .parameterApplyErrorDescription)
        }
        if let parameterApplyStatus = parameterApplyStatus {
            try encodeContainer.encode(parameterApplyStatus, forKey: .parameterApplyStatus)
        }
        if let parameterName = parameterName {
            try encodeContainer.encode(parameterName, forKey: .parameterName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let parameterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterName)
        parameterName = parameterNameDecoded
        let parameterApplyStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterApplyStatus)
        parameterApplyStatus = parameterApplyStatusDecoded
        let parameterApplyErrorDescriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .parameterApplyErrorDescription)
        parameterApplyErrorDescription = parameterApplyErrorDescriptionDecoded
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterClusterParameterStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterClusterParameterStatus(parameterApplyErrorDescription: \(Swift.String(describing: parameterApplyErrorDescription)), parameterApplyStatus: \(Swift.String(describing: parameterApplyStatus)), parameterName: \(Swift.String(describing: parameterName)))"}
}

extension SecurityHubClientTypes {
    /// <p>The status of a parameter in a cluster parameter group for an Amazon Redshift
    ///          cluster.</p>
    public struct AwsRedshiftClusterClusterParameterStatus: Swift.Equatable {
        /// <p>The error that prevented the parameter from being applied to the database.</p>
        public let parameterApplyErrorDescription: Swift.String?
        /// <p>The status of the parameter. Indicates whether the parameter is in sync with the
        ///          database, waiting for a cluster reboot, or encountered an error when it was applied.</p>
        ///          <p>Valid values: <code>in-sync</code> | <code>pending-reboot</code> | <code>applying</code>
        ///          | <code>invalid-parameter</code> | <code>apply-deferred</code> | <code>apply-error</code> |
        ///             <code>unknown-error</code>
        ///          </p>
        public let parameterApplyStatus: Swift.String?
        /// <p>The name of the parameter.</p>
        public let parameterName: Swift.String?

        public init (
            parameterApplyErrorDescription: Swift.String? = nil,
            parameterApplyStatus: Swift.String? = nil,
            parameterName: Swift.String? = nil
        )
        {
            self.parameterApplyErrorDescription = parameterApplyErrorDescription
            self.parameterApplyStatus = parameterApplyStatus
            self.parameterName = parameterName
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterClusterSecurityGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case clusterSecurityGroupName = "ClusterSecurityGroupName"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let clusterSecurityGroupName = clusterSecurityGroupName {
            try encodeContainer.encode(clusterSecurityGroupName, forKey: .clusterSecurityGroupName)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let clusterSecurityGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSecurityGroupName)
        clusterSecurityGroupName = clusterSecurityGroupNameDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterClusterSecurityGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterClusterSecurityGroup(clusterSecurityGroupName: \(Swift.String(describing: clusterSecurityGroupName)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>A security group that is associated with the cluster.</p>
    public struct AwsRedshiftClusterClusterSecurityGroup: Swift.Equatable {
        /// <p>The name of the cluster security group.</p>
        public let clusterSecurityGroupName: Swift.String?
        /// <p>The status of the cluster security group.</p>
        public let status: Swift.String?

        public init (
            clusterSecurityGroupName: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.clusterSecurityGroupName = clusterSecurityGroupName
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterClusterSnapshotCopyStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationRegion = "DestinationRegion"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case retentionPeriod = "RetentionPeriod"
        case snapshotCopyGrantName = "SnapshotCopyGrantName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationRegion = destinationRegion {
            try encodeContainer.encode(destinationRegion, forKey: .destinationRegion)
        }
        if manualSnapshotRetentionPeriod != 0 {
            try encodeContainer.encode(manualSnapshotRetentionPeriod, forKey: .manualSnapshotRetentionPeriod)
        }
        if retentionPeriod != 0 {
            try encodeContainer.encode(retentionPeriod, forKey: .retentionPeriod)
        }
        if let snapshotCopyGrantName = snapshotCopyGrantName {
            try encodeContainer.encode(snapshotCopyGrantName, forKey: .snapshotCopyGrantName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let destinationRegionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationRegion)
        destinationRegion = destinationRegionDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decode(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
        let retentionPeriodDecoded = try containerValues.decode(Swift.Int.self, forKey: .retentionPeriod)
        retentionPeriod = retentionPeriodDecoded
        let snapshotCopyGrantNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotCopyGrantName)
        snapshotCopyGrantName = snapshotCopyGrantNameDecoded
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterClusterSnapshotCopyStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterClusterSnapshotCopyStatus(destinationRegion: \(Swift.String(describing: destinationRegion)), manualSnapshotRetentionPeriod: \(Swift.String(describing: manualSnapshotRetentionPeriod)), retentionPeriod: \(Swift.String(describing: retentionPeriod)), snapshotCopyGrantName: \(Swift.String(describing: snapshotCopyGrantName)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about a cross-Region snapshot copy.</p>
    public struct AwsRedshiftClusterClusterSnapshotCopyStatus: Swift.Equatable {
        /// <p>The destination Region that snapshots are automatically copied to when cross-Region
        ///          snapshot copy is enabled.</p>
        public let destinationRegion: Swift.String?
        /// <p>The number of days that manual snapshots are retained in the destination region after
        ///          they are copied from a source region.</p>
        ///          <p>If the value is -1, then the manual snapshot is retained indefinitely.</p>
        ///          <p>Valid values: Either -1 or an integer between 1 and 3,653</p>
        public let manualSnapshotRetentionPeriod: Swift.Int
        /// <p>The number of days to retain automated snapshots in the destination Region after they
        ///          are copied from a source Region.</p>
        public let retentionPeriod: Swift.Int
        /// <p>The name of the snapshot copy grant.</p>
        public let snapshotCopyGrantName: Swift.String?

        public init (
            destinationRegion: Swift.String? = nil,
            manualSnapshotRetentionPeriod: Swift.Int = 0,
            retentionPeriod: Swift.Int = 0,
            snapshotCopyGrantName: Swift.String? = nil
        )
        {
            self.destinationRegion = destinationRegion
            self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
            self.retentionPeriod = retentionPeriod
            self.snapshotCopyGrantName = snapshotCopyGrantName
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterDeferredMaintenanceWindow: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deferMaintenanceEndTime = "DeferMaintenanceEndTime"
        case deferMaintenanceIdentifier = "DeferMaintenanceIdentifier"
        case deferMaintenanceStartTime = "DeferMaintenanceStartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deferMaintenanceEndTime = deferMaintenanceEndTime {
            try encodeContainer.encode(deferMaintenanceEndTime, forKey: .deferMaintenanceEndTime)
        }
        if let deferMaintenanceIdentifier = deferMaintenanceIdentifier {
            try encodeContainer.encode(deferMaintenanceIdentifier, forKey: .deferMaintenanceIdentifier)
        }
        if let deferMaintenanceStartTime = deferMaintenanceStartTime {
            try encodeContainer.encode(deferMaintenanceStartTime, forKey: .deferMaintenanceStartTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deferMaintenanceEndTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deferMaintenanceEndTime)
        deferMaintenanceEndTime = deferMaintenanceEndTimeDecoded
        let deferMaintenanceIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deferMaintenanceIdentifier)
        deferMaintenanceIdentifier = deferMaintenanceIdentifierDecoded
        let deferMaintenanceStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deferMaintenanceStartTime)
        deferMaintenanceStartTime = deferMaintenanceStartTimeDecoded
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterDeferredMaintenanceWindow: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterDeferredMaintenanceWindow(deferMaintenanceEndTime: \(Swift.String(describing: deferMaintenanceEndTime)), deferMaintenanceIdentifier: \(Swift.String(describing: deferMaintenanceIdentifier)), deferMaintenanceStartTime: \(Swift.String(describing: deferMaintenanceStartTime)))"}
}

extension SecurityHubClientTypes {
    /// <p>A time windows during which maintenance was deferred for an Amazon Redshift
    ///          cluster.</p>
    public struct AwsRedshiftClusterDeferredMaintenanceWindow: Swift.Equatable {
        /// <p>The end of the time window for which maintenance was deferred.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let deferMaintenanceEndTime: Swift.String?
        /// <p>The identifier of the maintenance window.</p>
        public let deferMaintenanceIdentifier: Swift.String?
        /// <p>The start of the time window for which maintenance was deferred.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let deferMaintenanceStartTime: Swift.String?

        public init (
            deferMaintenanceEndTime: Swift.String? = nil,
            deferMaintenanceIdentifier: Swift.String? = nil,
            deferMaintenanceStartTime: Swift.String? = nil
        )
        {
            self.deferMaintenanceEndTime = deferMaintenanceEndTime
            self.deferMaintenanceIdentifier = deferMaintenanceIdentifier
            self.deferMaintenanceStartTime = deferMaintenanceStartTime
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowVersionUpgrade = "AllowVersionUpgrade"
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case availabilityZone = "AvailabilityZone"
        case clusterAvailabilityStatus = "ClusterAvailabilityStatus"
        case clusterCreateTime = "ClusterCreateTime"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterNodes = "ClusterNodes"
        case clusterParameterGroups = "ClusterParameterGroups"
        case clusterPublicKey = "ClusterPublicKey"
        case clusterRevisionNumber = "ClusterRevisionNumber"
        case clusterSecurityGroups = "ClusterSecurityGroups"
        case clusterSnapshotCopyStatus = "ClusterSnapshotCopyStatus"
        case clusterStatus = "ClusterStatus"
        case clusterSubnetGroupName = "ClusterSubnetGroupName"
        case clusterVersion = "ClusterVersion"
        case dBName = "DBName"
        case deferredMaintenanceWindows = "DeferredMaintenanceWindows"
        case elasticIpStatus = "ElasticIpStatus"
        case elasticResizeNumberOfNodeOptions = "ElasticResizeNumberOfNodeOptions"
        case encrypted = "Encrypted"
        case endpoint = "Endpoint"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case expectedNextSnapshotScheduleTime = "ExpectedNextSnapshotScheduleTime"
        case expectedNextSnapshotScheduleTimeStatus = "ExpectedNextSnapshotScheduleTimeStatus"
        case hsmStatus = "HsmStatus"
        case iamRoles = "IamRoles"
        case kmsKeyId = "KmsKeyId"
        case maintenanceTrackName = "MaintenanceTrackName"
        case manualSnapshotRetentionPeriod = "ManualSnapshotRetentionPeriod"
        case masterUsername = "MasterUsername"
        case nextMaintenanceWindowStartTime = "NextMaintenanceWindowStartTime"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case pendingActions = "PendingActions"
        case pendingModifiedValues = "PendingModifiedValues"
        case preferredMaintenanceWindow = "PreferredMaintenanceWindow"
        case publiclyAccessible = "PubliclyAccessible"
        case resizeInfo = "ResizeInfo"
        case restoreStatus = "RestoreStatus"
        case snapshotScheduleIdentifier = "SnapshotScheduleIdentifier"
        case snapshotScheduleState = "SnapshotScheduleState"
        case vpcId = "VpcId"
        case vpcSecurityGroups = "VpcSecurityGroups"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allowVersionUpgrade != false {
            try encodeContainer.encode(allowVersionUpgrade, forKey: .allowVersionUpgrade)
        }
        if automatedSnapshotRetentionPeriod != 0 {
            try encodeContainer.encode(automatedSnapshotRetentionPeriod, forKey: .automatedSnapshotRetentionPeriod)
        }
        if let availabilityZone = availabilityZone {
            try encodeContainer.encode(availabilityZone, forKey: .availabilityZone)
        }
        if let clusterAvailabilityStatus = clusterAvailabilityStatus {
            try encodeContainer.encode(clusterAvailabilityStatus, forKey: .clusterAvailabilityStatus)
        }
        if let clusterCreateTime = clusterCreateTime {
            try encodeContainer.encode(clusterCreateTime, forKey: .clusterCreateTime)
        }
        if let clusterIdentifier = clusterIdentifier {
            try encodeContainer.encode(clusterIdentifier, forKey: .clusterIdentifier)
        }
        if let clusterNodes = clusterNodes {
            var clusterNodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterNodes)
            for awsredshiftclusterclusternodes0 in clusterNodes {
                try clusterNodesContainer.encode(awsredshiftclusterclusternodes0)
            }
        }
        if let clusterParameterGroups = clusterParameterGroups {
            var clusterParameterGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterParameterGroups)
            for awsredshiftclusterclusterparametergroups0 in clusterParameterGroups {
                try clusterParameterGroupsContainer.encode(awsredshiftclusterclusterparametergroups0)
            }
        }
        if let clusterPublicKey = clusterPublicKey {
            try encodeContainer.encode(clusterPublicKey, forKey: .clusterPublicKey)
        }
        if let clusterRevisionNumber = clusterRevisionNumber {
            try encodeContainer.encode(clusterRevisionNumber, forKey: .clusterRevisionNumber)
        }
        if let clusterSecurityGroups = clusterSecurityGroups {
            var clusterSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .clusterSecurityGroups)
            for awsredshiftclusterclustersecuritygroups0 in clusterSecurityGroups {
                try clusterSecurityGroupsContainer.encode(awsredshiftclusterclustersecuritygroups0)
            }
        }
        if let clusterSnapshotCopyStatus = clusterSnapshotCopyStatus {
            try encodeContainer.encode(clusterSnapshotCopyStatus, forKey: .clusterSnapshotCopyStatus)
        }
        if let clusterStatus = clusterStatus {
            try encodeContainer.encode(clusterStatus, forKey: .clusterStatus)
        }
        if let clusterSubnetGroupName = clusterSubnetGroupName {
            try encodeContainer.encode(clusterSubnetGroupName, forKey: .clusterSubnetGroupName)
        }
        if let clusterVersion = clusterVersion {
            try encodeContainer.encode(clusterVersion, forKey: .clusterVersion)
        }
        if let dBName = dBName {
            try encodeContainer.encode(dBName, forKey: .dBName)
        }
        if let deferredMaintenanceWindows = deferredMaintenanceWindows {
            var deferredMaintenanceWindowsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .deferredMaintenanceWindows)
            for awsredshiftclusterdeferredmaintenancewindows0 in deferredMaintenanceWindows {
                try deferredMaintenanceWindowsContainer.encode(awsredshiftclusterdeferredmaintenancewindows0)
            }
        }
        if let elasticIpStatus = elasticIpStatus {
            try encodeContainer.encode(elasticIpStatus, forKey: .elasticIpStatus)
        }
        if let elasticResizeNumberOfNodeOptions = elasticResizeNumberOfNodeOptions {
            try encodeContainer.encode(elasticResizeNumberOfNodeOptions, forKey: .elasticResizeNumberOfNodeOptions)
        }
        if encrypted != false {
            try encodeContainer.encode(encrypted, forKey: .encrypted)
        }
        if let endpoint = endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if enhancedVpcRouting != false {
            try encodeContainer.encode(enhancedVpcRouting, forKey: .enhancedVpcRouting)
        }
        if let expectedNextSnapshotScheduleTime = expectedNextSnapshotScheduleTime {
            try encodeContainer.encode(expectedNextSnapshotScheduleTime, forKey: .expectedNextSnapshotScheduleTime)
        }
        if let expectedNextSnapshotScheduleTimeStatus = expectedNextSnapshotScheduleTimeStatus {
            try encodeContainer.encode(expectedNextSnapshotScheduleTimeStatus, forKey: .expectedNextSnapshotScheduleTimeStatus)
        }
        if let hsmStatus = hsmStatus {
            try encodeContainer.encode(hsmStatus, forKey: .hsmStatus)
        }
        if let iamRoles = iamRoles {
            var iamRolesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .iamRoles)
            for awsredshiftclusteriamroles0 in iamRoles {
                try iamRolesContainer.encode(awsredshiftclusteriamroles0)
            }
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try encodeContainer.encode(maintenanceTrackName, forKey: .maintenanceTrackName)
        }
        if manualSnapshotRetentionPeriod != 0 {
            try encodeContainer.encode(manualSnapshotRetentionPeriod, forKey: .manualSnapshotRetentionPeriod)
        }
        if let masterUsername = masterUsername {
            try encodeContainer.encode(masterUsername, forKey: .masterUsername)
        }
        if let nextMaintenanceWindowStartTime = nextMaintenanceWindowStartTime {
            try encodeContainer.encode(nextMaintenanceWindowStartTime, forKey: .nextMaintenanceWindowStartTime)
        }
        if let nodeType = nodeType {
            try encodeContainer.encode(nodeType, forKey: .nodeType)
        }
        if numberOfNodes != 0 {
            try encodeContainer.encode(numberOfNodes, forKey: .numberOfNodes)
        }
        if let pendingActions = pendingActions {
            var pendingActionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pendingActions)
            for stringlist0 in pendingActions {
                try pendingActionsContainer.encode(stringlist0)
            }
        }
        if let pendingModifiedValues = pendingModifiedValues {
            try encodeContainer.encode(pendingModifiedValues, forKey: .pendingModifiedValues)
        }
        if let preferredMaintenanceWindow = preferredMaintenanceWindow {
            try encodeContainer.encode(preferredMaintenanceWindow, forKey: .preferredMaintenanceWindow)
        }
        if publiclyAccessible != false {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
        if let resizeInfo = resizeInfo {
            try encodeContainer.encode(resizeInfo, forKey: .resizeInfo)
        }
        if let restoreStatus = restoreStatus {
            try encodeContainer.encode(restoreStatus, forKey: .restoreStatus)
        }
        if let snapshotScheduleIdentifier = snapshotScheduleIdentifier {
            try encodeContainer.encode(snapshotScheduleIdentifier, forKey: .snapshotScheduleIdentifier)
        }
        if let snapshotScheduleState = snapshotScheduleState {
            try encodeContainer.encode(snapshotScheduleState, forKey: .snapshotScheduleState)
        }
        if let vpcId = vpcId {
            try encodeContainer.encode(vpcId, forKey: .vpcId)
        }
        if let vpcSecurityGroups = vpcSecurityGroups {
            var vpcSecurityGroupsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vpcSecurityGroups)
            for awsredshiftclustervpcsecuritygroups0 in vpcSecurityGroups {
                try vpcSecurityGroupsContainer.encode(awsredshiftclustervpcsecuritygroups0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowVersionUpgradeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowVersionUpgrade)
        allowVersionUpgrade = allowVersionUpgradeDecoded
        let automatedSnapshotRetentionPeriodDecoded = try containerValues.decode(Swift.Int.self, forKey: .automatedSnapshotRetentionPeriod)
        automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriodDecoded
        let availabilityZoneDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .availabilityZone)
        availabilityZone = availabilityZoneDecoded
        let clusterAvailabilityStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterAvailabilityStatus)
        clusterAvailabilityStatus = clusterAvailabilityStatusDecoded
        let clusterCreateTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterCreateTime)
        clusterCreateTime = clusterCreateTimeDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let clusterNodesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRedshiftClusterClusterNode?].self, forKey: .clusterNodes)
        var clusterNodesDecoded0:[SecurityHubClientTypes.AwsRedshiftClusterClusterNode]? = nil
        if let clusterNodesContainer = clusterNodesContainer {
            clusterNodesDecoded0 = [SecurityHubClientTypes.AwsRedshiftClusterClusterNode]()
            for structure0 in clusterNodesContainer {
                if let structure0 = structure0 {
                    clusterNodesDecoded0?.append(structure0)
                }
            }
        }
        clusterNodes = clusterNodesDecoded0
        let clusterParameterGroupsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRedshiftClusterClusterParameterGroup?].self, forKey: .clusterParameterGroups)
        var clusterParameterGroupsDecoded0:[SecurityHubClientTypes.AwsRedshiftClusterClusterParameterGroup]? = nil
        if let clusterParameterGroupsContainer = clusterParameterGroupsContainer {
            clusterParameterGroupsDecoded0 = [SecurityHubClientTypes.AwsRedshiftClusterClusterParameterGroup]()
            for structure0 in clusterParameterGroupsContainer {
                if let structure0 = structure0 {
                    clusterParameterGroupsDecoded0?.append(structure0)
                }
            }
        }
        clusterParameterGroups = clusterParameterGroupsDecoded0
        let clusterPublicKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterPublicKey)
        clusterPublicKey = clusterPublicKeyDecoded
        let clusterRevisionNumberDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterRevisionNumber)
        clusterRevisionNumber = clusterRevisionNumberDecoded
        let clusterSecurityGroupsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRedshiftClusterClusterSecurityGroup?].self, forKey: .clusterSecurityGroups)
        var clusterSecurityGroupsDecoded0:[SecurityHubClientTypes.AwsRedshiftClusterClusterSecurityGroup]? = nil
        if let clusterSecurityGroupsContainer = clusterSecurityGroupsContainer {
            clusterSecurityGroupsDecoded0 = [SecurityHubClientTypes.AwsRedshiftClusterClusterSecurityGroup]()
            for structure0 in clusterSecurityGroupsContainer {
                if let structure0 = structure0 {
                    clusterSecurityGroupsDecoded0?.append(structure0)
                }
            }
        }
        clusterSecurityGroups = clusterSecurityGroupsDecoded0
        let clusterSnapshotCopyStatusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterClusterSnapshotCopyStatus.self, forKey: .clusterSnapshotCopyStatus)
        clusterSnapshotCopyStatus = clusterSnapshotCopyStatusDecoded
        let clusterStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterStatus)
        clusterStatus = clusterStatusDecoded
        let clusterSubnetGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterSubnetGroupName)
        clusterSubnetGroupName = clusterSubnetGroupNameDecoded
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let dBNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dBName)
        dBName = dBNameDecoded
        let deferredMaintenanceWindowsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRedshiftClusterDeferredMaintenanceWindow?].self, forKey: .deferredMaintenanceWindows)
        var deferredMaintenanceWindowsDecoded0:[SecurityHubClientTypes.AwsRedshiftClusterDeferredMaintenanceWindow]? = nil
        if let deferredMaintenanceWindowsContainer = deferredMaintenanceWindowsContainer {
            deferredMaintenanceWindowsDecoded0 = [SecurityHubClientTypes.AwsRedshiftClusterDeferredMaintenanceWindow]()
            for structure0 in deferredMaintenanceWindowsContainer {
                if let structure0 = structure0 {
                    deferredMaintenanceWindowsDecoded0?.append(structure0)
                }
            }
        }
        deferredMaintenanceWindows = deferredMaintenanceWindowsDecoded0
        let elasticIpStatusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterElasticIpStatus.self, forKey: .elasticIpStatus)
        elasticIpStatus = elasticIpStatusDecoded
        let elasticResizeNumberOfNodeOptionsDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticResizeNumberOfNodeOptions)
        elasticResizeNumberOfNodeOptions = elasticResizeNumberOfNodeOptionsDecoded
        let encryptedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .encrypted)
        encrypted = encryptedDecoded
        let endpointDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterEndpoint.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let enhancedVpcRoutingDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enhancedVpcRouting)
        enhancedVpcRouting = enhancedVpcRoutingDecoded
        let expectedNextSnapshotScheduleTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedNextSnapshotScheduleTime)
        expectedNextSnapshotScheduleTime = expectedNextSnapshotScheduleTimeDecoded
        let expectedNextSnapshotScheduleTimeStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .expectedNextSnapshotScheduleTimeStatus)
        expectedNextSnapshotScheduleTimeStatus = expectedNextSnapshotScheduleTimeStatusDecoded
        let hsmStatusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterHsmStatus.self, forKey: .hsmStatus)
        hsmStatus = hsmStatusDecoded
        let iamRolesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRedshiftClusterIamRole?].self, forKey: .iamRoles)
        var iamRolesDecoded0:[SecurityHubClientTypes.AwsRedshiftClusterIamRole]? = nil
        if let iamRolesContainer = iamRolesContainer {
            iamRolesDecoded0 = [SecurityHubClientTypes.AwsRedshiftClusterIamRole]()
            for structure0 in iamRolesContainer {
                if let structure0 = structure0 {
                    iamRolesDecoded0?.append(structure0)
                }
            }
        }
        iamRoles = iamRolesDecoded0
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let manualSnapshotRetentionPeriodDecoded = try containerValues.decode(Swift.Int.self, forKey: .manualSnapshotRetentionPeriod)
        manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriodDecoded
        let masterUsernameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUsername)
        masterUsername = masterUsernameDecoded
        let nextMaintenanceWindowStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextMaintenanceWindowStartTime)
        nextMaintenanceWindowStartTime = nextMaintenanceWindowStartTimeDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let numberOfNodesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let pendingActionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .pendingActions)
        var pendingActionsDecoded0:[Swift.String]? = nil
        if let pendingActionsContainer = pendingActionsContainer {
            pendingActionsDecoded0 = [Swift.String]()
            for string0 in pendingActionsContainer {
                if let string0 = string0 {
                    pendingActionsDecoded0?.append(string0)
                }
            }
        }
        pendingActions = pendingActionsDecoded0
        let pendingModifiedValuesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterPendingModifiedValues.self, forKey: .pendingModifiedValues)
        pendingModifiedValues = pendingModifiedValuesDecoded
        let preferredMaintenanceWindowDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .preferredMaintenanceWindow)
        preferredMaintenanceWindow = preferredMaintenanceWindowDecoded
        let publiclyAccessibleDecoded = try containerValues.decode(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
        let resizeInfoDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterResizeInfo.self, forKey: .resizeInfo)
        resizeInfo = resizeInfoDecoded
        let restoreStatusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterRestoreStatus.self, forKey: .restoreStatus)
        restoreStatus = restoreStatusDecoded
        let snapshotScheduleIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotScheduleIdentifier)
        snapshotScheduleIdentifier = snapshotScheduleIdentifierDecoded
        let snapshotScheduleStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .snapshotScheduleState)
        snapshotScheduleState = snapshotScheduleStateDecoded
        let vpcIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcId)
        vpcId = vpcIdDecoded
        let vpcSecurityGroupsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsRedshiftClusterVpcSecurityGroup?].self, forKey: .vpcSecurityGroups)
        var vpcSecurityGroupsDecoded0:[SecurityHubClientTypes.AwsRedshiftClusterVpcSecurityGroup]? = nil
        if let vpcSecurityGroupsContainer = vpcSecurityGroupsContainer {
            vpcSecurityGroupsDecoded0 = [SecurityHubClientTypes.AwsRedshiftClusterVpcSecurityGroup]()
            for structure0 in vpcSecurityGroupsContainer {
                if let structure0 = structure0 {
                    vpcSecurityGroupsDecoded0?.append(structure0)
                }
            }
        }
        vpcSecurityGroups = vpcSecurityGroupsDecoded0
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterDetails(allowVersionUpgrade: \(Swift.String(describing: allowVersionUpgrade)), automatedSnapshotRetentionPeriod: \(Swift.String(describing: automatedSnapshotRetentionPeriod)), availabilityZone: \(Swift.String(describing: availabilityZone)), clusterAvailabilityStatus: \(Swift.String(describing: clusterAvailabilityStatus)), clusterCreateTime: \(Swift.String(describing: clusterCreateTime)), clusterIdentifier: \(Swift.String(describing: clusterIdentifier)), clusterNodes: \(Swift.String(describing: clusterNodes)), clusterParameterGroups: \(Swift.String(describing: clusterParameterGroups)), clusterPublicKey: \(Swift.String(describing: clusterPublicKey)), clusterRevisionNumber: \(Swift.String(describing: clusterRevisionNumber)), clusterSecurityGroups: \(Swift.String(describing: clusterSecurityGroups)), clusterSnapshotCopyStatus: \(Swift.String(describing: clusterSnapshotCopyStatus)), clusterStatus: \(Swift.String(describing: clusterStatus)), clusterSubnetGroupName: \(Swift.String(describing: clusterSubnetGroupName)), clusterVersion: \(Swift.String(describing: clusterVersion)), dBName: \(Swift.String(describing: dBName)), deferredMaintenanceWindows: \(Swift.String(describing: deferredMaintenanceWindows)), elasticIpStatus: \(Swift.String(describing: elasticIpStatus)), elasticResizeNumberOfNodeOptions: \(Swift.String(describing: elasticResizeNumberOfNodeOptions)), encrypted: \(Swift.String(describing: encrypted)), endpoint: \(Swift.String(describing: endpoint)), enhancedVpcRouting: \(Swift.String(describing: enhancedVpcRouting)), expectedNextSnapshotScheduleTime: \(Swift.String(describing: expectedNextSnapshotScheduleTime)), expectedNextSnapshotScheduleTimeStatus: \(Swift.String(describing: expectedNextSnapshotScheduleTimeStatus)), hsmStatus: \(Swift.String(describing: hsmStatus)), iamRoles: \(Swift.String(describing: iamRoles)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), maintenanceTrackName: \(Swift.String(describing: maintenanceTrackName)), manualSnapshotRetentionPeriod: \(Swift.String(describing: manualSnapshotRetentionPeriod)), masterUsername: \(Swift.String(describing: masterUsername)), nextMaintenanceWindowStartTime: \(Swift.String(describing: nextMaintenanceWindowStartTime)), nodeType: \(Swift.String(describing: nodeType)), numberOfNodes: \(Swift.String(describing: numberOfNodes)), pendingActions: \(Swift.String(describing: pendingActions)), pendingModifiedValues: \(Swift.String(describing: pendingModifiedValues)), preferredMaintenanceWindow: \(Swift.String(describing: preferredMaintenanceWindow)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)), resizeInfo: \(Swift.String(describing: resizeInfo)), restoreStatus: \(Swift.String(describing: restoreStatus)), snapshotScheduleIdentifier: \(Swift.String(describing: snapshotScheduleIdentifier)), snapshotScheduleState: \(Swift.String(describing: snapshotScheduleState)), vpcId: \(Swift.String(describing: vpcId)), vpcSecurityGroups: \(Swift.String(describing: vpcSecurityGroups)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about an Amazon Redshift cluster.</p>
    public struct AwsRedshiftClusterDetails: Swift.Equatable {
        /// <p>Indicates whether major version upgrades are applied automatically to the cluster during
        ///          the maintenance window.</p>
        public let allowVersionUpgrade: Swift.Bool
        /// <p>The number of days that automatic cluster snapshots are retained.</p>
        public let automatedSnapshotRetentionPeriod: Swift.Int
        /// <p>The name of the Availability Zone in which the cluster is located.</p>
        public let availabilityZone: Swift.String?
        /// <p>The availability status of the cluster for queries. Possible values are the
        ///          following:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>Available</code> - The cluster is available for queries.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Unavailable</code> - The cluster is not available for queries.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Maintenance</code> - The cluster is intermittently available for queries due
        ///                to maintenance activities.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Modifying</code> -The cluster is intermittently available for queries due to
        ///                changes that modify the cluster.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>Failed</code> - The cluster failed and is not available for queries.</p>
        ///             </li>
        ///          </ul>
        public let clusterAvailabilityStatus: Swift.String?
        /// <p>Indicates when the cluster was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let clusterCreateTime: Swift.String?
        /// <p>The unique identifier of the cluster.</p>
        public let clusterIdentifier: Swift.String?
        /// <p>The nodes in the cluster.</p>
        public let clusterNodes: [SecurityHubClientTypes.AwsRedshiftClusterClusterNode]?
        /// <p>The list of cluster parameter groups that are associated with this cluster.</p>
        public let clusterParameterGroups: [SecurityHubClientTypes.AwsRedshiftClusterClusterParameterGroup]?
        /// <p>The public key for the cluster.</p>
        public let clusterPublicKey: Swift.String?
        /// <p>The specific revision number of the database in the cluster.</p>
        public let clusterRevisionNumber: Swift.String?
        /// <p>A list of cluster security groups that are associated with the cluster.</p>
        public let clusterSecurityGroups: [SecurityHubClientTypes.AwsRedshiftClusterClusterSecurityGroup]?
        /// <p>Information about the destination Region and retention period for the cross-Region
        ///          snapshot copy.</p>
        public let clusterSnapshotCopyStatus: SecurityHubClientTypes.AwsRedshiftClusterClusterSnapshotCopyStatus?
        /// <p>The current status of the cluster.</p>
        ///          <p>Valid values: <code>available</code> | <code>available, prep-for-resize</code> |
        ///             <code>available, resize-cleanup</code> |<code> cancelling-resize</code> |
        ///             <code>creating</code> | <code>deleting</code> | <code>final-snapshot</code> |
        ///             <code>hardware-failure</code> | <code>incompatible-hsm</code> |<code>
        ///             incompatible-network</code> | <code>incompatible-parameters</code> |
        ///             <code>incompatible-restore</code> | <code>modifying</code> | <code>paused</code> |
        ///             <code>rebooting</code> | <code>renaming</code> | <code>resizing</code> |
        ///             <code>rotating-keys</code> | <code>storage-full</code> |
        ///          <code>updating-hsm</code>
        ///          </p>
        public let clusterStatus: Swift.String?
        /// <p>The name of the subnet group that is associated with the cluster. This parameter is
        ///          valid only when the cluster is in a VPC.</p>
        public let clusterSubnetGroupName: Swift.String?
        /// <p>The version ID of the Amazon Redshift engine that runs on the cluster.</p>
        public let clusterVersion: Swift.String?
        /// <p>The name of the initial database that was created when the cluster was created.</p>
        ///          <p>The same name is returned for the life of the cluster.</p>
        ///          <p>If an initial database is not specified, a database named <code>devdev</code> is created
        ///          by default.</p>
        public let dBName: Swift.String?
        /// <p>List of time windows during which maintenance was deferred.</p>
        public let deferredMaintenanceWindows: [SecurityHubClientTypes.AwsRedshiftClusterDeferredMaintenanceWindow]?
        /// <p>Information about the status of the Elastic IP (EIP) address.</p>
        public let elasticIpStatus: SecurityHubClientTypes.AwsRedshiftClusterElasticIpStatus?
        /// <p>The number of nodes that you can use the elastic resize method to resize the cluster
        ///          to.</p>
        public let elasticResizeNumberOfNodeOptions: Swift.String?
        /// <p>Indicates whether the data in the cluster is encrypted at rest.</p>
        public let encrypted: Swift.Bool
        /// <p>The connection endpoint.</p>
        public let endpoint: SecurityHubClientTypes.AwsRedshiftClusterEndpoint?
        /// <p>Indicates whether to create the cluster with enhanced VPC routing enabled.</p>
        public let enhancedVpcRouting: Swift.Bool
        /// <p>Indicates when the next snapshot is expected to be taken. The cluster must have a valid
        ///          snapshot schedule and have backups enabled.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let expectedNextSnapshotScheduleTime: Swift.String?
        /// <p>The status of the next expected snapshot.</p>
        ///          <p>Valid values: <code>OnTrack</code> | <code>Pending</code>
        ///          </p>
        public let expectedNextSnapshotScheduleTimeStatus: Swift.String?
        /// <p>Information about whether the Amazon Redshift cluster finished applying any changes to
        ///          hardware security module (HSM) settings that were specified in a modify cluster
        ///          command.</p>
        public let hsmStatus: SecurityHubClientTypes.AwsRedshiftClusterHsmStatus?
        /// <p>A list of IAM roles that the cluster can use to access other AWS services.</p>
        public let iamRoles: [SecurityHubClientTypes.AwsRedshiftClusterIamRole]?
        /// <p>The identifier of the AWS KMS encryption key that is used to encrypt data in the
        ///          cluster.</p>
        public let kmsKeyId: Swift.String?
        /// <p>The name of the maintenance track for the cluster.</p>
        public let maintenanceTrackName: Swift.String?
        /// <p>The default number of days to retain a manual snapshot.</p>
        ///          <p>If the value is -1, the snapshot is retained indefinitely.</p>
        ///          <p>This setting doesn't change the retention period of existing snapshots.</p>
        ///          <p>Valid values: Either -1 or an integer between 1 and 3,653</p>
        public let manualSnapshotRetentionPeriod: Swift.Int
        /// <p>The master user name for the cluster. This name is used to connect to the database that
        ///          is specified in as the value of <code>DBName</code>.</p>
        public let masterUsername: Swift.String?
        /// <p>Indicates the start of the next maintenance window.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let nextMaintenanceWindowStartTime: Swift.String?
        /// <p>The node type for the nodes in the cluster.</p>
        public let nodeType: Swift.String?
        /// <p>The number of compute nodes in the cluster.</p>
        public let numberOfNodes: Swift.Int
        /// <p>A list of cluster operations that are waiting to start.</p>
        public let pendingActions: [Swift.String]?
        /// <p>A list of changes to the cluster that are currently pending.</p>
        public let pendingModifiedValues: SecurityHubClientTypes.AwsRedshiftClusterPendingModifiedValues?
        /// <p>The weekly time range, in Universal Coordinated Time (UTC), during which system
        ///          maintenance can occur.</p>
        ///          <p>Format:
        ///             <code>
        ///                <i><day></i>:HH:MM-<i><day></i>:HH:MM</code>
        ///          </p>
        ///          <p>For the day values, use <code>mon</code> | <code>tue</code> | <code>wed</code> |
        ///             <code>thu</code> | <code>fri</code> | <code>sat</code> | <code>sun</code>
        ///          </p>
        ///          <p>For example, <code>sun:09:32-sun:10:02</code>
        ///          </p>
        public let preferredMaintenanceWindow: Swift.String?
        /// <p>Whether the cluster can be accessed from a public network.</p>
        public let publiclyAccessible: Swift.Bool
        /// <p>Information about the resize operation for the cluster.</p>
        public let resizeInfo: SecurityHubClientTypes.AwsRedshiftClusterResizeInfo?
        /// <p>Information about the status of a cluster restore action. Only applies to a cluster that
        ///          was created by restoring a snapshot.</p>
        public let restoreStatus: SecurityHubClientTypes.AwsRedshiftClusterRestoreStatus?
        /// <p>A unique identifier for the cluster snapshot schedule.</p>
        public let snapshotScheduleIdentifier: Swift.String?
        /// <p>The current state of the cluster snapshot schedule.</p>
        ///          <p>Valid values: <code>MODIFYING</code> | <code>ACTIVE</code> | <code>FAILED</code>
        ///          </p>
        public let snapshotScheduleState: Swift.String?
        /// <p>The identifier of the VPC that the cluster is in, if the cluster is in a VPC.</p>
        public let vpcId: Swift.String?
        /// <p>The list of VPC security groups that the cluster belongs to, if the cluster is in a
        ///          VPC.</p>
        public let vpcSecurityGroups: [SecurityHubClientTypes.AwsRedshiftClusterVpcSecurityGroup]?

        public init (
            allowVersionUpgrade: Swift.Bool = false,
            automatedSnapshotRetentionPeriod: Swift.Int = 0,
            availabilityZone: Swift.String? = nil,
            clusterAvailabilityStatus: Swift.String? = nil,
            clusterCreateTime: Swift.String? = nil,
            clusterIdentifier: Swift.String? = nil,
            clusterNodes: [SecurityHubClientTypes.AwsRedshiftClusterClusterNode]? = nil,
            clusterParameterGroups: [SecurityHubClientTypes.AwsRedshiftClusterClusterParameterGroup]? = nil,
            clusterPublicKey: Swift.String? = nil,
            clusterRevisionNumber: Swift.String? = nil,
            clusterSecurityGroups: [SecurityHubClientTypes.AwsRedshiftClusterClusterSecurityGroup]? = nil,
            clusterSnapshotCopyStatus: SecurityHubClientTypes.AwsRedshiftClusterClusterSnapshotCopyStatus? = nil,
            clusterStatus: Swift.String? = nil,
            clusterSubnetGroupName: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            dBName: Swift.String? = nil,
            deferredMaintenanceWindows: [SecurityHubClientTypes.AwsRedshiftClusterDeferredMaintenanceWindow]? = nil,
            elasticIpStatus: SecurityHubClientTypes.AwsRedshiftClusterElasticIpStatus? = nil,
            elasticResizeNumberOfNodeOptions: Swift.String? = nil,
            encrypted: Swift.Bool = false,
            endpoint: SecurityHubClientTypes.AwsRedshiftClusterEndpoint? = nil,
            enhancedVpcRouting: Swift.Bool = false,
            expectedNextSnapshotScheduleTime: Swift.String? = nil,
            expectedNextSnapshotScheduleTimeStatus: Swift.String? = nil,
            hsmStatus: SecurityHubClientTypes.AwsRedshiftClusterHsmStatus? = nil,
            iamRoles: [SecurityHubClientTypes.AwsRedshiftClusterIamRole]? = nil,
            kmsKeyId: Swift.String? = nil,
            maintenanceTrackName: Swift.String? = nil,
            manualSnapshotRetentionPeriod: Swift.Int = 0,
            masterUsername: Swift.String? = nil,
            nextMaintenanceWindowStartTime: Swift.String? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int = 0,
            pendingActions: [Swift.String]? = nil,
            pendingModifiedValues: SecurityHubClientTypes.AwsRedshiftClusterPendingModifiedValues? = nil,
            preferredMaintenanceWindow: Swift.String? = nil,
            publiclyAccessible: Swift.Bool = false,
            resizeInfo: SecurityHubClientTypes.AwsRedshiftClusterResizeInfo? = nil,
            restoreStatus: SecurityHubClientTypes.AwsRedshiftClusterRestoreStatus? = nil,
            snapshotScheduleIdentifier: Swift.String? = nil,
            snapshotScheduleState: Swift.String? = nil,
            vpcId: Swift.String? = nil,
            vpcSecurityGroups: [SecurityHubClientTypes.AwsRedshiftClusterVpcSecurityGroup]? = nil
        )
        {
            self.allowVersionUpgrade = allowVersionUpgrade
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.availabilityZone = availabilityZone
            self.clusterAvailabilityStatus = clusterAvailabilityStatus
            self.clusterCreateTime = clusterCreateTime
            self.clusterIdentifier = clusterIdentifier
            self.clusterNodes = clusterNodes
            self.clusterParameterGroups = clusterParameterGroups
            self.clusterPublicKey = clusterPublicKey
            self.clusterRevisionNumber = clusterRevisionNumber
            self.clusterSecurityGroups = clusterSecurityGroups
            self.clusterSnapshotCopyStatus = clusterSnapshotCopyStatus
            self.clusterStatus = clusterStatus
            self.clusterSubnetGroupName = clusterSubnetGroupName
            self.clusterVersion = clusterVersion
            self.dBName = dBName
            self.deferredMaintenanceWindows = deferredMaintenanceWindows
            self.elasticIpStatus = elasticIpStatus
            self.elasticResizeNumberOfNodeOptions = elasticResizeNumberOfNodeOptions
            self.encrypted = encrypted
            self.endpoint = endpoint
            self.enhancedVpcRouting = enhancedVpcRouting
            self.expectedNextSnapshotScheduleTime = expectedNextSnapshotScheduleTime
            self.expectedNextSnapshotScheduleTimeStatus = expectedNextSnapshotScheduleTimeStatus
            self.hsmStatus = hsmStatus
            self.iamRoles = iamRoles
            self.kmsKeyId = kmsKeyId
            self.maintenanceTrackName = maintenanceTrackName
            self.manualSnapshotRetentionPeriod = manualSnapshotRetentionPeriod
            self.masterUsername = masterUsername
            self.nextMaintenanceWindowStartTime = nextMaintenanceWindowStartTime
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.pendingActions = pendingActions
            self.pendingModifiedValues = pendingModifiedValues
            self.preferredMaintenanceWindow = preferredMaintenanceWindow
            self.publiclyAccessible = publiclyAccessible
            self.resizeInfo = resizeInfo
            self.restoreStatus = restoreStatus
            self.snapshotScheduleIdentifier = snapshotScheduleIdentifier
            self.snapshotScheduleState = snapshotScheduleState
            self.vpcId = vpcId
            self.vpcSecurityGroups = vpcSecurityGroups
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterElasticIpStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case elasticIp = "ElasticIp"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let elasticIp = elasticIp {
            try encodeContainer.encode(elasticIp, forKey: .elasticIp)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let elasticIpDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .elasticIp)
        elasticIp = elasticIpDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterElasticIpStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterElasticIpStatus(elasticIp: \(Swift.String(describing: elasticIp)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>The status of the elastic IP (EIP) address for an Amazon Redshift cluster.</p>
    public struct AwsRedshiftClusterElasticIpStatus: Swift.Equatable {
        /// <p>The elastic IP address for the cluster.</p>
        public let elasticIp: Swift.String?
        /// <p>The status of the elastic IP address.</p>
        public let status: Swift.String?

        public init (
            elasticIp: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.elasticIp = elasticIp
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterEndpoint: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case port = "Port"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = address {
            try encodeContainer.encode(address, forKey: .address)
        }
        if port != 0 {
            try encodeContainer.encode(port, forKey: .port)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .address)
        address = addressDecoded
        let portDecoded = try containerValues.decode(Swift.Int.self, forKey: .port)
        port = portDecoded
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterEndpoint: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterEndpoint(address: \(Swift.String(describing: address)), port: \(Swift.String(describing: port)))"}
}

extension SecurityHubClientTypes {
    /// <p>The connection endpoint for an Amazon Redshift cluster.</p>
    public struct AwsRedshiftClusterEndpoint: Swift.Equatable {
        /// <p>The DNS address of the cluster.</p>
        public let address: Swift.String?
        /// <p>The port that the database engine listens on.</p>
        public let port: Swift.Int

        public init (
            address: Swift.String? = nil,
            port: Swift.Int = 0
        )
        {
            self.address = address
            self.port = port
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterHsmStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case hsmClientCertificateIdentifier = "HsmClientCertificateIdentifier"
        case hsmConfigurationIdentifier = "HsmConfigurationIdentifier"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let hsmClientCertificateIdentifier = hsmClientCertificateIdentifier {
            try encodeContainer.encode(hsmClientCertificateIdentifier, forKey: .hsmClientCertificateIdentifier)
        }
        if let hsmConfigurationIdentifier = hsmConfigurationIdentifier {
            try encodeContainer.encode(hsmConfigurationIdentifier, forKey: .hsmConfigurationIdentifier)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hsmClientCertificateIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmClientCertificateIdentifier)
        hsmClientCertificateIdentifier = hsmClientCertificateIdentifierDecoded
        let hsmConfigurationIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hsmConfigurationIdentifier)
        hsmConfigurationIdentifier = hsmConfigurationIdentifierDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterHsmStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterHsmStatus(hsmClientCertificateIdentifier: \(Swift.String(describing: hsmClientCertificateIdentifier)), hsmConfigurationIdentifier: \(Swift.String(describing: hsmConfigurationIdentifier)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about whether an Amazon Redshift cluster finished applying any hardware
    ///          changes to security module (HSM) settings that were specified in a modify cluster
    ///          command.</p>
    public struct AwsRedshiftClusterHsmStatus: Swift.Equatable {
        /// <p>The name of the HSM client certificate that the Amazon Redshift cluster uses to retrieve
        ///          the data encryption keys that are stored in an HSM.</p>
        public let hsmClientCertificateIdentifier: Swift.String?
        /// <p>The name of the HSM configuration that contains the information that the Amazon Redshift
        ///          cluster can use to retrieve and store keys in an HSM.</p>
        public let hsmConfigurationIdentifier: Swift.String?
        /// <p>Indicates whether the Amazon Redshift cluster has finished applying any HSM settings
        ///          changes specified in a modify cluster command.</p>
        ///          <p>Type: String</p>
        ///          <p>Valid values: <code>active</code> | <code>applying</code>
        ///          </p>
        public let status: Swift.String?

        public init (
            hsmClientCertificateIdentifier: Swift.String? = nil,
            hsmConfigurationIdentifier: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.hsmClientCertificateIdentifier = hsmClientCertificateIdentifier
            self.hsmConfigurationIdentifier = hsmConfigurationIdentifier
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterIamRole: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyStatus = "ApplyStatus"
        case iamRoleArn = "IamRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applyStatus = applyStatus {
            try encodeContainer.encode(applyStatus, forKey: .applyStatus)
        }
        if let iamRoleArn = iamRoleArn {
            try encodeContainer.encode(iamRoleArn, forKey: .iamRoleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applyStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .applyStatus)
        applyStatus = applyStatusDecoded
        let iamRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .iamRoleArn)
        iamRoleArn = iamRoleArnDecoded
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterIamRole: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterIamRole(applyStatus: \(Swift.String(describing: applyStatus)), iamRoleArn: \(Swift.String(describing: iamRoleArn)))"}
}

extension SecurityHubClientTypes {
    /// <p>An IAM role that the cluster can use to access other AWS services.</p>
    public struct AwsRedshiftClusterIamRole: Swift.Equatable {
        /// <p>The status of the IAM role's association with the cluster.</p>
        ///          <p>Valid values: <code>in-sync</code> | <code>adding</code> | <code>removing</code>
        ///          </p>
        public let applyStatus: Swift.String?
        /// <p>The ARN of the IAM role.</p>
        public let iamRoleArn: Swift.String?

        public init (
            applyStatus: Swift.String? = nil,
            iamRoleArn: Swift.String? = nil
        )
        {
            self.applyStatus = applyStatus
            self.iamRoleArn = iamRoleArn
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterPendingModifiedValues: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automatedSnapshotRetentionPeriod = "AutomatedSnapshotRetentionPeriod"
        case clusterIdentifier = "ClusterIdentifier"
        case clusterType = "ClusterType"
        case clusterVersion = "ClusterVersion"
        case encryptionType = "EncryptionType"
        case enhancedVpcRouting = "EnhancedVpcRouting"
        case maintenanceTrackName = "MaintenanceTrackName"
        case masterUserPassword = "MasterUserPassword"
        case nodeType = "NodeType"
        case numberOfNodes = "NumberOfNodes"
        case publiclyAccessible = "PubliclyAccessible"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if automatedSnapshotRetentionPeriod != 0 {
            try encodeContainer.encode(automatedSnapshotRetentionPeriod, forKey: .automatedSnapshotRetentionPeriod)
        }
        if let clusterIdentifier = clusterIdentifier {
            try encodeContainer.encode(clusterIdentifier, forKey: .clusterIdentifier)
        }
        if let clusterType = clusterType {
            try encodeContainer.encode(clusterType, forKey: .clusterType)
        }
        if let clusterVersion = clusterVersion {
            try encodeContainer.encode(clusterVersion, forKey: .clusterVersion)
        }
        if let encryptionType = encryptionType {
            try encodeContainer.encode(encryptionType, forKey: .encryptionType)
        }
        if enhancedVpcRouting != false {
            try encodeContainer.encode(enhancedVpcRouting, forKey: .enhancedVpcRouting)
        }
        if let maintenanceTrackName = maintenanceTrackName {
            try encodeContainer.encode(maintenanceTrackName, forKey: .maintenanceTrackName)
        }
        if let masterUserPassword = masterUserPassword {
            try encodeContainer.encode(masterUserPassword, forKey: .masterUserPassword)
        }
        if let nodeType = nodeType {
            try encodeContainer.encode(nodeType, forKey: .nodeType)
        }
        if numberOfNodes != 0 {
            try encodeContainer.encode(numberOfNodes, forKey: .numberOfNodes)
        }
        if publiclyAccessible != false {
            try encodeContainer.encode(publiclyAccessible, forKey: .publiclyAccessible)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automatedSnapshotRetentionPeriodDecoded = try containerValues.decode(Swift.Int.self, forKey: .automatedSnapshotRetentionPeriod)
        automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriodDecoded
        let clusterIdentifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterIdentifier)
        clusterIdentifier = clusterIdentifierDecoded
        let clusterTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterType)
        clusterType = clusterTypeDecoded
        let clusterVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .clusterVersion)
        clusterVersion = clusterVersionDecoded
        let encryptionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .encryptionType)
        encryptionType = encryptionTypeDecoded
        let enhancedVpcRoutingDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enhancedVpcRouting)
        enhancedVpcRouting = enhancedVpcRoutingDecoded
        let maintenanceTrackNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .maintenanceTrackName)
        maintenanceTrackName = maintenanceTrackNameDecoded
        let masterUserPasswordDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterUserPassword)
        masterUserPassword = masterUserPasswordDecoded
        let nodeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nodeType)
        nodeType = nodeTypeDecoded
        let numberOfNodesDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfNodes)
        numberOfNodes = numberOfNodesDecoded
        let publiclyAccessibleDecoded = try containerValues.decode(Swift.Bool.self, forKey: .publiclyAccessible)
        publiclyAccessible = publiclyAccessibleDecoded
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterPendingModifiedValues: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterPendingModifiedValues(automatedSnapshotRetentionPeriod: \(Swift.String(describing: automatedSnapshotRetentionPeriod)), clusterIdentifier: \(Swift.String(describing: clusterIdentifier)), clusterType: \(Swift.String(describing: clusterType)), clusterVersion: \(Swift.String(describing: clusterVersion)), encryptionType: \(Swift.String(describing: encryptionType)), enhancedVpcRouting: \(Swift.String(describing: enhancedVpcRouting)), maintenanceTrackName: \(Swift.String(describing: maintenanceTrackName)), masterUserPassword: \(Swift.String(describing: masterUserPassword)), nodeType: \(Swift.String(describing: nodeType)), numberOfNodes: \(Swift.String(describing: numberOfNodes)), publiclyAccessible: \(Swift.String(describing: publiclyAccessible)))"}
}

extension SecurityHubClientTypes {
    /// <p>Changes to the Amazon Redshift cluster that are currently pending.</p>
    public struct AwsRedshiftClusterPendingModifiedValues: Swift.Equatable {
        /// <p>The pending or in-progress change to the automated snapshot retention period.</p>
        public let automatedSnapshotRetentionPeriod: Swift.Int
        /// <p>The pending or in-progress change to the identifier for the cluster.</p>
        public let clusterIdentifier: Swift.String?
        /// <p>The pending or in-progress change to the cluster type.</p>
        public let clusterType: Swift.String?
        /// <p>The pending or in-progress change to the service version.</p>
        public let clusterVersion: Swift.String?
        /// <p>The encryption type for a cluster.</p>
        public let encryptionType: Swift.String?
        /// <p>Indicates whether to create the cluster with enhanced VPC routing enabled.</p>
        public let enhancedVpcRouting: Swift.Bool
        /// <p>The name of the maintenance track that the cluster changes to during the next
        ///          maintenance window.</p>
        public let maintenanceTrackName: Swift.String?
        /// <p>The pending or in-progress change to the master user password for the cluster.</p>
        public let masterUserPassword: Swift.String?
        /// <p>The pending or in-progress change to the cluster's node type.</p>
        public let nodeType: Swift.String?
        /// <p>The pending or in-progress change to the number of nodes in the cluster.</p>
        public let numberOfNodes: Swift.Int
        /// <p>The pending or in-progress change to whether the cluster can be connected to from the
        ///          public network.</p>
        public let publiclyAccessible: Swift.Bool

        public init (
            automatedSnapshotRetentionPeriod: Swift.Int = 0,
            clusterIdentifier: Swift.String? = nil,
            clusterType: Swift.String? = nil,
            clusterVersion: Swift.String? = nil,
            encryptionType: Swift.String? = nil,
            enhancedVpcRouting: Swift.Bool = false,
            maintenanceTrackName: Swift.String? = nil,
            masterUserPassword: Swift.String? = nil,
            nodeType: Swift.String? = nil,
            numberOfNodes: Swift.Int = 0,
            publiclyAccessible: Swift.Bool = false
        )
        {
            self.automatedSnapshotRetentionPeriod = automatedSnapshotRetentionPeriod
            self.clusterIdentifier = clusterIdentifier
            self.clusterType = clusterType
            self.clusterVersion = clusterVersion
            self.encryptionType = encryptionType
            self.enhancedVpcRouting = enhancedVpcRouting
            self.maintenanceTrackName = maintenanceTrackName
            self.masterUserPassword = masterUserPassword
            self.nodeType = nodeType
            self.numberOfNodes = numberOfNodes
            self.publiclyAccessible = publiclyAccessible
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterResizeInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowCancelResize = "AllowCancelResize"
        case resizeType = "ResizeType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if allowCancelResize != false {
            try encodeContainer.encode(allowCancelResize, forKey: .allowCancelResize)
        }
        if let resizeType = resizeType {
            try encodeContainer.encode(resizeType, forKey: .resizeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowCancelResizeDecoded = try containerValues.decode(Swift.Bool.self, forKey: .allowCancelResize)
        allowCancelResize = allowCancelResizeDecoded
        let resizeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resizeType)
        resizeType = resizeTypeDecoded
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterResizeInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterResizeInfo(allowCancelResize: \(Swift.String(describing: allowCancelResize)), resizeType: \(Swift.String(describing: resizeType)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the resize operation for the cluster.</p>
    public struct AwsRedshiftClusterResizeInfo: Swift.Equatable {
        /// <p>Indicates whether the resize operation can be canceled.</p>
        public let allowCancelResize: Swift.Bool
        /// <p>The type of resize operation.</p>
        ///          <p>Valid values: <code>ClassicResize</code>
        ///          </p>
        public let resizeType: Swift.String?

        public init (
            allowCancelResize: Swift.Bool = false,
            resizeType: Swift.String? = nil
        )
        {
            self.allowCancelResize = allowCancelResize
            self.resizeType = resizeType
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterRestoreStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case currentRestoreRateInMegaBytesPerSecond = "CurrentRestoreRateInMegaBytesPerSecond"
        case elapsedTimeInSeconds = "ElapsedTimeInSeconds"
        case estimatedTimeToCompletionInSeconds = "EstimatedTimeToCompletionInSeconds"
        case progressInMegaBytes = "ProgressInMegaBytes"
        case snapshotSizeInMegaBytes = "SnapshotSizeInMegaBytes"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if currentRestoreRateInMegaBytesPerSecond != 0.0 {
            try encodeContainer.encode(currentRestoreRateInMegaBytesPerSecond, forKey: .currentRestoreRateInMegaBytesPerSecond)
        }
        if elapsedTimeInSeconds != 0 {
            try encodeContainer.encode(elapsedTimeInSeconds, forKey: .elapsedTimeInSeconds)
        }
        if estimatedTimeToCompletionInSeconds != 0 {
            try encodeContainer.encode(estimatedTimeToCompletionInSeconds, forKey: .estimatedTimeToCompletionInSeconds)
        }
        if progressInMegaBytes != 0 {
            try encodeContainer.encode(progressInMegaBytes, forKey: .progressInMegaBytes)
        }
        if snapshotSizeInMegaBytes != 0 {
            try encodeContainer.encode(snapshotSizeInMegaBytes, forKey: .snapshotSizeInMegaBytes)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let currentRestoreRateInMegaBytesPerSecondDecoded = try containerValues.decode(Swift.Double.self, forKey: .currentRestoreRateInMegaBytesPerSecond)
        currentRestoreRateInMegaBytesPerSecond = currentRestoreRateInMegaBytesPerSecondDecoded
        let elapsedTimeInSecondsDecoded = try containerValues.decode(Swift.Int.self, forKey: .elapsedTimeInSeconds)
        elapsedTimeInSeconds = elapsedTimeInSecondsDecoded
        let estimatedTimeToCompletionInSecondsDecoded = try containerValues.decode(Swift.Int.self, forKey: .estimatedTimeToCompletionInSeconds)
        estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSecondsDecoded
        let progressInMegaBytesDecoded = try containerValues.decode(Swift.Int.self, forKey: .progressInMegaBytes)
        progressInMegaBytes = progressInMegaBytesDecoded
        let snapshotSizeInMegaBytesDecoded = try containerValues.decode(Swift.Int.self, forKey: .snapshotSizeInMegaBytes)
        snapshotSizeInMegaBytes = snapshotSizeInMegaBytesDecoded
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterRestoreStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterRestoreStatus(currentRestoreRateInMegaBytesPerSecond: \(Swift.String(describing: currentRestoreRateInMegaBytesPerSecond)), elapsedTimeInSeconds: \(Swift.String(describing: elapsedTimeInSeconds)), estimatedTimeToCompletionInSeconds: \(Swift.String(describing: estimatedTimeToCompletionInSeconds)), progressInMegaBytes: \(Swift.String(describing: progressInMegaBytes)), snapshotSizeInMegaBytes: \(Swift.String(describing: snapshotSizeInMegaBytes)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the status of a cluster restore action. It only applies if the cluster
    ///          was created by restoring a snapshot.</p>
    public struct AwsRedshiftClusterRestoreStatus: Swift.Equatable {
        /// <p>The number of megabytes per second being transferred from the backup storage. Returns
        ///          the average rate for a completed backup.</p>
        ///          <p>This field is only updated when you restore to DC2 and DS2 node types.</p>
        public let currentRestoreRateInMegaBytesPerSecond: Swift.Double
        /// <p>The amount of time an in-progress restore has been running, or the amount of time it
        ///          took a completed restore to finish.</p>
        ///          <p>This field is only updated when you restore to DC2 and DS2 node types.</p>
        public let elapsedTimeInSeconds: Swift.Int
        /// <p>The estimate of the time remaining before the restore is complete. Returns 0 for a
        ///          completed restore.</p>
        ///          <p>This field is only updated when you restore to DC2 and DS2 node types.</p>
        public let estimatedTimeToCompletionInSeconds: Swift.Int
        /// <p>The number of megabytes that were transferred from snapshot storage.</p>
        ///          <p>This field is only updated when you restore to DC2 and DS2 node types.</p>
        public let progressInMegaBytes: Swift.Int
        /// <p>The size of the set of snapshot data that was used to restore the cluster.</p>
        ///          <p>This field is only updated when you restore to DC2 and DS2 node types.</p>
        public let snapshotSizeInMegaBytes: Swift.Int
        /// <p>The status of the restore action.</p>
        ///          <p>Valid values: <code>starting</code> | <code>restoring</code> | <code>completed</code> |
        ///             <code>failed</code>
        ///          </p>
        public let status: Swift.String?

        public init (
            currentRestoreRateInMegaBytesPerSecond: Swift.Double = 0.0,
            elapsedTimeInSeconds: Swift.Int = 0,
            estimatedTimeToCompletionInSeconds: Swift.Int = 0,
            progressInMegaBytes: Swift.Int = 0,
            snapshotSizeInMegaBytes: Swift.Int = 0,
            status: Swift.String? = nil
        )
        {
            self.currentRestoreRateInMegaBytesPerSecond = currentRestoreRateInMegaBytesPerSecond
            self.elapsedTimeInSeconds = elapsedTimeInSeconds
            self.estimatedTimeToCompletionInSeconds = estimatedTimeToCompletionInSeconds
            self.progressInMegaBytes = progressInMegaBytes
            self.snapshotSizeInMegaBytes = snapshotSizeInMegaBytes
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.AwsRedshiftClusterVpcSecurityGroup: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
        case vpcSecurityGroupId = "VpcSecurityGroupId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
        if let vpcSecurityGroupId = vpcSecurityGroupId {
            try encodeContainer.encode(vpcSecurityGroupId, forKey: .vpcSecurityGroupId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let vpcSecurityGroupIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vpcSecurityGroupId)
        vpcSecurityGroupId = vpcSecurityGroupIdDecoded
    }
}

extension SecurityHubClientTypes.AwsRedshiftClusterVpcSecurityGroup: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsRedshiftClusterVpcSecurityGroup(status: \(Swift.String(describing: status)), vpcSecurityGroupId: \(Swift.String(describing: vpcSecurityGroupId)))"}
}

extension SecurityHubClientTypes {
    /// <p>A VPC security group that the cluster belongs to, if the cluster is in a VPC.</p>
    public struct AwsRedshiftClusterVpcSecurityGroup: Swift.Equatable {
        /// <p>The status of the VPC security group.</p>
        public let status: Swift.String?
        /// <p>The identifier of the VPC security group.</p>
        public let vpcSecurityGroupId: Swift.String?

        public init (
            status: Swift.String? = nil,
            vpcSecurityGroupId: Swift.String? = nil
        )
        {
            self.status = status
            self.vpcSecurityGroupId = vpcSecurityGroupId
        }
    }

}

extension SecurityHubClientTypes.AwsS3AccountPublicAccessBlockDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blockPublicAcls = "BlockPublicAcls"
        case blockPublicPolicy = "BlockPublicPolicy"
        case ignorePublicAcls = "IgnorePublicAcls"
        case restrictPublicBuckets = "RestrictPublicBuckets"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if blockPublicAcls != false {
            try encodeContainer.encode(blockPublicAcls, forKey: .blockPublicAcls)
        }
        if blockPublicPolicy != false {
            try encodeContainer.encode(blockPublicPolicy, forKey: .blockPublicPolicy)
        }
        if ignorePublicAcls != false {
            try encodeContainer.encode(ignorePublicAcls, forKey: .ignorePublicAcls)
        }
        if restrictPublicBuckets != false {
            try encodeContainer.encode(restrictPublicBuckets, forKey: .restrictPublicBuckets)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let blockPublicAclsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .blockPublicAcls)
        blockPublicAcls = blockPublicAclsDecoded
        let blockPublicPolicyDecoded = try containerValues.decode(Swift.Bool.self, forKey: .blockPublicPolicy)
        blockPublicPolicy = blockPublicPolicyDecoded
        let ignorePublicAclsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .ignorePublicAcls)
        ignorePublicAcls = ignorePublicAclsDecoded
        let restrictPublicBucketsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .restrictPublicBuckets)
        restrictPublicBuckets = restrictPublicBucketsDecoded
    }
}

extension SecurityHubClientTypes.AwsS3AccountPublicAccessBlockDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsS3AccountPublicAccessBlockDetails(blockPublicAcls: \(Swift.String(describing: blockPublicAcls)), blockPublicPolicy: \(Swift.String(describing: blockPublicPolicy)), ignorePublicAcls: \(Swift.String(describing: ignorePublicAcls)), restrictPublicBuckets: \(Swift.String(describing: restrictPublicBuckets)))"}
}

extension SecurityHubClientTypes {
    /// <p>provides information about the Amazon S3 Public Access Block configuration for accounts.</p>
    public struct AwsS3AccountPublicAccessBlockDetails: Swift.Equatable {
        /// <p>Indicates whether to reject calls to update an S3 bucket if the calls include a public access control list (ACL).</p>
        public let blockPublicAcls: Swift.Bool
        /// <p>Indicates whether to reject calls to update the access policy for an S3 bucket or access point if the policy allows public access.</p>
        public let blockPublicPolicy: Swift.Bool
        /// <p>Indicates whether Amazon S3 ignores public ACLs that are associated with an S3 bucket.</p>
        public let ignorePublicAcls: Swift.Bool
        /// <p>Indicates whether to restrict access to an access point or S3 bucket that has a public policy to only AWS service principals and authorized users within the S3 bucket owner's account.</p>
        public let restrictPublicBuckets: Swift.Bool

        public init (
            blockPublicAcls: Swift.Bool = false,
            blockPublicPolicy: Swift.Bool = false,
            ignorePublicAcls: Swift.Bool = false,
            restrictPublicBuckets: Swift.Bool = false
        )
        {
            self.blockPublicAcls = blockPublicAcls
            self.blockPublicPolicy = blockPublicPolicy
            self.ignorePublicAcls = ignorePublicAcls
            self.restrictPublicBuckets = restrictPublicBuckets
        }
    }

}

extension SecurityHubClientTypes.AwsS3BucketDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case createdAt = "CreatedAt"
        case ownerId = "OwnerId"
        case ownerName = "OwnerName"
        case publicAccessBlockConfiguration = "PublicAccessBlockConfiguration"
        case serverSideEncryptionConfiguration = "ServerSideEncryptionConfiguration"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if let ownerId = ownerId {
            try encodeContainer.encode(ownerId, forKey: .ownerId)
        }
        if let ownerName = ownerName {
            try encodeContainer.encode(ownerName, forKey: .ownerName)
        }
        if let publicAccessBlockConfiguration = publicAccessBlockConfiguration {
            try encodeContainer.encode(publicAccessBlockConfiguration, forKey: .publicAccessBlockConfiguration)
        }
        if let serverSideEncryptionConfiguration = serverSideEncryptionConfiguration {
            try encodeContainer.encode(serverSideEncryptionConfiguration, forKey: .serverSideEncryptionConfiguration)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ownerIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerId)
        ownerId = ownerIdDecoded
        let ownerNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ownerName)
        ownerName = ownerNameDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let serverSideEncryptionConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3BucketServerSideEncryptionConfiguration.self, forKey: .serverSideEncryptionConfiguration)
        serverSideEncryptionConfiguration = serverSideEncryptionConfigurationDecoded
        let publicAccessBlockConfigurationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3AccountPublicAccessBlockDetails.self, forKey: .publicAccessBlockConfiguration)
        publicAccessBlockConfiguration = publicAccessBlockConfigurationDecoded
    }
}

extension SecurityHubClientTypes.AwsS3BucketDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsS3BucketDetails(createdAt: \(Swift.String(describing: createdAt)), ownerId: \(Swift.String(describing: ownerId)), ownerName: \(Swift.String(describing: ownerName)), publicAccessBlockConfiguration: \(Swift.String(describing: publicAccessBlockConfiguration)), serverSideEncryptionConfiguration: \(Swift.String(describing: serverSideEncryptionConfiguration)))"}
}

extension SecurityHubClientTypes {
    /// <p>The details of an Amazon S3 bucket.</p>
    public struct AwsS3BucketDetails: Swift.Equatable {
        /// <p>Indicates when the S3 bucket was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createdAt: Swift.String?
        /// <p>The canonical user ID of the owner of the S3 bucket.</p>
        public let ownerId: Swift.String?
        /// <p>The display name of the owner of the S3 bucket.</p>
        public let ownerName: Swift.String?
        /// <p>Provides information about the Amazon S3 Public Access Block configuration for the S3 bucket.</p>
        public let publicAccessBlockConfiguration: SecurityHubClientTypes.AwsS3AccountPublicAccessBlockDetails?
        /// <p>The encryption rules that are applied to the S3 bucket.</p>
        public let serverSideEncryptionConfiguration: SecurityHubClientTypes.AwsS3BucketServerSideEncryptionConfiguration?

        public init (
            createdAt: Swift.String? = nil,
            ownerId: Swift.String? = nil,
            ownerName: Swift.String? = nil,
            publicAccessBlockConfiguration: SecurityHubClientTypes.AwsS3AccountPublicAccessBlockDetails? = nil,
            serverSideEncryptionConfiguration: SecurityHubClientTypes.AwsS3BucketServerSideEncryptionConfiguration? = nil
        )
        {
            self.createdAt = createdAt
            self.ownerId = ownerId
            self.ownerName = ownerName
            self.publicAccessBlockConfiguration = publicAccessBlockConfiguration
            self.serverSideEncryptionConfiguration = serverSideEncryptionConfiguration
        }
    }

}

extension SecurityHubClientTypes.AwsS3BucketServerSideEncryptionByDefault: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kMSMasterKeyID = "KMSMasterKeyID"
        case sSEAlgorithm = "SSEAlgorithm"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kMSMasterKeyID = kMSMasterKeyID {
            try encodeContainer.encode(kMSMasterKeyID, forKey: .kMSMasterKeyID)
        }
        if let sSEAlgorithm = sSEAlgorithm {
            try encodeContainer.encode(sSEAlgorithm, forKey: .sSEAlgorithm)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sSEAlgorithmDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sSEAlgorithm)
        sSEAlgorithm = sSEAlgorithmDecoded
        let kMSMasterKeyIDDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kMSMasterKeyID)
        kMSMasterKeyID = kMSMasterKeyIDDecoded
    }
}

extension SecurityHubClientTypes.AwsS3BucketServerSideEncryptionByDefault: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsS3BucketServerSideEncryptionByDefault(kMSMasterKeyID: \(Swift.String(describing: kMSMasterKeyID)), sSEAlgorithm: \(Swift.String(describing: sSEAlgorithm)))"}
}

extension SecurityHubClientTypes {
    /// <p>Specifies the default server-side encryption to apply to new objects in the
    ///          bucket.</p>
    public struct AwsS3BucketServerSideEncryptionByDefault: Swift.Equatable {
        /// <p>AWS KMS customer master key (CMK) ID to use for the default encryption.</p>
        public let kMSMasterKeyID: Swift.String?
        /// <p>Server-side encryption algorithm to use for the default encryption.</p>
        public let sSEAlgorithm: Swift.String?

        public init (
            kMSMasterKeyID: Swift.String? = nil,
            sSEAlgorithm: Swift.String? = nil
        )
        {
            self.kMSMasterKeyID = kMSMasterKeyID
            self.sSEAlgorithm = sSEAlgorithm
        }
    }

}

extension SecurityHubClientTypes.AwsS3BucketServerSideEncryptionConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for awss3bucketserversideencryptionrules0 in rules {
                try rulesContainer.encode(awss3bucketserversideencryptionrules0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rulesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsS3BucketServerSideEncryptionRule?].self, forKey: .rules)
        var rulesDecoded0:[SecurityHubClientTypes.AwsS3BucketServerSideEncryptionRule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [SecurityHubClientTypes.AwsS3BucketServerSideEncryptionRule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
    }
}

extension SecurityHubClientTypes.AwsS3BucketServerSideEncryptionConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsS3BucketServerSideEncryptionConfiguration(rules: \(Swift.String(describing: rules)))"}
}

extension SecurityHubClientTypes {
    /// <p>The encryption configuration for the S3 bucket.</p>
    public struct AwsS3BucketServerSideEncryptionConfiguration: Swift.Equatable {
        /// <p>The encryption rules that are applied to the S3 bucket.</p>
        public let rules: [SecurityHubClientTypes.AwsS3BucketServerSideEncryptionRule]?

        public init (
            rules: [SecurityHubClientTypes.AwsS3BucketServerSideEncryptionRule]? = nil
        )
        {
            self.rules = rules
        }
    }

}

extension SecurityHubClientTypes.AwsS3BucketServerSideEncryptionRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case applyServerSideEncryptionByDefault = "ApplyServerSideEncryptionByDefault"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefault {
            try encodeContainer.encode(applyServerSideEncryptionByDefault, forKey: .applyServerSideEncryptionByDefault)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let applyServerSideEncryptionByDefaultDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3BucketServerSideEncryptionByDefault.self, forKey: .applyServerSideEncryptionByDefault)
        applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefaultDecoded
    }
}

extension SecurityHubClientTypes.AwsS3BucketServerSideEncryptionRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsS3BucketServerSideEncryptionRule(applyServerSideEncryptionByDefault: \(Swift.String(describing: applyServerSideEncryptionByDefault)))"}
}

extension SecurityHubClientTypes {
    /// <p>An encryption rule to apply to the S3 bucket.</p>
    public struct AwsS3BucketServerSideEncryptionRule: Swift.Equatable {
        /// <p>Specifies the default server-side encryption to apply to new objects in the bucket. If a
        ///             <code>PUT</code> object request doesn't specify any server-side encryption, this default
        ///          encryption is applied.</p>
        public let applyServerSideEncryptionByDefault: SecurityHubClientTypes.AwsS3BucketServerSideEncryptionByDefault?

        public init (
            applyServerSideEncryptionByDefault: SecurityHubClientTypes.AwsS3BucketServerSideEncryptionByDefault? = nil
        )
        {
            self.applyServerSideEncryptionByDefault = applyServerSideEncryptionByDefault
        }
    }

}

extension SecurityHubClientTypes.AwsS3ObjectDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentType = "ContentType"
        case eTag = "ETag"
        case lastModified = "LastModified"
        case sSEKMSKeyId = "SSEKMSKeyId"
        case serverSideEncryption = "ServerSideEncryption"
        case versionId = "VersionId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentType = contentType {
            try encodeContainer.encode(contentType, forKey: .contentType)
        }
        if let eTag = eTag {
            try encodeContainer.encode(eTag, forKey: .eTag)
        }
        if let lastModified = lastModified {
            try encodeContainer.encode(lastModified, forKey: .lastModified)
        }
        if let sSEKMSKeyId = sSEKMSKeyId {
            try encodeContainer.encode(sSEKMSKeyId, forKey: .sSEKMSKeyId)
        }
        if let serverSideEncryption = serverSideEncryption {
            try encodeContainer.encode(serverSideEncryption, forKey: .serverSideEncryption)
        }
        if let versionId = versionId {
            try encodeContainer.encode(versionId, forKey: .versionId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastModifiedDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastModified)
        lastModified = lastModifiedDecoded
        let eTagDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .eTag)
        eTag = eTagDecoded
        let versionIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .versionId)
        versionId = versionIdDecoded
        let contentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .contentType)
        contentType = contentTypeDecoded
        let serverSideEncryptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .serverSideEncryption)
        serverSideEncryption = serverSideEncryptionDecoded
        let sSEKMSKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sSEKMSKeyId)
        sSEKMSKeyId = sSEKMSKeyIdDecoded
    }
}

extension SecurityHubClientTypes.AwsS3ObjectDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsS3ObjectDetails(contentType: \(Swift.String(describing: contentType)), eTag: \(Swift.String(describing: eTag)), lastModified: \(Swift.String(describing: lastModified)), sSEKMSKeyId: \(Swift.String(describing: sSEKMSKeyId)), serverSideEncryption: \(Swift.String(describing: serverSideEncryption)), versionId: \(Swift.String(describing: versionId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about an Amazon S3 object.</p>
    public struct AwsS3ObjectDetails: Swift.Equatable {
        /// <p>A standard MIME type describing the format of the object data.</p>
        public let contentType: Swift.String?
        /// <p>The opaque identifier assigned by a web server to a specific version of a resource found
        ///          at a URL.</p>
        public let eTag: Swift.String?
        /// <p>Indicates when the object was last modified.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let lastModified: Swift.String?
        /// <p>The identifier of the AWS Key Management Service (AWS KMS) symmetric customer managed
        ///          customer master key (CMK) that was used for the object.</p>
        public let sSEKMSKeyId: Swift.String?
        /// <p>If the object is stored using server-side encryption, the value of the server-side
        ///          encryption algorithm used when storing this object in Amazon S3.</p>
        public let serverSideEncryption: Swift.String?
        /// <p>The version of the object.</p>
        public let versionId: Swift.String?

        public init (
            contentType: Swift.String? = nil,
            eTag: Swift.String? = nil,
            lastModified: Swift.String? = nil,
            sSEKMSKeyId: Swift.String? = nil,
            serverSideEncryption: Swift.String? = nil,
            versionId: Swift.String? = nil
        )
        {
            self.contentType = contentType
            self.eTag = eTag
            self.lastModified = lastModified
            self.sSEKMSKeyId = sSEKMSKeyId
            self.serverSideEncryption = serverSideEncryption
            self.versionId = versionId
        }
    }

}

extension SecurityHubClientTypes.AwsSecretsManagerSecretDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deleted = "Deleted"
        case description = "Description"
        case kmsKeyId = "KmsKeyId"
        case name = "Name"
        case rotationEnabled = "RotationEnabled"
        case rotationLambdaArn = "RotationLambdaArn"
        case rotationOccurredWithinFrequency = "RotationOccurredWithinFrequency"
        case rotationRules = "RotationRules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if deleted != false {
            try encodeContainer.encode(deleted, forKey: .deleted)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let kmsKeyId = kmsKeyId {
            try encodeContainer.encode(kmsKeyId, forKey: .kmsKeyId)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if rotationEnabled != false {
            try encodeContainer.encode(rotationEnabled, forKey: .rotationEnabled)
        }
        if let rotationLambdaArn = rotationLambdaArn {
            try encodeContainer.encode(rotationLambdaArn, forKey: .rotationLambdaArn)
        }
        if rotationOccurredWithinFrequency != false {
            try encodeContainer.encode(rotationOccurredWithinFrequency, forKey: .rotationOccurredWithinFrequency)
        }
        if let rotationRules = rotationRules {
            try encodeContainer.encode(rotationRules, forKey: .rotationRules)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rotationRulesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSecretsManagerSecretRotationRules.self, forKey: .rotationRules)
        rotationRules = rotationRulesDecoded
        let rotationOccurredWithinFrequencyDecoded = try containerValues.decode(Swift.Bool.self, forKey: .rotationOccurredWithinFrequency)
        rotationOccurredWithinFrequency = rotationOccurredWithinFrequencyDecoded
        let kmsKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsKeyId)
        kmsKeyId = kmsKeyIdDecoded
        let rotationEnabledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .rotationEnabled)
        rotationEnabled = rotationEnabledDecoded
        let rotationLambdaArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rotationLambdaArn)
        rotationLambdaArn = rotationLambdaArnDecoded
        let deletedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .deleted)
        deleted = deletedDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension SecurityHubClientTypes.AwsSecretsManagerSecretDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsSecretsManagerSecretDetails(deleted: \(Swift.String(describing: deleted)), description: \(Swift.String(describing: description)), kmsKeyId: \(Swift.String(describing: kmsKeyId)), name: \(Swift.String(describing: name)), rotationEnabled: \(Swift.String(describing: rotationEnabled)), rotationLambdaArn: \(Swift.String(describing: rotationLambdaArn)), rotationOccurredWithinFrequency: \(Swift.String(describing: rotationOccurredWithinFrequency)), rotationRules: \(Swift.String(describing: rotationRules)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about an AWS Secrets Manager secret.</p>
    public struct AwsSecretsManagerSecretDetails: Swift.Equatable {
        /// <p>Whether the secret is deleted.</p>
        public let deleted: Swift.Bool
        /// <p>The user-provided description of the secret.</p>
        public let description: Swift.String?
        /// <p>The ARN, Key ID, or alias of the AWS KMS customer master key (CMK) used to encrypt the
        ///             <code>SecretString</code> or <code>SecretBinary</code> values for versions of this
        ///          secret.</p>
        public let kmsKeyId: Swift.String?
        /// <p>The name of the secret.</p>
        public let name: Swift.String?
        /// <p>Whether rotation is enabled.</p>
        public let rotationEnabled: Swift.Bool
        /// <p>The ARN of the Lambda function that rotates the secret.</p>
        public let rotationLambdaArn: Swift.String?
        /// <p>Whether the rotation occurred within the specified rotation frequency.</p>
        public let rotationOccurredWithinFrequency: Swift.Bool
        /// <p>Defines the rotation schedule for the secret.</p>
        public let rotationRules: SecurityHubClientTypes.AwsSecretsManagerSecretRotationRules?

        public init (
            deleted: Swift.Bool = false,
            description: Swift.String? = nil,
            kmsKeyId: Swift.String? = nil,
            name: Swift.String? = nil,
            rotationEnabled: Swift.Bool = false,
            rotationLambdaArn: Swift.String? = nil,
            rotationOccurredWithinFrequency: Swift.Bool = false,
            rotationRules: SecurityHubClientTypes.AwsSecretsManagerSecretRotationRules? = nil
        )
        {
            self.deleted = deleted
            self.description = description
            self.kmsKeyId = kmsKeyId
            self.name = name
            self.rotationEnabled = rotationEnabled
            self.rotationLambdaArn = rotationLambdaArn
            self.rotationOccurredWithinFrequency = rotationOccurredWithinFrequency
            self.rotationRules = rotationRules
        }
    }

}

extension SecurityHubClientTypes.AwsSecretsManagerSecretRotationRules: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case automaticallyAfterDays = "AutomaticallyAfterDays"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if automaticallyAfterDays != 0 {
            try encodeContainer.encode(automaticallyAfterDays, forKey: .automaticallyAfterDays)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let automaticallyAfterDaysDecoded = try containerValues.decode(Swift.Int.self, forKey: .automaticallyAfterDays)
        automaticallyAfterDays = automaticallyAfterDaysDecoded
    }
}

extension SecurityHubClientTypes.AwsSecretsManagerSecretRotationRules: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsSecretsManagerSecretRotationRules(automaticallyAfterDays: \(Swift.String(describing: automaticallyAfterDays)))"}
}

extension SecurityHubClientTypes {
    /// <p>Defines the rotation schedule for the secret.</p>
    public struct AwsSecretsManagerSecretRotationRules: Swift.Equatable {
        /// <p>The number of days after the previous rotation to rotate the secret.</p>
        public let automaticallyAfterDays: Swift.Int

        public init (
            automaticallyAfterDays: Swift.Int = 0
        )
        {
            self.automaticallyAfterDays = automaticallyAfterDays
        }
    }

}

extension SecurityHubClientTypes.AwsSecurityFinding: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case awsAccountId = "AwsAccountId"
        case compliance = "Compliance"
        case confidence = "Confidence"
        case createdAt = "CreatedAt"
        case criticality = "Criticality"
        case description = "Description"
        case findingProviderFields = "FindingProviderFields"
        case firstObservedAt = "FirstObservedAt"
        case generatorId = "GeneratorId"
        case id = "Id"
        case lastObservedAt = "LastObservedAt"
        case malware = "Malware"
        case network = "Network"
        case networkPath = "NetworkPath"
        case note = "Note"
        case patchSummary = "PatchSummary"
        case process = "Process"
        case productArn = "ProductArn"
        case productFields = "ProductFields"
        case recordState = "RecordState"
        case relatedFindings = "RelatedFindings"
        case remediation = "Remediation"
        case resources = "Resources"
        case schemaVersion = "SchemaVersion"
        case severity = "Severity"
        case sourceUrl = "SourceUrl"
        case threatIntelIndicators = "ThreatIntelIndicators"
        case title = "Title"
        case types = "Types"
        case updatedAt = "UpdatedAt"
        case userDefinedFields = "UserDefinedFields"
        case verificationState = "VerificationState"
        case vulnerabilities = "Vulnerabilities"
        case workflow = "Workflow"
        case workflowState = "WorkflowState"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let awsAccountId = awsAccountId {
            try encodeContainer.encode(awsAccountId, forKey: .awsAccountId)
        }
        if let compliance = compliance {
            try encodeContainer.encode(compliance, forKey: .compliance)
        }
        if confidence != 0 {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if let createdAt = createdAt {
            try encodeContainer.encode(createdAt, forKey: .createdAt)
        }
        if criticality != 0 {
            try encodeContainer.encode(criticality, forKey: .criticality)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let findingProviderFields = findingProviderFields {
            try encodeContainer.encode(findingProviderFields, forKey: .findingProviderFields)
        }
        if let firstObservedAt = firstObservedAt {
            try encodeContainer.encode(firstObservedAt, forKey: .firstObservedAt)
        }
        if let generatorId = generatorId {
            try encodeContainer.encode(generatorId, forKey: .generatorId)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let lastObservedAt = lastObservedAt {
            try encodeContainer.encode(lastObservedAt, forKey: .lastObservedAt)
        }
        if let malware = malware {
            var malwareContainer = encodeContainer.nestedUnkeyedContainer(forKey: .malware)
            for malwarelist0 in malware {
                try malwareContainer.encode(malwarelist0)
            }
        }
        if let network = network {
            try encodeContainer.encode(network, forKey: .network)
        }
        if let networkPath = networkPath {
            var networkPathContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkPath)
            for networkpathlist0 in networkPath {
                try networkPathContainer.encode(networkpathlist0)
            }
        }
        if let note = note {
            try encodeContainer.encode(note, forKey: .note)
        }
        if let patchSummary = patchSummary {
            try encodeContainer.encode(patchSummary, forKey: .patchSummary)
        }
        if let process = process {
            try encodeContainer.encode(process, forKey: .process)
        }
        if let productArn = productArn {
            try encodeContainer.encode(productArn, forKey: .productArn)
        }
        if let productFields = productFields {
            var productFieldsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .productFields)
            for (dictKey0, fieldmap0) in productFields {
                try productFieldsContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let recordState = recordState {
            try encodeContainer.encode(recordState.rawValue, forKey: .recordState)
        }
        if let relatedFindings = relatedFindings {
            var relatedFindingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedFindings)
            for relatedfindinglist0 in relatedFindings {
                try relatedFindingsContainer.encode(relatedfindinglist0)
            }
        }
        if let remediation = remediation {
            try encodeContainer.encode(remediation, forKey: .remediation)
        }
        if let resources = resources {
            var resourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resources)
            for resourcelist0 in resources {
                try resourcesContainer.encode(resourcelist0)
            }
        }
        if let schemaVersion = schemaVersion {
            try encodeContainer.encode(schemaVersion, forKey: .schemaVersion)
        }
        if let severity = severity {
            try encodeContainer.encode(severity, forKey: .severity)
        }
        if let sourceUrl = sourceUrl {
            try encodeContainer.encode(sourceUrl, forKey: .sourceUrl)
        }
        if let threatIntelIndicators = threatIntelIndicators {
            var threatIntelIndicatorsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelIndicators)
            for threatintelindicatorlist0 in threatIntelIndicators {
                try threatIntelIndicatorsContainer.encode(threatintelindicatorlist0)
            }
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
        if let types = types {
            var typesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .types)
            for typelist0 in types {
                try typesContainer.encode(typelist0)
            }
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt, forKey: .updatedAt)
        }
        if let userDefinedFields = userDefinedFields {
            var userDefinedFieldsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .userDefinedFields)
            for (dictKey0, fieldmap0) in userDefinedFields {
                try userDefinedFieldsContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let verificationState = verificationState {
            try encodeContainer.encode(verificationState.rawValue, forKey: .verificationState)
        }
        if let vulnerabilities = vulnerabilities {
            var vulnerabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vulnerabilities)
            for vulnerabilitylist0 in vulnerabilities {
                try vulnerabilitiesContainer.encode(vulnerabilitylist0)
            }
        }
        if let workflow = workflow {
            try encodeContainer.encode(workflow, forKey: .workflow)
        }
        if let workflowState = workflowState {
            try encodeContainer.encode(workflowState.rawValue, forKey: .workflowState)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let schemaVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .schemaVersion)
        schemaVersion = schemaVersionDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let productArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productArn)
        productArn = productArnDecoded
        let generatorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .generatorId)
        generatorId = generatorIdDecoded
        let awsAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .awsAccountId)
        awsAccountId = awsAccountIdDecoded
        let typesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .types)
        var typesDecoded0:[Swift.String]? = nil
        if let typesContainer = typesContainer {
            typesDecoded0 = [Swift.String]()
            for string0 in typesContainer {
                if let string0 = string0 {
                    typesDecoded0?.append(string0)
                }
            }
        }
        types = typesDecoded0
        let firstObservedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .firstObservedAt)
        firstObservedAt = firstObservedAtDecoded
        let lastObservedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastObservedAt)
        lastObservedAt = lastObservedAtDecoded
        let createdAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .createdAt)
        createdAt = createdAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
        let severityDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Severity.self, forKey: .severity)
        severity = severityDecoded
        let confidenceDecoded = try containerValues.decode(Swift.Int.self, forKey: .confidence)
        confidence = confidenceDecoded
        let criticalityDecoded = try containerValues.decode(Swift.Int.self, forKey: .criticality)
        criticality = criticalityDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let remediationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Remediation.self, forKey: .remediation)
        remediation = remediationDecoded
        let sourceUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceUrl)
        sourceUrl = sourceUrlDecoded
        let productFieldsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .productFields)
        var productFieldsDecoded0: [Swift.String:Swift.String]? = nil
        if let productFieldsContainer = productFieldsContainer {
            productFieldsDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in productFieldsContainer {
                if let nonemptystring0 = nonemptystring0 {
                    productFieldsDecoded0?[key0] = nonemptystring0
                }
            }
        }
        productFields = productFieldsDecoded0
        let userDefinedFieldsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .userDefinedFields)
        var userDefinedFieldsDecoded0: [Swift.String:Swift.String]? = nil
        if let userDefinedFieldsContainer = userDefinedFieldsContainer {
            userDefinedFieldsDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in userDefinedFieldsContainer {
                if let nonemptystring0 = nonemptystring0 {
                    userDefinedFieldsDecoded0?[key0] = nonemptystring0
                }
            }
        }
        userDefinedFields = userDefinedFieldsDecoded0
        let malwareContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Malware?].self, forKey: .malware)
        var malwareDecoded0:[SecurityHubClientTypes.Malware]? = nil
        if let malwareContainer = malwareContainer {
            malwareDecoded0 = [SecurityHubClientTypes.Malware]()
            for structure0 in malwareContainer {
                if let structure0 = structure0 {
                    malwareDecoded0?.append(structure0)
                }
            }
        }
        malware = malwareDecoded0
        let networkDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Network.self, forKey: .network)
        network = networkDecoded
        let networkPathContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NetworkPathComponent?].self, forKey: .networkPath)
        var networkPathDecoded0:[SecurityHubClientTypes.NetworkPathComponent]? = nil
        if let networkPathContainer = networkPathContainer {
            networkPathDecoded0 = [SecurityHubClientTypes.NetworkPathComponent]()
            for structure0 in networkPathContainer {
                if let structure0 = structure0 {
                    networkPathDecoded0?.append(structure0)
                }
            }
        }
        networkPath = networkPathDecoded0
        let processDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ProcessDetails.self, forKey: .process)
        process = processDecoded
        let threatIntelIndicatorsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.ThreatIntelIndicator?].self, forKey: .threatIntelIndicators)
        var threatIntelIndicatorsDecoded0:[SecurityHubClientTypes.ThreatIntelIndicator]? = nil
        if let threatIntelIndicatorsContainer = threatIntelIndicatorsContainer {
            threatIntelIndicatorsDecoded0 = [SecurityHubClientTypes.ThreatIntelIndicator]()
            for structure0 in threatIntelIndicatorsContainer {
                if let structure0 = structure0 {
                    threatIntelIndicatorsDecoded0?.append(structure0)
                }
            }
        }
        threatIntelIndicators = threatIntelIndicatorsDecoded0
        let resourcesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Resource?].self, forKey: .resources)
        var resourcesDecoded0:[SecurityHubClientTypes.Resource]? = nil
        if let resourcesContainer = resourcesContainer {
            resourcesDecoded0 = [SecurityHubClientTypes.Resource]()
            for structure0 in resourcesContainer {
                if let structure0 = structure0 {
                    resourcesDecoded0?.append(structure0)
                }
            }
        }
        resources = resourcesDecoded0
        let complianceDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Compliance.self, forKey: .compliance)
        compliance = complianceDecoded
        let verificationStateDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.VerificationState.self, forKey: .verificationState)
        verificationState = verificationStateDecoded
        let workflowStateDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.WorkflowState.self, forKey: .workflowState)
        workflowState = workflowStateDecoded
        let workflowDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Workflow.self, forKey: .workflow)
        workflow = workflowDecoded
        let recordStateDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.RecordState.self, forKey: .recordState)
        recordState = recordStateDecoded
        let relatedFindingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.RelatedFinding?].self, forKey: .relatedFindings)
        var relatedFindingsDecoded0:[SecurityHubClientTypes.RelatedFinding]? = nil
        if let relatedFindingsContainer = relatedFindingsContainer {
            relatedFindingsDecoded0 = [SecurityHubClientTypes.RelatedFinding]()
            for structure0 in relatedFindingsContainer {
                if let structure0 = structure0 {
                    relatedFindingsDecoded0?.append(structure0)
                }
            }
        }
        relatedFindings = relatedFindingsDecoded0
        let noteDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Note.self, forKey: .note)
        note = noteDecoded
        let vulnerabilitiesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Vulnerability?].self, forKey: .vulnerabilities)
        var vulnerabilitiesDecoded0:[SecurityHubClientTypes.Vulnerability]? = nil
        if let vulnerabilitiesContainer = vulnerabilitiesContainer {
            vulnerabilitiesDecoded0 = [SecurityHubClientTypes.Vulnerability]()
            for structure0 in vulnerabilitiesContainer {
                if let structure0 = structure0 {
                    vulnerabilitiesDecoded0?.append(structure0)
                }
            }
        }
        vulnerabilities = vulnerabilitiesDecoded0
        let patchSummaryDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.PatchSummary.self, forKey: .patchSummary)
        patchSummary = patchSummaryDecoded
        let actionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Action.self, forKey: .action)
        action = actionDecoded
        let findingProviderFieldsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.FindingProviderFields.self, forKey: .findingProviderFields)
        findingProviderFields = findingProviderFieldsDecoded
    }
}

extension SecurityHubClientTypes.AwsSecurityFinding: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsSecurityFinding(action: \(Swift.String(describing: action)), awsAccountId: \(Swift.String(describing: awsAccountId)), compliance: \(Swift.String(describing: compliance)), confidence: \(Swift.String(describing: confidence)), createdAt: \(Swift.String(describing: createdAt)), criticality: \(Swift.String(describing: criticality)), description: \(Swift.String(describing: description)), findingProviderFields: \(Swift.String(describing: findingProviderFields)), firstObservedAt: \(Swift.String(describing: firstObservedAt)), generatorId: \(Swift.String(describing: generatorId)), id: \(Swift.String(describing: id)), lastObservedAt: \(Swift.String(describing: lastObservedAt)), malware: \(Swift.String(describing: malware)), network: \(Swift.String(describing: network)), networkPath: \(Swift.String(describing: networkPath)), note: \(Swift.String(describing: note)), patchSummary: \(Swift.String(describing: patchSummary)), process: \(Swift.String(describing: process)), productArn: \(Swift.String(describing: productArn)), productFields: \(Swift.String(describing: productFields)), recordState: \(Swift.String(describing: recordState)), relatedFindings: \(Swift.String(describing: relatedFindings)), remediation: \(Swift.String(describing: remediation)), resources: \(Swift.String(describing: resources)), schemaVersion: \(Swift.String(describing: schemaVersion)), severity: \(Swift.String(describing: severity)), sourceUrl: \(Swift.String(describing: sourceUrl)), threatIntelIndicators: \(Swift.String(describing: threatIntelIndicators)), title: \(Swift.String(describing: title)), types: \(Swift.String(describing: types)), updatedAt: \(Swift.String(describing: updatedAt)), userDefinedFields: \(Swift.String(describing: userDefinedFields)), verificationState: \(Swift.String(describing: verificationState)), vulnerabilities: \(Swift.String(describing: vulnerabilities)), workflow: \(Swift.String(describing: workflow)), workflowState: \(Swift.String(describing: workflowState)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides consistent format for the contents of the Security Hub-aggregated findings.
    ///             <code>AwsSecurityFinding</code> format enables you to share findings between AWS
    ///          security services and third-party solutions, and security standards checks.</p>
    ///          <note>
    ///             <p>A finding is a potential security issue generated either by AWS services (Amazon
    ///             GuardDuty, Amazon Inspector, and Amazon Macie) or by the integrated third-party
    ///             solutions and standards checks.</p>
    ///          </note>
    public struct AwsSecurityFinding: Swift.Equatable {
        /// <p>Provides details about an action that affects or that was taken on a resource.</p>
        public let action: SecurityHubClientTypes.Action?
        /// <p>The AWS account ID that a finding is generated in.</p>
        public let awsAccountId: Swift.String?
        /// <p>This data type is exclusive to findings that are generated as the result of a check run
        ///          against a specific rule in a supported security standard, such as CIS AWS Foundations.
        ///          Contains security standard-related finding details.</p>
        public let compliance: SecurityHubClientTypes.Compliance?
        /// <p>A finding's confidence. Confidence is defined as the likelihood that a finding
        ///          accurately identifies the behavior or issue that it was intended to identify.</p>
        ///          <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent
        ///          confidence and 100 means 100 percent confidence.</p>
        public let confidence: Swift.Int
        /// <p>Indicates when the security-findings provider created the potential security issue that
        ///          a finding captured.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let createdAt: Swift.String?
        /// <p>The level of importance assigned to the resources associated with the finding.</p>
        ///          <p>A score of 0 means that the underlying resources have no criticality, and a score of 100
        ///          is reserved for the most critical resources.</p>
        public let criticality: Swift.Int
        /// <p>A finding's description.</p>
        ///          <note>
        ///             <p>In this release, <code>Description</code> is a required property.</p>
        ///          </note>
        public let description: Swift.String?
        /// <p>In a <code>BatchImportFindings</code> request, finding providers use <code>FindingProviderFields</code> to provide and update their own values for confidence, criticality, related findings, severity, and types.</p>
        public let findingProviderFields: SecurityHubClientTypes.FindingProviderFields?
        /// <p>Indicates when the security-findings provider first observed the potential security
        ///          issue that a finding captured.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let firstObservedAt: Swift.String?
        /// <p>The identifier for the solution-specific component (a discrete unit of logic) that
        ///          generated a finding. In various security-findings providers' solutions, this generator can
        ///          be called a rule, a check, a detector, a plugin, etc. </p>
        public let generatorId: Swift.String?
        /// <p>The security findings provider-specific identifier for a finding.</p>
        public let id: Swift.String?
        /// <p>Indicates when the security-findings provider most recently observed the potential
        ///          security issue that a finding captured.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let lastObservedAt: Swift.String?
        /// <p>A list of malware related to a finding.</p>
        public let malware: [SecurityHubClientTypes.Malware]?
        /// <p>The details of network-related information about a finding.</p>
        public let network: SecurityHubClientTypes.Network?
        /// <p>Provides information about a network path that is relevant to a finding. Each entry
        ///          under <code>NetworkPath</code> represents a component of that path.</p>
        public let networkPath: [SecurityHubClientTypes.NetworkPathComponent]?
        /// <p>A user-defined note added to a finding.</p>
        public let note: SecurityHubClientTypes.Note?
        /// <p>Provides an overview of the patch compliance status for an instance against a selected
        ///          compliance standard.</p>
        public let patchSummary: SecurityHubClientTypes.PatchSummary?
        /// <p>The details of process-related information about a finding.</p>
        public let process: SecurityHubClientTypes.ProcessDetails?
        /// <p>The ARN generated by Security Hub that uniquely identifies a product that generates findings.
        ///          This can be the ARN for a third-party product that is integrated with Security Hub, or the ARN for
        ///          a custom integration.</p>
        public let productArn: Swift.String?
        /// <p>A data type where security-findings providers can include additional solution-specific
        ///          details that aren't part of the defined <code>AwsSecurityFinding</code> format.</p>
        public let productFields: [Swift.String:Swift.String]?
        /// <p>The record state of a finding.</p>
        public let recordState: SecurityHubClientTypes.RecordState?
        /// <p>A list of related findings.</p>
        public let relatedFindings: [SecurityHubClientTypes.RelatedFinding]?
        /// <p>A data type that describes the remediation options for a finding.</p>
        public let remediation: SecurityHubClientTypes.Remediation?
        /// <p>A set of resource data types that describe the resources that the finding refers
        ///          to.</p>
        public let resources: [SecurityHubClientTypes.Resource]?
        /// <p>The schema version that a finding is formatted for.</p>
        public let schemaVersion: Swift.String?
        /// <p>A finding's severity.</p>
        public let severity: SecurityHubClientTypes.Severity?
        /// <p>A URL that links to a page about the current finding in the security-findings provider's
        ///          solution.</p>
        public let sourceUrl: Swift.String?
        /// <p>Threat intelligence details related to a finding.</p>
        public let threatIntelIndicators: [SecurityHubClientTypes.ThreatIntelIndicator]?
        /// <p>A finding's title.</p>
        ///          <note>
        ///             <p>In this release, <code>Title</code> is a required property.</p>
        ///          </note>
        public let title: Swift.String?
        /// <p>One or more finding types in the format of <code>namespace/category/classifier</code>
        ///          that classify a finding.</p>
        ///          <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual
        ///          Behaviors | Sensitive Data Identifications</p>
        public let types: [Swift.String]?
        /// <p>Indicates when the security-findings provider last updated the finding record.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let updatedAt: Swift.String?
        /// <p>A list of name/value string pairs associated with the finding. These are custom,
        ///          user-defined fields added to a finding. </p>
        public let userDefinedFields: [Swift.String:Swift.String]?
        /// <p>Indicates the veracity of a finding. </p>
        public let verificationState: SecurityHubClientTypes.VerificationState?
        /// <p>Provides a list of vulnerabilities associated with the findings.</p>
        public let vulnerabilities: [SecurityHubClientTypes.Vulnerability]?
        /// <p>Provides information about the status of the investigation into a finding.</p>
        public let workflow: SecurityHubClientTypes.Workflow?
        /// <p>The workflow state of a finding. </p>
        @available(*, deprecated, message: "This field is deprecated, use Workflow.Status instead.")
        public let workflowState: SecurityHubClientTypes.WorkflowState?

        public init (
            action: SecurityHubClientTypes.Action? = nil,
            awsAccountId: Swift.String? = nil,
            compliance: SecurityHubClientTypes.Compliance? = nil,
            confidence: Swift.Int = 0,
            createdAt: Swift.String? = nil,
            criticality: Swift.Int = 0,
            description: Swift.String? = nil,
            findingProviderFields: SecurityHubClientTypes.FindingProviderFields? = nil,
            firstObservedAt: Swift.String? = nil,
            generatorId: Swift.String? = nil,
            id: Swift.String? = nil,
            lastObservedAt: Swift.String? = nil,
            malware: [SecurityHubClientTypes.Malware]? = nil,
            network: SecurityHubClientTypes.Network? = nil,
            networkPath: [SecurityHubClientTypes.NetworkPathComponent]? = nil,
            note: SecurityHubClientTypes.Note? = nil,
            patchSummary: SecurityHubClientTypes.PatchSummary? = nil,
            process: SecurityHubClientTypes.ProcessDetails? = nil,
            productArn: Swift.String? = nil,
            productFields: [Swift.String:Swift.String]? = nil,
            recordState: SecurityHubClientTypes.RecordState? = nil,
            relatedFindings: [SecurityHubClientTypes.RelatedFinding]? = nil,
            remediation: SecurityHubClientTypes.Remediation? = nil,
            resources: [SecurityHubClientTypes.Resource]? = nil,
            schemaVersion: Swift.String? = nil,
            severity: SecurityHubClientTypes.Severity? = nil,
            sourceUrl: Swift.String? = nil,
            threatIntelIndicators: [SecurityHubClientTypes.ThreatIntelIndicator]? = nil,
            title: Swift.String? = nil,
            types: [Swift.String]? = nil,
            updatedAt: Swift.String? = nil,
            userDefinedFields: [Swift.String:Swift.String]? = nil,
            verificationState: SecurityHubClientTypes.VerificationState? = nil,
            vulnerabilities: [SecurityHubClientTypes.Vulnerability]? = nil,
            workflow: SecurityHubClientTypes.Workflow? = nil,
            workflowState: SecurityHubClientTypes.WorkflowState? = nil
        )
        {
            self.action = action
            self.awsAccountId = awsAccountId
            self.compliance = compliance
            self.confidence = confidence
            self.createdAt = createdAt
            self.criticality = criticality
            self.description = description
            self.findingProviderFields = findingProviderFields
            self.firstObservedAt = firstObservedAt
            self.generatorId = generatorId
            self.id = id
            self.lastObservedAt = lastObservedAt
            self.malware = malware
            self.network = network
            self.networkPath = networkPath
            self.note = note
            self.patchSummary = patchSummary
            self.process = process
            self.productArn = productArn
            self.productFields = productFields
            self.recordState = recordState
            self.relatedFindings = relatedFindings
            self.remediation = remediation
            self.resources = resources
            self.schemaVersion = schemaVersion
            self.severity = severity
            self.sourceUrl = sourceUrl
            self.threatIntelIndicators = threatIntelIndicators
            self.title = title
            self.types = types
            self.updatedAt = updatedAt
            self.userDefinedFields = userDefinedFields
            self.verificationState = verificationState
            self.vulnerabilities = vulnerabilities
            self.workflow = workflow
            self.workflowState = workflowState
        }
    }

}

extension SecurityHubClientTypes.AwsSecurityFindingFilters: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsAccountId = "AwsAccountId"
        case companyName = "CompanyName"
        case complianceStatus = "ComplianceStatus"
        case confidence = "Confidence"
        case createdAt = "CreatedAt"
        case criticality = "Criticality"
        case description = "Description"
        case findingProviderFieldsConfidence = "FindingProviderFieldsConfidence"
        case findingProviderFieldsCriticality = "FindingProviderFieldsCriticality"
        case findingProviderFieldsRelatedFindingsId = "FindingProviderFieldsRelatedFindingsId"
        case findingProviderFieldsRelatedFindingsProductArn = "FindingProviderFieldsRelatedFindingsProductArn"
        case findingProviderFieldsSeverityLabel = "FindingProviderFieldsSeverityLabel"
        case findingProviderFieldsSeverityOriginal = "FindingProviderFieldsSeverityOriginal"
        case findingProviderFieldsTypes = "FindingProviderFieldsTypes"
        case firstObservedAt = "FirstObservedAt"
        case generatorId = "GeneratorId"
        case id = "Id"
        case keyword = "Keyword"
        case lastObservedAt = "LastObservedAt"
        case malwareName = "MalwareName"
        case malwarePath = "MalwarePath"
        case malwareState = "MalwareState"
        case malwareType = "MalwareType"
        case networkDestinationDomain = "NetworkDestinationDomain"
        case networkDestinationIpV4 = "NetworkDestinationIpV4"
        case networkDestinationIpV6 = "NetworkDestinationIpV6"
        case networkDestinationPort = "NetworkDestinationPort"
        case networkDirection = "NetworkDirection"
        case networkProtocol = "NetworkProtocol"
        case networkSourceDomain = "NetworkSourceDomain"
        case networkSourceIpV4 = "NetworkSourceIpV4"
        case networkSourceIpV6 = "NetworkSourceIpV6"
        case networkSourceMac = "NetworkSourceMac"
        case networkSourcePort = "NetworkSourcePort"
        case noteText = "NoteText"
        case noteUpdatedAt = "NoteUpdatedAt"
        case noteUpdatedBy = "NoteUpdatedBy"
        case processLaunchedAt = "ProcessLaunchedAt"
        case processName = "ProcessName"
        case processParentPid = "ProcessParentPid"
        case processPath = "ProcessPath"
        case processPid = "ProcessPid"
        case processTerminatedAt = "ProcessTerminatedAt"
        case productArn = "ProductArn"
        case productFields = "ProductFields"
        case productName = "ProductName"
        case recommendationText = "RecommendationText"
        case recordState = "RecordState"
        case relatedFindingsId = "RelatedFindingsId"
        case relatedFindingsProductArn = "RelatedFindingsProductArn"
        case resourceAwsEc2InstanceIamInstanceProfileArn = "ResourceAwsEc2InstanceIamInstanceProfileArn"
        case resourceAwsEc2InstanceImageId = "ResourceAwsEc2InstanceImageId"
        case resourceAwsEc2InstanceIpV4Addresses = "ResourceAwsEc2InstanceIpV4Addresses"
        case resourceAwsEc2InstanceIpV6Addresses = "ResourceAwsEc2InstanceIpV6Addresses"
        case resourceAwsEc2InstanceKeyName = "ResourceAwsEc2InstanceKeyName"
        case resourceAwsEc2InstanceLaunchedAt = "ResourceAwsEc2InstanceLaunchedAt"
        case resourceAwsEc2InstanceSubnetId = "ResourceAwsEc2InstanceSubnetId"
        case resourceAwsEc2InstanceType = "ResourceAwsEc2InstanceType"
        case resourceAwsEc2InstanceVpcId = "ResourceAwsEc2InstanceVpcId"
        case resourceAwsIamAccessKeyCreatedAt = "ResourceAwsIamAccessKeyCreatedAt"
        case resourceAwsIamAccessKeyStatus = "ResourceAwsIamAccessKeyStatus"
        case resourceAwsIamAccessKeyUserName = "ResourceAwsIamAccessKeyUserName"
        case resourceAwsS3BucketOwnerId = "ResourceAwsS3BucketOwnerId"
        case resourceAwsS3BucketOwnerName = "ResourceAwsS3BucketOwnerName"
        case resourceContainerImageId = "ResourceContainerImageId"
        case resourceContainerImageName = "ResourceContainerImageName"
        case resourceContainerLaunchedAt = "ResourceContainerLaunchedAt"
        case resourceContainerName = "ResourceContainerName"
        case resourceDetailsOther = "ResourceDetailsOther"
        case resourceId = "ResourceId"
        case resourcePartition = "ResourcePartition"
        case resourceRegion = "ResourceRegion"
        case resourceTags = "ResourceTags"
        case resourceType = "ResourceType"
        case severityLabel = "SeverityLabel"
        case severityNormalized = "SeverityNormalized"
        case severityProduct = "SeverityProduct"
        case sourceUrl = "SourceUrl"
        case threatIntelIndicatorCategory = "ThreatIntelIndicatorCategory"
        case threatIntelIndicatorLastObservedAt = "ThreatIntelIndicatorLastObservedAt"
        case threatIntelIndicatorSource = "ThreatIntelIndicatorSource"
        case threatIntelIndicatorSourceUrl = "ThreatIntelIndicatorSourceUrl"
        case threatIntelIndicatorType = "ThreatIntelIndicatorType"
        case threatIntelIndicatorValue = "ThreatIntelIndicatorValue"
        case title = "Title"
        case type = "Type"
        case updatedAt = "UpdatedAt"
        case userDefinedFields = "UserDefinedFields"
        case verificationState = "VerificationState"
        case workflowState = "WorkflowState"
        case workflowStatus = "WorkflowStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsAccountId = awsAccountId {
            var awsAccountIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .awsAccountId)
            for stringfilterlist0 in awsAccountId {
                try awsAccountIdContainer.encode(stringfilterlist0)
            }
        }
        if let companyName = companyName {
            var companyNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .companyName)
            for stringfilterlist0 in companyName {
                try companyNameContainer.encode(stringfilterlist0)
            }
        }
        if let complianceStatus = complianceStatus {
            var complianceStatusContainer = encodeContainer.nestedUnkeyedContainer(forKey: .complianceStatus)
            for stringfilterlist0 in complianceStatus {
                try complianceStatusContainer.encode(stringfilterlist0)
            }
        }
        if let confidence = confidence {
            var confidenceContainer = encodeContainer.nestedUnkeyedContainer(forKey: .confidence)
            for numberfilterlist0 in confidence {
                try confidenceContainer.encode(numberfilterlist0)
            }
        }
        if let createdAt = createdAt {
            var createdAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .createdAt)
            for datefilterlist0 in createdAt {
                try createdAtContainer.encode(datefilterlist0)
            }
        }
        if let criticality = criticality {
            var criticalityContainer = encodeContainer.nestedUnkeyedContainer(forKey: .criticality)
            for numberfilterlist0 in criticality {
                try criticalityContainer.encode(numberfilterlist0)
            }
        }
        if let description = description {
            var descriptionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .description)
            for stringfilterlist0 in description {
                try descriptionContainer.encode(stringfilterlist0)
            }
        }
        if let findingProviderFieldsConfidence = findingProviderFieldsConfidence {
            var findingProviderFieldsConfidenceContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingProviderFieldsConfidence)
            for numberfilterlist0 in findingProviderFieldsConfidence {
                try findingProviderFieldsConfidenceContainer.encode(numberfilterlist0)
            }
        }
        if let findingProviderFieldsCriticality = findingProviderFieldsCriticality {
            var findingProviderFieldsCriticalityContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingProviderFieldsCriticality)
            for numberfilterlist0 in findingProviderFieldsCriticality {
                try findingProviderFieldsCriticalityContainer.encode(numberfilterlist0)
            }
        }
        if let findingProviderFieldsRelatedFindingsId = findingProviderFieldsRelatedFindingsId {
            var findingProviderFieldsRelatedFindingsIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingProviderFieldsRelatedFindingsId)
            for stringfilterlist0 in findingProviderFieldsRelatedFindingsId {
                try findingProviderFieldsRelatedFindingsIdContainer.encode(stringfilterlist0)
            }
        }
        if let findingProviderFieldsRelatedFindingsProductArn = findingProviderFieldsRelatedFindingsProductArn {
            var findingProviderFieldsRelatedFindingsProductArnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingProviderFieldsRelatedFindingsProductArn)
            for stringfilterlist0 in findingProviderFieldsRelatedFindingsProductArn {
                try findingProviderFieldsRelatedFindingsProductArnContainer.encode(stringfilterlist0)
            }
        }
        if let findingProviderFieldsSeverityLabel = findingProviderFieldsSeverityLabel {
            var findingProviderFieldsSeverityLabelContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingProviderFieldsSeverityLabel)
            for stringfilterlist0 in findingProviderFieldsSeverityLabel {
                try findingProviderFieldsSeverityLabelContainer.encode(stringfilterlist0)
            }
        }
        if let findingProviderFieldsSeverityOriginal = findingProviderFieldsSeverityOriginal {
            var findingProviderFieldsSeverityOriginalContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingProviderFieldsSeverityOriginal)
            for stringfilterlist0 in findingProviderFieldsSeverityOriginal {
                try findingProviderFieldsSeverityOriginalContainer.encode(stringfilterlist0)
            }
        }
        if let findingProviderFieldsTypes = findingProviderFieldsTypes {
            var findingProviderFieldsTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingProviderFieldsTypes)
            for stringfilterlist0 in findingProviderFieldsTypes {
                try findingProviderFieldsTypesContainer.encode(stringfilterlist0)
            }
        }
        if let firstObservedAt = firstObservedAt {
            var firstObservedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .firstObservedAt)
            for datefilterlist0 in firstObservedAt {
                try firstObservedAtContainer.encode(datefilterlist0)
            }
        }
        if let generatorId = generatorId {
            var generatorIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .generatorId)
            for stringfilterlist0 in generatorId {
                try generatorIdContainer.encode(stringfilterlist0)
            }
        }
        if let id = id {
            var idContainer = encodeContainer.nestedUnkeyedContainer(forKey: .id)
            for stringfilterlist0 in id {
                try idContainer.encode(stringfilterlist0)
            }
        }
        if let keyword = keyword {
            var keywordContainer = encodeContainer.nestedUnkeyedContainer(forKey: .keyword)
            for keywordfilterlist0 in keyword {
                try keywordContainer.encode(keywordfilterlist0)
            }
        }
        if let lastObservedAt = lastObservedAt {
            var lastObservedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lastObservedAt)
            for datefilterlist0 in lastObservedAt {
                try lastObservedAtContainer.encode(datefilterlist0)
            }
        }
        if let malwareName = malwareName {
            var malwareNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .malwareName)
            for stringfilterlist0 in malwareName {
                try malwareNameContainer.encode(stringfilterlist0)
            }
        }
        if let malwarePath = malwarePath {
            var malwarePathContainer = encodeContainer.nestedUnkeyedContainer(forKey: .malwarePath)
            for stringfilterlist0 in malwarePath {
                try malwarePathContainer.encode(stringfilterlist0)
            }
        }
        if let malwareState = malwareState {
            var malwareStateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .malwareState)
            for stringfilterlist0 in malwareState {
                try malwareStateContainer.encode(stringfilterlist0)
            }
        }
        if let malwareType = malwareType {
            var malwareTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .malwareType)
            for stringfilterlist0 in malwareType {
                try malwareTypeContainer.encode(stringfilterlist0)
            }
        }
        if let networkDestinationDomain = networkDestinationDomain {
            var networkDestinationDomainContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkDestinationDomain)
            for stringfilterlist0 in networkDestinationDomain {
                try networkDestinationDomainContainer.encode(stringfilterlist0)
            }
        }
        if let networkDestinationIpV4 = networkDestinationIpV4 {
            var networkDestinationIpV4Container = encodeContainer.nestedUnkeyedContainer(forKey: .networkDestinationIpV4)
            for ipfilterlist0 in networkDestinationIpV4 {
                try networkDestinationIpV4Container.encode(ipfilterlist0)
            }
        }
        if let networkDestinationIpV6 = networkDestinationIpV6 {
            var networkDestinationIpV6Container = encodeContainer.nestedUnkeyedContainer(forKey: .networkDestinationIpV6)
            for ipfilterlist0 in networkDestinationIpV6 {
                try networkDestinationIpV6Container.encode(ipfilterlist0)
            }
        }
        if let networkDestinationPort = networkDestinationPort {
            var networkDestinationPortContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkDestinationPort)
            for numberfilterlist0 in networkDestinationPort {
                try networkDestinationPortContainer.encode(numberfilterlist0)
            }
        }
        if let networkDirection = networkDirection {
            var networkDirectionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkDirection)
            for stringfilterlist0 in networkDirection {
                try networkDirectionContainer.encode(stringfilterlist0)
            }
        }
        if let networkProtocol = networkProtocol {
            var networkProtocolContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkProtocol)
            for stringfilterlist0 in networkProtocol {
                try networkProtocolContainer.encode(stringfilterlist0)
            }
        }
        if let networkSourceDomain = networkSourceDomain {
            var networkSourceDomainContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkSourceDomain)
            for stringfilterlist0 in networkSourceDomain {
                try networkSourceDomainContainer.encode(stringfilterlist0)
            }
        }
        if let networkSourceIpV4 = networkSourceIpV4 {
            var networkSourceIpV4Container = encodeContainer.nestedUnkeyedContainer(forKey: .networkSourceIpV4)
            for ipfilterlist0 in networkSourceIpV4 {
                try networkSourceIpV4Container.encode(ipfilterlist0)
            }
        }
        if let networkSourceIpV6 = networkSourceIpV6 {
            var networkSourceIpV6Container = encodeContainer.nestedUnkeyedContainer(forKey: .networkSourceIpV6)
            for ipfilterlist0 in networkSourceIpV6 {
                try networkSourceIpV6Container.encode(ipfilterlist0)
            }
        }
        if let networkSourceMac = networkSourceMac {
            var networkSourceMacContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkSourceMac)
            for stringfilterlist0 in networkSourceMac {
                try networkSourceMacContainer.encode(stringfilterlist0)
            }
        }
        if let networkSourcePort = networkSourcePort {
            var networkSourcePortContainer = encodeContainer.nestedUnkeyedContainer(forKey: .networkSourcePort)
            for numberfilterlist0 in networkSourcePort {
                try networkSourcePortContainer.encode(numberfilterlist0)
            }
        }
        if let noteText = noteText {
            var noteTextContainer = encodeContainer.nestedUnkeyedContainer(forKey: .noteText)
            for stringfilterlist0 in noteText {
                try noteTextContainer.encode(stringfilterlist0)
            }
        }
        if let noteUpdatedAt = noteUpdatedAt {
            var noteUpdatedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .noteUpdatedAt)
            for datefilterlist0 in noteUpdatedAt {
                try noteUpdatedAtContainer.encode(datefilterlist0)
            }
        }
        if let noteUpdatedBy = noteUpdatedBy {
            var noteUpdatedByContainer = encodeContainer.nestedUnkeyedContainer(forKey: .noteUpdatedBy)
            for stringfilterlist0 in noteUpdatedBy {
                try noteUpdatedByContainer.encode(stringfilterlist0)
            }
        }
        if let processLaunchedAt = processLaunchedAt {
            var processLaunchedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processLaunchedAt)
            for datefilterlist0 in processLaunchedAt {
                try processLaunchedAtContainer.encode(datefilterlist0)
            }
        }
        if let processName = processName {
            var processNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processName)
            for stringfilterlist0 in processName {
                try processNameContainer.encode(stringfilterlist0)
            }
        }
        if let processParentPid = processParentPid {
            var processParentPidContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processParentPid)
            for numberfilterlist0 in processParentPid {
                try processParentPidContainer.encode(numberfilterlist0)
            }
        }
        if let processPath = processPath {
            var processPathContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processPath)
            for stringfilterlist0 in processPath {
                try processPathContainer.encode(stringfilterlist0)
            }
        }
        if let processPid = processPid {
            var processPidContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processPid)
            for numberfilterlist0 in processPid {
                try processPidContainer.encode(numberfilterlist0)
            }
        }
        if let processTerminatedAt = processTerminatedAt {
            var processTerminatedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .processTerminatedAt)
            for datefilterlist0 in processTerminatedAt {
                try processTerminatedAtContainer.encode(datefilterlist0)
            }
        }
        if let productArn = productArn {
            var productArnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productArn)
            for stringfilterlist0 in productArn {
                try productArnContainer.encode(stringfilterlist0)
            }
        }
        if let productFields = productFields {
            var productFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productFields)
            for mapfilterlist0 in productFields {
                try productFieldsContainer.encode(mapfilterlist0)
            }
        }
        if let productName = productName {
            var productNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .productName)
            for stringfilterlist0 in productName {
                try productNameContainer.encode(stringfilterlist0)
            }
        }
        if let recommendationText = recommendationText {
            var recommendationTextContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendationText)
            for stringfilterlist0 in recommendationText {
                try recommendationTextContainer.encode(stringfilterlist0)
            }
        }
        if let recordState = recordState {
            var recordStateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recordState)
            for stringfilterlist0 in recordState {
                try recordStateContainer.encode(stringfilterlist0)
            }
        }
        if let relatedFindingsId = relatedFindingsId {
            var relatedFindingsIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedFindingsId)
            for stringfilterlist0 in relatedFindingsId {
                try relatedFindingsIdContainer.encode(stringfilterlist0)
            }
        }
        if let relatedFindingsProductArn = relatedFindingsProductArn {
            var relatedFindingsProductArnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedFindingsProductArn)
            for stringfilterlist0 in relatedFindingsProductArn {
                try relatedFindingsProductArnContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceIamInstanceProfileArn = resourceAwsEc2InstanceIamInstanceProfileArn {
            var resourceAwsEc2InstanceIamInstanceProfileArnContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceIamInstanceProfileArn)
            for stringfilterlist0 in resourceAwsEc2InstanceIamInstanceProfileArn {
                try resourceAwsEc2InstanceIamInstanceProfileArnContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceImageId = resourceAwsEc2InstanceImageId {
            var resourceAwsEc2InstanceImageIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceImageId)
            for stringfilterlist0 in resourceAwsEc2InstanceImageId {
                try resourceAwsEc2InstanceImageIdContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceIpV4Addresses = resourceAwsEc2InstanceIpV4Addresses {
            var resourceAwsEc2InstanceIpV4AddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceIpV4Addresses)
            for ipfilterlist0 in resourceAwsEc2InstanceIpV4Addresses {
                try resourceAwsEc2InstanceIpV4AddressesContainer.encode(ipfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceIpV6Addresses = resourceAwsEc2InstanceIpV6Addresses {
            var resourceAwsEc2InstanceIpV6AddressesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceIpV6Addresses)
            for ipfilterlist0 in resourceAwsEc2InstanceIpV6Addresses {
                try resourceAwsEc2InstanceIpV6AddressesContainer.encode(ipfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceKeyName = resourceAwsEc2InstanceKeyName {
            var resourceAwsEc2InstanceKeyNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceKeyName)
            for stringfilterlist0 in resourceAwsEc2InstanceKeyName {
                try resourceAwsEc2InstanceKeyNameContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceLaunchedAt = resourceAwsEc2InstanceLaunchedAt {
            var resourceAwsEc2InstanceLaunchedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceLaunchedAt)
            for datefilterlist0 in resourceAwsEc2InstanceLaunchedAt {
                try resourceAwsEc2InstanceLaunchedAtContainer.encode(datefilterlist0)
            }
        }
        if let resourceAwsEc2InstanceSubnetId = resourceAwsEc2InstanceSubnetId {
            var resourceAwsEc2InstanceSubnetIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceSubnetId)
            for stringfilterlist0 in resourceAwsEc2InstanceSubnetId {
                try resourceAwsEc2InstanceSubnetIdContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceType = resourceAwsEc2InstanceType {
            var resourceAwsEc2InstanceTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceType)
            for stringfilterlist0 in resourceAwsEc2InstanceType {
                try resourceAwsEc2InstanceTypeContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsEc2InstanceVpcId = resourceAwsEc2InstanceVpcId {
            var resourceAwsEc2InstanceVpcIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsEc2InstanceVpcId)
            for stringfilterlist0 in resourceAwsEc2InstanceVpcId {
                try resourceAwsEc2InstanceVpcIdContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsIamAccessKeyCreatedAt = resourceAwsIamAccessKeyCreatedAt {
            var resourceAwsIamAccessKeyCreatedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsIamAccessKeyCreatedAt)
            for datefilterlist0 in resourceAwsIamAccessKeyCreatedAt {
                try resourceAwsIamAccessKeyCreatedAtContainer.encode(datefilterlist0)
            }
        }
        if let resourceAwsIamAccessKeyStatus = resourceAwsIamAccessKeyStatus {
            var resourceAwsIamAccessKeyStatusContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsIamAccessKeyStatus)
            for stringfilterlist0 in resourceAwsIamAccessKeyStatus {
                try resourceAwsIamAccessKeyStatusContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsIamAccessKeyUserName = resourceAwsIamAccessKeyUserName {
            var resourceAwsIamAccessKeyUserNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsIamAccessKeyUserName)
            for stringfilterlist0 in resourceAwsIamAccessKeyUserName {
                try resourceAwsIamAccessKeyUserNameContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsS3BucketOwnerId = resourceAwsS3BucketOwnerId {
            var resourceAwsS3BucketOwnerIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsS3BucketOwnerId)
            for stringfilterlist0 in resourceAwsS3BucketOwnerId {
                try resourceAwsS3BucketOwnerIdContainer.encode(stringfilterlist0)
            }
        }
        if let resourceAwsS3BucketOwnerName = resourceAwsS3BucketOwnerName {
            var resourceAwsS3BucketOwnerNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceAwsS3BucketOwnerName)
            for stringfilterlist0 in resourceAwsS3BucketOwnerName {
                try resourceAwsS3BucketOwnerNameContainer.encode(stringfilterlist0)
            }
        }
        if let resourceContainerImageId = resourceContainerImageId {
            var resourceContainerImageIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceContainerImageId)
            for stringfilterlist0 in resourceContainerImageId {
                try resourceContainerImageIdContainer.encode(stringfilterlist0)
            }
        }
        if let resourceContainerImageName = resourceContainerImageName {
            var resourceContainerImageNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceContainerImageName)
            for stringfilterlist0 in resourceContainerImageName {
                try resourceContainerImageNameContainer.encode(stringfilterlist0)
            }
        }
        if let resourceContainerLaunchedAt = resourceContainerLaunchedAt {
            var resourceContainerLaunchedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceContainerLaunchedAt)
            for datefilterlist0 in resourceContainerLaunchedAt {
                try resourceContainerLaunchedAtContainer.encode(datefilterlist0)
            }
        }
        if let resourceContainerName = resourceContainerName {
            var resourceContainerNameContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceContainerName)
            for stringfilterlist0 in resourceContainerName {
                try resourceContainerNameContainer.encode(stringfilterlist0)
            }
        }
        if let resourceDetailsOther = resourceDetailsOther {
            var resourceDetailsOtherContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceDetailsOther)
            for mapfilterlist0 in resourceDetailsOther {
                try resourceDetailsOtherContainer.encode(mapfilterlist0)
            }
        }
        if let resourceId = resourceId {
            var resourceIdContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceId)
            for stringfilterlist0 in resourceId {
                try resourceIdContainer.encode(stringfilterlist0)
            }
        }
        if let resourcePartition = resourcePartition {
            var resourcePartitionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourcePartition)
            for stringfilterlist0 in resourcePartition {
                try resourcePartitionContainer.encode(stringfilterlist0)
            }
        }
        if let resourceRegion = resourceRegion {
            var resourceRegionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceRegion)
            for stringfilterlist0 in resourceRegion {
                try resourceRegionContainer.encode(stringfilterlist0)
            }
        }
        if let resourceTags = resourceTags {
            var resourceTagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceTags)
            for mapfilterlist0 in resourceTags {
                try resourceTagsContainer.encode(mapfilterlist0)
            }
        }
        if let resourceType = resourceType {
            var resourceTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resourceType)
            for stringfilterlist0 in resourceType {
                try resourceTypeContainer.encode(stringfilterlist0)
            }
        }
        if let severityLabel = severityLabel {
            var severityLabelContainer = encodeContainer.nestedUnkeyedContainer(forKey: .severityLabel)
            for stringfilterlist0 in severityLabel {
                try severityLabelContainer.encode(stringfilterlist0)
            }
        }
        if let severityNormalized = severityNormalized {
            var severityNormalizedContainer = encodeContainer.nestedUnkeyedContainer(forKey: .severityNormalized)
            for numberfilterlist0 in severityNormalized {
                try severityNormalizedContainer.encode(numberfilterlist0)
            }
        }
        if let severityProduct = severityProduct {
            var severityProductContainer = encodeContainer.nestedUnkeyedContainer(forKey: .severityProduct)
            for numberfilterlist0 in severityProduct {
                try severityProductContainer.encode(numberfilterlist0)
            }
        }
        if let sourceUrl = sourceUrl {
            var sourceUrlContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sourceUrl)
            for stringfilterlist0 in sourceUrl {
                try sourceUrlContainer.encode(stringfilterlist0)
            }
        }
        if let threatIntelIndicatorCategory = threatIntelIndicatorCategory {
            var threatIntelIndicatorCategoryContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelIndicatorCategory)
            for stringfilterlist0 in threatIntelIndicatorCategory {
                try threatIntelIndicatorCategoryContainer.encode(stringfilterlist0)
            }
        }
        if let threatIntelIndicatorLastObservedAt = threatIntelIndicatorLastObservedAt {
            var threatIntelIndicatorLastObservedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelIndicatorLastObservedAt)
            for datefilterlist0 in threatIntelIndicatorLastObservedAt {
                try threatIntelIndicatorLastObservedAtContainer.encode(datefilterlist0)
            }
        }
        if let threatIntelIndicatorSource = threatIntelIndicatorSource {
            var threatIntelIndicatorSourceContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelIndicatorSource)
            for stringfilterlist0 in threatIntelIndicatorSource {
                try threatIntelIndicatorSourceContainer.encode(stringfilterlist0)
            }
        }
        if let threatIntelIndicatorSourceUrl = threatIntelIndicatorSourceUrl {
            var threatIntelIndicatorSourceUrlContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelIndicatorSourceUrl)
            for stringfilterlist0 in threatIntelIndicatorSourceUrl {
                try threatIntelIndicatorSourceUrlContainer.encode(stringfilterlist0)
            }
        }
        if let threatIntelIndicatorType = threatIntelIndicatorType {
            var threatIntelIndicatorTypeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelIndicatorType)
            for stringfilterlist0 in threatIntelIndicatorType {
                try threatIntelIndicatorTypeContainer.encode(stringfilterlist0)
            }
        }
        if let threatIntelIndicatorValue = threatIntelIndicatorValue {
            var threatIntelIndicatorValueContainer = encodeContainer.nestedUnkeyedContainer(forKey: .threatIntelIndicatorValue)
            for stringfilterlist0 in threatIntelIndicatorValue {
                try threatIntelIndicatorValueContainer.encode(stringfilterlist0)
            }
        }
        if let title = title {
            var titleContainer = encodeContainer.nestedUnkeyedContainer(forKey: .title)
            for stringfilterlist0 in title {
                try titleContainer.encode(stringfilterlist0)
            }
        }
        if let type = type {
            var typeContainer = encodeContainer.nestedUnkeyedContainer(forKey: .type)
            for stringfilterlist0 in type {
                try typeContainer.encode(stringfilterlist0)
            }
        }
        if let updatedAt = updatedAt {
            var updatedAtContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updatedAt)
            for datefilterlist0 in updatedAt {
                try updatedAtContainer.encode(datefilterlist0)
            }
        }
        if let userDefinedFields = userDefinedFields {
            var userDefinedFieldsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .userDefinedFields)
            for mapfilterlist0 in userDefinedFields {
                try userDefinedFieldsContainer.encode(mapfilterlist0)
            }
        }
        if let verificationState = verificationState {
            var verificationStateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .verificationState)
            for stringfilterlist0 in verificationState {
                try verificationStateContainer.encode(stringfilterlist0)
            }
        }
        if let workflowState = workflowState {
            var workflowStateContainer = encodeContainer.nestedUnkeyedContainer(forKey: .workflowState)
            for stringfilterlist0 in workflowState {
                try workflowStateContainer.encode(stringfilterlist0)
            }
        }
        if let workflowStatus = workflowStatus {
            var workflowStatusContainer = encodeContainer.nestedUnkeyedContainer(forKey: .workflowStatus)
            for stringfilterlist0 in workflowStatus {
                try workflowStatusContainer.encode(stringfilterlist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productArnContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .productArn)
        var productArnDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let productArnContainer = productArnContainer {
            productArnDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in productArnContainer {
                if let structure0 = structure0 {
                    productArnDecoded0?.append(structure0)
                }
            }
        }
        productArn = productArnDecoded0
        let awsAccountIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .awsAccountId)
        var awsAccountIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let awsAccountIdContainer = awsAccountIdContainer {
            awsAccountIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in awsAccountIdContainer {
                if let structure0 = structure0 {
                    awsAccountIdDecoded0?.append(structure0)
                }
            }
        }
        awsAccountId = awsAccountIdDecoded0
        let idContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .id)
        var idDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let idContainer = idContainer {
            idDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in idContainer {
                if let structure0 = structure0 {
                    idDecoded0?.append(structure0)
                }
            }
        }
        id = idDecoded0
        let generatorIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .generatorId)
        var generatorIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let generatorIdContainer = generatorIdContainer {
            generatorIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in generatorIdContainer {
                if let structure0 = structure0 {
                    generatorIdDecoded0?.append(structure0)
                }
            }
        }
        generatorId = generatorIdDecoded0
        let typeContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .type)
        var typeDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let typeContainer = typeContainer {
            typeDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in typeContainer {
                if let structure0 = structure0 {
                    typeDecoded0?.append(structure0)
                }
            }
        }
        type = typeDecoded0
        let firstObservedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .firstObservedAt)
        var firstObservedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let firstObservedAtContainer = firstObservedAtContainer {
            firstObservedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in firstObservedAtContainer {
                if let structure0 = structure0 {
                    firstObservedAtDecoded0?.append(structure0)
                }
            }
        }
        firstObservedAt = firstObservedAtDecoded0
        let lastObservedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .lastObservedAt)
        var lastObservedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let lastObservedAtContainer = lastObservedAtContainer {
            lastObservedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in lastObservedAtContainer {
                if let structure0 = structure0 {
                    lastObservedAtDecoded0?.append(structure0)
                }
            }
        }
        lastObservedAt = lastObservedAtDecoded0
        let createdAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .createdAt)
        var createdAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let createdAtContainer = createdAtContainer {
            createdAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in createdAtContainer {
                if let structure0 = structure0 {
                    createdAtDecoded0?.append(structure0)
                }
            }
        }
        createdAt = createdAtDecoded0
        let updatedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .updatedAt)
        var updatedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let updatedAtContainer = updatedAtContainer {
            updatedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in updatedAtContainer {
                if let structure0 = structure0 {
                    updatedAtDecoded0?.append(structure0)
                }
            }
        }
        updatedAt = updatedAtDecoded0
        let severityProductContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .severityProduct)
        var severityProductDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let severityProductContainer = severityProductContainer {
            severityProductDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in severityProductContainer {
                if let structure0 = structure0 {
                    severityProductDecoded0?.append(structure0)
                }
            }
        }
        severityProduct = severityProductDecoded0
        let severityNormalizedContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .severityNormalized)
        var severityNormalizedDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let severityNormalizedContainer = severityNormalizedContainer {
            severityNormalizedDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in severityNormalizedContainer {
                if let structure0 = structure0 {
                    severityNormalizedDecoded0?.append(structure0)
                }
            }
        }
        severityNormalized = severityNormalizedDecoded0
        let severityLabelContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .severityLabel)
        var severityLabelDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let severityLabelContainer = severityLabelContainer {
            severityLabelDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in severityLabelContainer {
                if let structure0 = structure0 {
                    severityLabelDecoded0?.append(structure0)
                }
            }
        }
        severityLabel = severityLabelDecoded0
        let confidenceContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .confidence)
        var confidenceDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let confidenceContainer = confidenceContainer {
            confidenceDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in confidenceContainer {
                if let structure0 = structure0 {
                    confidenceDecoded0?.append(structure0)
                }
            }
        }
        confidence = confidenceDecoded0
        let criticalityContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .criticality)
        var criticalityDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let criticalityContainer = criticalityContainer {
            criticalityDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in criticalityContainer {
                if let structure0 = structure0 {
                    criticalityDecoded0?.append(structure0)
                }
            }
        }
        criticality = criticalityDecoded0
        let titleContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .title)
        var titleDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let titleContainer = titleContainer {
            titleDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in titleContainer {
                if let structure0 = structure0 {
                    titleDecoded0?.append(structure0)
                }
            }
        }
        title = titleDecoded0
        let descriptionContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .description)
        var descriptionDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let descriptionContainer = descriptionContainer {
            descriptionDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in descriptionContainer {
                if let structure0 = structure0 {
                    descriptionDecoded0?.append(structure0)
                }
            }
        }
        description = descriptionDecoded0
        let recommendationTextContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .recommendationText)
        var recommendationTextDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let recommendationTextContainer = recommendationTextContainer {
            recommendationTextDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in recommendationTextContainer {
                if let structure0 = structure0 {
                    recommendationTextDecoded0?.append(structure0)
                }
            }
        }
        recommendationText = recommendationTextDecoded0
        let sourceUrlContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .sourceUrl)
        var sourceUrlDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let sourceUrlContainer = sourceUrlContainer {
            sourceUrlDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in sourceUrlContainer {
                if let structure0 = structure0 {
                    sourceUrlDecoded0?.append(structure0)
                }
            }
        }
        sourceUrl = sourceUrlDecoded0
        let productFieldsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.MapFilter?].self, forKey: .productFields)
        var productFieldsDecoded0:[SecurityHubClientTypes.MapFilter]? = nil
        if let productFieldsContainer = productFieldsContainer {
            productFieldsDecoded0 = [SecurityHubClientTypes.MapFilter]()
            for structure0 in productFieldsContainer {
                if let structure0 = structure0 {
                    productFieldsDecoded0?.append(structure0)
                }
            }
        }
        productFields = productFieldsDecoded0
        let productNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .productName)
        var productNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let productNameContainer = productNameContainer {
            productNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in productNameContainer {
                if let structure0 = structure0 {
                    productNameDecoded0?.append(structure0)
                }
            }
        }
        productName = productNameDecoded0
        let companyNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .companyName)
        var companyNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let companyNameContainer = companyNameContainer {
            companyNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in companyNameContainer {
                if let structure0 = structure0 {
                    companyNameDecoded0?.append(structure0)
                }
            }
        }
        companyName = companyNameDecoded0
        let userDefinedFieldsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.MapFilter?].self, forKey: .userDefinedFields)
        var userDefinedFieldsDecoded0:[SecurityHubClientTypes.MapFilter]? = nil
        if let userDefinedFieldsContainer = userDefinedFieldsContainer {
            userDefinedFieldsDecoded0 = [SecurityHubClientTypes.MapFilter]()
            for structure0 in userDefinedFieldsContainer {
                if let structure0 = structure0 {
                    userDefinedFieldsDecoded0?.append(structure0)
                }
            }
        }
        userDefinedFields = userDefinedFieldsDecoded0
        let malwareNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .malwareName)
        var malwareNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let malwareNameContainer = malwareNameContainer {
            malwareNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in malwareNameContainer {
                if let structure0 = structure0 {
                    malwareNameDecoded0?.append(structure0)
                }
            }
        }
        malwareName = malwareNameDecoded0
        let malwareTypeContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .malwareType)
        var malwareTypeDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let malwareTypeContainer = malwareTypeContainer {
            malwareTypeDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in malwareTypeContainer {
                if let structure0 = structure0 {
                    malwareTypeDecoded0?.append(structure0)
                }
            }
        }
        malwareType = malwareTypeDecoded0
        let malwarePathContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .malwarePath)
        var malwarePathDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let malwarePathContainer = malwarePathContainer {
            malwarePathDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in malwarePathContainer {
                if let structure0 = structure0 {
                    malwarePathDecoded0?.append(structure0)
                }
            }
        }
        malwarePath = malwarePathDecoded0
        let malwareStateContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .malwareState)
        var malwareStateDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let malwareStateContainer = malwareStateContainer {
            malwareStateDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in malwareStateContainer {
                if let structure0 = structure0 {
                    malwareStateDecoded0?.append(structure0)
                }
            }
        }
        malwareState = malwareStateDecoded0
        let networkDirectionContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .networkDirection)
        var networkDirectionDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let networkDirectionContainer = networkDirectionContainer {
            networkDirectionDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in networkDirectionContainer {
                if let structure0 = structure0 {
                    networkDirectionDecoded0?.append(structure0)
                }
            }
        }
        networkDirection = networkDirectionDecoded0
        let networkProtocolContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .networkProtocol)
        var networkProtocolDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let networkProtocolContainer = networkProtocolContainer {
            networkProtocolDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in networkProtocolContainer {
                if let structure0 = structure0 {
                    networkProtocolDecoded0?.append(structure0)
                }
            }
        }
        networkProtocol = networkProtocolDecoded0
        let networkSourceIpV4Container = try containerValues.decodeIfPresent([SecurityHubClientTypes.IpFilter?].self, forKey: .networkSourceIpV4)
        var networkSourceIpV4Decoded0:[SecurityHubClientTypes.IpFilter]? = nil
        if let networkSourceIpV4Container = networkSourceIpV4Container {
            networkSourceIpV4Decoded0 = [SecurityHubClientTypes.IpFilter]()
            for structure0 in networkSourceIpV4Container {
                if let structure0 = structure0 {
                    networkSourceIpV4Decoded0?.append(structure0)
                }
            }
        }
        networkSourceIpV4 = networkSourceIpV4Decoded0
        let networkSourceIpV6Container = try containerValues.decodeIfPresent([SecurityHubClientTypes.IpFilter?].self, forKey: .networkSourceIpV6)
        var networkSourceIpV6Decoded0:[SecurityHubClientTypes.IpFilter]? = nil
        if let networkSourceIpV6Container = networkSourceIpV6Container {
            networkSourceIpV6Decoded0 = [SecurityHubClientTypes.IpFilter]()
            for structure0 in networkSourceIpV6Container {
                if let structure0 = structure0 {
                    networkSourceIpV6Decoded0?.append(structure0)
                }
            }
        }
        networkSourceIpV6 = networkSourceIpV6Decoded0
        let networkSourcePortContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .networkSourcePort)
        var networkSourcePortDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let networkSourcePortContainer = networkSourcePortContainer {
            networkSourcePortDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in networkSourcePortContainer {
                if let structure0 = structure0 {
                    networkSourcePortDecoded0?.append(structure0)
                }
            }
        }
        networkSourcePort = networkSourcePortDecoded0
        let networkSourceDomainContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .networkSourceDomain)
        var networkSourceDomainDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let networkSourceDomainContainer = networkSourceDomainContainer {
            networkSourceDomainDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in networkSourceDomainContainer {
                if let structure0 = structure0 {
                    networkSourceDomainDecoded0?.append(structure0)
                }
            }
        }
        networkSourceDomain = networkSourceDomainDecoded0
        let networkSourceMacContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .networkSourceMac)
        var networkSourceMacDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let networkSourceMacContainer = networkSourceMacContainer {
            networkSourceMacDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in networkSourceMacContainer {
                if let structure0 = structure0 {
                    networkSourceMacDecoded0?.append(structure0)
                }
            }
        }
        networkSourceMac = networkSourceMacDecoded0
        let networkDestinationIpV4Container = try containerValues.decodeIfPresent([SecurityHubClientTypes.IpFilter?].self, forKey: .networkDestinationIpV4)
        var networkDestinationIpV4Decoded0:[SecurityHubClientTypes.IpFilter]? = nil
        if let networkDestinationIpV4Container = networkDestinationIpV4Container {
            networkDestinationIpV4Decoded0 = [SecurityHubClientTypes.IpFilter]()
            for structure0 in networkDestinationIpV4Container {
                if let structure0 = structure0 {
                    networkDestinationIpV4Decoded0?.append(structure0)
                }
            }
        }
        networkDestinationIpV4 = networkDestinationIpV4Decoded0
        let networkDestinationIpV6Container = try containerValues.decodeIfPresent([SecurityHubClientTypes.IpFilter?].self, forKey: .networkDestinationIpV6)
        var networkDestinationIpV6Decoded0:[SecurityHubClientTypes.IpFilter]? = nil
        if let networkDestinationIpV6Container = networkDestinationIpV6Container {
            networkDestinationIpV6Decoded0 = [SecurityHubClientTypes.IpFilter]()
            for structure0 in networkDestinationIpV6Container {
                if let structure0 = structure0 {
                    networkDestinationIpV6Decoded0?.append(structure0)
                }
            }
        }
        networkDestinationIpV6 = networkDestinationIpV6Decoded0
        let networkDestinationPortContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .networkDestinationPort)
        var networkDestinationPortDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let networkDestinationPortContainer = networkDestinationPortContainer {
            networkDestinationPortDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in networkDestinationPortContainer {
                if let structure0 = structure0 {
                    networkDestinationPortDecoded0?.append(structure0)
                }
            }
        }
        networkDestinationPort = networkDestinationPortDecoded0
        let networkDestinationDomainContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .networkDestinationDomain)
        var networkDestinationDomainDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let networkDestinationDomainContainer = networkDestinationDomainContainer {
            networkDestinationDomainDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in networkDestinationDomainContainer {
                if let structure0 = structure0 {
                    networkDestinationDomainDecoded0?.append(structure0)
                }
            }
        }
        networkDestinationDomain = networkDestinationDomainDecoded0
        let processNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .processName)
        var processNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let processNameContainer = processNameContainer {
            processNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in processNameContainer {
                if let structure0 = structure0 {
                    processNameDecoded0?.append(structure0)
                }
            }
        }
        processName = processNameDecoded0
        let processPathContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .processPath)
        var processPathDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let processPathContainer = processPathContainer {
            processPathDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in processPathContainer {
                if let structure0 = structure0 {
                    processPathDecoded0?.append(structure0)
                }
            }
        }
        processPath = processPathDecoded0
        let processPidContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .processPid)
        var processPidDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let processPidContainer = processPidContainer {
            processPidDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in processPidContainer {
                if let structure0 = structure0 {
                    processPidDecoded0?.append(structure0)
                }
            }
        }
        processPid = processPidDecoded0
        let processParentPidContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .processParentPid)
        var processParentPidDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let processParentPidContainer = processParentPidContainer {
            processParentPidDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in processParentPidContainer {
                if let structure0 = structure0 {
                    processParentPidDecoded0?.append(structure0)
                }
            }
        }
        processParentPid = processParentPidDecoded0
        let processLaunchedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .processLaunchedAt)
        var processLaunchedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let processLaunchedAtContainer = processLaunchedAtContainer {
            processLaunchedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in processLaunchedAtContainer {
                if let structure0 = structure0 {
                    processLaunchedAtDecoded0?.append(structure0)
                }
            }
        }
        processLaunchedAt = processLaunchedAtDecoded0
        let processTerminatedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .processTerminatedAt)
        var processTerminatedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let processTerminatedAtContainer = processTerminatedAtContainer {
            processTerminatedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in processTerminatedAtContainer {
                if let structure0 = structure0 {
                    processTerminatedAtDecoded0?.append(structure0)
                }
            }
        }
        processTerminatedAt = processTerminatedAtDecoded0
        let threatIntelIndicatorTypeContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .threatIntelIndicatorType)
        var threatIntelIndicatorTypeDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let threatIntelIndicatorTypeContainer = threatIntelIndicatorTypeContainer {
            threatIntelIndicatorTypeDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in threatIntelIndicatorTypeContainer {
                if let structure0 = structure0 {
                    threatIntelIndicatorTypeDecoded0?.append(structure0)
                }
            }
        }
        threatIntelIndicatorType = threatIntelIndicatorTypeDecoded0
        let threatIntelIndicatorValueContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .threatIntelIndicatorValue)
        var threatIntelIndicatorValueDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let threatIntelIndicatorValueContainer = threatIntelIndicatorValueContainer {
            threatIntelIndicatorValueDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in threatIntelIndicatorValueContainer {
                if let structure0 = structure0 {
                    threatIntelIndicatorValueDecoded0?.append(structure0)
                }
            }
        }
        threatIntelIndicatorValue = threatIntelIndicatorValueDecoded0
        let threatIntelIndicatorCategoryContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .threatIntelIndicatorCategory)
        var threatIntelIndicatorCategoryDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let threatIntelIndicatorCategoryContainer = threatIntelIndicatorCategoryContainer {
            threatIntelIndicatorCategoryDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in threatIntelIndicatorCategoryContainer {
                if let structure0 = structure0 {
                    threatIntelIndicatorCategoryDecoded0?.append(structure0)
                }
            }
        }
        threatIntelIndicatorCategory = threatIntelIndicatorCategoryDecoded0
        let threatIntelIndicatorLastObservedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .threatIntelIndicatorLastObservedAt)
        var threatIntelIndicatorLastObservedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let threatIntelIndicatorLastObservedAtContainer = threatIntelIndicatorLastObservedAtContainer {
            threatIntelIndicatorLastObservedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in threatIntelIndicatorLastObservedAtContainer {
                if let structure0 = structure0 {
                    threatIntelIndicatorLastObservedAtDecoded0?.append(structure0)
                }
            }
        }
        threatIntelIndicatorLastObservedAt = threatIntelIndicatorLastObservedAtDecoded0
        let threatIntelIndicatorSourceContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .threatIntelIndicatorSource)
        var threatIntelIndicatorSourceDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let threatIntelIndicatorSourceContainer = threatIntelIndicatorSourceContainer {
            threatIntelIndicatorSourceDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in threatIntelIndicatorSourceContainer {
                if let structure0 = structure0 {
                    threatIntelIndicatorSourceDecoded0?.append(structure0)
                }
            }
        }
        threatIntelIndicatorSource = threatIntelIndicatorSourceDecoded0
        let threatIntelIndicatorSourceUrlContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .threatIntelIndicatorSourceUrl)
        var threatIntelIndicatorSourceUrlDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let threatIntelIndicatorSourceUrlContainer = threatIntelIndicatorSourceUrlContainer {
            threatIntelIndicatorSourceUrlDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in threatIntelIndicatorSourceUrlContainer {
                if let structure0 = structure0 {
                    threatIntelIndicatorSourceUrlDecoded0?.append(structure0)
                }
            }
        }
        threatIntelIndicatorSourceUrl = threatIntelIndicatorSourceUrlDecoded0
        let resourceTypeContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceType)
        var resourceTypeDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceTypeContainer = resourceTypeContainer {
            resourceTypeDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceTypeContainer {
                if let structure0 = structure0 {
                    resourceTypeDecoded0?.append(structure0)
                }
            }
        }
        resourceType = resourceTypeDecoded0
        let resourceIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceId)
        var resourceIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceIdContainer = resourceIdContainer {
            resourceIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceIdContainer {
                if let structure0 = structure0 {
                    resourceIdDecoded0?.append(structure0)
                }
            }
        }
        resourceId = resourceIdDecoded0
        let resourcePartitionContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourcePartition)
        var resourcePartitionDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourcePartitionContainer = resourcePartitionContainer {
            resourcePartitionDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourcePartitionContainer {
                if let structure0 = structure0 {
                    resourcePartitionDecoded0?.append(structure0)
                }
            }
        }
        resourcePartition = resourcePartitionDecoded0
        let resourceRegionContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceRegion)
        var resourceRegionDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceRegionContainer = resourceRegionContainer {
            resourceRegionDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceRegionContainer {
                if let structure0 = structure0 {
                    resourceRegionDecoded0?.append(structure0)
                }
            }
        }
        resourceRegion = resourceRegionDecoded0
        let resourceTagsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.MapFilter?].self, forKey: .resourceTags)
        var resourceTagsDecoded0:[SecurityHubClientTypes.MapFilter]? = nil
        if let resourceTagsContainer = resourceTagsContainer {
            resourceTagsDecoded0 = [SecurityHubClientTypes.MapFilter]()
            for structure0 in resourceTagsContainer {
                if let structure0 = structure0 {
                    resourceTagsDecoded0?.append(structure0)
                }
            }
        }
        resourceTags = resourceTagsDecoded0
        let resourceAwsEc2InstanceTypeContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsEc2InstanceType)
        var resourceAwsEc2InstanceTypeDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsEc2InstanceTypeContainer = resourceAwsEc2InstanceTypeContainer {
            resourceAwsEc2InstanceTypeDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsEc2InstanceTypeContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceTypeDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceType = resourceAwsEc2InstanceTypeDecoded0
        let resourceAwsEc2InstanceImageIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsEc2InstanceImageId)
        var resourceAwsEc2InstanceImageIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsEc2InstanceImageIdContainer = resourceAwsEc2InstanceImageIdContainer {
            resourceAwsEc2InstanceImageIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsEc2InstanceImageIdContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceImageIdDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceImageId = resourceAwsEc2InstanceImageIdDecoded0
        let resourceAwsEc2InstanceIpV4AddressesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.IpFilter?].self, forKey: .resourceAwsEc2InstanceIpV4Addresses)
        var resourceAwsEc2InstanceIpV4AddressesDecoded0:[SecurityHubClientTypes.IpFilter]? = nil
        if let resourceAwsEc2InstanceIpV4AddressesContainer = resourceAwsEc2InstanceIpV4AddressesContainer {
            resourceAwsEc2InstanceIpV4AddressesDecoded0 = [SecurityHubClientTypes.IpFilter]()
            for structure0 in resourceAwsEc2InstanceIpV4AddressesContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceIpV4AddressesDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceIpV4Addresses = resourceAwsEc2InstanceIpV4AddressesDecoded0
        let resourceAwsEc2InstanceIpV6AddressesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.IpFilter?].self, forKey: .resourceAwsEc2InstanceIpV6Addresses)
        var resourceAwsEc2InstanceIpV6AddressesDecoded0:[SecurityHubClientTypes.IpFilter]? = nil
        if let resourceAwsEc2InstanceIpV6AddressesContainer = resourceAwsEc2InstanceIpV6AddressesContainer {
            resourceAwsEc2InstanceIpV6AddressesDecoded0 = [SecurityHubClientTypes.IpFilter]()
            for structure0 in resourceAwsEc2InstanceIpV6AddressesContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceIpV6AddressesDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceIpV6Addresses = resourceAwsEc2InstanceIpV6AddressesDecoded0
        let resourceAwsEc2InstanceKeyNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsEc2InstanceKeyName)
        var resourceAwsEc2InstanceKeyNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsEc2InstanceKeyNameContainer = resourceAwsEc2InstanceKeyNameContainer {
            resourceAwsEc2InstanceKeyNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsEc2InstanceKeyNameContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceKeyNameDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceKeyName = resourceAwsEc2InstanceKeyNameDecoded0
        let resourceAwsEc2InstanceIamInstanceProfileArnContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsEc2InstanceIamInstanceProfileArn)
        var resourceAwsEc2InstanceIamInstanceProfileArnDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsEc2InstanceIamInstanceProfileArnContainer = resourceAwsEc2InstanceIamInstanceProfileArnContainer {
            resourceAwsEc2InstanceIamInstanceProfileArnDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsEc2InstanceIamInstanceProfileArnContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceIamInstanceProfileArnDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceIamInstanceProfileArn = resourceAwsEc2InstanceIamInstanceProfileArnDecoded0
        let resourceAwsEc2InstanceVpcIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsEc2InstanceVpcId)
        var resourceAwsEc2InstanceVpcIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsEc2InstanceVpcIdContainer = resourceAwsEc2InstanceVpcIdContainer {
            resourceAwsEc2InstanceVpcIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsEc2InstanceVpcIdContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceVpcIdDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceVpcId = resourceAwsEc2InstanceVpcIdDecoded0
        let resourceAwsEc2InstanceSubnetIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsEc2InstanceSubnetId)
        var resourceAwsEc2InstanceSubnetIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsEc2InstanceSubnetIdContainer = resourceAwsEc2InstanceSubnetIdContainer {
            resourceAwsEc2InstanceSubnetIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsEc2InstanceSubnetIdContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceSubnetIdDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceSubnetId = resourceAwsEc2InstanceSubnetIdDecoded0
        let resourceAwsEc2InstanceLaunchedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .resourceAwsEc2InstanceLaunchedAt)
        var resourceAwsEc2InstanceLaunchedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let resourceAwsEc2InstanceLaunchedAtContainer = resourceAwsEc2InstanceLaunchedAtContainer {
            resourceAwsEc2InstanceLaunchedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in resourceAwsEc2InstanceLaunchedAtContainer {
                if let structure0 = structure0 {
                    resourceAwsEc2InstanceLaunchedAtDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsEc2InstanceLaunchedAt = resourceAwsEc2InstanceLaunchedAtDecoded0
        let resourceAwsS3BucketOwnerIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsS3BucketOwnerId)
        var resourceAwsS3BucketOwnerIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsS3BucketOwnerIdContainer = resourceAwsS3BucketOwnerIdContainer {
            resourceAwsS3BucketOwnerIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsS3BucketOwnerIdContainer {
                if let structure0 = structure0 {
                    resourceAwsS3BucketOwnerIdDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsS3BucketOwnerId = resourceAwsS3BucketOwnerIdDecoded0
        let resourceAwsS3BucketOwnerNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsS3BucketOwnerName)
        var resourceAwsS3BucketOwnerNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsS3BucketOwnerNameContainer = resourceAwsS3BucketOwnerNameContainer {
            resourceAwsS3BucketOwnerNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsS3BucketOwnerNameContainer {
                if let structure0 = structure0 {
                    resourceAwsS3BucketOwnerNameDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsS3BucketOwnerName = resourceAwsS3BucketOwnerNameDecoded0
        let resourceAwsIamAccessKeyUserNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsIamAccessKeyUserName)
        var resourceAwsIamAccessKeyUserNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsIamAccessKeyUserNameContainer = resourceAwsIamAccessKeyUserNameContainer {
            resourceAwsIamAccessKeyUserNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsIamAccessKeyUserNameContainer {
                if let structure0 = structure0 {
                    resourceAwsIamAccessKeyUserNameDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsIamAccessKeyUserName = resourceAwsIamAccessKeyUserNameDecoded0
        let resourceAwsIamAccessKeyStatusContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceAwsIamAccessKeyStatus)
        var resourceAwsIamAccessKeyStatusDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceAwsIamAccessKeyStatusContainer = resourceAwsIamAccessKeyStatusContainer {
            resourceAwsIamAccessKeyStatusDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceAwsIamAccessKeyStatusContainer {
                if let structure0 = structure0 {
                    resourceAwsIamAccessKeyStatusDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsIamAccessKeyStatus = resourceAwsIamAccessKeyStatusDecoded0
        let resourceAwsIamAccessKeyCreatedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .resourceAwsIamAccessKeyCreatedAt)
        var resourceAwsIamAccessKeyCreatedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let resourceAwsIamAccessKeyCreatedAtContainer = resourceAwsIamAccessKeyCreatedAtContainer {
            resourceAwsIamAccessKeyCreatedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in resourceAwsIamAccessKeyCreatedAtContainer {
                if let structure0 = structure0 {
                    resourceAwsIamAccessKeyCreatedAtDecoded0?.append(structure0)
                }
            }
        }
        resourceAwsIamAccessKeyCreatedAt = resourceAwsIamAccessKeyCreatedAtDecoded0
        let resourceContainerNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceContainerName)
        var resourceContainerNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceContainerNameContainer = resourceContainerNameContainer {
            resourceContainerNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceContainerNameContainer {
                if let structure0 = structure0 {
                    resourceContainerNameDecoded0?.append(structure0)
                }
            }
        }
        resourceContainerName = resourceContainerNameDecoded0
        let resourceContainerImageIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceContainerImageId)
        var resourceContainerImageIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceContainerImageIdContainer = resourceContainerImageIdContainer {
            resourceContainerImageIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceContainerImageIdContainer {
                if let structure0 = structure0 {
                    resourceContainerImageIdDecoded0?.append(structure0)
                }
            }
        }
        resourceContainerImageId = resourceContainerImageIdDecoded0
        let resourceContainerImageNameContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .resourceContainerImageName)
        var resourceContainerImageNameDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let resourceContainerImageNameContainer = resourceContainerImageNameContainer {
            resourceContainerImageNameDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in resourceContainerImageNameContainer {
                if let structure0 = structure0 {
                    resourceContainerImageNameDecoded0?.append(structure0)
                }
            }
        }
        resourceContainerImageName = resourceContainerImageNameDecoded0
        let resourceContainerLaunchedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .resourceContainerLaunchedAt)
        var resourceContainerLaunchedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let resourceContainerLaunchedAtContainer = resourceContainerLaunchedAtContainer {
            resourceContainerLaunchedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in resourceContainerLaunchedAtContainer {
                if let structure0 = structure0 {
                    resourceContainerLaunchedAtDecoded0?.append(structure0)
                }
            }
        }
        resourceContainerLaunchedAt = resourceContainerLaunchedAtDecoded0
        let resourceDetailsOtherContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.MapFilter?].self, forKey: .resourceDetailsOther)
        var resourceDetailsOtherDecoded0:[SecurityHubClientTypes.MapFilter]? = nil
        if let resourceDetailsOtherContainer = resourceDetailsOtherContainer {
            resourceDetailsOtherDecoded0 = [SecurityHubClientTypes.MapFilter]()
            for structure0 in resourceDetailsOtherContainer {
                if let structure0 = structure0 {
                    resourceDetailsOtherDecoded0?.append(structure0)
                }
            }
        }
        resourceDetailsOther = resourceDetailsOtherDecoded0
        let complianceStatusContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .complianceStatus)
        var complianceStatusDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let complianceStatusContainer = complianceStatusContainer {
            complianceStatusDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in complianceStatusContainer {
                if let structure0 = structure0 {
                    complianceStatusDecoded0?.append(structure0)
                }
            }
        }
        complianceStatus = complianceStatusDecoded0
        let verificationStateContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .verificationState)
        var verificationStateDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let verificationStateContainer = verificationStateContainer {
            verificationStateDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in verificationStateContainer {
                if let structure0 = structure0 {
                    verificationStateDecoded0?.append(structure0)
                }
            }
        }
        verificationState = verificationStateDecoded0
        let workflowStateContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .workflowState)
        var workflowStateDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let workflowStateContainer = workflowStateContainer {
            workflowStateDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in workflowStateContainer {
                if let structure0 = structure0 {
                    workflowStateDecoded0?.append(structure0)
                }
            }
        }
        workflowState = workflowStateDecoded0
        let workflowStatusContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .workflowStatus)
        var workflowStatusDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let workflowStatusContainer = workflowStatusContainer {
            workflowStatusDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in workflowStatusContainer {
                if let structure0 = structure0 {
                    workflowStatusDecoded0?.append(structure0)
                }
            }
        }
        workflowStatus = workflowStatusDecoded0
        let recordStateContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .recordState)
        var recordStateDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let recordStateContainer = recordStateContainer {
            recordStateDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in recordStateContainer {
                if let structure0 = structure0 {
                    recordStateDecoded0?.append(structure0)
                }
            }
        }
        recordState = recordStateDecoded0
        let relatedFindingsProductArnContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .relatedFindingsProductArn)
        var relatedFindingsProductArnDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let relatedFindingsProductArnContainer = relatedFindingsProductArnContainer {
            relatedFindingsProductArnDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in relatedFindingsProductArnContainer {
                if let structure0 = structure0 {
                    relatedFindingsProductArnDecoded0?.append(structure0)
                }
            }
        }
        relatedFindingsProductArn = relatedFindingsProductArnDecoded0
        let relatedFindingsIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .relatedFindingsId)
        var relatedFindingsIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let relatedFindingsIdContainer = relatedFindingsIdContainer {
            relatedFindingsIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in relatedFindingsIdContainer {
                if let structure0 = structure0 {
                    relatedFindingsIdDecoded0?.append(structure0)
                }
            }
        }
        relatedFindingsId = relatedFindingsIdDecoded0
        let noteTextContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .noteText)
        var noteTextDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let noteTextContainer = noteTextContainer {
            noteTextDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in noteTextContainer {
                if let structure0 = structure0 {
                    noteTextDecoded0?.append(structure0)
                }
            }
        }
        noteText = noteTextDecoded0
        let noteUpdatedAtContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.DateFilter?].self, forKey: .noteUpdatedAt)
        var noteUpdatedAtDecoded0:[SecurityHubClientTypes.DateFilter]? = nil
        if let noteUpdatedAtContainer = noteUpdatedAtContainer {
            noteUpdatedAtDecoded0 = [SecurityHubClientTypes.DateFilter]()
            for structure0 in noteUpdatedAtContainer {
                if let structure0 = structure0 {
                    noteUpdatedAtDecoded0?.append(structure0)
                }
            }
        }
        noteUpdatedAt = noteUpdatedAtDecoded0
        let noteUpdatedByContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .noteUpdatedBy)
        var noteUpdatedByDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let noteUpdatedByContainer = noteUpdatedByContainer {
            noteUpdatedByDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in noteUpdatedByContainer {
                if let structure0 = structure0 {
                    noteUpdatedByDecoded0?.append(structure0)
                }
            }
        }
        noteUpdatedBy = noteUpdatedByDecoded0
        let keywordContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.KeywordFilter?].self, forKey: .keyword)
        var keywordDecoded0:[SecurityHubClientTypes.KeywordFilter]? = nil
        if let keywordContainer = keywordContainer {
            keywordDecoded0 = [SecurityHubClientTypes.KeywordFilter]()
            for structure0 in keywordContainer {
                if let structure0 = structure0 {
                    keywordDecoded0?.append(structure0)
                }
            }
        }
        keyword = keywordDecoded0
        let findingProviderFieldsConfidenceContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .findingProviderFieldsConfidence)
        var findingProviderFieldsConfidenceDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let findingProviderFieldsConfidenceContainer = findingProviderFieldsConfidenceContainer {
            findingProviderFieldsConfidenceDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in findingProviderFieldsConfidenceContainer {
                if let structure0 = structure0 {
                    findingProviderFieldsConfidenceDecoded0?.append(structure0)
                }
            }
        }
        findingProviderFieldsConfidence = findingProviderFieldsConfidenceDecoded0
        let findingProviderFieldsCriticalityContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.NumberFilter?].self, forKey: .findingProviderFieldsCriticality)
        var findingProviderFieldsCriticalityDecoded0:[SecurityHubClientTypes.NumberFilter]? = nil
        if let findingProviderFieldsCriticalityContainer = findingProviderFieldsCriticalityContainer {
            findingProviderFieldsCriticalityDecoded0 = [SecurityHubClientTypes.NumberFilter]()
            for structure0 in findingProviderFieldsCriticalityContainer {
                if let structure0 = structure0 {
                    findingProviderFieldsCriticalityDecoded0?.append(structure0)
                }
            }
        }
        findingProviderFieldsCriticality = findingProviderFieldsCriticalityDecoded0
        let findingProviderFieldsRelatedFindingsIdContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .findingProviderFieldsRelatedFindingsId)
        var findingProviderFieldsRelatedFindingsIdDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let findingProviderFieldsRelatedFindingsIdContainer = findingProviderFieldsRelatedFindingsIdContainer {
            findingProviderFieldsRelatedFindingsIdDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in findingProviderFieldsRelatedFindingsIdContainer {
                if let structure0 = structure0 {
                    findingProviderFieldsRelatedFindingsIdDecoded0?.append(structure0)
                }
            }
        }
        findingProviderFieldsRelatedFindingsId = findingProviderFieldsRelatedFindingsIdDecoded0
        let findingProviderFieldsRelatedFindingsProductArnContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .findingProviderFieldsRelatedFindingsProductArn)
        var findingProviderFieldsRelatedFindingsProductArnDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let findingProviderFieldsRelatedFindingsProductArnContainer = findingProviderFieldsRelatedFindingsProductArnContainer {
            findingProviderFieldsRelatedFindingsProductArnDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in findingProviderFieldsRelatedFindingsProductArnContainer {
                if let structure0 = structure0 {
                    findingProviderFieldsRelatedFindingsProductArnDecoded0?.append(structure0)
                }
            }
        }
        findingProviderFieldsRelatedFindingsProductArn = findingProviderFieldsRelatedFindingsProductArnDecoded0
        let findingProviderFieldsSeverityLabelContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .findingProviderFieldsSeverityLabel)
        var findingProviderFieldsSeverityLabelDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let findingProviderFieldsSeverityLabelContainer = findingProviderFieldsSeverityLabelContainer {
            findingProviderFieldsSeverityLabelDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in findingProviderFieldsSeverityLabelContainer {
                if let structure0 = structure0 {
                    findingProviderFieldsSeverityLabelDecoded0?.append(structure0)
                }
            }
        }
        findingProviderFieldsSeverityLabel = findingProviderFieldsSeverityLabelDecoded0
        let findingProviderFieldsSeverityOriginalContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .findingProviderFieldsSeverityOriginal)
        var findingProviderFieldsSeverityOriginalDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let findingProviderFieldsSeverityOriginalContainer = findingProviderFieldsSeverityOriginalContainer {
            findingProviderFieldsSeverityOriginalDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in findingProviderFieldsSeverityOriginalContainer {
                if let structure0 = structure0 {
                    findingProviderFieldsSeverityOriginalDecoded0?.append(structure0)
                }
            }
        }
        findingProviderFieldsSeverityOriginal = findingProviderFieldsSeverityOriginalDecoded0
        let findingProviderFieldsTypesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StringFilter?].self, forKey: .findingProviderFieldsTypes)
        var findingProviderFieldsTypesDecoded0:[SecurityHubClientTypes.StringFilter]? = nil
        if let findingProviderFieldsTypesContainer = findingProviderFieldsTypesContainer {
            findingProviderFieldsTypesDecoded0 = [SecurityHubClientTypes.StringFilter]()
            for structure0 in findingProviderFieldsTypesContainer {
                if let structure0 = structure0 {
                    findingProviderFieldsTypesDecoded0?.append(structure0)
                }
            }
        }
        findingProviderFieldsTypes = findingProviderFieldsTypesDecoded0
    }
}

extension SecurityHubClientTypes.AwsSecurityFindingFilters: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsSecurityFindingFilters(awsAccountId: \(Swift.String(describing: awsAccountId)), companyName: \(Swift.String(describing: companyName)), complianceStatus: \(Swift.String(describing: complianceStatus)), confidence: \(Swift.String(describing: confidence)), createdAt: \(Swift.String(describing: createdAt)), criticality: \(Swift.String(describing: criticality)), description: \(Swift.String(describing: description)), findingProviderFieldsConfidence: \(Swift.String(describing: findingProviderFieldsConfidence)), findingProviderFieldsCriticality: \(Swift.String(describing: findingProviderFieldsCriticality)), findingProviderFieldsRelatedFindingsId: \(Swift.String(describing: findingProviderFieldsRelatedFindingsId)), findingProviderFieldsRelatedFindingsProductArn: \(Swift.String(describing: findingProviderFieldsRelatedFindingsProductArn)), findingProviderFieldsSeverityLabel: \(Swift.String(describing: findingProviderFieldsSeverityLabel)), findingProviderFieldsSeverityOriginal: \(Swift.String(describing: findingProviderFieldsSeverityOriginal)), findingProviderFieldsTypes: \(Swift.String(describing: findingProviderFieldsTypes)), firstObservedAt: \(Swift.String(describing: firstObservedAt)), generatorId: \(Swift.String(describing: generatorId)), id: \(Swift.String(describing: id)), keyword: \(Swift.String(describing: keyword)), lastObservedAt: \(Swift.String(describing: lastObservedAt)), malwareName: \(Swift.String(describing: malwareName)), malwarePath: \(Swift.String(describing: malwarePath)), malwareState: \(Swift.String(describing: malwareState)), malwareType: \(Swift.String(describing: malwareType)), networkDestinationDomain: \(Swift.String(describing: networkDestinationDomain)), networkDestinationIpV4: \(Swift.String(describing: networkDestinationIpV4)), networkDestinationIpV6: \(Swift.String(describing: networkDestinationIpV6)), networkDestinationPort: \(Swift.String(describing: networkDestinationPort)), networkDirection: \(Swift.String(describing: networkDirection)), networkProtocol: \(Swift.String(describing: networkProtocol)), networkSourceDomain: \(Swift.String(describing: networkSourceDomain)), networkSourceIpV4: \(Swift.String(describing: networkSourceIpV4)), networkSourceIpV6: \(Swift.String(describing: networkSourceIpV6)), networkSourceMac: \(Swift.String(describing: networkSourceMac)), networkSourcePort: \(Swift.String(describing: networkSourcePort)), noteText: \(Swift.String(describing: noteText)), noteUpdatedAt: \(Swift.String(describing: noteUpdatedAt)), noteUpdatedBy: \(Swift.String(describing: noteUpdatedBy)), processLaunchedAt: \(Swift.String(describing: processLaunchedAt)), processName: \(Swift.String(describing: processName)), processParentPid: \(Swift.String(describing: processParentPid)), processPath: \(Swift.String(describing: processPath)), processPid: \(Swift.String(describing: processPid)), processTerminatedAt: \(Swift.String(describing: processTerminatedAt)), productArn: \(Swift.String(describing: productArn)), productFields: \(Swift.String(describing: productFields)), productName: \(Swift.String(describing: productName)), recommendationText: \(Swift.String(describing: recommendationText)), recordState: \(Swift.String(describing: recordState)), relatedFindingsId: \(Swift.String(describing: relatedFindingsId)), relatedFindingsProductArn: \(Swift.String(describing: relatedFindingsProductArn)), resourceAwsEc2InstanceIamInstanceProfileArn: \(Swift.String(describing: resourceAwsEc2InstanceIamInstanceProfileArn)), resourceAwsEc2InstanceImageId: \(Swift.String(describing: resourceAwsEc2InstanceImageId)), resourceAwsEc2InstanceIpV4Addresses: \(Swift.String(describing: resourceAwsEc2InstanceIpV4Addresses)), resourceAwsEc2InstanceIpV6Addresses: \(Swift.String(describing: resourceAwsEc2InstanceIpV6Addresses)), resourceAwsEc2InstanceKeyName: \(Swift.String(describing: resourceAwsEc2InstanceKeyName)), resourceAwsEc2InstanceLaunchedAt: \(Swift.String(describing: resourceAwsEc2InstanceLaunchedAt)), resourceAwsEc2InstanceSubnetId: \(Swift.String(describing: resourceAwsEc2InstanceSubnetId)), resourceAwsEc2InstanceType: \(Swift.String(describing: resourceAwsEc2InstanceType)), resourceAwsEc2InstanceVpcId: \(Swift.String(describing: resourceAwsEc2InstanceVpcId)), resourceAwsIamAccessKeyCreatedAt: \(Swift.String(describing: resourceAwsIamAccessKeyCreatedAt)), resourceAwsIamAccessKeyStatus: \(Swift.String(describing: resourceAwsIamAccessKeyStatus)), resourceAwsIamAccessKeyUserName: \(Swift.String(describing: resourceAwsIamAccessKeyUserName)), resourceAwsS3BucketOwnerId: \(Swift.String(describing: resourceAwsS3BucketOwnerId)), resourceAwsS3BucketOwnerName: \(Swift.String(describing: resourceAwsS3BucketOwnerName)), resourceContainerImageId: \(Swift.String(describing: resourceContainerImageId)), resourceContainerImageName: \(Swift.String(describing: resourceContainerImageName)), resourceContainerLaunchedAt: \(Swift.String(describing: resourceContainerLaunchedAt)), resourceContainerName: \(Swift.String(describing: resourceContainerName)), resourceDetailsOther: \(Swift.String(describing: resourceDetailsOther)), resourceId: \(Swift.String(describing: resourceId)), resourcePartition: \(Swift.String(describing: resourcePartition)), resourceRegion: \(Swift.String(describing: resourceRegion)), resourceTags: \(Swift.String(describing: resourceTags)), resourceType: \(Swift.String(describing: resourceType)), severityLabel: \(Swift.String(describing: severityLabel)), severityNormalized: \(Swift.String(describing: severityNormalized)), severityProduct: \(Swift.String(describing: severityProduct)), sourceUrl: \(Swift.String(describing: sourceUrl)), threatIntelIndicatorCategory: \(Swift.String(describing: threatIntelIndicatorCategory)), threatIntelIndicatorLastObservedAt: \(Swift.String(describing: threatIntelIndicatorLastObservedAt)), threatIntelIndicatorSource: \(Swift.String(describing: threatIntelIndicatorSource)), threatIntelIndicatorSourceUrl: \(Swift.String(describing: threatIntelIndicatorSourceUrl)), threatIntelIndicatorType: \(Swift.String(describing: threatIntelIndicatorType)), threatIntelIndicatorValue: \(Swift.String(describing: threatIntelIndicatorValue)), title: \(Swift.String(describing: title)), type: \(Swift.String(describing: type)), updatedAt: \(Swift.String(describing: updatedAt)), userDefinedFields: \(Swift.String(describing: userDefinedFields)), verificationState: \(Swift.String(describing: verificationState)), workflowState: \(Swift.String(describing: workflowState)), workflowStatus: \(Swift.String(describing: workflowStatus)))"}
}

extension SecurityHubClientTypes {
    /// <p>A collection of attributes that are applied to all active Security Hub-aggregated findings and
    ///          that result in a subset of findings that are included in this insight.</p>
    ///          <p>You can filter by up to 10 finding attributes. For each attribute, you can provide up to
    ///          20 filter values.</p>
    public struct AwsSecurityFindingFilters: Swift.Equatable {
        /// <p>The AWS account ID that a finding is generated in.</p>
        public let awsAccountId: [SecurityHubClientTypes.StringFilter]?
        /// <p>The name of the findings provider (company) that owns the solution (product) that
        ///          generates findings.</p>
        public let companyName: [SecurityHubClientTypes.StringFilter]?
        /// <p>Exclusive to findings that are generated as the result of a check run against a specific
        ///          rule in a supported standard, such as CIS AWS Foundations. Contains security
        ///          standard-related finding details.</p>
        public let complianceStatus: [SecurityHubClientTypes.StringFilter]?
        /// <p>A finding's confidence. Confidence is defined as the likelihood that a finding
        ///          accurately identifies the behavior or issue that it was intended to identify.</p>
        ///          <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent
        ///          confidence and 100 means 100 percent confidence.</p>
        public let confidence: [SecurityHubClientTypes.NumberFilter]?
        /// <p>An ISO8601-formatted timestamp that indicates when the security-findings provider
        ///          captured the potential security issue that a finding captured.</p>
        public let createdAt: [SecurityHubClientTypes.DateFilter]?
        /// <p>The level of importance assigned to the resources associated with the finding.</p>
        ///          <p>A score of 0 means that the underlying resources have no criticality, and a score of 100
        ///          is reserved for the most critical resources.</p>
        public let criticality: [SecurityHubClientTypes.NumberFilter]?
        /// <p>A finding's description.</p>
        public let description: [SecurityHubClientTypes.StringFilter]?
        /// <p>The finding provider value for the finding confidence. Confidence is defined as the likelihood
        ///          that a finding accurately identifies the behavior or issue that it was intended to
        ///          identify.</p>
        ///          <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent
        ///          confidence and 100 means 100 percent confidence.</p>
        public let findingProviderFieldsConfidence: [SecurityHubClientTypes.NumberFilter]?
        /// <p>The finding provider value for the level of importance assigned to the resources associated with
        ///          the findings.</p>
        ///          <p>A score of 0 means that the underlying resources have no criticality, and a score of 100
        ///          is reserved for the most critical resources. </p>
        public let findingProviderFieldsCriticality: [SecurityHubClientTypes.NumberFilter]?
        /// <p>The finding identifier of a related finding that is identified by the finding provider.</p>
        public let findingProviderFieldsRelatedFindingsId: [SecurityHubClientTypes.StringFilter]?
        /// <p>The ARN of the solution that generated a related finding that is identified by the finding provider.</p>
        public let findingProviderFieldsRelatedFindingsProductArn: [SecurityHubClientTypes.StringFilter]?
        /// <p>The finding provider value for the severity label.</p>
        public let findingProviderFieldsSeverityLabel: [SecurityHubClientTypes.StringFilter]?
        /// <p>The finding provider's original value for the severity.</p>
        public let findingProviderFieldsSeverityOriginal: [SecurityHubClientTypes.StringFilter]?
        /// <p>One or more finding types that the finding provider assigned to the finding. Uses the format of <code>namespace/category/classifier</code>
        ///          that classify a finding.</p>
        ///          <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual
        ///          Behaviors | Sensitive Data Identifications</p>
        public let findingProviderFieldsTypes: [SecurityHubClientTypes.StringFilter]?
        /// <p>An ISO8601-formatted timestamp that indicates when the security-findings provider first
        ///          observed the potential security issue that a finding captured.</p>
        public let firstObservedAt: [SecurityHubClientTypes.DateFilter]?
        /// <p>The identifier for the solution-specific component (a discrete unit of logic) that
        ///          generated a finding. In various security-findings providers' solutions, this generator can
        ///          be called a rule, a check, a detector, a plugin, etc.</p>
        public let generatorId: [SecurityHubClientTypes.StringFilter]?
        /// <p>The security findings provider-specific identifier for a finding.</p>
        public let id: [SecurityHubClientTypes.StringFilter]?
        /// <p>A keyword for a finding.</p>
        public let keyword: [SecurityHubClientTypes.KeywordFilter]?
        /// <p>An ISO8601-formatted timestamp that indicates when the security-findings provider most
        ///          recently observed the potential security issue that a finding captured.</p>
        public let lastObservedAt: [SecurityHubClientTypes.DateFilter]?
        /// <p>The name of the malware that was observed.</p>
        public let malwareName: [SecurityHubClientTypes.StringFilter]?
        /// <p>The filesystem path of the malware that was observed.</p>
        public let malwarePath: [SecurityHubClientTypes.StringFilter]?
        /// <p>The state of the malware that was observed.</p>
        public let malwareState: [SecurityHubClientTypes.StringFilter]?
        /// <p>The type of the malware that was observed.</p>
        public let malwareType: [SecurityHubClientTypes.StringFilter]?
        /// <p>The destination domain of network-related information about a finding.</p>
        public let networkDestinationDomain: [SecurityHubClientTypes.StringFilter]?
        /// <p>The destination IPv4 address of network-related information about a finding.</p>
        public let networkDestinationIpV4: [SecurityHubClientTypes.IpFilter]?
        /// <p>The destination IPv6 address of network-related information about a finding.</p>
        public let networkDestinationIpV6: [SecurityHubClientTypes.IpFilter]?
        /// <p>The destination port of network-related information about a finding.</p>
        public let networkDestinationPort: [SecurityHubClientTypes.NumberFilter]?
        /// <p>Indicates the direction of network traffic associated with a finding.</p>
        public let networkDirection: [SecurityHubClientTypes.StringFilter]?
        /// <p>The protocol of network-related information about a finding.</p>
        public let networkProtocol: [SecurityHubClientTypes.StringFilter]?
        /// <p>The source domain of network-related information about a finding.</p>
        public let networkSourceDomain: [SecurityHubClientTypes.StringFilter]?
        /// <p>The source IPv4 address of network-related information about a finding.</p>
        public let networkSourceIpV4: [SecurityHubClientTypes.IpFilter]?
        /// <p>The source IPv6 address of network-related information about a finding.</p>
        public let networkSourceIpV6: [SecurityHubClientTypes.IpFilter]?
        /// <p>The source media access control (MAC) address of network-related information about a
        ///          finding.</p>
        public let networkSourceMac: [SecurityHubClientTypes.StringFilter]?
        /// <p>The source port of network-related information about a finding.</p>
        public let networkSourcePort: [SecurityHubClientTypes.NumberFilter]?
        /// <p>The text of a note.</p>
        public let noteText: [SecurityHubClientTypes.StringFilter]?
        /// <p>The timestamp of when the note was updated.</p>
        public let noteUpdatedAt: [SecurityHubClientTypes.DateFilter]?
        /// <p>The principal that created a note.</p>
        public let noteUpdatedBy: [SecurityHubClientTypes.StringFilter]?
        /// <p>The date/time that the process was launched.</p>
        public let processLaunchedAt: [SecurityHubClientTypes.DateFilter]?
        /// <p>The name of the process.</p>
        public let processName: [SecurityHubClientTypes.StringFilter]?
        /// <p>The parent process ID.</p>
        public let processParentPid: [SecurityHubClientTypes.NumberFilter]?
        /// <p>The path to the process executable.</p>
        public let processPath: [SecurityHubClientTypes.StringFilter]?
        /// <p>The process ID.</p>
        public let processPid: [SecurityHubClientTypes.NumberFilter]?
        /// <p>The date/time that the process was terminated.</p>
        public let processTerminatedAt: [SecurityHubClientTypes.DateFilter]?
        /// <p>The ARN generated by Security Hub that uniquely identifies a third-party company
        ///          (security findings provider) after this provider's product (solution that generates
        ///          findings) is registered with Security Hub.</p>
        public let productArn: [SecurityHubClientTypes.StringFilter]?
        /// <p>A data type where security-findings providers can include additional solution-specific
        ///          details that aren't part of the defined <code>AwsSecurityFinding</code> format.</p>
        public let productFields: [SecurityHubClientTypes.MapFilter]?
        /// <p>The name of the solution (product) that generates findings.</p>
        public let productName: [SecurityHubClientTypes.StringFilter]?
        /// <p>The recommendation of what to do about the issue described in a finding.</p>
        public let recommendationText: [SecurityHubClientTypes.StringFilter]?
        /// <p>The updated record state for the finding.</p>
        public let recordState: [SecurityHubClientTypes.StringFilter]?
        /// <p>The solution-generated identifier for a related finding.</p>
        public let relatedFindingsId: [SecurityHubClientTypes.StringFilter]?
        /// <p>The ARN of the solution that generated a related finding.</p>
        public let relatedFindingsProductArn: [SecurityHubClientTypes.StringFilter]?
        /// <p>The IAM profile ARN of the instance.</p>
        public let resourceAwsEc2InstanceIamInstanceProfileArn: [SecurityHubClientTypes.StringFilter]?
        /// <p>The Amazon Machine Image (AMI) ID of the instance.</p>
        public let resourceAwsEc2InstanceImageId: [SecurityHubClientTypes.StringFilter]?
        /// <p>The IPv4 addresses associated with the instance.</p>
        public let resourceAwsEc2InstanceIpV4Addresses: [SecurityHubClientTypes.IpFilter]?
        /// <p>The IPv6 addresses associated with the instance.</p>
        public let resourceAwsEc2InstanceIpV6Addresses: [SecurityHubClientTypes.IpFilter]?
        /// <p>The key name associated with the instance.</p>
        public let resourceAwsEc2InstanceKeyName: [SecurityHubClientTypes.StringFilter]?
        /// <p>The date and time the instance was launched.</p>
        public let resourceAwsEc2InstanceLaunchedAt: [SecurityHubClientTypes.DateFilter]?
        /// <p>The identifier of the subnet that the instance was launched in.</p>
        public let resourceAwsEc2InstanceSubnetId: [SecurityHubClientTypes.StringFilter]?
        /// <p>The instance type of the instance.</p>
        public let resourceAwsEc2InstanceType: [SecurityHubClientTypes.StringFilter]?
        /// <p>The identifier of the VPC that the instance was launched in.</p>
        public let resourceAwsEc2InstanceVpcId: [SecurityHubClientTypes.StringFilter]?
        /// <p>The creation date/time of the IAM access key related to a finding.</p>
        public let resourceAwsIamAccessKeyCreatedAt: [SecurityHubClientTypes.DateFilter]?
        /// <p>The status of the IAM access key related to a finding.</p>
        public let resourceAwsIamAccessKeyStatus: [SecurityHubClientTypes.StringFilter]?
        /// <p>The user associated with the IAM access key related to a finding.</p>
        public let resourceAwsIamAccessKeyUserName: [SecurityHubClientTypes.StringFilter]?
        /// <p>The canonical user ID of the owner of the S3 bucket.</p>
        public let resourceAwsS3BucketOwnerId: [SecurityHubClientTypes.StringFilter]?
        /// <p>The display name of the owner of the S3 bucket.</p>
        public let resourceAwsS3BucketOwnerName: [SecurityHubClientTypes.StringFilter]?
        /// <p>The identifier of the image related to a finding.</p>
        public let resourceContainerImageId: [SecurityHubClientTypes.StringFilter]?
        /// <p>The name of the image related to a finding.</p>
        public let resourceContainerImageName: [SecurityHubClientTypes.StringFilter]?
        /// <p>The date/time that the container was started.</p>
        public let resourceContainerLaunchedAt: [SecurityHubClientTypes.DateFilter]?
        /// <p>The name of the container related to a finding.</p>
        public let resourceContainerName: [SecurityHubClientTypes.StringFilter]?
        /// <p>The details of a resource that doesn't have a specific subfield for the resource type
        ///          defined.</p>
        public let resourceDetailsOther: [SecurityHubClientTypes.MapFilter]?
        /// <p>The canonical identifier for the given resource type.</p>
        public let resourceId: [SecurityHubClientTypes.StringFilter]?
        /// <p>The canonical AWS partition name that the Region is assigned to.</p>
        public let resourcePartition: [SecurityHubClientTypes.StringFilter]?
        /// <p>The canonical AWS external Region name where this resource is located.</p>
        public let resourceRegion: [SecurityHubClientTypes.StringFilter]?
        /// <p>A list of AWS tags associated with a resource at the time the finding was
        ///          processed.</p>
        public let resourceTags: [SecurityHubClientTypes.MapFilter]?
        /// <p>Specifies the type of the resource that details are provided for.</p>
        public let resourceType: [SecurityHubClientTypes.StringFilter]?
        /// <p>The label of a finding's severity.</p>
        public let severityLabel: [SecurityHubClientTypes.StringFilter]?
        /// <p>The normalized severity of a finding.</p>
        @available(*, deprecated, message: "This filter is deprecated, use SeverityLabel or FindingProviderFieldsSeverityLabel instead.")
        public let severityNormalized: [SecurityHubClientTypes.NumberFilter]?
        /// <p>The native severity as defined by the security-findings provider's solution that
        ///          generated the finding.</p>
        @available(*, deprecated, message: "This filter is deprecated, use FindingProviiltersSeverityOriginal instead.")
        public let severityProduct: [SecurityHubClientTypes.NumberFilter]?
        /// <p>A URL that links to a page about the current finding in the security-findings provider's
        ///          solution.</p>
        public let sourceUrl: [SecurityHubClientTypes.StringFilter]?
        /// <p>The category of a threat intelligence indicator.</p>
        public let threatIntelIndicatorCategory: [SecurityHubClientTypes.StringFilter]?
        /// <p>The date/time of the last observation of a threat intelligence indicator.</p>
        public let threatIntelIndicatorLastObservedAt: [SecurityHubClientTypes.DateFilter]?
        /// <p>The source of the threat intelligence.</p>
        public let threatIntelIndicatorSource: [SecurityHubClientTypes.StringFilter]?
        /// <p>The URL for more details from the source of the threat intelligence.</p>
        public let threatIntelIndicatorSourceUrl: [SecurityHubClientTypes.StringFilter]?
        /// <p>The type of a threat intelligence indicator.</p>
        public let threatIntelIndicatorType: [SecurityHubClientTypes.StringFilter]?
        /// <p>The value of a threat intelligence indicator.</p>
        public let threatIntelIndicatorValue: [SecurityHubClientTypes.StringFilter]?
        /// <p>A finding's title.</p>
        public let title: [SecurityHubClientTypes.StringFilter]?
        /// <p>A finding type in the format of <code>namespace/category/classifier</code> that
        ///          classifies a finding.</p>
        public let type: [SecurityHubClientTypes.StringFilter]?
        /// <p>An ISO8601-formatted timestamp that indicates when the security-findings provider last
        ///          updated the finding record. </p>
        public let updatedAt: [SecurityHubClientTypes.DateFilter]?
        /// <p>A list of name/value string pairs associated with the finding. These are custom,
        ///          user-defined fields added to a finding. </p>
        public let userDefinedFields: [SecurityHubClientTypes.MapFilter]?
        /// <p>The veracity of a finding.</p>
        public let verificationState: [SecurityHubClientTypes.StringFilter]?
        /// <p>The workflow state of a finding.</p>
        ///          <p>Note that this field is deprecated. To search for a finding based on its workflow
        ///          status, use <code>WorkflowStatus</code>.</p>
        public let workflowState: [SecurityHubClientTypes.StringFilter]?
        /// <p>The status of the investigation into a finding. Allowed values are the following.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>NEW</code> - The initial state of a finding, before it is reviewed.</p>
        ///                <p>Security Hub also resets the workflow status from <code>NOTIFIED</code> or
        ///                   <code>RESOLVED</code> to <code>NEW</code> in the following cases:</p>
        ///                <ul>
        ///                   <li>
        ///                      <p>The record state changes from <code>ARCHIVED</code> to <code>ACTIVE</code>.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>The compliance status changes from <code>PASSED</code> to either <code>WARNING</code>,
        ///                         <code>FAILED</code>, or <code>NOT_AVAILABLE</code>.</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NOTIFIED</code> - Indicates that the resource owner has been notified about
        ///                the security issue. Used when the initial reviewer is not the resource owner, and
        ///                needs intervention from the resource owner.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SUPPRESSED</code> - The finding will not be reviewed again and will not be
        ///                acted upon.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>RESOLVED</code> - The finding was reviewed and remediated and is now
        ///                considered resolved. </p>
        ///             </li>
        ///          </ul>
        public let workflowStatus: [SecurityHubClientTypes.StringFilter]?

        public init (
            awsAccountId: [SecurityHubClientTypes.StringFilter]? = nil,
            companyName: [SecurityHubClientTypes.StringFilter]? = nil,
            complianceStatus: [SecurityHubClientTypes.StringFilter]? = nil,
            confidence: [SecurityHubClientTypes.NumberFilter]? = nil,
            createdAt: [SecurityHubClientTypes.DateFilter]? = nil,
            criticality: [SecurityHubClientTypes.NumberFilter]? = nil,
            description: [SecurityHubClientTypes.StringFilter]? = nil,
            findingProviderFieldsConfidence: [SecurityHubClientTypes.NumberFilter]? = nil,
            findingProviderFieldsCriticality: [SecurityHubClientTypes.NumberFilter]? = nil,
            findingProviderFieldsRelatedFindingsId: [SecurityHubClientTypes.StringFilter]? = nil,
            findingProviderFieldsRelatedFindingsProductArn: [SecurityHubClientTypes.StringFilter]? = nil,
            findingProviderFieldsSeverityLabel: [SecurityHubClientTypes.StringFilter]? = nil,
            findingProviderFieldsSeverityOriginal: [SecurityHubClientTypes.StringFilter]? = nil,
            findingProviderFieldsTypes: [SecurityHubClientTypes.StringFilter]? = nil,
            firstObservedAt: [SecurityHubClientTypes.DateFilter]? = nil,
            generatorId: [SecurityHubClientTypes.StringFilter]? = nil,
            id: [SecurityHubClientTypes.StringFilter]? = nil,
            keyword: [SecurityHubClientTypes.KeywordFilter]? = nil,
            lastObservedAt: [SecurityHubClientTypes.DateFilter]? = nil,
            malwareName: [SecurityHubClientTypes.StringFilter]? = nil,
            malwarePath: [SecurityHubClientTypes.StringFilter]? = nil,
            malwareState: [SecurityHubClientTypes.StringFilter]? = nil,
            malwareType: [SecurityHubClientTypes.StringFilter]? = nil,
            networkDestinationDomain: [SecurityHubClientTypes.StringFilter]? = nil,
            networkDestinationIpV4: [SecurityHubClientTypes.IpFilter]? = nil,
            networkDestinationIpV6: [SecurityHubClientTypes.IpFilter]? = nil,
            networkDestinationPort: [SecurityHubClientTypes.NumberFilter]? = nil,
            networkDirection: [SecurityHubClientTypes.StringFilter]? = nil,
            networkProtocol: [SecurityHubClientTypes.StringFilter]? = nil,
            networkSourceDomain: [SecurityHubClientTypes.StringFilter]? = nil,
            networkSourceIpV4: [SecurityHubClientTypes.IpFilter]? = nil,
            networkSourceIpV6: [SecurityHubClientTypes.IpFilter]? = nil,
            networkSourceMac: [SecurityHubClientTypes.StringFilter]? = nil,
            networkSourcePort: [SecurityHubClientTypes.NumberFilter]? = nil,
            noteText: [SecurityHubClientTypes.StringFilter]? = nil,
            noteUpdatedAt: [SecurityHubClientTypes.DateFilter]? = nil,
            noteUpdatedBy: [SecurityHubClientTypes.StringFilter]? = nil,
            processLaunchedAt: [SecurityHubClientTypes.DateFilter]? = nil,
            processName: [SecurityHubClientTypes.StringFilter]? = nil,
            processParentPid: [SecurityHubClientTypes.NumberFilter]? = nil,
            processPath: [SecurityHubClientTypes.StringFilter]? = nil,
            processPid: [SecurityHubClientTypes.NumberFilter]? = nil,
            processTerminatedAt: [SecurityHubClientTypes.DateFilter]? = nil,
            productArn: [SecurityHubClientTypes.StringFilter]? = nil,
            productFields: [SecurityHubClientTypes.MapFilter]? = nil,
            productName: [SecurityHubClientTypes.StringFilter]? = nil,
            recommendationText: [SecurityHubClientTypes.StringFilter]? = nil,
            recordState: [SecurityHubClientTypes.StringFilter]? = nil,
            relatedFindingsId: [SecurityHubClientTypes.StringFilter]? = nil,
            relatedFindingsProductArn: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceAwsEc2InstanceIamInstanceProfileArn: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceAwsEc2InstanceImageId: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceAwsEc2InstanceIpV4Addresses: [SecurityHubClientTypes.IpFilter]? = nil,
            resourceAwsEc2InstanceIpV6Addresses: [SecurityHubClientTypes.IpFilter]? = nil,
            resourceAwsEc2InstanceKeyName: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceAwsEc2InstanceLaunchedAt: [SecurityHubClientTypes.DateFilter]? = nil,
            resourceAwsEc2InstanceSubnetId: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceAwsEc2InstanceType: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceAwsEc2InstanceVpcId: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceAwsIamAccessKeyCreatedAt: [SecurityHubClientTypes.DateFilter]? = nil,
            resourceAwsIamAccessKeyStatus: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceAwsIamAccessKeyUserName: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceAwsS3BucketOwnerId: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceAwsS3BucketOwnerName: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceContainerImageId: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceContainerImageName: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceContainerLaunchedAt: [SecurityHubClientTypes.DateFilter]? = nil,
            resourceContainerName: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceDetailsOther: [SecurityHubClientTypes.MapFilter]? = nil,
            resourceId: [SecurityHubClientTypes.StringFilter]? = nil,
            resourcePartition: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceRegion: [SecurityHubClientTypes.StringFilter]? = nil,
            resourceTags: [SecurityHubClientTypes.MapFilter]? = nil,
            resourceType: [SecurityHubClientTypes.StringFilter]? = nil,
            severityLabel: [SecurityHubClientTypes.StringFilter]? = nil,
            severityNormalized: [SecurityHubClientTypes.NumberFilter]? = nil,
            severityProduct: [SecurityHubClientTypes.NumberFilter]? = nil,
            sourceUrl: [SecurityHubClientTypes.StringFilter]? = nil,
            threatIntelIndicatorCategory: [SecurityHubClientTypes.StringFilter]? = nil,
            threatIntelIndicatorLastObservedAt: [SecurityHubClientTypes.DateFilter]? = nil,
            threatIntelIndicatorSource: [SecurityHubClientTypes.StringFilter]? = nil,
            threatIntelIndicatorSourceUrl: [SecurityHubClientTypes.StringFilter]? = nil,
            threatIntelIndicatorType: [SecurityHubClientTypes.StringFilter]? = nil,
            threatIntelIndicatorValue: [SecurityHubClientTypes.StringFilter]? = nil,
            title: [SecurityHubClientTypes.StringFilter]? = nil,
            type: [SecurityHubClientTypes.StringFilter]? = nil,
            updatedAt: [SecurityHubClientTypes.DateFilter]? = nil,
            userDefinedFields: [SecurityHubClientTypes.MapFilter]? = nil,
            verificationState: [SecurityHubClientTypes.StringFilter]? = nil,
            workflowState: [SecurityHubClientTypes.StringFilter]? = nil,
            workflowStatus: [SecurityHubClientTypes.StringFilter]? = nil
        )
        {
            self.awsAccountId = awsAccountId
            self.companyName = companyName
            self.complianceStatus = complianceStatus
            self.confidence = confidence
            self.createdAt = createdAt
            self.criticality = criticality
            self.description = description
            self.findingProviderFieldsConfidence = findingProviderFieldsConfidence
            self.findingProviderFieldsCriticality = findingProviderFieldsCriticality
            self.findingProviderFieldsRelatedFindingsId = findingProviderFieldsRelatedFindingsId
            self.findingProviderFieldsRelatedFindingsProductArn = findingProviderFieldsRelatedFindingsProductArn
            self.findingProviderFieldsSeverityLabel = findingProviderFieldsSeverityLabel
            self.findingProviderFieldsSeverityOriginal = findingProviderFieldsSeverityOriginal
            self.findingProviderFieldsTypes = findingProviderFieldsTypes
            self.firstObservedAt = firstObservedAt
            self.generatorId = generatorId
            self.id = id
            self.keyword = keyword
            self.lastObservedAt = lastObservedAt
            self.malwareName = malwareName
            self.malwarePath = malwarePath
            self.malwareState = malwareState
            self.malwareType = malwareType
            self.networkDestinationDomain = networkDestinationDomain
            self.networkDestinationIpV4 = networkDestinationIpV4
            self.networkDestinationIpV6 = networkDestinationIpV6
            self.networkDestinationPort = networkDestinationPort
            self.networkDirection = networkDirection
            self.networkProtocol = networkProtocol
            self.networkSourceDomain = networkSourceDomain
            self.networkSourceIpV4 = networkSourceIpV4
            self.networkSourceIpV6 = networkSourceIpV6
            self.networkSourceMac = networkSourceMac
            self.networkSourcePort = networkSourcePort
            self.noteText = noteText
            self.noteUpdatedAt = noteUpdatedAt
            self.noteUpdatedBy = noteUpdatedBy
            self.processLaunchedAt = processLaunchedAt
            self.processName = processName
            self.processParentPid = processParentPid
            self.processPath = processPath
            self.processPid = processPid
            self.processTerminatedAt = processTerminatedAt
            self.productArn = productArn
            self.productFields = productFields
            self.productName = productName
            self.recommendationText = recommendationText
            self.recordState = recordState
            self.relatedFindingsId = relatedFindingsId
            self.relatedFindingsProductArn = relatedFindingsProductArn
            self.resourceAwsEc2InstanceIamInstanceProfileArn = resourceAwsEc2InstanceIamInstanceProfileArn
            self.resourceAwsEc2InstanceImageId = resourceAwsEc2InstanceImageId
            self.resourceAwsEc2InstanceIpV4Addresses = resourceAwsEc2InstanceIpV4Addresses
            self.resourceAwsEc2InstanceIpV6Addresses = resourceAwsEc2InstanceIpV6Addresses
            self.resourceAwsEc2InstanceKeyName = resourceAwsEc2InstanceKeyName
            self.resourceAwsEc2InstanceLaunchedAt = resourceAwsEc2InstanceLaunchedAt
            self.resourceAwsEc2InstanceSubnetId = resourceAwsEc2InstanceSubnetId
            self.resourceAwsEc2InstanceType = resourceAwsEc2InstanceType
            self.resourceAwsEc2InstanceVpcId = resourceAwsEc2InstanceVpcId
            self.resourceAwsIamAccessKeyCreatedAt = resourceAwsIamAccessKeyCreatedAt
            self.resourceAwsIamAccessKeyStatus = resourceAwsIamAccessKeyStatus
            self.resourceAwsIamAccessKeyUserName = resourceAwsIamAccessKeyUserName
            self.resourceAwsS3BucketOwnerId = resourceAwsS3BucketOwnerId
            self.resourceAwsS3BucketOwnerName = resourceAwsS3BucketOwnerName
            self.resourceContainerImageId = resourceContainerImageId
            self.resourceContainerImageName = resourceContainerImageName
            self.resourceContainerLaunchedAt = resourceContainerLaunchedAt
            self.resourceContainerName = resourceContainerName
            self.resourceDetailsOther = resourceDetailsOther
            self.resourceId = resourceId
            self.resourcePartition = resourcePartition
            self.resourceRegion = resourceRegion
            self.resourceTags = resourceTags
            self.resourceType = resourceType
            self.severityLabel = severityLabel
            self.severityNormalized = severityNormalized
            self.severityProduct = severityProduct
            self.sourceUrl = sourceUrl
            self.threatIntelIndicatorCategory = threatIntelIndicatorCategory
            self.threatIntelIndicatorLastObservedAt = threatIntelIndicatorLastObservedAt
            self.threatIntelIndicatorSource = threatIntelIndicatorSource
            self.threatIntelIndicatorSourceUrl = threatIntelIndicatorSourceUrl
            self.threatIntelIndicatorType = threatIntelIndicatorType
            self.threatIntelIndicatorValue = threatIntelIndicatorValue
            self.title = title
            self.type = type
            self.updatedAt = updatedAt
            self.userDefinedFields = userDefinedFields
            self.verificationState = verificationState
            self.workflowState = workflowState
            self.workflowStatus = workflowStatus
        }
    }

}

extension SecurityHubClientTypes.AwsSecurityFindingIdentifier: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case productArn = "ProductArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let productArn = productArn {
            try encodeContainer.encode(productArn, forKey: .productArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let productArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productArn)
        productArn = productArnDecoded
    }
}

extension SecurityHubClientTypes.AwsSecurityFindingIdentifier: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsSecurityFindingIdentifier(id: \(Swift.String(describing: id)), productArn: \(Swift.String(describing: productArn)))"}
}

extension SecurityHubClientTypes {
    /// <p>Identifies a finding to update using <code>BatchUpdateFindings</code>.</p>
    public struct AwsSecurityFindingIdentifier: Swift.Equatable {
        /// <p>The identifier of the finding that was specified by the finding provider.</p>
        public let id: Swift.String?
        /// <p>The ARN generated by Security Hub that uniquely identifies a product that generates findings.
        ///          This can be the ARN for a third-party product that is integrated with Security Hub, or the ARN for
        ///          a custom integration.</p>
        public let productArn: Swift.String?

        public init (
            id: Swift.String? = nil,
            productArn: Swift.String? = nil
        )
        {
            self.id = id
            self.productArn = productArn
        }
    }

}

extension SecurityHubClientTypes.AwsSnsTopicDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case kmsMasterKeyId = "KmsMasterKeyId"
        case owner = "Owner"
        case subscription = "Subscription"
        case topicName = "TopicName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let kmsMasterKeyId = kmsMasterKeyId {
            try encodeContainer.encode(kmsMasterKeyId, forKey: .kmsMasterKeyId)
        }
        if let owner = owner {
            try encodeContainer.encode(owner, forKey: .owner)
        }
        if let subscription = subscription {
            var subscriptionContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subscription)
            for awssnstopicsubscriptionlist0 in subscription {
                try subscriptionContainer.encode(awssnstopicsubscriptionlist0)
            }
        }
        if let topicName = topicName {
            try encodeContainer.encode(topicName, forKey: .topicName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kmsMasterKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsMasterKeyId)
        kmsMasterKeyId = kmsMasterKeyIdDecoded
        let subscriptionContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsSnsTopicSubscription?].self, forKey: .subscription)
        var subscriptionDecoded0:[SecurityHubClientTypes.AwsSnsTopicSubscription]? = nil
        if let subscriptionContainer = subscriptionContainer {
            subscriptionDecoded0 = [SecurityHubClientTypes.AwsSnsTopicSubscription]()
            for structure0 in subscriptionContainer {
                if let structure0 = structure0 {
                    subscriptionDecoded0?.append(structure0)
                }
            }
        }
        subscription = subscriptionDecoded0
        let topicNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .topicName)
        topicName = topicNameDecoded
        let ownerDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .owner)
        owner = ownerDecoded
    }
}

extension SecurityHubClientTypes.AwsSnsTopicDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsSnsTopicDetails(kmsMasterKeyId: \(Swift.String(describing: kmsMasterKeyId)), owner: \(Swift.String(describing: owner)), subscription: \(Swift.String(describing: subscription)), topicName: \(Swift.String(describing: topicName)))"}
}

extension SecurityHubClientTypes {
    /// <p>A wrapper type for the topic's Amazon Resource Name (ARN).</p>
    public struct AwsSnsTopicDetails: Swift.Equatable {
        /// <p>The ID of an AWS managed customer master key (CMK) for Amazon SNS or a custom
        ///          CMK.</p>
        public let kmsMasterKeyId: Swift.String?
        /// <p>The subscription's owner.</p>
        public let owner: Swift.String?
        /// <p>Subscription is an embedded property that describes the subscription endpoints of an Amazon SNS topic.</p>
        public let subscription: [SecurityHubClientTypes.AwsSnsTopicSubscription]?
        /// <p>The name of the topic.</p>
        public let topicName: Swift.String?

        public init (
            kmsMasterKeyId: Swift.String? = nil,
            owner: Swift.String? = nil,
            subscription: [SecurityHubClientTypes.AwsSnsTopicSubscription]? = nil,
            topicName: Swift.String? = nil
        )
        {
            self.kmsMasterKeyId = kmsMasterKeyId
            self.owner = owner
            self.subscription = subscription
            self.topicName = topicName
        }
    }

}

extension SecurityHubClientTypes.AwsSnsTopicSubscription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endpoint = "Endpoint"
        case `protocol` = "Protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endpoint = endpoint {
            try encodeContainer.encode(endpoint, forKey: .endpoint)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`, forKey: .`protocol`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let endpointDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .endpoint)
        endpoint = endpointDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocol)
        `protocol` = protocolDecoded
    }
}

extension SecurityHubClientTypes.AwsSnsTopicSubscription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsSnsTopicSubscription(endpoint: \(Swift.String(describing: endpoint)), protocol: \(Swift.String(describing: `protocol`)))"}
}

extension SecurityHubClientTypes {
    /// <p>A wrapper type for the attributes of an Amazon SNS subscription.</p>
    public struct AwsSnsTopicSubscription: Swift.Equatable {
        /// <p>The subscription's protocol.</p>
        public let `protocol`: Swift.String?
        /// <p>The subscription's endpoint (format depends on the protocol).</p>
        public let endpoint: Swift.String?

        public init (
            `protocol`: Swift.String? = nil,
            endpoint: Swift.String? = nil
        )
        {
            self.`protocol` = `protocol`
            self.endpoint = endpoint
        }
    }

}

extension SecurityHubClientTypes.AwsSqsQueueDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case deadLetterTargetArn = "DeadLetterTargetArn"
        case kmsDataKeyReusePeriodSeconds = "KmsDataKeyReusePeriodSeconds"
        case kmsMasterKeyId = "KmsMasterKeyId"
        case queueName = "QueueName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let deadLetterTargetArn = deadLetterTargetArn {
            try encodeContainer.encode(deadLetterTargetArn, forKey: .deadLetterTargetArn)
        }
        if kmsDataKeyReusePeriodSeconds != 0 {
            try encodeContainer.encode(kmsDataKeyReusePeriodSeconds, forKey: .kmsDataKeyReusePeriodSeconds)
        }
        if let kmsMasterKeyId = kmsMasterKeyId {
            try encodeContainer.encode(kmsMasterKeyId, forKey: .kmsMasterKeyId)
        }
        if let queueName = queueName {
            try encodeContainer.encode(queueName, forKey: .queueName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let kmsDataKeyReusePeriodSecondsDecoded = try containerValues.decode(Swift.Int.self, forKey: .kmsDataKeyReusePeriodSeconds)
        kmsDataKeyReusePeriodSeconds = kmsDataKeyReusePeriodSecondsDecoded
        let kmsMasterKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .kmsMasterKeyId)
        kmsMasterKeyId = kmsMasterKeyIdDecoded
        let queueNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .queueName)
        queueName = queueNameDecoded
        let deadLetterTargetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .deadLetterTargetArn)
        deadLetterTargetArn = deadLetterTargetArnDecoded
    }
}

extension SecurityHubClientTypes.AwsSqsQueueDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsSqsQueueDetails(deadLetterTargetArn: \(Swift.String(describing: deadLetterTargetArn)), kmsDataKeyReusePeriodSeconds: \(Swift.String(describing: kmsDataKeyReusePeriodSeconds)), kmsMasterKeyId: \(Swift.String(describing: kmsMasterKeyId)), queueName: \(Swift.String(describing: queueName)))"}
}

extension SecurityHubClientTypes {
    /// <p>Data about a queue.</p>
    public struct AwsSqsQueueDetails: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the dead-letter queue to which Amazon SQS moves
        ///          messages after the value of <code>maxReceiveCount</code> is exceeded. </p>
        public let deadLetterTargetArn: Swift.String?
        /// <p>The length of time, in seconds, for which Amazon SQS can reuse a data key to encrypt or decrypt messages before calling AWS KMS again.</p>
        public let kmsDataKeyReusePeriodSeconds: Swift.Int
        /// <p>The ID of an AWS managed customer master key (CMK) for Amazon SQS or a custom
        ///          CMK.</p>
        public let kmsMasterKeyId: Swift.String?
        /// <p>The name of the new queue.</p>
        public let queueName: Swift.String?

        public init (
            deadLetterTargetArn: Swift.String? = nil,
            kmsDataKeyReusePeriodSeconds: Swift.Int = 0,
            kmsMasterKeyId: Swift.String? = nil,
            queueName: Swift.String? = nil
        )
        {
            self.deadLetterTargetArn = deadLetterTargetArn
            self.kmsDataKeyReusePeriodSeconds = kmsDataKeyReusePeriodSeconds
            self.kmsMasterKeyId = kmsMasterKeyId
            self.queueName = queueName
        }
    }

}

extension SecurityHubClientTypes.AwsSsmComplianceSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceType = "ComplianceType"
        case compliantCriticalCount = "CompliantCriticalCount"
        case compliantHighCount = "CompliantHighCount"
        case compliantInformationalCount = "CompliantInformationalCount"
        case compliantLowCount = "CompliantLowCount"
        case compliantMediumCount = "CompliantMediumCount"
        case compliantUnspecifiedCount = "CompliantUnspecifiedCount"
        case executionType = "ExecutionType"
        case nonCompliantCriticalCount = "NonCompliantCriticalCount"
        case nonCompliantHighCount = "NonCompliantHighCount"
        case nonCompliantInformationalCount = "NonCompliantInformationalCount"
        case nonCompliantLowCount = "NonCompliantLowCount"
        case nonCompliantMediumCount = "NonCompliantMediumCount"
        case nonCompliantUnspecifiedCount = "NonCompliantUnspecifiedCount"
        case overallSeverity = "OverallSeverity"
        case patchBaselineId = "PatchBaselineId"
        case patchGroup = "PatchGroup"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceType = complianceType {
            try encodeContainer.encode(complianceType, forKey: .complianceType)
        }
        if compliantCriticalCount != 0 {
            try encodeContainer.encode(compliantCriticalCount, forKey: .compliantCriticalCount)
        }
        if compliantHighCount != 0 {
            try encodeContainer.encode(compliantHighCount, forKey: .compliantHighCount)
        }
        if compliantInformationalCount != 0 {
            try encodeContainer.encode(compliantInformationalCount, forKey: .compliantInformationalCount)
        }
        if compliantLowCount != 0 {
            try encodeContainer.encode(compliantLowCount, forKey: .compliantLowCount)
        }
        if compliantMediumCount != 0 {
            try encodeContainer.encode(compliantMediumCount, forKey: .compliantMediumCount)
        }
        if compliantUnspecifiedCount != 0 {
            try encodeContainer.encode(compliantUnspecifiedCount, forKey: .compliantUnspecifiedCount)
        }
        if let executionType = executionType {
            try encodeContainer.encode(executionType, forKey: .executionType)
        }
        if nonCompliantCriticalCount != 0 {
            try encodeContainer.encode(nonCompliantCriticalCount, forKey: .nonCompliantCriticalCount)
        }
        if nonCompliantHighCount != 0 {
            try encodeContainer.encode(nonCompliantHighCount, forKey: .nonCompliantHighCount)
        }
        if nonCompliantInformationalCount != 0 {
            try encodeContainer.encode(nonCompliantInformationalCount, forKey: .nonCompliantInformationalCount)
        }
        if nonCompliantLowCount != 0 {
            try encodeContainer.encode(nonCompliantLowCount, forKey: .nonCompliantLowCount)
        }
        if nonCompliantMediumCount != 0 {
            try encodeContainer.encode(nonCompliantMediumCount, forKey: .nonCompliantMediumCount)
        }
        if nonCompliantUnspecifiedCount != 0 {
            try encodeContainer.encode(nonCompliantUnspecifiedCount, forKey: .nonCompliantUnspecifiedCount)
        }
        if let overallSeverity = overallSeverity {
            try encodeContainer.encode(overallSeverity, forKey: .overallSeverity)
        }
        if let patchBaselineId = patchBaselineId {
            try encodeContainer.encode(patchBaselineId, forKey: .patchBaselineId)
        }
        if let patchGroup = patchGroup {
            try encodeContainer.encode(patchGroup, forKey: .patchGroup)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .status)
        status = statusDecoded
        let compliantCriticalCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .compliantCriticalCount)
        compliantCriticalCount = compliantCriticalCountDecoded
        let compliantHighCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .compliantHighCount)
        compliantHighCount = compliantHighCountDecoded
        let compliantMediumCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .compliantMediumCount)
        compliantMediumCount = compliantMediumCountDecoded
        let executionTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .executionType)
        executionType = executionTypeDecoded
        let nonCompliantCriticalCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .nonCompliantCriticalCount)
        nonCompliantCriticalCount = nonCompliantCriticalCountDecoded
        let compliantInformationalCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .compliantInformationalCount)
        compliantInformationalCount = compliantInformationalCountDecoded
        let nonCompliantInformationalCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .nonCompliantInformationalCount)
        nonCompliantInformationalCount = nonCompliantInformationalCountDecoded
        let compliantUnspecifiedCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .compliantUnspecifiedCount)
        compliantUnspecifiedCount = compliantUnspecifiedCountDecoded
        let nonCompliantLowCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .nonCompliantLowCount)
        nonCompliantLowCount = nonCompliantLowCountDecoded
        let nonCompliantHighCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .nonCompliantHighCount)
        nonCompliantHighCount = nonCompliantHighCountDecoded
        let compliantLowCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .compliantLowCount)
        compliantLowCount = compliantLowCountDecoded
        let complianceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .complianceType)
        complianceType = complianceTypeDecoded
        let patchBaselineIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .patchBaselineId)
        patchBaselineId = patchBaselineIdDecoded
        let overallSeverityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .overallSeverity)
        overallSeverity = overallSeverityDecoded
        let nonCompliantMediumCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .nonCompliantMediumCount)
        nonCompliantMediumCount = nonCompliantMediumCountDecoded
        let nonCompliantUnspecifiedCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .nonCompliantUnspecifiedCount)
        nonCompliantUnspecifiedCount = nonCompliantUnspecifiedCountDecoded
        let patchGroupDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .patchGroup)
        patchGroup = patchGroupDecoded
    }
}

extension SecurityHubClientTypes.AwsSsmComplianceSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsSsmComplianceSummary(complianceType: \(Swift.String(describing: complianceType)), compliantCriticalCount: \(Swift.String(describing: compliantCriticalCount)), compliantHighCount: \(Swift.String(describing: compliantHighCount)), compliantInformationalCount: \(Swift.String(describing: compliantInformationalCount)), compliantLowCount: \(Swift.String(describing: compliantLowCount)), compliantMediumCount: \(Swift.String(describing: compliantMediumCount)), compliantUnspecifiedCount: \(Swift.String(describing: compliantUnspecifiedCount)), executionType: \(Swift.String(describing: executionType)), nonCompliantCriticalCount: \(Swift.String(describing: nonCompliantCriticalCount)), nonCompliantHighCount: \(Swift.String(describing: nonCompliantHighCount)), nonCompliantInformationalCount: \(Swift.String(describing: nonCompliantInformationalCount)), nonCompliantLowCount: \(Swift.String(describing: nonCompliantLowCount)), nonCompliantMediumCount: \(Swift.String(describing: nonCompliantMediumCount)), nonCompliantUnspecifiedCount: \(Swift.String(describing: nonCompliantUnspecifiedCount)), overallSeverity: \(Swift.String(describing: overallSeverity)), patchBaselineId: \(Swift.String(describing: patchBaselineId)), patchGroup: \(Swift.String(describing: patchGroup)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides the details about the compliance status for a patch.</p>
    public struct AwsSsmComplianceSummary: Swift.Equatable {
        /// <p>The type of resource for which the compliance was determined. For
        ///             <code>AwsSsmPatchCompliance</code>, <code>ComplianceType</code> is <code>Patch</code>. </p>
        public let complianceType: Swift.String?
        /// <p>For the patches that are compliant, the number that have a severity of
        ///             <code>CRITICAL</code>.</p>
        public let compliantCriticalCount: Swift.Int
        /// <p>For the patches that are compliant, the number that have a severity of
        ///          <code>HIGH</code>.</p>
        public let compliantHighCount: Swift.Int
        /// <p>For the patches that are compliant, the number that have a severity of
        ///             <code>INFORMATIONAL</code>.</p>
        public let compliantInformationalCount: Swift.Int
        /// <p>For the patches that are compliant, the number that have a severity of
        ///          <code>LOW</code>.</p>
        public let compliantLowCount: Swift.Int
        /// <p>For the patches that are compliant, the number that have a severity of
        ///             <code>MEDIUM</code>.</p>
        public let compliantMediumCount: Swift.Int
        /// <p>For the patches that are compliant, the number that have a severity of
        ///             <code>UNSPECIFIED</code>.</p>
        public let compliantUnspecifiedCount: Swift.Int
        /// <p>The type of execution that was used determine compliance.</p>
        public let executionType: Swift.String?
        /// <p>For the patch items that are noncompliant, the number of items that have a severity of
        ///             <code>CRITICAL</code>.</p>
        public let nonCompliantCriticalCount: Swift.Int
        /// <p>For the patches that are noncompliant, the number that have a severity of
        ///             <code>HIGH</code>.</p>
        public let nonCompliantHighCount: Swift.Int
        /// <p>For the patches that are noncompliant, the number that have a severity of
        ///             <code>INFORMATIONAL</code>.</p>
        public let nonCompliantInformationalCount: Swift.Int
        /// <p>For the patches that are noncompliant, the number that have a severity of
        ///             <code>LOW</code>.</p>
        public let nonCompliantLowCount: Swift.Int
        /// <p>For the patches that are noncompliant, the number that have a severity of
        ///             <code>MEDIUM</code>.</p>
        public let nonCompliantMediumCount: Swift.Int
        /// <p>For the patches that are noncompliant, the number that have a severity of
        ///             <code>UNSPECIFIED</code>.</p>
        public let nonCompliantUnspecifiedCount: Swift.Int
        /// <p>The highest severity for the patches.</p>
        public let overallSeverity: Swift.String?
        /// <p>The identifier of the patch baseline. The patch baseline lists the patches that are
        ///          approved for installation.</p>
        public let patchBaselineId: Swift.String?
        /// <p>The identifier of the patch group for which compliance was determined. A patch group
        ///          uses tags to group EC2 instances that should have the same patch compliance.</p>
        public let patchGroup: Swift.String?
        /// <p>The current patch compliance status.</p>
        ///          <p>The possible status values are:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>COMPLIANT</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NON_COMPLIANT</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>UNSPECIFIED_DATA</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let status: Swift.String?

        public init (
            complianceType: Swift.String? = nil,
            compliantCriticalCount: Swift.Int = 0,
            compliantHighCount: Swift.Int = 0,
            compliantInformationalCount: Swift.Int = 0,
            compliantLowCount: Swift.Int = 0,
            compliantMediumCount: Swift.Int = 0,
            compliantUnspecifiedCount: Swift.Int = 0,
            executionType: Swift.String? = nil,
            nonCompliantCriticalCount: Swift.Int = 0,
            nonCompliantHighCount: Swift.Int = 0,
            nonCompliantInformationalCount: Swift.Int = 0,
            nonCompliantLowCount: Swift.Int = 0,
            nonCompliantMediumCount: Swift.Int = 0,
            nonCompliantUnspecifiedCount: Swift.Int = 0,
            overallSeverity: Swift.String? = nil,
            patchBaselineId: Swift.String? = nil,
            patchGroup: Swift.String? = nil,
            status: Swift.String? = nil
        )
        {
            self.complianceType = complianceType
            self.compliantCriticalCount = compliantCriticalCount
            self.compliantHighCount = compliantHighCount
            self.compliantInformationalCount = compliantInformationalCount
            self.compliantLowCount = compliantLowCount
            self.compliantMediumCount = compliantMediumCount
            self.compliantUnspecifiedCount = compliantUnspecifiedCount
            self.executionType = executionType
            self.nonCompliantCriticalCount = nonCompliantCriticalCount
            self.nonCompliantHighCount = nonCompliantHighCount
            self.nonCompliantInformationalCount = nonCompliantInformationalCount
            self.nonCompliantLowCount = nonCompliantLowCount
            self.nonCompliantMediumCount = nonCompliantMediumCount
            self.nonCompliantUnspecifiedCount = nonCompliantUnspecifiedCount
            self.overallSeverity = overallSeverity
            self.patchBaselineId = patchBaselineId
            self.patchGroup = patchGroup
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.AwsSsmPatch: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case complianceSummary = "ComplianceSummary"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let complianceSummary = complianceSummary {
            try encodeContainer.encode(complianceSummary, forKey: .complianceSummary)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let complianceSummaryDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSsmComplianceSummary.self, forKey: .complianceSummary)
        complianceSummary = complianceSummaryDecoded
    }
}

extension SecurityHubClientTypes.AwsSsmPatch: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsSsmPatch(complianceSummary: \(Swift.String(describing: complianceSummary)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides details about the compliance for a patch.</p>
    public struct AwsSsmPatch: Swift.Equatable {
        /// <p>The compliance status details for the patch.</p>
        public let complianceSummary: SecurityHubClientTypes.AwsSsmComplianceSummary?

        public init (
            complianceSummary: SecurityHubClientTypes.AwsSsmComplianceSummary? = nil
        )
        {
            self.complianceSummary = complianceSummary
        }
    }

}

extension SecurityHubClientTypes.AwsSsmPatchComplianceDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case patch = "Patch"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let patch = patch {
            try encodeContainer.encode(patch, forKey: .patch)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let patchDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSsmPatch.self, forKey: .patch)
        patch = patchDecoded
    }
}

extension SecurityHubClientTypes.AwsSsmPatchComplianceDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsSsmPatchComplianceDetails(patch: \(Swift.String(describing: patch)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about the state of a patch on an instance based on the patch
    ///          baseline that was used to patch the instance.</p>
    public struct AwsSsmPatchComplianceDetails: Swift.Equatable {
        /// <p>Information about the status of a patch.</p>
        public let patch: SecurityHubClientTypes.AwsSsmPatch?

        public init (
            patch: SecurityHubClientTypes.AwsSsmPatch? = nil
        )
        {
            self.patch = patch
        }
    }

}

extension SecurityHubClientTypes.AwsWafWebAclDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case defaultAction = "DefaultAction"
        case name = "Name"
        case rules = "Rules"
        case webAclId = "WebAclId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let defaultAction = defaultAction {
            try encodeContainer.encode(defaultAction, forKey: .defaultAction)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for awswafwebaclrulelist0 in rules {
                try rulesContainer.encode(awswafwebaclrulelist0)
            }
        }
        if let webAclId = webAclId {
            try encodeContainer.encode(webAclId, forKey: .webAclId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let defaultActionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .defaultAction)
        defaultAction = defaultActionDecoded
        let rulesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsWafWebAclRule?].self, forKey: .rules)
        var rulesDecoded0:[SecurityHubClientTypes.AwsWafWebAclRule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [SecurityHubClientTypes.AwsWafWebAclRule]()
            for structure0 in rulesContainer {
                if let structure0 = structure0 {
                    rulesDecoded0?.append(structure0)
                }
            }
        }
        rules = rulesDecoded0
        let webAclIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .webAclId)
        webAclId = webAclIdDecoded
    }
}

extension SecurityHubClientTypes.AwsWafWebAclDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsWafWebAclDetails(defaultAction: \(Swift.String(describing: defaultAction)), name: \(Swift.String(describing: name)), rules: \(Swift.String(describing: rules)), webAclId: \(Swift.String(describing: webAclId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about a WAF WebACL.</p>
    public struct AwsWafWebAclDetails: Swift.Equatable {
        /// <p>The action to perform if none of the rules contained in the WebACL match.</p>
        public let defaultAction: Swift.String?
        /// <p>A friendly name or description of the WebACL. You can't change the name of a WebACL
        ///          after you create it.</p>
        public let name: Swift.String?
        /// <p>An array that contains the action for each rule in a WebACL, the priority of the rule,
        ///          and the ID of the rule.</p>
        public let rules: [SecurityHubClientTypes.AwsWafWebAclRule]?
        /// <p>A unique identifier for a WebACL.</p>
        public let webAclId: Swift.String?

        public init (
            defaultAction: Swift.String? = nil,
            name: Swift.String? = nil,
            rules: [SecurityHubClientTypes.AwsWafWebAclRule]? = nil,
            webAclId: Swift.String? = nil
        )
        {
            self.defaultAction = defaultAction
            self.name = name
            self.rules = rules
            self.webAclId = webAclId
        }
    }

}

extension SecurityHubClientTypes.AwsWafWebAclRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case action = "Action"
        case excludedRules = "ExcludedRules"
        case overrideAction = "OverrideAction"
        case priority = "Priority"
        case ruleId = "RuleId"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try encodeContainer.encode(action, forKey: .action)
        }
        if let excludedRules = excludedRules {
            var excludedRulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .excludedRules)
            for wafexcludedrulelist0 in excludedRules {
                try excludedRulesContainer.encode(wafexcludedrulelist0)
            }
        }
        if let overrideAction = overrideAction {
            try encodeContainer.encode(overrideAction, forKey: .overrideAction)
        }
        if priority != 0 {
            try encodeContainer.encode(priority, forKey: .priority)
        }
        if let ruleId = ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.WafAction.self, forKey: .action)
        action = actionDecoded
        let excludedRulesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.WafExcludedRule?].self, forKey: .excludedRules)
        var excludedRulesDecoded0:[SecurityHubClientTypes.WafExcludedRule]? = nil
        if let excludedRulesContainer = excludedRulesContainer {
            excludedRulesDecoded0 = [SecurityHubClientTypes.WafExcludedRule]()
            for structure0 in excludedRulesContainer {
                if let structure0 = structure0 {
                    excludedRulesDecoded0?.append(structure0)
                }
            }
        }
        excludedRules = excludedRulesDecoded0
        let overrideActionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.WafOverrideAction.self, forKey: .overrideAction)
        overrideAction = overrideActionDecoded
        let priorityDecoded = try containerValues.decode(Swift.Int.self, forKey: .priority)
        priority = priorityDecoded
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension SecurityHubClientTypes.AwsWafWebAclRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AwsWafWebAclRule(action: \(Swift.String(describing: action)), excludedRules: \(Swift.String(describing: excludedRules)), overrideAction: \(Swift.String(describing: overrideAction)), priority: \(Swift.String(describing: priority)), ruleId: \(Swift.String(describing: ruleId)), type: \(Swift.String(describing: type)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details for a rule in a WAF WebACL.</p>
    public struct AwsWafWebAclRule: Swift.Equatable {
        /// <p>Specifies the action that CloudFront or AWS WAF takes when a web request matches the
        ///          conditions in the rule. </p>
        public let action: SecurityHubClientTypes.WafAction?
        /// <p>Rules to exclude from a rule group.</p>
        public let excludedRules: [SecurityHubClientTypes.WafExcludedRule]?
        /// <p>Use the <code>OverrideAction</code> to test your RuleGroup.</p>
        ///          <p>Any rule in a RuleGroup can potentially block a request. If you set the
        ///             <code>OverrideAction</code> to <code>None</code>, the RuleGroup blocks a request if any
        ///          individual rule in the RuleGroup matches the request and is configured to block that
        ///          request.</p>
        ///          <p>However, if you first want to test the RuleGroup, set the <code>OverrideAction</code> to
        ///             <code>Count</code>. The RuleGroup then overrides any block action specified by
        ///          individual rules contained within the group. Instead of blocking matching requests, those
        ///          requests are counted.</p>
        ///          <p>
        ///             <code>ActivatedRule</code>|<code>OverrideAction</code> applies only when updating or
        ///          adding a RuleGroup to a WebACL. In this case you do not use
        ///             <code>ActivatedRule</code>|<code>Action</code>. For all other update requests,
        ///             <code>ActivatedRule</code>|<code>Action</code> is used instead of
        ///             <code>ActivatedRule</code>|<code>OverrideAction</code>. </p>
        public let overrideAction: SecurityHubClientTypes.WafOverrideAction?
        /// <p>Specifies the order in which the rules in a WebACL are evaluated. Rules with a lower
        ///          value for <code>Priority</code> are evaluated before rules with a higher value. The value
        ///          must be a unique integer. If you add multiple rules to a WebACL, the values do not need to
        ///          be consecutive.</p>
        public let priority: Swift.Int
        /// <p>The identifier for a rule.</p>
        public let ruleId: Swift.String?
        /// <p>The rule type.</p>
        ///          <p>Valid values: <code>REGULAR</code> | <code>RATE_BASED</code> | <code>GROUP</code>
        ///          </p>
        ///          <p>The default is <code>REGULAR</code>.</p>
        public let type: Swift.String?

        public init (
            action: SecurityHubClientTypes.WafAction? = nil,
            excludedRules: [SecurityHubClientTypes.WafExcludedRule]? = nil,
            overrideAction: SecurityHubClientTypes.WafOverrideAction? = nil,
            priority: Swift.Int = 0,
            ruleId: Swift.String? = nil,
            type: Swift.String? = nil
        )
        {
            self.action = action
            self.excludedRules = excludedRules
            self.overrideAction = overrideAction
            self.priority = priority
            self.ruleId = ruleId
            self.type = type
        }
    }

}

public struct BatchDisableStandardsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchDisableStandardsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchDisableStandardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchDisableStandardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchDisableStandardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchDisableStandardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchDisableStandardsOutputError>
}

extension BatchDisableStandardsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDisableStandardsInput(standardsSubscriptionArns: \(Swift.String(describing: standardsSubscriptionArns)))"}
}

extension BatchDisableStandardsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case standardsSubscriptionArns = "StandardsSubscriptionArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let standardsSubscriptionArns = standardsSubscriptionArns {
            var standardsSubscriptionArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .standardsSubscriptionArns)
            for standardssubscriptionarns0 in standardsSubscriptionArns {
                try standardsSubscriptionArnsContainer.encode(standardssubscriptionarns0)
            }
        }
    }
}

public struct BatchDisableStandardsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchDisableStandardsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchDisableStandardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchDisableStandardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchDisableStandardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchDisableStandardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchDisableStandardsOutputError>
}

public struct BatchDisableStandardsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchDisableStandardsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchDisableStandardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchDisableStandardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchDisableStandardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchDisableStandardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchDisableStandardsOutputError>
}

public struct BatchDisableStandardsInput: Swift.Equatable {
    /// <p>The ARNs of the standards subscriptions to disable.</p>
    public let standardsSubscriptionArns: [Swift.String]?

    public init (
        standardsSubscriptionArns: [Swift.String]? = nil
    )
    {
        self.standardsSubscriptionArns = standardsSubscriptionArns
    }
}

struct BatchDisableStandardsInputBody: Swift.Equatable {
    public let standardsSubscriptionArns: [Swift.String]?
}

extension BatchDisableStandardsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case standardsSubscriptionArns = "StandardsSubscriptionArns"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let standardsSubscriptionArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .standardsSubscriptionArns)
        var standardsSubscriptionArnsDecoded0:[Swift.String]? = nil
        if let standardsSubscriptionArnsContainer = standardsSubscriptionArnsContainer {
            standardsSubscriptionArnsDecoded0 = [Swift.String]()
            for string0 in standardsSubscriptionArnsContainer {
                if let string0 = string0 {
                    standardsSubscriptionArnsDecoded0?.append(string0)
                }
            }
        }
        standardsSubscriptionArns = standardsSubscriptionArnsDecoded0
    }
}

extension BatchDisableStandardsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchDisableStandardsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchDisableStandardsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchDisableStandardsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchDisableStandardsOutputResponse(standardsSubscriptions: \(Swift.String(describing: standardsSubscriptions)))"}
}

extension BatchDisableStandardsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchDisableStandardsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.standardsSubscriptions = output.standardsSubscriptions
        } else {
            self.standardsSubscriptions = nil
        }
    }
}

public struct BatchDisableStandardsOutputResponse: Swift.Equatable {
    /// <p>The details of the standards subscriptions that were disabled.</p>
    public let standardsSubscriptions: [SecurityHubClientTypes.StandardsSubscription]?

    public init (
        standardsSubscriptions: [SecurityHubClientTypes.StandardsSubscription]? = nil
    )
    {
        self.standardsSubscriptions = standardsSubscriptions
    }
}

struct BatchDisableStandardsOutputResponseBody: Swift.Equatable {
    public let standardsSubscriptions: [SecurityHubClientTypes.StandardsSubscription]?
}

extension BatchDisableStandardsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case standardsSubscriptions = "StandardsSubscriptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let standardsSubscriptionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StandardsSubscription?].self, forKey: .standardsSubscriptions)
        var standardsSubscriptionsDecoded0:[SecurityHubClientTypes.StandardsSubscription]? = nil
        if let standardsSubscriptionsContainer = standardsSubscriptionsContainer {
            standardsSubscriptionsDecoded0 = [SecurityHubClientTypes.StandardsSubscription]()
            for structure0 in standardsSubscriptionsContainer {
                if let structure0 = structure0 {
                    standardsSubscriptionsDecoded0?.append(structure0)
                }
            }
        }
        standardsSubscriptions = standardsSubscriptionsDecoded0
    }
}

public struct BatchEnableStandardsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchEnableStandardsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchEnableStandardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchEnableStandardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchEnableStandardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchEnableStandardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchEnableStandardsOutputError>
}

extension BatchEnableStandardsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchEnableStandardsInput(standardsSubscriptionRequests: \(Swift.String(describing: standardsSubscriptionRequests)))"}
}

extension BatchEnableStandardsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case standardsSubscriptionRequests = "StandardsSubscriptionRequests"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let standardsSubscriptionRequests = standardsSubscriptionRequests {
            var standardsSubscriptionRequestsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .standardsSubscriptionRequests)
            for standardssubscriptionrequests0 in standardsSubscriptionRequests {
                try standardsSubscriptionRequestsContainer.encode(standardssubscriptionrequests0)
            }
        }
    }
}

public struct BatchEnableStandardsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchEnableStandardsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchEnableStandardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchEnableStandardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchEnableStandardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchEnableStandardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchEnableStandardsOutputError>
}

public struct BatchEnableStandardsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchEnableStandardsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchEnableStandardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchEnableStandardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchEnableStandardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchEnableStandardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchEnableStandardsOutputError>
}

public struct BatchEnableStandardsInput: Swift.Equatable {
    /// <p>The list of standards checks to enable.</p>
    public let standardsSubscriptionRequests: [SecurityHubClientTypes.StandardsSubscriptionRequest]?

    public init (
        standardsSubscriptionRequests: [SecurityHubClientTypes.StandardsSubscriptionRequest]? = nil
    )
    {
        self.standardsSubscriptionRequests = standardsSubscriptionRequests
    }
}

struct BatchEnableStandardsInputBody: Swift.Equatable {
    public let standardsSubscriptionRequests: [SecurityHubClientTypes.StandardsSubscriptionRequest]?
}

extension BatchEnableStandardsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case standardsSubscriptionRequests = "StandardsSubscriptionRequests"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let standardsSubscriptionRequestsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StandardsSubscriptionRequest?].self, forKey: .standardsSubscriptionRequests)
        var standardsSubscriptionRequestsDecoded0:[SecurityHubClientTypes.StandardsSubscriptionRequest]? = nil
        if let standardsSubscriptionRequestsContainer = standardsSubscriptionRequestsContainer {
            standardsSubscriptionRequestsDecoded0 = [SecurityHubClientTypes.StandardsSubscriptionRequest]()
            for structure0 in standardsSubscriptionRequestsContainer {
                if let structure0 = structure0 {
                    standardsSubscriptionRequestsDecoded0?.append(structure0)
                }
            }
        }
        standardsSubscriptionRequests = standardsSubscriptionRequestsDecoded0
    }
}

extension BatchEnableStandardsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchEnableStandardsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchEnableStandardsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchEnableStandardsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchEnableStandardsOutputResponse(standardsSubscriptions: \(Swift.String(describing: standardsSubscriptions)))"}
}

extension BatchEnableStandardsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchEnableStandardsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.standardsSubscriptions = output.standardsSubscriptions
        } else {
            self.standardsSubscriptions = nil
        }
    }
}

public struct BatchEnableStandardsOutputResponse: Swift.Equatable {
    /// <p>The details of the standards subscriptions that were enabled.</p>
    public let standardsSubscriptions: [SecurityHubClientTypes.StandardsSubscription]?

    public init (
        standardsSubscriptions: [SecurityHubClientTypes.StandardsSubscription]? = nil
    )
    {
        self.standardsSubscriptions = standardsSubscriptions
    }
}

struct BatchEnableStandardsOutputResponseBody: Swift.Equatable {
    public let standardsSubscriptions: [SecurityHubClientTypes.StandardsSubscription]?
}

extension BatchEnableStandardsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case standardsSubscriptions = "StandardsSubscriptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let standardsSubscriptionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StandardsSubscription?].self, forKey: .standardsSubscriptions)
        var standardsSubscriptionsDecoded0:[SecurityHubClientTypes.StandardsSubscription]? = nil
        if let standardsSubscriptionsContainer = standardsSubscriptionsContainer {
            standardsSubscriptionsDecoded0 = [SecurityHubClientTypes.StandardsSubscription]()
            for structure0 in standardsSubscriptionsContainer {
                if let structure0 = structure0 {
                    standardsSubscriptionsDecoded0?.append(structure0)
                }
            }
        }
        standardsSubscriptions = standardsSubscriptionsDecoded0
    }
}

public struct BatchImportFindingsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchImportFindingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchImportFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchImportFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchImportFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchImportFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchImportFindingsOutputError>
}

extension BatchImportFindingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchImportFindingsInput(findings: \(Swift.String(describing: findings)))"}
}

extension BatchImportFindingsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case findings = "Findings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let findings = findings {
            var findingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findings)
            for batchimportfindingsrequestfindinglist0 in findings {
                try findingsContainer.encode(batchimportfindingsrequestfindinglist0)
            }
        }
    }
}

public struct BatchImportFindingsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchImportFindingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchImportFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchImportFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchImportFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchImportFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchImportFindingsOutputError>
}

public struct BatchImportFindingsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchImportFindingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchImportFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchImportFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchImportFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchImportFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchImportFindingsOutputError>
}

public struct BatchImportFindingsInput: Swift.Equatable {
    /// <p>A list of findings to import. To successfully import a finding, it must follow the
    ///             <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-findings-format.html">AWS Security Finding Format</a>. Maximum of 100 findings per request.</p>
    public let findings: [SecurityHubClientTypes.AwsSecurityFinding]?

    public init (
        findings: [SecurityHubClientTypes.AwsSecurityFinding]? = nil
    )
    {
        self.findings = findings
    }
}

struct BatchImportFindingsInputBody: Swift.Equatable {
    public let findings: [SecurityHubClientTypes.AwsSecurityFinding]?
}

extension BatchImportFindingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case findings = "Findings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsSecurityFinding?].self, forKey: .findings)
        var findingsDecoded0:[SecurityHubClientTypes.AwsSecurityFinding]? = nil
        if let findingsContainer = findingsContainer {
            findingsDecoded0 = [SecurityHubClientTypes.AwsSecurityFinding]()
            for structure0 in findingsContainer {
                if let structure0 = structure0 {
                    findingsDecoded0?.append(structure0)
                }
            }
        }
        findings = findingsDecoded0
    }
}

extension BatchImportFindingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchImportFindingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchImportFindingsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchImportFindingsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchImportFindingsOutputResponse(failedCount: \(Swift.String(describing: failedCount)), failedFindings: \(Swift.String(describing: failedFindings)), successCount: \(Swift.String(describing: successCount)))"}
}

extension BatchImportFindingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchImportFindingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failedCount = output.failedCount
            self.failedFindings = output.failedFindings
            self.successCount = output.successCount
        } else {
            self.failedCount = 0
            self.failedFindings = nil
            self.successCount = 0
        }
    }
}

public struct BatchImportFindingsOutputResponse: Swift.Equatable {
    /// <p>The number of findings that failed to import.</p>
    public let failedCount: Swift.Int
    /// <p>The list of findings that failed to import.</p>
    public let failedFindings: [SecurityHubClientTypes.ImportFindingsError]?
    /// <p>The number of findings that were successfully imported.</p>
    public let successCount: Swift.Int

    public init (
        failedCount: Swift.Int = 0,
        failedFindings: [SecurityHubClientTypes.ImportFindingsError]? = nil,
        successCount: Swift.Int = 0
    )
    {
        self.failedCount = failedCount
        self.failedFindings = failedFindings
        self.successCount = successCount
    }
}

struct BatchImportFindingsOutputResponseBody: Swift.Equatable {
    public let failedCount: Swift.Int
    public let successCount: Swift.Int
    public let failedFindings: [SecurityHubClientTypes.ImportFindingsError]?
}

extension BatchImportFindingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedCount = "FailedCount"
        case failedFindings = "FailedFindings"
        case successCount = "SuccessCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let failedCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .failedCount)
        failedCount = failedCountDecoded
        let successCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .successCount)
        successCount = successCountDecoded
        let failedFindingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.ImportFindingsError?].self, forKey: .failedFindings)
        var failedFindingsDecoded0:[SecurityHubClientTypes.ImportFindingsError]? = nil
        if let failedFindingsContainer = failedFindingsContainer {
            failedFindingsDecoded0 = [SecurityHubClientTypes.ImportFindingsError]()
            for structure0 in failedFindingsContainer {
                if let structure0 = structure0 {
                    failedFindingsDecoded0?.append(structure0)
                }
            }
        }
        failedFindings = failedFindingsDecoded0
    }
}

public struct BatchUpdateFindingsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchUpdateFindingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchUpdateFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchUpdateFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchUpdateFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchUpdateFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchUpdateFindingsOutputError>
}

extension BatchUpdateFindingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchUpdateFindingsInput(confidence: \(Swift.String(describing: confidence)), criticality: \(Swift.String(describing: criticality)), findingIdentifiers: \(Swift.String(describing: findingIdentifiers)), note: \(Swift.String(describing: note)), relatedFindings: \(Swift.String(describing: relatedFindings)), severity: \(Swift.String(describing: severity)), types: \(Swift.String(describing: types)), userDefinedFields: \(Swift.String(describing: userDefinedFields)), verificationState: \(Swift.String(describing: verificationState)), workflow: \(Swift.String(describing: workflow)))"}
}

extension BatchUpdateFindingsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case criticality = "Criticality"
        case findingIdentifiers = "FindingIdentifiers"
        case note = "Note"
        case relatedFindings = "RelatedFindings"
        case severity = "Severity"
        case types = "Types"
        case userDefinedFields = "UserDefinedFields"
        case verificationState = "VerificationState"
        case workflow = "Workflow"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if confidence != 0 {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if criticality != 0 {
            try encodeContainer.encode(criticality, forKey: .criticality)
        }
        if let findingIdentifiers = findingIdentifiers {
            var findingIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingIdentifiers)
            for awssecurityfindingidentifierlist0 in findingIdentifiers {
                try findingIdentifiersContainer.encode(awssecurityfindingidentifierlist0)
            }
        }
        if let note = note {
            try encodeContainer.encode(note, forKey: .note)
        }
        if let relatedFindings = relatedFindings {
            var relatedFindingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedFindings)
            for relatedfindinglist0 in relatedFindings {
                try relatedFindingsContainer.encode(relatedfindinglist0)
            }
        }
        if let severity = severity {
            try encodeContainer.encode(severity, forKey: .severity)
        }
        if let types = types {
            var typesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .types)
            for typelist0 in types {
                try typesContainer.encode(typelist0)
            }
        }
        if let userDefinedFields = userDefinedFields {
            var userDefinedFieldsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .userDefinedFields)
            for (dictKey0, fieldmap0) in userDefinedFields {
                try userDefinedFieldsContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let verificationState = verificationState {
            try encodeContainer.encode(verificationState.rawValue, forKey: .verificationState)
        }
        if let workflow = workflow {
            try encodeContainer.encode(workflow, forKey: .workflow)
        }
    }
}

public struct BatchUpdateFindingsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchUpdateFindingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchUpdateFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchUpdateFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchUpdateFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchUpdateFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchUpdateFindingsOutputError>
}

public struct BatchUpdateFindingsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "BatchUpdateFindingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<BatchUpdateFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<BatchUpdateFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<BatchUpdateFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<BatchUpdateFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<BatchUpdateFindingsOutputError>
}

public struct BatchUpdateFindingsInput: Swift.Equatable {
    /// <p>The updated value for the finding confidence. Confidence is defined as the likelihood
    ///          that a finding accurately identifies the behavior or issue that it was intended to
    ///          identify.</p>
    ///          <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent
    ///          confidence and 100 means 100 percent confidence.</p>
    public let confidence: Swift.Int
    /// <p>The updated value for the level of importance assigned to the resources associated with
    ///          the findings.</p>
    ///          <p>A score of 0 means that the underlying resources have no criticality, and a score of 100
    ///          is reserved for the most critical resources. </p>
    public let criticality: Swift.Int
    /// <p>The list of findings to update. <code>BatchUpdateFindings</code> can be used to update
    ///          up to 100 findings at a time.</p>
    ///          <p>For each finding, the list provides the finding identifier and the ARN of the finding
    ///          provider.</p>
    public let findingIdentifiers: [SecurityHubClientTypes.AwsSecurityFindingIdentifier]?
    /// <p>The updated note.</p>
    public let note: SecurityHubClientTypes.NoteUpdate?
    /// <p>A list of findings that are related to the updated findings.</p>
    public let relatedFindings: [SecurityHubClientTypes.RelatedFinding]?
    /// <p>Used to update the finding severity.</p>
    public let severity: SecurityHubClientTypes.SeverityUpdate?
    /// <p>One or more finding types in the format of namespace/category/classifier that classify a
    ///          finding.</p>
    ///          <p>Valid namespace values are as follows.</p>
    ///          <ul>
    ///             <li>
    ///                <p>Software and Configuration Checks</p>
    ///             </li>
    ///             <li>
    ///                <p>TTPs</p>
    ///             </li>
    ///             <li>
    ///                <p>Effects</p>
    ///             </li>
    ///             <li>
    ///                <p>Unusual Behaviors</p>
    ///             </li>
    ///             <li>
    ///                <p>Sensitive Data Identifications </p>
    ///             </li>
    ///          </ul>
    public let types: [Swift.String]?
    /// <p>A list of name/value string pairs associated with the finding. These are custom,
    ///          user-defined fields added to a finding.</p>
    public let userDefinedFields: [Swift.String:Swift.String]?
    /// <p>Indicates the veracity of a finding.</p>
    ///          <p>The available values for <code>VerificationState</code> are  as follows.</p>
    ///          <ul>
    ///             <li>
    ///                <p>
    ///                   <code>UNKNOWN</code> – The default disposition of a security finding</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>TRUE_POSITIVE</code> – The security finding is confirmed</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>FALSE_POSITIVE</code> – The security finding was determined to be a false
    ///                alarm</p>
    ///             </li>
    ///             <li>
    ///                <p>
    ///                   <code>BENIGN_POSITIVE</code> – A special case of <code>TRUE_POSITIVE</code> where
    ///                the finding doesn't pose any threat, is expected, or both</p>
    ///             </li>
    ///          </ul>
    public let verificationState: SecurityHubClientTypes.VerificationState?
    /// <p>Used to update the workflow status of a finding.</p>
    ///          <p>The workflow status indicates the progress of the investigation into the finding. </p>
    public let workflow: SecurityHubClientTypes.WorkflowUpdate?

    public init (
        confidence: Swift.Int = 0,
        criticality: Swift.Int = 0,
        findingIdentifiers: [SecurityHubClientTypes.AwsSecurityFindingIdentifier]? = nil,
        note: SecurityHubClientTypes.NoteUpdate? = nil,
        relatedFindings: [SecurityHubClientTypes.RelatedFinding]? = nil,
        severity: SecurityHubClientTypes.SeverityUpdate? = nil,
        types: [Swift.String]? = nil,
        userDefinedFields: [Swift.String:Swift.String]? = nil,
        verificationState: SecurityHubClientTypes.VerificationState? = nil,
        workflow: SecurityHubClientTypes.WorkflowUpdate? = nil
    )
    {
        self.confidence = confidence
        self.criticality = criticality
        self.findingIdentifiers = findingIdentifiers
        self.note = note
        self.relatedFindings = relatedFindings
        self.severity = severity
        self.types = types
        self.userDefinedFields = userDefinedFields
        self.verificationState = verificationState
        self.workflow = workflow
    }
}

struct BatchUpdateFindingsInputBody: Swift.Equatable {
    public let findingIdentifiers: [SecurityHubClientTypes.AwsSecurityFindingIdentifier]?
    public let note: SecurityHubClientTypes.NoteUpdate?
    public let severity: SecurityHubClientTypes.SeverityUpdate?
    public let verificationState: SecurityHubClientTypes.VerificationState?
    public let confidence: Swift.Int
    public let criticality: Swift.Int
    public let types: [Swift.String]?
    public let userDefinedFields: [Swift.String:Swift.String]?
    public let workflow: SecurityHubClientTypes.WorkflowUpdate?
    public let relatedFindings: [SecurityHubClientTypes.RelatedFinding]?
}

extension BatchUpdateFindingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case criticality = "Criticality"
        case findingIdentifiers = "FindingIdentifiers"
        case note = "Note"
        case relatedFindings = "RelatedFindings"
        case severity = "Severity"
        case types = "Types"
        case userDefinedFields = "UserDefinedFields"
        case verificationState = "VerificationState"
        case workflow = "Workflow"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingIdentifiersContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsSecurityFindingIdentifier?].self, forKey: .findingIdentifiers)
        var findingIdentifiersDecoded0:[SecurityHubClientTypes.AwsSecurityFindingIdentifier]? = nil
        if let findingIdentifiersContainer = findingIdentifiersContainer {
            findingIdentifiersDecoded0 = [SecurityHubClientTypes.AwsSecurityFindingIdentifier]()
            for structure0 in findingIdentifiersContainer {
                if let structure0 = structure0 {
                    findingIdentifiersDecoded0?.append(structure0)
                }
            }
        }
        findingIdentifiers = findingIdentifiersDecoded0
        let noteDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.NoteUpdate.self, forKey: .note)
        note = noteDecoded
        let severityDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.SeverityUpdate.self, forKey: .severity)
        severity = severityDecoded
        let verificationStateDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.VerificationState.self, forKey: .verificationState)
        verificationState = verificationStateDecoded
        let confidenceDecoded = try containerValues.decode(Swift.Int.self, forKey: .confidence)
        confidence = confidenceDecoded
        let criticalityDecoded = try containerValues.decode(Swift.Int.self, forKey: .criticality)
        criticality = criticalityDecoded
        let typesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .types)
        var typesDecoded0:[Swift.String]? = nil
        if let typesContainer = typesContainer {
            typesDecoded0 = [Swift.String]()
            for string0 in typesContainer {
                if let string0 = string0 {
                    typesDecoded0?.append(string0)
                }
            }
        }
        types = typesDecoded0
        let userDefinedFieldsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .userDefinedFields)
        var userDefinedFieldsDecoded0: [Swift.String:Swift.String]? = nil
        if let userDefinedFieldsContainer = userDefinedFieldsContainer {
            userDefinedFieldsDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in userDefinedFieldsContainer {
                if let nonemptystring0 = nonemptystring0 {
                    userDefinedFieldsDecoded0?[key0] = nonemptystring0
                }
            }
        }
        userDefinedFields = userDefinedFieldsDecoded0
        let workflowDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.WorkflowUpdate.self, forKey: .workflow)
        workflow = workflowDecoded
        let relatedFindingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.RelatedFinding?].self, forKey: .relatedFindings)
        var relatedFindingsDecoded0:[SecurityHubClientTypes.RelatedFinding]? = nil
        if let relatedFindingsContainer = relatedFindingsContainer {
            relatedFindingsDecoded0 = [SecurityHubClientTypes.RelatedFinding]()
            for structure0 in relatedFindingsContainer {
                if let structure0 = structure0 {
                    relatedFindingsDecoded0?.append(structure0)
                }
            }
        }
        relatedFindings = relatedFindingsDecoded0
    }
}

extension BatchUpdateFindingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension BatchUpdateFindingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum BatchUpdateFindingsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension BatchUpdateFindingsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchUpdateFindingsOutputResponse(processedFindings: \(Swift.String(describing: processedFindings)), unprocessedFindings: \(Swift.String(describing: unprocessedFindings)))"}
}

extension BatchUpdateFindingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BatchUpdateFindingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.processedFindings = output.processedFindings
            self.unprocessedFindings = output.unprocessedFindings
        } else {
            self.processedFindings = nil
            self.unprocessedFindings = nil
        }
    }
}

public struct BatchUpdateFindingsOutputResponse: Swift.Equatable {
    /// <p>The list of findings that were updated successfully.</p>
    public let processedFindings: [SecurityHubClientTypes.AwsSecurityFindingIdentifier]?
    /// <p>The list of findings that were not updated.</p>
    public let unprocessedFindings: [SecurityHubClientTypes.BatchUpdateFindingsUnprocessedFinding]?

    public init (
        processedFindings: [SecurityHubClientTypes.AwsSecurityFindingIdentifier]? = nil,
        unprocessedFindings: [SecurityHubClientTypes.BatchUpdateFindingsUnprocessedFinding]? = nil
    )
    {
        self.processedFindings = processedFindings
        self.unprocessedFindings = unprocessedFindings
    }
}

struct BatchUpdateFindingsOutputResponseBody: Swift.Equatable {
    public let processedFindings: [SecurityHubClientTypes.AwsSecurityFindingIdentifier]?
    public let unprocessedFindings: [SecurityHubClientTypes.BatchUpdateFindingsUnprocessedFinding]?
}

extension BatchUpdateFindingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case processedFindings = "ProcessedFindings"
        case unprocessedFindings = "UnprocessedFindings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let processedFindingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsSecurityFindingIdentifier?].self, forKey: .processedFindings)
        var processedFindingsDecoded0:[SecurityHubClientTypes.AwsSecurityFindingIdentifier]? = nil
        if let processedFindingsContainer = processedFindingsContainer {
            processedFindingsDecoded0 = [SecurityHubClientTypes.AwsSecurityFindingIdentifier]()
            for structure0 in processedFindingsContainer {
                if let structure0 = structure0 {
                    processedFindingsDecoded0?.append(structure0)
                }
            }
        }
        processedFindings = processedFindingsDecoded0
        let unprocessedFindingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.BatchUpdateFindingsUnprocessedFinding?].self, forKey: .unprocessedFindings)
        var unprocessedFindingsDecoded0:[SecurityHubClientTypes.BatchUpdateFindingsUnprocessedFinding]? = nil
        if let unprocessedFindingsContainer = unprocessedFindingsContainer {
            unprocessedFindingsDecoded0 = [SecurityHubClientTypes.BatchUpdateFindingsUnprocessedFinding]()
            for structure0 in unprocessedFindingsContainer {
                if let structure0 = structure0 {
                    unprocessedFindingsDecoded0?.append(structure0)
                }
            }
        }
        unprocessedFindings = unprocessedFindingsDecoded0
    }
}

extension SecurityHubClientTypes.BatchUpdateFindingsUnprocessedFinding: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case findingIdentifier = "FindingIdentifier"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let findingIdentifier = findingIdentifier {
            try encodeContainer.encode(findingIdentifier, forKey: .findingIdentifier)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingIdentifierDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSecurityFindingIdentifier.self, forKey: .findingIdentifier)
        findingIdentifier = findingIdentifierDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension SecurityHubClientTypes.BatchUpdateFindingsUnprocessedFinding: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BatchUpdateFindingsUnprocessedFinding(errorCode: \(Swift.String(describing: errorCode)), errorMessage: \(Swift.String(describing: errorMessage)), findingIdentifier: \(Swift.String(describing: findingIdentifier)))"}
}

extension SecurityHubClientTypes {
    /// <p>A finding from a <code>BatchUpdateFindings</code> request that Security Hub was unable to
    ///          update.</p>
    public struct BatchUpdateFindingsUnprocessedFinding: Swift.Equatable {
        /// <p>The code associated with the error.</p>
        public let errorCode: Swift.String?
        /// <p>The message associated with the error.</p>
        public let errorMessage: Swift.String?
        /// <p>The identifier of the finding that was not updated.</p>
        public let findingIdentifier: SecurityHubClientTypes.AwsSecurityFindingIdentifier?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            findingIdentifier: SecurityHubClientTypes.AwsSecurityFindingIdentifier? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.findingIdentifier = findingIdentifier
        }
    }

}

extension SecurityHubClientTypes.Cell: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cellReference = "CellReference"
        case column = "Column"
        case columnName = "ColumnName"
        case row = "Row"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cellReference = cellReference {
            try encodeContainer.encode(cellReference, forKey: .cellReference)
        }
        if column != 0 {
            try encodeContainer.encode(column, forKey: .column)
        }
        if let columnName = columnName {
            try encodeContainer.encode(columnName, forKey: .columnName)
        }
        if row != 0 {
            try encodeContainer.encode(row, forKey: .row)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let columnDecoded = try containerValues.decode(Swift.Int.self, forKey: .column)
        column = columnDecoded
        let rowDecoded = try containerValues.decode(Swift.Int.self, forKey: .row)
        row = rowDecoded
        let columnNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .columnName)
        columnName = columnNameDecoded
        let cellReferenceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cellReference)
        cellReference = cellReferenceDecoded
    }
}

extension SecurityHubClientTypes.Cell: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Cell(cellReference: \(Swift.String(describing: cellReference)), column: \(Swift.String(describing: column)), columnName: \(Swift.String(describing: columnName)), row: \(Swift.String(describing: row)))"}
}

extension SecurityHubClientTypes {
    /// <p>An occurrence of sensitive data detected in a Microsoft Excel workbook, comma-separated value (CSV) file, or tab-separated value (TSV) file.</p>
    public struct Cell: Swift.Equatable {
        /// <p>For a Microsoft Excel workbook, provides the location of the cell, as an absolute cell reference, that contains the data. For example, Sheet2!C5 for cell C5 on Sheet2.</p>
        public let cellReference: Swift.String?
        /// <p>The column number of the column that contains the data. For a Microsoft Excel workbook, the column number corresponds to the alphabetical column identifiers. For example, a value of 1 for Column corresponds to the A column in the workbook.</p>
        public let column: Swift.Int
        /// <p>The name of the column that contains the data.</p>
        public let columnName: Swift.String?
        /// <p>The row number of the row that contains the data.</p>
        public let row: Swift.Int

        public init (
            cellReference: Swift.String? = nil,
            column: Swift.Int = 0,
            columnName: Swift.String? = nil,
            row: Swift.Int = 0
        )
        {
            self.cellReference = cellReference
            self.column = column
            self.columnName = columnName
            self.row = row
        }
    }

}

extension SecurityHubClientTypes.CidrBlockAssociation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
        case cidrBlock = "CidrBlock"
        case cidrBlockState = "CidrBlockState"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationId = associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let cidrBlock = cidrBlock {
            try encodeContainer.encode(cidrBlock, forKey: .cidrBlock)
        }
        if let cidrBlockState = cidrBlockState {
            try encodeContainer.encode(cidrBlockState, forKey: .cidrBlockState)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let cidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrBlock)
        cidrBlock = cidrBlockDecoded
        let cidrBlockStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrBlockState)
        cidrBlockState = cidrBlockStateDecoded
    }
}

extension SecurityHubClientTypes.CidrBlockAssociation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CidrBlockAssociation(associationId: \(Swift.String(describing: associationId)), cidrBlock: \(Swift.String(describing: cidrBlock)), cidrBlockState: \(Swift.String(describing: cidrBlockState)))"}
}

extension SecurityHubClientTypes {
    /// <p>An IPv4 CIDR block association.</p>
    public struct CidrBlockAssociation: Swift.Equatable {
        /// <p>The association ID for the IPv4 CIDR block.</p>
        public let associationId: Swift.String?
        /// <p>The IPv4 CIDR block.</p>
        public let cidrBlock: Swift.String?
        /// <p>Information about the state of the IPv4 CIDR block.</p>
        public let cidrBlockState: Swift.String?

        public init (
            associationId: Swift.String? = nil,
            cidrBlock: Swift.String? = nil,
            cidrBlockState: Swift.String? = nil
        )
        {
            self.associationId = associationId
            self.cidrBlock = cidrBlock
            self.cidrBlockState = cidrBlockState
        }
    }

}

extension SecurityHubClientTypes.City: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cityName = "CityName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cityName = cityName {
            try encodeContainer.encode(cityName, forKey: .cityName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cityNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cityName)
        cityName = cityNameDecoded
    }
}

extension SecurityHubClientTypes.City: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "City(cityName: \(Swift.String(describing: cityName)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about a city.</p>
    public struct City: Swift.Equatable {
        /// <p>The name of the city.</p>
        public let cityName: Swift.String?

        public init (
            cityName: Swift.String? = nil
        )
        {
            self.cityName = cityName
        }
    }

}

extension SecurityHubClientTypes.ClassificationResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case additionalOccurrences = "AdditionalOccurrences"
        case customDataIdentifiers = "CustomDataIdentifiers"
        case mimeType = "MimeType"
        case sensitiveData = "SensitiveData"
        case sizeClassified = "SizeClassified"
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if additionalOccurrences != false {
            try encodeContainer.encode(additionalOccurrences, forKey: .additionalOccurrences)
        }
        if let customDataIdentifiers = customDataIdentifiers {
            try encodeContainer.encode(customDataIdentifiers, forKey: .customDataIdentifiers)
        }
        if let mimeType = mimeType {
            try encodeContainer.encode(mimeType, forKey: .mimeType)
        }
        if let sensitiveData = sensitiveData {
            var sensitiveDataContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sensitiveData)
            for sensitivedataresultlist0 in sensitiveData {
                try sensitiveDataContainer.encode(sensitivedataresultlist0)
            }
        }
        if sizeClassified != 0 {
            try encodeContainer.encode(sizeClassified, forKey: .sizeClassified)
        }
        if let status = status {
            try encodeContainer.encode(status, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mimeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mimeType)
        mimeType = mimeTypeDecoded
        let sizeClassifiedDecoded = try containerValues.decode(Swift.Int.self, forKey: .sizeClassified)
        sizeClassified = sizeClassifiedDecoded
        let additionalOccurrencesDecoded = try containerValues.decode(Swift.Bool.self, forKey: .additionalOccurrences)
        additionalOccurrences = additionalOccurrencesDecoded
        let statusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ClassificationStatus.self, forKey: .status)
        status = statusDecoded
        let sensitiveDataContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.SensitiveDataResult?].self, forKey: .sensitiveData)
        var sensitiveDataDecoded0:[SecurityHubClientTypes.SensitiveDataResult]? = nil
        if let sensitiveDataContainer = sensitiveDataContainer {
            sensitiveDataDecoded0 = [SecurityHubClientTypes.SensitiveDataResult]()
            for structure0 in sensitiveDataContainer {
                if let structure0 = structure0 {
                    sensitiveDataDecoded0?.append(structure0)
                }
            }
        }
        sensitiveData = sensitiveDataDecoded0
        let customDataIdentifiersDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.CustomDataIdentifiersResult.self, forKey: .customDataIdentifiers)
        customDataIdentifiers = customDataIdentifiersDecoded
    }
}

extension SecurityHubClientTypes.ClassificationResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ClassificationResult(additionalOccurrences: \(Swift.String(describing: additionalOccurrences)), customDataIdentifiers: \(Swift.String(describing: customDataIdentifiers)), mimeType: \(Swift.String(describing: mimeType)), sensitiveData: \(Swift.String(describing: sensitiveData)), sizeClassified: \(Swift.String(describing: sizeClassified)), status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about the sensitive data that was detected on the resource.</p>
    public struct ClassificationResult: Swift.Equatable {
        /// <p>Indicates whether there are additional occurrences of sensitive data that are not included in the finding. This occurs when the number of occurrences exceeds the maximum that can be included.</p>
        public let additionalOccurrences: Swift.Bool
        /// <p>Provides details about sensitive data that was identified based on customer-defined configuration.</p>
        public let customDataIdentifiers: SecurityHubClientTypes.CustomDataIdentifiersResult?
        /// <p>The type of content that the finding applies to.</p>
        public let mimeType: Swift.String?
        /// <p>Provides details about sensitive data that was identified based on built-in configuration.</p>
        public let sensitiveData: [SecurityHubClientTypes.SensitiveDataResult]?
        /// <p>The total size in bytes of the affected data.</p>
        public let sizeClassified: Swift.Int
        /// <p>The current status of the sensitive data detection.</p>
        public let status: SecurityHubClientTypes.ClassificationStatus?

        public init (
            additionalOccurrences: Swift.Bool = false,
            customDataIdentifiers: SecurityHubClientTypes.CustomDataIdentifiersResult? = nil,
            mimeType: Swift.String? = nil,
            sensitiveData: [SecurityHubClientTypes.SensitiveDataResult]? = nil,
            sizeClassified: Swift.Int = 0,
            status: SecurityHubClientTypes.ClassificationStatus? = nil
        )
        {
            self.additionalOccurrences = additionalOccurrences
            self.customDataIdentifiers = customDataIdentifiers
            self.mimeType = mimeType
            self.sensitiveData = sensitiveData
            self.sizeClassified = sizeClassified
            self.status = status
        }
    }

}

extension SecurityHubClientTypes.ClassificationStatus: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case reason = "Reason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension SecurityHubClientTypes.ClassificationStatus: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ClassificationStatus(code: \(Swift.String(describing: code)), reason: \(Swift.String(describing: reason)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides details about the current status of the sensitive data detection.</p>
    public struct ClassificationStatus: Swift.Equatable {
        /// <p>The code that represents the status of the sensitive data detection.</p>
        public let code: Swift.String?
        /// <p>A longer description of the current status of the sensitive data detection.</p>
        public let reason: Swift.String?

        public init (
            code: Swift.String? = nil,
            reason: Swift.String? = nil
        )
        {
            self.code = code
            self.reason = reason
        }
    }

}

extension SecurityHubClientTypes.Compliance: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case relatedRequirements = "RelatedRequirements"
        case status = "Status"
        case statusReasons = "StatusReasons"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let relatedRequirements = relatedRequirements {
            var relatedRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedRequirements)
            for relatedrequirementslist0 in relatedRequirements {
                try relatedRequirementsContainer.encode(relatedrequirementslist0)
            }
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
        if let statusReasons = statusReasons {
            var statusReasonsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .statusReasons)
            for statusreasonslist0 in statusReasons {
                try statusReasonsContainer.encode(statusreasonslist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ComplianceStatus.self, forKey: .status)
        status = statusDecoded
        let relatedRequirementsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .relatedRequirements)
        var relatedRequirementsDecoded0:[Swift.String]? = nil
        if let relatedRequirementsContainer = relatedRequirementsContainer {
            relatedRequirementsDecoded0 = [Swift.String]()
            for string0 in relatedRequirementsContainer {
                if let string0 = string0 {
                    relatedRequirementsDecoded0?.append(string0)
                }
            }
        }
        relatedRequirements = relatedRequirementsDecoded0
        let statusReasonsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StatusReason?].self, forKey: .statusReasons)
        var statusReasonsDecoded0:[SecurityHubClientTypes.StatusReason]? = nil
        if let statusReasonsContainer = statusReasonsContainer {
            statusReasonsDecoded0 = [SecurityHubClientTypes.StatusReason]()
            for structure0 in statusReasonsContainer {
                if let structure0 = structure0 {
                    statusReasonsDecoded0?.append(structure0)
                }
            }
        }
        statusReasons = statusReasonsDecoded0
    }
}

extension SecurityHubClientTypes.Compliance: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Compliance(relatedRequirements: \(Swift.String(describing: relatedRequirements)), status: \(Swift.String(describing: status)), statusReasons: \(Swift.String(describing: statusReasons)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains finding details that are specific to control-based findings. Only returned for
    ///          findings generated from controls.</p>
    public struct Compliance: Swift.Equatable {
        /// <p>For a control, the industry or regulatory framework requirements that are related to the
        ///          control. The check for that control is aligned with these requirements.</p>
        public let relatedRequirements: [Swift.String]?
        /// <p>The result of a standards check.</p>
        ///          <p>The valid values for <code>Status</code> are as follows.</p>
        ///          <ul>
        ///             <li>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <code>PASSED</code> - Standards check passed for all evaluated
        ///                      resources.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <code>WARNING</code> - Some information is missing or this check is not
        ///                      supported for your configuration.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <code>FAILED</code> - Standards check failed for at least one evaluated
        ///                      resource.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <code>NOT_AVAILABLE</code> - Check could not be performed due to a service
        ///                      outage, API error, or because the result of the AWS Config evaluation was
        ///                         <code>NOT_APPLICABLE</code>. If the AWS Config evaluation result was
        ///                         <code>NOT_APPLICABLE</code>, then after 3 days, Security Hub automatically archives
        ///                      the finding.</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///          </ul>
        public let status: SecurityHubClientTypes.ComplianceStatus?
        /// <p>For findings generated from controls, a list of reasons behind the value of
        ///             <code>Status</code>. For the list of status reason codes and their meanings, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-results.html#securityhub-standards-results-asff">Standards-related information in the ASFF</a> in the
        ///             <i>AWS Security Hub User Guide</i>. </p>
        public let statusReasons: [SecurityHubClientTypes.StatusReason]?

        public init (
            relatedRequirements: [Swift.String]? = nil,
            status: SecurityHubClientTypes.ComplianceStatus? = nil,
            statusReasons: [SecurityHubClientTypes.StatusReason]? = nil
        )
        {
            self.relatedRequirements = relatedRequirements
            self.status = status
            self.statusReasons = statusReasons
        }
    }

}

extension SecurityHubClientTypes {
    public enum ComplianceStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case notAvailable
        case passed
        case warning
        case sdkUnknown(Swift.String)

        public static var allCases: [ComplianceStatus] {
            return [
                .failed,
                .notAvailable,
                .passed,
                .warning,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .notAvailable: return "NOT_AVAILABLE"
            case .passed: return "PASSED"
            case .warning: return "WARNING"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ComplianceStatus(rawValue: rawValue) ?? ComplianceStatus.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes.ContainerDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case imageId = "ImageId"
        case imageName = "ImageName"
        case launchedAt = "LaunchedAt"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let imageId = imageId {
            try encodeContainer.encode(imageId, forKey: .imageId)
        }
        if let imageName = imageName {
            try encodeContainer.encode(imageName, forKey: .imageName)
        }
        if let launchedAt = launchedAt {
            try encodeContainer.encode(launchedAt, forKey: .launchedAt)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let imageIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageId)
        imageId = imageIdDecoded
        let imageNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .imageName)
        imageName = imageNameDecoded
        let launchedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchedAt)
        launchedAt = launchedAtDecoded
    }
}

extension SecurityHubClientTypes.ContainerDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContainerDetails(imageId: \(Swift.String(describing: imageId)), imageName: \(Swift.String(describing: imageName)), launchedAt: \(Swift.String(describing: launchedAt)), name: \(Swift.String(describing: name)))"}
}

extension SecurityHubClientTypes {
    /// <p>Container details related to a finding.</p>
    public struct ContainerDetails: Swift.Equatable {
        /// <p>The identifier of the image related to a finding.</p>
        public let imageId: Swift.String?
        /// <p>The name of the image related to a finding.</p>
        public let imageName: Swift.String?
        /// <p>Indicates when the container started.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let launchedAt: Swift.String?
        /// <p>The name of the container related to a finding.</p>
        public let name: Swift.String?

        public init (
            imageId: Swift.String? = nil,
            imageName: Swift.String? = nil,
            launchedAt: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.imageId = imageId
            self.imageName = imageName
            self.launchedAt = launchedAt
            self.name = name
        }
    }

}

extension SecurityHubClientTypes {
    public enum ControlStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case disabled
        case enabled
        case sdkUnknown(Swift.String)

        public static var allCases: [ControlStatus] {
            return [
                .disabled,
                .enabled,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .disabled: return "DISABLED"
            case .enabled: return "ENABLED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ControlStatus(rawValue: rawValue) ?? ControlStatus.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes.Country: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case countryCode = "CountryCode"
        case countryName = "CountryName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let countryCode = countryCode {
            try encodeContainer.encode(countryCode, forKey: .countryCode)
        }
        if let countryName = countryName {
            try encodeContainer.encode(countryName, forKey: .countryName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countryCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .countryCode)
        countryCode = countryCodeDecoded
        let countryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .countryName)
        countryName = countryNameDecoded
    }
}

extension SecurityHubClientTypes.Country: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Country(countryCode: \(Swift.String(describing: countryCode)), countryName: \(Swift.String(describing: countryName)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about a country.</p>
    public struct Country: Swift.Equatable {
        /// <p>The 2-letter ISO 3166 country code for the country.</p>
        public let countryCode: Swift.String?
        /// <p>The name of the country.</p>
        public let countryName: Swift.String?

        public init (
            countryCode: Swift.String? = nil,
            countryName: Swift.String? = nil
        )
        {
            self.countryCode = countryCode
            self.countryName = countryName
        }
    }

}

public struct CreateActionTargetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateActionTargetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateActionTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateActionTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateActionTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateActionTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateActionTargetOutputError>
}

extension CreateActionTargetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateActionTargetInput(description: \(Swift.String(describing: description)), id: \(Swift.String(describing: id)), name: \(Swift.String(describing: name)))"}
}

extension CreateActionTargetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case id = "Id"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct CreateActionTargetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateActionTargetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateActionTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateActionTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateActionTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateActionTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateActionTargetOutputError>
}

public struct CreateActionTargetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateActionTargetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateActionTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateActionTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateActionTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateActionTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateActionTargetOutputError>
}

public struct CreateActionTargetInput: Swift.Equatable {
    /// <p>The description for the custom action target.</p>
    public let description: Swift.String?
    /// <p>The ID for the custom action target.</p>
    public let id: Swift.String?
    /// <p>The name of the custom action target.</p>
    public let name: Swift.String?

    public init (
        description: Swift.String? = nil,
        id: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.description = description
        self.id = id
        self.name = name
    }
}

struct CreateActionTargetInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
    public let id: Swift.String?
}

extension CreateActionTargetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case id = "Id"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension CreateActionTargetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateActionTargetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceConflictException" : self = .resourceConflictException(try ResourceConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateActionTargetOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceConflictException(ResourceConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateActionTargetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateActionTargetOutputResponse(actionTargetArn: \(Swift.String(describing: actionTargetArn)))"}
}

extension CreateActionTargetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateActionTargetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionTargetArn = output.actionTargetArn
        } else {
            self.actionTargetArn = nil
        }
    }
}

public struct CreateActionTargetOutputResponse: Swift.Equatable {
    /// <p>The ARN for the custom action target.</p>
    public let actionTargetArn: Swift.String?

    public init (
        actionTargetArn: Swift.String? = nil
    )
    {
        self.actionTargetArn = actionTargetArn
    }
}

struct CreateActionTargetOutputResponseBody: Swift.Equatable {
    public let actionTargetArn: Swift.String?
}

extension CreateActionTargetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionTargetArn = "ActionTargetArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTargetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionTargetArn)
        actionTargetArn = actionTargetArnDecoded
    }
}

public struct CreateInsightInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInsightInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInsightInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInsightInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInsightOutputError>
}

extension CreateInsightInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInsightInput(filters: \(Swift.String(describing: filters)), groupByAttribute: \(Swift.String(describing: groupByAttribute)), name: \(Swift.String(describing: name)))"}
}

extension CreateInsightInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case groupByAttribute = "GroupByAttribute"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let groupByAttribute = groupByAttribute {
            try encodeContainer.encode(groupByAttribute, forKey: .groupByAttribute)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct CreateInsightInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInsightInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInsightInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInsightInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInsightOutputError>
}

public struct CreateInsightInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateInsightInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateInsightInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateInsightInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateInsightOutputError>
}

public struct CreateInsightInput: Swift.Equatable {
    /// <p>One or more attributes used to filter the findings included in the insight. The insight
    ///          only includes findings that match the criteria defined in the filters.</p>
    public let filters: SecurityHubClientTypes.AwsSecurityFindingFilters?
    /// <p>The attribute used to group the findings for the insight. The grouping attribute
    ///          identifies the type of item that the insight applies to. For example, if an insight is
    ///          grouped by resource identifier, then the insight produces a list of resource
    ///          identifiers.</p>
    public let groupByAttribute: Swift.String?
    /// <p>The name of the custom insight to create.</p>
    public let name: Swift.String?

    public init (
        filters: SecurityHubClientTypes.AwsSecurityFindingFilters? = nil,
        groupByAttribute: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.filters = filters
        self.groupByAttribute = groupByAttribute
        self.name = name
    }
}

struct CreateInsightInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let filters: SecurityHubClientTypes.AwsSecurityFindingFilters?
    public let groupByAttribute: Swift.String?
}

extension CreateInsightInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case groupByAttribute = "GroupByAttribute"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSecurityFindingFilters.self, forKey: .filters)
        filters = filtersDecoded
        let groupByAttributeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupByAttribute)
        groupByAttribute = groupByAttributeDecoded
    }
}

extension CreateInsightOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateInsightOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceConflictException" : self = .resourceConflictException(try ResourceConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateInsightOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceConflictException(ResourceConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateInsightOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateInsightOutputResponse(insightArn: \(Swift.String(describing: insightArn)))"}
}

extension CreateInsightOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateInsightOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.insightArn = output.insightArn
        } else {
            self.insightArn = nil
        }
    }
}

public struct CreateInsightOutputResponse: Swift.Equatable {
    /// <p>The ARN of the insight created.</p>
    public let insightArn: Swift.String?

    public init (
        insightArn: Swift.String? = nil
    )
    {
        self.insightArn = insightArn
    }
}

struct CreateInsightOutputResponseBody: Swift.Equatable {
    public let insightArn: Swift.String?
}

extension CreateInsightOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightArn = "InsightArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .insightArn)
        insightArn = insightArnDecoded
    }
}

public struct CreateMembersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMembersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMembersOutputError>
}

extension CreateMembersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMembersInput(accountDetails: \(Swift.String(describing: accountDetails)))"}
}

extension CreateMembersInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountDetails = "AccountDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountDetails = accountDetails {
            var accountDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountDetails)
            for accountdetailslist0 in accountDetails {
                try accountDetailsContainer.encode(accountdetailslist0)
            }
        }
    }
}

public struct CreateMembersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMembersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMembersOutputError>
}

public struct CreateMembersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMembersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMembersOutputError>
}

public struct CreateMembersInput: Swift.Equatable {
    /// <p>The list of accounts to associate with the Security Hub administrator account. For each account, the
    ///          list includes the account ID and optionally the email address.</p>
    public let accountDetails: [SecurityHubClientTypes.AccountDetails]?

    public init (
        accountDetails: [SecurityHubClientTypes.AccountDetails]? = nil
    )
    {
        self.accountDetails = accountDetails
    }
}

struct CreateMembersInputBody: Swift.Equatable {
    public let accountDetails: [SecurityHubClientTypes.AccountDetails]?
}

extension CreateMembersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountDetails = "AccountDetails"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountDetailsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AccountDetails?].self, forKey: .accountDetails)
        var accountDetailsDecoded0:[SecurityHubClientTypes.AccountDetails]? = nil
        if let accountDetailsContainer = accountDetailsContainer {
            accountDetailsDecoded0 = [SecurityHubClientTypes.AccountDetails]()
            for structure0 in accountDetailsContainer {
                if let structure0 = structure0 {
                    accountDetailsDecoded0?.append(structure0)
                }
            }
        }
        accountDetails = accountDetailsDecoded0
    }
}

extension CreateMembersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMembersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceConflictException" : self = .resourceConflictException(try ResourceConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMembersOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceConflictException(ResourceConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMembersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMembersOutputResponse(unprocessedAccounts: \(Swift.String(describing: unprocessedAccounts)))"}
}

extension CreateMembersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateMembersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.unprocessedAccounts = output.unprocessedAccounts
        } else {
            self.unprocessedAccounts = nil
        }
    }
}

public struct CreateMembersOutputResponse: Swift.Equatable {
    /// <p>The list of AWS accounts that were not processed. For each account, the list includes
    ///          the account ID and the email address.</p>
    public let unprocessedAccounts: [SecurityHubClientTypes.Result]?

    public init (
        unprocessedAccounts: [SecurityHubClientTypes.Result]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

struct CreateMembersOutputResponseBody: Swift.Equatable {
    public let unprocessedAccounts: [SecurityHubClientTypes.Result]?
}

extension CreateMembersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case unprocessedAccounts = "UnprocessedAccounts"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let unprocessedAccountsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Result?].self, forKey: .unprocessedAccounts)
        var unprocessedAccountsDecoded0:[SecurityHubClientTypes.Result]? = nil
        if let unprocessedAccountsContainer = unprocessedAccountsContainer {
            unprocessedAccountsDecoded0 = [SecurityHubClientTypes.Result]()
            for structure0 in unprocessedAccountsContainer {
                if let structure0 = structure0 {
                    unprocessedAccountsDecoded0?.append(structure0)
                }
            }
        }
        unprocessedAccounts = unprocessedAccountsDecoded0
    }
}

extension SecurityHubClientTypes.CustomDataIdentifiersDetections: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case arn = "Arn"
        case count = "Count"
        case name = "Name"
        case occurrences = "Occurrences"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let arn = arn {
            try encodeContainer.encode(arn, forKey: .arn)
        }
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let occurrences = occurrences {
            try encodeContainer.encode(occurrences, forKey: .occurrences)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decode(Swift.Int.self, forKey: .count)
        count = countDecoded
        let arnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .arn)
        arn = arnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let occurrencesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Occurrences.self, forKey: .occurrences)
        occurrences = occurrencesDecoded
    }
}

extension SecurityHubClientTypes.CustomDataIdentifiersDetections: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomDataIdentifiersDetections(arn: \(Swift.String(describing: arn)), count: \(Swift.String(describing: count)), name: \(Swift.String(describing: name)), occurrences: \(Swift.String(describing: occurrences)))"}
}

extension SecurityHubClientTypes {
    /// <p>The list of detected instances of sensitive data.</p>
    public struct CustomDataIdentifiersDetections: Swift.Equatable {
        /// <p>The ARN of the custom identifier that was used to detect the sensitive data.</p>
        public let arn: Swift.String?
        /// <p>The total number of occurrences of sensitive data that were detected.</p>
        public let count: Swift.Int
        /// <p>he name of the custom identifier that detected the sensitive data.</p>
        public let name: Swift.String?
        /// <p>Details about the sensitive data that was detected.</p>
        public let occurrences: SecurityHubClientTypes.Occurrences?

        public init (
            arn: Swift.String? = nil,
            count: Swift.Int = 0,
            name: Swift.String? = nil,
            occurrences: SecurityHubClientTypes.Occurrences? = nil
        )
        {
            self.arn = arn
            self.count = count
            self.name = name
            self.occurrences = occurrences
        }
    }

}

extension SecurityHubClientTypes.CustomDataIdentifiersResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detections = "Detections"
        case totalCount = "TotalCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let detections = detections {
            var detectionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .detections)
            for customdataidentifiersdetectionslist0 in detections {
                try detectionsContainer.encode(customdataidentifiersdetectionslist0)
            }
        }
        if totalCount != 0 {
            try encodeContainer.encode(totalCount, forKey: .totalCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detectionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.CustomDataIdentifiersDetections?].self, forKey: .detections)
        var detectionsDecoded0:[SecurityHubClientTypes.CustomDataIdentifiersDetections]? = nil
        if let detectionsContainer = detectionsContainer {
            detectionsDecoded0 = [SecurityHubClientTypes.CustomDataIdentifiersDetections]()
            for structure0 in detectionsContainer {
                if let structure0 = structure0 {
                    detectionsDecoded0?.append(structure0)
                }
            }
        }
        detections = detectionsDecoded0
        let totalCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .totalCount)
        totalCount = totalCountDecoded
    }
}

extension SecurityHubClientTypes.CustomDataIdentifiersResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CustomDataIdentifiersResult(detections: \(Swift.String(describing: detections)), totalCount: \(Swift.String(describing: totalCount)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains an instance of sensitive data that was detected by a customer-defined identifier.</p>
    public struct CustomDataIdentifiersResult: Swift.Equatable {
        /// <p>The list of detected instances of sensitive data.</p>
        public let detections: [SecurityHubClientTypes.CustomDataIdentifiersDetections]?
        /// <p>The total number of occurrences of sensitive data.</p>
        public let totalCount: Swift.Int

        public init (
            detections: [SecurityHubClientTypes.CustomDataIdentifiersDetections]? = nil,
            totalCount: Swift.Int = 0
        )
        {
            self.detections = detections
            self.totalCount = totalCount
        }
    }

}

extension SecurityHubClientTypes.Cvss: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseScore = "BaseScore"
        case baseVector = "BaseVector"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if baseScore != 0.0 {
            try encodeContainer.encode(baseScore, forKey: .baseScore)
        }
        if let baseVector = baseVector {
            try encodeContainer.encode(baseVector, forKey: .baseVector)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let baseScoreDecoded = try containerValues.decode(Swift.Double.self, forKey: .baseScore)
        baseScore = baseScoreDecoded
        let baseVectorDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .baseVector)
        baseVector = baseVectorDecoded
    }
}

extension SecurityHubClientTypes.Cvss: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Cvss(baseScore: \(Swift.String(describing: baseScore)), baseVector: \(Swift.String(describing: baseVector)), version: \(Swift.String(describing: version)))"}
}

extension SecurityHubClientTypes {
    /// <p>CVSS scores from the advisory related to the vulnerability.</p>
    public struct Cvss: Swift.Equatable {
        /// <p>The base CVSS score.</p>
        public let baseScore: Swift.Double
        /// <p>The base scoring vector for the CVSS score.</p>
        public let baseVector: Swift.String?
        /// <p>The version of CVSS for the CVSS score.</p>
        public let version: Swift.String?

        public init (
            baseScore: Swift.Double = 0.0,
            baseVector: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.baseScore = baseScore
            self.baseVector = baseVector
            self.version = version
        }
    }

}

extension SecurityHubClientTypes.DataClassificationDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case detailedResultsLocation = "DetailedResultsLocation"
        case result = "Result"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let detailedResultsLocation = detailedResultsLocation {
            try encodeContainer.encode(detailedResultsLocation, forKey: .detailedResultsLocation)
        }
        if let result = result {
            try encodeContainer.encode(result, forKey: .result)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let detailedResultsLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .detailedResultsLocation)
        detailedResultsLocation = detailedResultsLocationDecoded
        let resultDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ClassificationResult.self, forKey: .result)
        result = resultDecoded
    }
}

extension SecurityHubClientTypes.DataClassificationDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DataClassificationDetails(detailedResultsLocation: \(Swift.String(describing: detailedResultsLocation)), result: \(Swift.String(describing: result)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides details about sensitive data that was detected on a resource.</p>
    public struct DataClassificationDetails: Swift.Equatable {
        /// <p>The path to the folder or file that contains the sensitive data.</p>
        public let detailedResultsLocation: Swift.String?
        /// <p>The details about the sensitive data that was detected on the resource.</p>
        public let result: SecurityHubClientTypes.ClassificationResult?

        public init (
            detailedResultsLocation: Swift.String? = nil,
            result: SecurityHubClientTypes.ClassificationResult? = nil
        )
        {
            self.detailedResultsLocation = detailedResultsLocation
            self.result = result
        }
    }

}

extension SecurityHubClientTypes.DateFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dateRange = "DateRange"
        case end = "End"
        case start = "Start"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dateRange = dateRange {
            try encodeContainer.encode(dateRange, forKey: .dateRange)
        }
        if let end = end {
            try encodeContainer.encode(end, forKey: .end)
        }
        if let start = start {
            try encodeContainer.encode(start, forKey: .start)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .start)
        start = startDecoded
        let endDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .end)
        end = endDecoded
        let dateRangeDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.DateRange.self, forKey: .dateRange)
        dateRange = dateRangeDecoded
    }
}

extension SecurityHubClientTypes.DateFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DateFilter(dateRange: \(Swift.String(describing: dateRange)), end: \(Swift.String(describing: end)), start: \(Swift.String(describing: start)))"}
}

extension SecurityHubClientTypes {
    /// <p>A date filter for querying findings.</p>
    public struct DateFilter: Swift.Equatable {
        /// <p>A date range for the date filter.</p>
        public let dateRange: SecurityHubClientTypes.DateRange?
        /// <p>An end date for the date filter.</p>
        public let end: Swift.String?
        /// <p>A start date for the date filter.</p>
        public let start: Swift.String?

        public init (
            dateRange: SecurityHubClientTypes.DateRange? = nil,
            end: Swift.String? = nil,
            start: Swift.String? = nil
        )
        {
            self.dateRange = dateRange
            self.end = end
            self.start = start
        }
    }

}

extension SecurityHubClientTypes.DateRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case unit = "Unit"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let unit = unit {
            try encodeContainer.encode(unit.rawValue, forKey: .unit)
        }
        if value != 0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decode(Swift.Int.self, forKey: .value)
        value = valueDecoded
        let unitDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.DateRangeUnit.self, forKey: .unit)
        unit = unitDecoded
    }
}

extension SecurityHubClientTypes.DateRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DateRange(unit: \(Swift.String(describing: unit)), value: \(Swift.String(describing: value)))"}
}

extension SecurityHubClientTypes {
    /// <p>A date range for the date filter.</p>
    public struct DateRange: Swift.Equatable {
        /// <p>A date range unit for the date filter.</p>
        public let unit: SecurityHubClientTypes.DateRangeUnit?
        /// <p>A date range value for the date filter.</p>
        public let value: Swift.Int

        public init (
            unit: SecurityHubClientTypes.DateRangeUnit? = nil,
            value: Swift.Int = 0
        )
        {
            self.unit = unit
            self.value = value
        }
    }

}

extension SecurityHubClientTypes {
    public enum DateRangeUnit: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case days
        case sdkUnknown(Swift.String)

        public static var allCases: [DateRangeUnit] {
            return [
                .days,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .days: return "DAYS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = DateRangeUnit(rawValue: rawValue) ?? DateRangeUnit.sdkUnknown(rawValue)
        }
    }
}

public struct DeclineInvitationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeclineInvitationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeclineInvitationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeclineInvitationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeclineInvitationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeclineInvitationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeclineInvitationsOutputError>
}

extension DeclineInvitationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeclineInvitationsInput(accountIds: \(Swift.String(describing: accountIds)))"}
}

extension DeclineInvitationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountidlist0 in accountIds {
                try accountIdsContainer.encode(accountidlist0)
            }
        }
    }
}

public struct DeclineInvitationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeclineInvitationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeclineInvitationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeclineInvitationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeclineInvitationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeclineInvitationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeclineInvitationsOutputError>
}

public struct DeclineInvitationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeclineInvitationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeclineInvitationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeclineInvitationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeclineInvitationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeclineInvitationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeclineInvitationsOutputError>
}

public struct DeclineInvitationsInput: Swift.Equatable {
    /// <p>The list of account IDs for the accounts from which to decline the invitations to
    ///          Security Hub.</p>
    public let accountIds: [Swift.String]?

    public init (
        accountIds: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
    }
}

struct DeclineInvitationsInputBody: Swift.Equatable {
    public let accountIds: [Swift.String]?
}

extension DeclineInvitationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
    }
}

extension DeclineInvitationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeclineInvitationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeclineInvitationsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeclineInvitationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeclineInvitationsOutputResponse(unprocessedAccounts: \(Swift.String(describing: unprocessedAccounts)))"}
}

extension DeclineInvitationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeclineInvitationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.unprocessedAccounts = output.unprocessedAccounts
        } else {
            self.unprocessedAccounts = nil
        }
    }
}

public struct DeclineInvitationsOutputResponse: Swift.Equatable {
    /// <p>The list of AWS accounts that were not processed. For each account, the list includes
    ///          the account ID and the email address.</p>
    public let unprocessedAccounts: [SecurityHubClientTypes.Result]?

    public init (
        unprocessedAccounts: [SecurityHubClientTypes.Result]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

struct DeclineInvitationsOutputResponseBody: Swift.Equatable {
    public let unprocessedAccounts: [SecurityHubClientTypes.Result]?
}

extension DeclineInvitationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case unprocessedAccounts = "UnprocessedAccounts"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let unprocessedAccountsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Result?].self, forKey: .unprocessedAccounts)
        var unprocessedAccountsDecoded0:[SecurityHubClientTypes.Result]? = nil
        if let unprocessedAccountsContainer = unprocessedAccountsContainer {
            unprocessedAccountsDecoded0 = [SecurityHubClientTypes.Result]()
            for structure0 in unprocessedAccountsContainer {
                if let structure0 = structure0 {
                    unprocessedAccountsDecoded0?.append(structure0)
                }
            }
        }
        unprocessedAccounts = unprocessedAccountsDecoded0
    }
}

extension DeleteActionTargetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteActionTargetInput(actionTargetArn: \(Swift.String(describing: actionTargetArn)))"}
}

extension DeleteActionTargetInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteActionTargetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteActionTargetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteActionTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteActionTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteActionTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteActionTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteActionTargetOutputError>
}

public struct DeleteActionTargetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteActionTargetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteActionTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteActionTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteActionTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteActionTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteActionTargetOutputError>
}

public struct DeleteActionTargetInput: Swift.Equatable {
    /// <p>The ARN of the custom action target to delete.</p>
    public let actionTargetArn: Swift.String?

    public init (
        actionTargetArn: Swift.String? = nil
    )
    {
        self.actionTargetArn = actionTargetArn
    }
}

struct DeleteActionTargetInputBody: Swift.Equatable {
}

extension DeleteActionTargetInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteActionTargetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteActionTargetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteActionTargetOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteActionTargetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteActionTargetOutputResponse(actionTargetArn: \(Swift.String(describing: actionTargetArn)))"}
}

extension DeleteActionTargetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteActionTargetOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionTargetArn = output.actionTargetArn
        } else {
            self.actionTargetArn = nil
        }
    }
}

public struct DeleteActionTargetOutputResponse: Swift.Equatable {
    /// <p>The ARN of the custom action target that was deleted.</p>
    public let actionTargetArn: Swift.String?

    public init (
        actionTargetArn: Swift.String? = nil
    )
    {
        self.actionTargetArn = actionTargetArn
    }
}

struct DeleteActionTargetOutputResponseBody: Swift.Equatable {
    public let actionTargetArn: Swift.String?
}

extension DeleteActionTargetOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionTargetArn = "ActionTargetArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTargetArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .actionTargetArn)
        actionTargetArn = actionTargetArnDecoded
    }
}

extension DeleteInsightInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInsightInput(insightArn: \(Swift.String(describing: insightArn)))"}
}

extension DeleteInsightInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteInsightInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInsightInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInsightInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInsightInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInsightOutputError>
}

public struct DeleteInsightInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInsightInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInsightInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInsightInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInsightOutputError>
}

public struct DeleteInsightInput: Swift.Equatable {
    /// <p>The ARN of the insight to delete.</p>
    public let insightArn: Swift.String?

    public init (
        insightArn: Swift.String? = nil
    )
    {
        self.insightArn = insightArn
    }
}

struct DeleteInsightInputBody: Swift.Equatable {
}

extension DeleteInsightInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteInsightOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInsightOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteInsightOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInsightOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInsightOutputResponse(insightArn: \(Swift.String(describing: insightArn)))"}
}

extension DeleteInsightOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteInsightOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.insightArn = output.insightArn
        } else {
            self.insightArn = nil
        }
    }
}

public struct DeleteInsightOutputResponse: Swift.Equatable {
    /// <p>The ARN of the insight that was deleted.</p>
    public let insightArn: Swift.String?

    public init (
        insightArn: Swift.String? = nil
    )
    {
        self.insightArn = insightArn
    }
}

struct DeleteInsightOutputResponseBody: Swift.Equatable {
    public let insightArn: Swift.String?
}

extension DeleteInsightOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightArn = "InsightArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .insightArn)
        insightArn = insightArnDecoded
    }
}

public struct DeleteInvitationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInvitationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInvitationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInvitationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInvitationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInvitationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInvitationsOutputError>
}

extension DeleteInvitationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInvitationsInput(accountIds: \(Swift.String(describing: accountIds)))"}
}

extension DeleteInvitationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountidlist0 in accountIds {
                try accountIdsContainer.encode(accountidlist0)
            }
        }
    }
}

public struct DeleteInvitationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInvitationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInvitationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInvitationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInvitationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInvitationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInvitationsOutputError>
}

public struct DeleteInvitationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteInvitationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteInvitationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteInvitationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteInvitationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteInvitationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteInvitationsOutputError>
}

public struct DeleteInvitationsInput: Swift.Equatable {
    /// <p>The list of the account IDs that sent the invitations to delete.</p>
    public let accountIds: [Swift.String]?

    public init (
        accountIds: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
    }
}

struct DeleteInvitationsInputBody: Swift.Equatable {
    public let accountIds: [Swift.String]?
}

extension DeleteInvitationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
    }
}

extension DeleteInvitationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteInvitationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteInvitationsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteInvitationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteInvitationsOutputResponse(unprocessedAccounts: \(Swift.String(describing: unprocessedAccounts)))"}
}

extension DeleteInvitationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteInvitationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.unprocessedAccounts = output.unprocessedAccounts
        } else {
            self.unprocessedAccounts = nil
        }
    }
}

public struct DeleteInvitationsOutputResponse: Swift.Equatable {
    /// <p>The list of AWS accounts for which the invitations were not deleted. For each account,
    ///          the list includes the account ID and the email address.</p>
    public let unprocessedAccounts: [SecurityHubClientTypes.Result]?

    public init (
        unprocessedAccounts: [SecurityHubClientTypes.Result]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

struct DeleteInvitationsOutputResponseBody: Swift.Equatable {
    public let unprocessedAccounts: [SecurityHubClientTypes.Result]?
}

extension DeleteInvitationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case unprocessedAccounts = "UnprocessedAccounts"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let unprocessedAccountsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Result?].self, forKey: .unprocessedAccounts)
        var unprocessedAccountsDecoded0:[SecurityHubClientTypes.Result]? = nil
        if let unprocessedAccountsContainer = unprocessedAccountsContainer {
            unprocessedAccountsDecoded0 = [SecurityHubClientTypes.Result]()
            for structure0 in unprocessedAccountsContainer {
                if let structure0 = structure0 {
                    unprocessedAccountsDecoded0?.append(structure0)
                }
            }
        }
        unprocessedAccounts = unprocessedAccountsDecoded0
    }
}

public struct DeleteMembersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMembersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMembersOutputError>
}

extension DeleteMembersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMembersInput(accountIds: \(Swift.String(describing: accountIds)))"}
}

extension DeleteMembersInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountidlist0 in accountIds {
                try accountIdsContainer.encode(accountidlist0)
            }
        }
    }
}

public struct DeleteMembersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMembersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMembersOutputError>
}

public struct DeleteMembersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMembersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMembersOutputError>
}

public struct DeleteMembersInput: Swift.Equatable {
    /// <p>The list of account IDs for the member accounts to delete.</p>
    public let accountIds: [Swift.String]?

    public init (
        accountIds: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
    }
}

struct DeleteMembersInputBody: Swift.Equatable {
    public let accountIds: [Swift.String]?
}

extension DeleteMembersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
    }
}

extension DeleteMembersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMembersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMembersOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMembersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMembersOutputResponse(unprocessedAccounts: \(Swift.String(describing: unprocessedAccounts)))"}
}

extension DeleteMembersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DeleteMembersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.unprocessedAccounts = output.unprocessedAccounts
        } else {
            self.unprocessedAccounts = nil
        }
    }
}

public struct DeleteMembersOutputResponse: Swift.Equatable {
    /// <p>The list of AWS accounts that were not deleted. For each account, the list includes the
    ///          account ID and the email address.</p>
    public let unprocessedAccounts: [SecurityHubClientTypes.Result]?

    public init (
        unprocessedAccounts: [SecurityHubClientTypes.Result]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

struct DeleteMembersOutputResponseBody: Swift.Equatable {
    public let unprocessedAccounts: [SecurityHubClientTypes.Result]?
}

extension DeleteMembersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case unprocessedAccounts = "UnprocessedAccounts"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let unprocessedAccountsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Result?].self, forKey: .unprocessedAccounts)
        var unprocessedAccountsDecoded0:[SecurityHubClientTypes.Result]? = nil
        if let unprocessedAccountsContainer = unprocessedAccountsContainer {
            unprocessedAccountsDecoded0 = [SecurityHubClientTypes.Result]()
            for structure0 in unprocessedAccountsContainer {
                if let structure0 = structure0 {
                    unprocessedAccountsDecoded0?.append(structure0)
                }
            }
        }
        unprocessedAccounts = unprocessedAccountsDecoded0
    }
}

public struct DescribeActionTargetsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeActionTargetsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeActionTargetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeActionTargetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeActionTargetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeActionTargetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeActionTargetsOutputError>
}

extension DescribeActionTargetsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeActionTargetsInput(actionTargetArns: \(Swift.String(describing: actionTargetArns)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeActionTargetsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionTargetArns = "ActionTargetArns"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let actionTargetArns = actionTargetArns {
            var actionTargetArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .actionTargetArns)
            for arnlist0 in actionTargetArns {
                try actionTargetArnsContainer.encode(arnlist0)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeActionTargetsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeActionTargetsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeActionTargetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeActionTargetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeActionTargetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeActionTargetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeActionTargetsOutputError>
}

public struct DescribeActionTargetsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeActionTargetsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeActionTargetsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeActionTargetsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeActionTargetsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeActionTargetsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeActionTargetsOutputError>
}

public struct DescribeActionTargetsInput: Swift.Equatable {
    /// <p>A list of custom action target ARNs for the custom action targets to retrieve.</p>
    public let actionTargetArns: [Swift.String]?
    /// <p>The maximum number of results to return.</p>
    public let maxResults: Swift.Int
    /// <p>The token that is required for pagination. On your first call to the
    ///             <code>DescribeActionTargets</code> operation, set the value of this parameter to
    ///             <code>NULL</code>.</p>
    ///          <p>For subsequent calls to the operation, to continue listing data, set the value of this
    ///          parameter to the value returned from the previous response.</p>
    public let nextToken: Swift.String?

    public init (
        actionTargetArns: [Swift.String]? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.actionTargetArns = actionTargetArns
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeActionTargetsInputBody: Swift.Equatable {
    public let actionTargetArns: [Swift.String]?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int
}

extension DescribeActionTargetsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionTargetArns = "ActionTargetArns"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTargetArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .actionTargetArns)
        var actionTargetArnsDecoded0:[Swift.String]? = nil
        if let actionTargetArnsContainer = actionTargetArnsContainer {
            actionTargetArnsDecoded0 = [Swift.String]()
            for string0 in actionTargetArnsContainer {
                if let string0 = string0 {
                    actionTargetArnsDecoded0?.append(string0)
                }
            }
        }
        actionTargetArns = actionTargetArnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension DescribeActionTargetsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeActionTargetsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeActionTargetsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeActionTargetsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeActionTargetsOutputResponse(actionTargets: \(Swift.String(describing: actionTargets)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeActionTargetsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeActionTargetsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.actionTargets = output.actionTargets
            self.nextToken = output.nextToken
        } else {
            self.actionTargets = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeActionTargetsOutputResponse: Swift.Equatable {
    /// <p>A list of <code>ActionTarget</code> objects. Each object includes the <code>ActionTargetArn</code>,
    ///             <code>Description</code>, and <code>Name</code> of a custom action target available in
    ///          Security Hub.</p>
    public let actionTargets: [SecurityHubClientTypes.ActionTarget]?
    /// <p>The pagination token to use to request the next page of results.</p>
    public let nextToken: Swift.String?

    public init (
        actionTargets: [SecurityHubClientTypes.ActionTarget]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.actionTargets = actionTargets
        self.nextToken = nextToken
    }
}

struct DescribeActionTargetsOutputResponseBody: Swift.Equatable {
    public let actionTargets: [SecurityHubClientTypes.ActionTarget]?
    public let nextToken: Swift.String?
}

extension DescribeActionTargetsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case actionTargets = "ActionTargets"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let actionTargetsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.ActionTarget?].self, forKey: .actionTargets)
        var actionTargetsDecoded0:[SecurityHubClientTypes.ActionTarget]? = nil
        if let actionTargetsContainer = actionTargetsContainer {
            actionTargetsDecoded0 = [SecurityHubClientTypes.ActionTarget]()
            for structure0 in actionTargetsContainer {
                if let structure0 = structure0 {
                    actionTargetsDecoded0?.append(structure0)
                }
            }
        }
        actionTargets = actionTargetsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeHubInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeHubInput(hubArn: \(Swift.String(describing: hubArn)))"}
}

extension DescribeHubInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeHubInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeHubInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeHubInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeHubOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeHubInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeHubOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeHubOutputError>
}

public struct DescribeHubInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeHubInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeHubInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeHubOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let hubArn = input.operationInput.hubArn {
            let hubArnQueryItem = ClientRuntime.URLQueryItem(name: "HubArn".urlPercentEncoding(), value: Swift.String(hubArn).urlPercentEncoding())
            input.builder.withQueryItem(hubArnQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeHubInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeHubOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeHubOutputError>
}

public struct DescribeHubInput: Swift.Equatable {
    /// <p>The ARN of the Hub resource to retrieve.</p>
    public let hubArn: Swift.String?

    public init (
        hubArn: Swift.String? = nil
    )
    {
        self.hubArn = hubArn
    }
}

struct DescribeHubInputBody: Swift.Equatable {
}

extension DescribeHubInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeHubOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeHubOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeHubOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeHubOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeHubOutputResponse(autoEnableControls: \(Swift.String(describing: autoEnableControls)), hubArn: \(Swift.String(describing: hubArn)), subscribedAt: \(Swift.String(describing: subscribedAt)))"}
}

extension DescribeHubOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeHubOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoEnableControls = output.autoEnableControls
            self.hubArn = output.hubArn
            self.subscribedAt = output.subscribedAt
        } else {
            self.autoEnableControls = false
            self.hubArn = nil
            self.subscribedAt = nil
        }
    }
}

public struct DescribeHubOutputResponse: Swift.Equatable {
    /// <p>Whether to automatically enable new controls when they are added to standards that are
    ///          enabled.</p>
    ///          <p>If set to <code>true</code>, then new controls for enabled standards are enabled
    ///          automatically. If set to <code>false</code>, then new controls are not enabled.</p>
    public let autoEnableControls: Swift.Bool
    /// <p>The ARN of the Hub resource that was retrieved.</p>
    public let hubArn: Swift.String?
    /// <p>The date and time when Security Hub was enabled in the account.</p>
    public let subscribedAt: Swift.String?

    public init (
        autoEnableControls: Swift.Bool = false,
        hubArn: Swift.String? = nil,
        subscribedAt: Swift.String? = nil
    )
    {
        self.autoEnableControls = autoEnableControls
        self.hubArn = hubArn
        self.subscribedAt = subscribedAt
    }
}

struct DescribeHubOutputResponseBody: Swift.Equatable {
    public let hubArn: Swift.String?
    public let subscribedAt: Swift.String?
    public let autoEnableControls: Swift.Bool
}

extension DescribeHubOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoEnableControls = "AutoEnableControls"
        case hubArn = "HubArn"
        case subscribedAt = "SubscribedAt"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let hubArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .hubArn)
        hubArn = hubArnDecoded
        let subscribedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .subscribedAt)
        subscribedAt = subscribedAtDecoded
        let autoEnableControlsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoEnableControls)
        autoEnableControls = autoEnableControlsDecoded
    }
}

extension DescribeOrganizationConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeOrganizationConfigurationInput()"}
}

extension DescribeOrganizationConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeOrganizationConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOrganizationConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOrganizationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOrganizationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOrganizationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOrganizationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOrganizationConfigurationOutputError>
}

public struct DescribeOrganizationConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeOrganizationConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeOrganizationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeOrganizationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeOrganizationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeOrganizationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeOrganizationConfigurationOutputError>
}

public struct DescribeOrganizationConfigurationInput: Swift.Equatable {

    public init() {}
}

struct DescribeOrganizationConfigurationInputBody: Swift.Equatable {
}

extension DescribeOrganizationConfigurationInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeOrganizationConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeOrganizationConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeOrganizationConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeOrganizationConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeOrganizationConfigurationOutputResponse(autoEnable: \(Swift.String(describing: autoEnable)), memberAccountLimitReached: \(Swift.String(describing: memberAccountLimitReached)))"}
}

extension DescribeOrganizationConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeOrganizationConfigurationOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoEnable = output.autoEnable
            self.memberAccountLimitReached = output.memberAccountLimitReached
        } else {
            self.autoEnable = false
            self.memberAccountLimitReached = false
        }
    }
}

public struct DescribeOrganizationConfigurationOutputResponse: Swift.Equatable {
    /// <p>Whether to automatically enable Security Hub for new accounts in the organization.</p>
    ///          <p>If set to <code>true</code>, then Security Hub is enabled for new accounts. If set to false,
    ///          then new accounts are not added automatically.</p>
    public let autoEnable: Swift.Bool
    /// <p>Whether the maximum number of allowed member accounts are already associated with the
    ///          Security Hub administrator account.</p>
    public let memberAccountLimitReached: Swift.Bool

    public init (
        autoEnable: Swift.Bool = false,
        memberAccountLimitReached: Swift.Bool = false
    )
    {
        self.autoEnable = autoEnable
        self.memberAccountLimitReached = memberAccountLimitReached
    }
}

struct DescribeOrganizationConfigurationOutputResponseBody: Swift.Equatable {
    public let autoEnable: Swift.Bool
    public let memberAccountLimitReached: Swift.Bool
}

extension DescribeOrganizationConfigurationOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoEnable = "AutoEnable"
        case memberAccountLimitReached = "MemberAccountLimitReached"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoEnableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoEnable)
        autoEnable = autoEnableDecoded
        let memberAccountLimitReachedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .memberAccountLimitReached)
        memberAccountLimitReached = memberAccountLimitReachedDecoded
    }
}

extension DescribeProductsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeProductsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), productArn: \(Swift.String(describing: productArn)))"}
}

extension DescribeProductsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeProductsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeProductsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeProductsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeProductsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeProductsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeProductsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeProductsOutputError>
}

public struct DescribeProductsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeProductsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeProductsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeProductsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let productArn = input.operationInput.productArn {
            let productArnQueryItem = ClientRuntime.URLQueryItem(name: "ProductArn".urlPercentEncoding(), value: Swift.String(productArn).urlPercentEncoding())
            input.builder.withQueryItem(productArnQueryItem)
        }
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeProductsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeProductsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeProductsOutputError>
}

public struct DescribeProductsInput: Swift.Equatable {
    /// <p>The maximum number of results to return.</p>
    public let maxResults: Swift.Int
    /// <p>The token that is required for pagination. On your first call to the
    ///             <code>DescribeProducts</code> operation, set the value of this parameter to
    ///             <code>NULL</code>.</p>
    ///          <p>For subsequent calls to the operation, to continue listing data, set the value of this
    ///          parameter to the value returned from the previous response.</p>
    public let nextToken: Swift.String?
    /// <p>The ARN of the integration to return.</p>
    public let productArn: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        productArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.productArn = productArn
    }
}

struct DescribeProductsInputBody: Swift.Equatable {
}

extension DescribeProductsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeProductsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeProductsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeProductsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeProductsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeProductsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), products: \(Swift.String(describing: products)))"}
}

extension DescribeProductsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeProductsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.products = output.products
        } else {
            self.nextToken = nil
            self.products = nil
        }
    }
}

public struct DescribeProductsOutputResponse: Swift.Equatable {
    /// <p>The pagination token to use to request the next page of results.</p>
    public let nextToken: Swift.String?
    /// <p>A list of products, including details for each product.</p>
    public let products: [SecurityHubClientTypes.Product]?

    public init (
        nextToken: Swift.String? = nil,
        products: [SecurityHubClientTypes.Product]? = nil
    )
    {
        self.nextToken = nextToken
        self.products = products
    }
}

struct DescribeProductsOutputResponseBody: Swift.Equatable {
    public let products: [SecurityHubClientTypes.Product]?
    public let nextToken: Swift.String?
}

extension DescribeProductsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case products = "Products"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Product?].self, forKey: .products)
        var productsDecoded0:[SecurityHubClientTypes.Product]? = nil
        if let productsContainer = productsContainer {
            productsDecoded0 = [SecurityHubClientTypes.Product]()
            for structure0 in productsContainer {
                if let structure0 = structure0 {
                    productsDecoded0?.append(structure0)
                }
            }
        }
        products = productsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeStandardsControlsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStandardsControlsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), standardsSubscriptionArn: \(Swift.String(describing: standardsSubscriptionArn)))"}
}

extension DescribeStandardsControlsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeStandardsControlsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStandardsControlsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStandardsControlsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStandardsControlsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStandardsControlsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStandardsControlsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStandardsControlsOutputError>
}

public struct DescribeStandardsControlsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStandardsControlsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStandardsControlsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStandardsControlsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStandardsControlsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStandardsControlsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStandardsControlsOutputError>
}

public struct DescribeStandardsControlsInput: Swift.Equatable {
    /// <p>The maximum number of security standard controls to return.</p>
    public let maxResults: Swift.Int
    /// <p>The token that is required for pagination. On your first call to the
    ///             <code>DescribeStandardsControls</code> operation, set the value of this parameter to
    ///             <code>NULL</code>.</p>
    ///          <p>For subsequent calls to the operation, to continue listing data, set the value of this
    ///          parameter to the value returned from the previous response.</p>
    public let nextToken: Swift.String?
    /// <p>The ARN of a resource that represents your subscription to a supported standard. To get
    ///          the subscription ARNs of the standards you have enabled, use the <code>
    ///                <a>GetEnabledStandards</a>
    ///             </code> operation.</p>
    public let standardsSubscriptionArn: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        standardsSubscriptionArn: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.standardsSubscriptionArn = standardsSubscriptionArn
    }
}

struct DescribeStandardsControlsInputBody: Swift.Equatable {
}

extension DescribeStandardsControlsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeStandardsControlsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeStandardsControlsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStandardsControlsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStandardsControlsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStandardsControlsOutputResponse(controls: \(Swift.String(describing: controls)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeStandardsControlsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeStandardsControlsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.controls = output.controls
            self.nextToken = output.nextToken
        } else {
            self.controls = nil
            self.nextToken = nil
        }
    }
}

public struct DescribeStandardsControlsOutputResponse: Swift.Equatable {
    /// <p>A list of security standards controls.</p>
    public let controls: [SecurityHubClientTypes.StandardsControl]?
    /// <p>The pagination token to use to request the next page of results.</p>
    public let nextToken: Swift.String?

    public init (
        controls: [SecurityHubClientTypes.StandardsControl]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.controls = controls
        self.nextToken = nextToken
    }
}

struct DescribeStandardsControlsOutputResponseBody: Swift.Equatable {
    public let controls: [SecurityHubClientTypes.StandardsControl]?
    public let nextToken: Swift.String?
}

extension DescribeStandardsControlsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controls = "Controls"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StandardsControl?].self, forKey: .controls)
        var controlsDecoded0:[SecurityHubClientTypes.StandardsControl]? = nil
        if let controlsContainer = controlsContainer {
            controlsDecoded0 = [SecurityHubClientTypes.StandardsControl]()
            for structure0 in controlsContainer {
                if let structure0 = structure0 {
                    controlsDecoded0?.append(structure0)
                }
            }
        }
        controls = controlsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DescribeStandardsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStandardsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeStandardsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeStandardsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStandardsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStandardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStandardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStandardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStandardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStandardsOutputError>
}

public struct DescribeStandardsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeStandardsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeStandardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeStandardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeStandardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeStandardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeStandardsOutputError>
}

public struct DescribeStandardsInput: Swift.Equatable {
    /// <p>The maximum number of standards to return.</p>
    public let maxResults: Swift.Int
    /// <p>The token that is required for pagination. On your first call to the
    ///             <code>DescribeStandards</code> operation, set the value of this parameter to
    ///             <code>NULL</code>.</p>
    ///          <p>For subsequent calls to the operation, to continue listing data, set the value of this
    ///          parameter to the value returned from the previous response.</p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeStandardsInputBody: Swift.Equatable {
}

extension DescribeStandardsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeStandardsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeStandardsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeStandardsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeStandardsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeStandardsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), standards: \(Swift.String(describing: standards)))"}
}

extension DescribeStandardsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeStandardsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.standards = output.standards
        } else {
            self.nextToken = nil
            self.standards = nil
        }
    }
}

public struct DescribeStandardsOutputResponse: Swift.Equatable {
    /// <p>The pagination token to use to request the next page of results.</p>
    public let nextToken: Swift.String?
    /// <p>A list of available standards.</p>
    public let standards: [SecurityHubClientTypes.Standard]?

    public init (
        nextToken: Swift.String? = nil,
        standards: [SecurityHubClientTypes.Standard]? = nil
    )
    {
        self.nextToken = nextToken
        self.standards = standards
    }
}

struct DescribeStandardsOutputResponseBody: Swift.Equatable {
    public let standards: [SecurityHubClientTypes.Standard]?
    public let nextToken: Swift.String?
}

extension DescribeStandardsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case standards = "Standards"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let standardsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Standard?].self, forKey: .standards)
        var standardsDecoded0:[SecurityHubClientTypes.Standard]? = nil
        if let standardsContainer = standardsContainer {
            standardsDecoded0 = [SecurityHubClientTypes.Standard]()
            for structure0 in standardsContainer {
                if let structure0 = structure0 {
                    standardsDecoded0?.append(structure0)
                }
            }
        }
        standards = standardsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension DisableImportFindingsForProductInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableImportFindingsForProductInput(productSubscriptionArn: \(Swift.String(describing: productSubscriptionArn)))"}
}

extension DisableImportFindingsForProductInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DisableImportFindingsForProductInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableImportFindingsForProductInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableImportFindingsForProductInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableImportFindingsForProductOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableImportFindingsForProductInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableImportFindingsForProductOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableImportFindingsForProductOutputError>
}

public struct DisableImportFindingsForProductInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableImportFindingsForProductInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableImportFindingsForProductInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableImportFindingsForProductOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableImportFindingsForProductInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableImportFindingsForProductOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableImportFindingsForProductOutputError>
}

public struct DisableImportFindingsForProductInput: Swift.Equatable {
    /// <p>The ARN of the integrated product to disable the integration for.</p>
    public let productSubscriptionArn: Swift.String?

    public init (
        productSubscriptionArn: Swift.String? = nil
    )
    {
        self.productSubscriptionArn = productSubscriptionArn
    }
}

struct DisableImportFindingsForProductInputBody: Swift.Equatable {
}

extension DisableImportFindingsForProductInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisableImportFindingsForProductOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableImportFindingsForProductOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableImportFindingsForProductOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableImportFindingsForProductOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableImportFindingsForProductOutputResponse()"}
}

extension DisableImportFindingsForProductOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableImportFindingsForProductOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisableImportFindingsForProductOutputResponseBody: Swift.Equatable {
}

extension DisableImportFindingsForProductOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DisableOrganizationAdminAccountInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableOrganizationAdminAccountInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableOrganizationAdminAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableOrganizationAdminAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableOrganizationAdminAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableOrganizationAdminAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableOrganizationAdminAccountOutputError>
}

extension DisableOrganizationAdminAccountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableOrganizationAdminAccountInput(adminAccountId: \(Swift.String(describing: adminAccountId)))"}
}

extension DisableOrganizationAdminAccountInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adminAccountId = "AdminAccountId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adminAccountId = adminAccountId {
            try encodeContainer.encode(adminAccountId, forKey: .adminAccountId)
        }
    }
}

public struct DisableOrganizationAdminAccountInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableOrganizationAdminAccountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableOrganizationAdminAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableOrganizationAdminAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableOrganizationAdminAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableOrganizationAdminAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableOrganizationAdminAccountOutputError>
}

public struct DisableOrganizationAdminAccountInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableOrganizationAdminAccountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableOrganizationAdminAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableOrganizationAdminAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableOrganizationAdminAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableOrganizationAdminAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableOrganizationAdminAccountOutputError>
}

public struct DisableOrganizationAdminAccountInput: Swift.Equatable {
    /// <p>The AWS account identifier of the Security Hub administrator account.</p>
    public let adminAccountId: Swift.String?

    public init (
        adminAccountId: Swift.String? = nil
    )
    {
        self.adminAccountId = adminAccountId
    }
}

struct DisableOrganizationAdminAccountInputBody: Swift.Equatable {
    public let adminAccountId: Swift.String?
}

extension DisableOrganizationAdminAccountInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adminAccountId = "AdminAccountId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adminAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adminAccountId)
        adminAccountId = adminAccountIdDecoded
    }
}

extension DisableOrganizationAdminAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableOrganizationAdminAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableOrganizationAdminAccountOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableOrganizationAdminAccountOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableOrganizationAdminAccountOutputResponse()"}
}

extension DisableOrganizationAdminAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableOrganizationAdminAccountOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisableOrganizationAdminAccountOutputResponseBody: Swift.Equatable {
}

extension DisableOrganizationAdminAccountOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisableSecurityHubInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableSecurityHubInput()"}
}

extension DisableSecurityHubInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DisableSecurityHubInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableSecurityHubInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableSecurityHubInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableSecurityHubOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableSecurityHubInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableSecurityHubOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableSecurityHubOutputError>
}

public struct DisableSecurityHubInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisableSecurityHubInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisableSecurityHubInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisableSecurityHubOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisableSecurityHubInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisableSecurityHubOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisableSecurityHubOutputError>
}

public struct DisableSecurityHubInput: Swift.Equatable {

    public init() {}
}

struct DisableSecurityHubInputBody: Swift.Equatable {
}

extension DisableSecurityHubInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisableSecurityHubOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisableSecurityHubOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisableSecurityHubOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisableSecurityHubOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisableSecurityHubOutputResponse()"}
}

extension DisableSecurityHubOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisableSecurityHubOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisableSecurityHubOutputResponseBody: Swift.Equatable {
}

extension DisableSecurityHubOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisassociateFromAdministratorAccountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateFromAdministratorAccountInput()"}
}

extension DisassociateFromAdministratorAccountInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DisassociateFromAdministratorAccountInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateFromAdministratorAccountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateFromAdministratorAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateFromAdministratorAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateFromAdministratorAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateFromAdministratorAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateFromAdministratorAccountOutputError>
}

public struct DisassociateFromAdministratorAccountInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateFromAdministratorAccountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateFromAdministratorAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateFromAdministratorAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateFromAdministratorAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateFromAdministratorAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateFromAdministratorAccountOutputError>
}

public struct DisassociateFromAdministratorAccountInput: Swift.Equatable {

    public init() {}
}

struct DisassociateFromAdministratorAccountInputBody: Swift.Equatable {
}

extension DisassociateFromAdministratorAccountInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisassociateFromAdministratorAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateFromAdministratorAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateFromAdministratorAccountOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateFromAdministratorAccountOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateFromAdministratorAccountOutputResponse()"}
}

extension DisassociateFromAdministratorAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateFromAdministratorAccountOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisassociateFromAdministratorAccountOutputResponseBody: Swift.Equatable {
}

extension DisassociateFromAdministratorAccountOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisassociateFromMasterAccountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateFromMasterAccountInput()"}
}

extension DisassociateFromMasterAccountInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DisassociateFromMasterAccountInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateFromMasterAccountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateFromMasterAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateFromMasterAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateFromMasterAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateFromMasterAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateFromMasterAccountOutputError>
}

public struct DisassociateFromMasterAccountInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateFromMasterAccountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateFromMasterAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateFromMasterAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateFromMasterAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateFromMasterAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateFromMasterAccountOutputError>
}

public struct DisassociateFromMasterAccountInput: Swift.Equatable {

    public init() {}
}

struct DisassociateFromMasterAccountInputBody: Swift.Equatable {
}

extension DisassociateFromMasterAccountInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DisassociateFromMasterAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateFromMasterAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateFromMasterAccountOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateFromMasterAccountOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateFromMasterAccountOutputResponse()"}
}

extension DisassociateFromMasterAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateFromMasterAccountOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisassociateFromMasterAccountOutputResponseBody: Swift.Equatable {
}

extension DisassociateFromMasterAccountOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct DisassociateMembersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateMembersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateMembersOutputError>
}

extension DisassociateMembersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateMembersInput(accountIds: \(Swift.String(describing: accountIds)))"}
}

extension DisassociateMembersInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountidlist0 in accountIds {
                try accountIdsContainer.encode(accountidlist0)
            }
        }
    }
}

public struct DisassociateMembersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateMembersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateMembersOutputError>
}

public struct DisassociateMembersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DisassociateMembersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DisassociateMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DisassociateMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DisassociateMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DisassociateMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DisassociateMembersOutputError>
}

public struct DisassociateMembersInput: Swift.Equatable {
    /// <p>The account IDs of the member accounts to disassociate from the administrator account.</p>
    public let accountIds: [Swift.String]?

    public init (
        accountIds: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
    }
}

struct DisassociateMembersInputBody: Swift.Equatable {
    public let accountIds: [Swift.String]?
}

extension DisassociateMembersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
    }
}

extension DisassociateMembersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DisassociateMembersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DisassociateMembersOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DisassociateMembersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DisassociateMembersOutputResponse()"}
}

extension DisassociateMembersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DisassociateMembersOutputResponse: Swift.Equatable {

    public init() {}
}

struct DisassociateMembersOutputResponseBody: Swift.Equatable {
}

extension DisassociateMembersOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SecurityHubClientTypes.DnsRequestAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blocked = "Blocked"
        case domain = "Domain"
        case `protocol` = "Protocol"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if blocked != false {
            try encodeContainer.encode(blocked, forKey: .blocked)
        }
        if let domain = domain {
            try encodeContainer.encode(domain, forKey: .domain)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`, forKey: .`protocol`)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let domainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .domain)
        domain = domainDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let blockedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .blocked)
        blocked = blockedDecoded
    }
}

extension SecurityHubClientTypes.DnsRequestAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DnsRequestAction(blocked: \(Swift.String(describing: blocked)), domain: \(Swift.String(describing: domain)), protocol: \(Swift.String(describing: `protocol`)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provided if <code>ActionType</code> is <code>DNS_REQUEST</code>. It provides details
    ///          about the DNS request that was detected.</p>
    public struct DnsRequestAction: Swift.Equatable {
        /// <p>The protocol that was used for the DNS request.</p>
        public let `protocol`: Swift.String?
        /// <p>Indicates whether the DNS request was blocked.</p>
        public let blocked: Swift.Bool
        /// <p>The DNS domain that is associated with the DNS request.</p>
        public let domain: Swift.String?

        public init (
            `protocol`: Swift.String? = nil,
            blocked: Swift.Bool = false,
            domain: Swift.String? = nil
        )
        {
            self.`protocol` = `protocol`
            self.blocked = blocked
            self.domain = domain
        }
    }

}

public struct EnableImportFindingsForProductInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableImportFindingsForProductInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableImportFindingsForProductInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableImportFindingsForProductOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableImportFindingsForProductInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableImportFindingsForProductOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableImportFindingsForProductOutputError>
}

extension EnableImportFindingsForProductInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableImportFindingsForProductInput(productArn: \(Swift.String(describing: productArn)))"}
}

extension EnableImportFindingsForProductInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case productArn = "ProductArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let productArn = productArn {
            try encodeContainer.encode(productArn, forKey: .productArn)
        }
    }
}

public struct EnableImportFindingsForProductInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableImportFindingsForProductInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableImportFindingsForProductInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableImportFindingsForProductOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableImportFindingsForProductInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableImportFindingsForProductOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableImportFindingsForProductOutputError>
}

public struct EnableImportFindingsForProductInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableImportFindingsForProductInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableImportFindingsForProductInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableImportFindingsForProductOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableImportFindingsForProductInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableImportFindingsForProductOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableImportFindingsForProductOutputError>
}

public struct EnableImportFindingsForProductInput: Swift.Equatable {
    /// <p>The ARN of the product to enable the integration for.</p>
    public let productArn: Swift.String?

    public init (
        productArn: Swift.String? = nil
    )
    {
        self.productArn = productArn
    }
}

struct EnableImportFindingsForProductInputBody: Swift.Equatable {
    public let productArn: Swift.String?
}

extension EnableImportFindingsForProductInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case productArn = "ProductArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productArn)
        productArn = productArnDecoded
    }
}

extension EnableImportFindingsForProductOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableImportFindingsForProductOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceConflictException" : self = .resourceConflictException(try ResourceConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableImportFindingsForProductOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceConflictException(ResourceConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableImportFindingsForProductOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableImportFindingsForProductOutputResponse(productSubscriptionArn: \(Swift.String(describing: productSubscriptionArn)))"}
}

extension EnableImportFindingsForProductOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: EnableImportFindingsForProductOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.productSubscriptionArn = output.productSubscriptionArn
        } else {
            self.productSubscriptionArn = nil
        }
    }
}

public struct EnableImportFindingsForProductOutputResponse: Swift.Equatable {
    /// <p>The ARN of your subscription to the product to enable integrations for.</p>
    public let productSubscriptionArn: Swift.String?

    public init (
        productSubscriptionArn: Swift.String? = nil
    )
    {
        self.productSubscriptionArn = productSubscriptionArn
    }
}

struct EnableImportFindingsForProductOutputResponseBody: Swift.Equatable {
    public let productSubscriptionArn: Swift.String?
}

extension EnableImportFindingsForProductOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case productSubscriptionArn = "ProductSubscriptionArn"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productSubscriptionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productSubscriptionArn)
        productSubscriptionArn = productSubscriptionArnDecoded
    }
}

public struct EnableOrganizationAdminAccountInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableOrganizationAdminAccountInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableOrganizationAdminAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableOrganizationAdminAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableOrganizationAdminAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableOrganizationAdminAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableOrganizationAdminAccountOutputError>
}

extension EnableOrganizationAdminAccountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableOrganizationAdminAccountInput(adminAccountId: \(Swift.String(describing: adminAccountId)))"}
}

extension EnableOrganizationAdminAccountInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adminAccountId = "AdminAccountId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let adminAccountId = adminAccountId {
            try encodeContainer.encode(adminAccountId, forKey: .adminAccountId)
        }
    }
}

public struct EnableOrganizationAdminAccountInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableOrganizationAdminAccountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableOrganizationAdminAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableOrganizationAdminAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableOrganizationAdminAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableOrganizationAdminAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableOrganizationAdminAccountOutputError>
}

public struct EnableOrganizationAdminAccountInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableOrganizationAdminAccountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableOrganizationAdminAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableOrganizationAdminAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableOrganizationAdminAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableOrganizationAdminAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableOrganizationAdminAccountOutputError>
}

public struct EnableOrganizationAdminAccountInput: Swift.Equatable {
    /// <p>The AWS account identifier of the account to designate as the Security Hub administrator
    ///          account.</p>
    public let adminAccountId: Swift.String?

    public init (
        adminAccountId: Swift.String? = nil
    )
    {
        self.adminAccountId = adminAccountId
    }
}

struct EnableOrganizationAdminAccountInputBody: Swift.Equatable {
    public let adminAccountId: Swift.String?
}

extension EnableOrganizationAdminAccountInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adminAccountId = "AdminAccountId"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adminAccountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .adminAccountId)
        adminAccountId = adminAccountIdDecoded
    }
}

extension EnableOrganizationAdminAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableOrganizationAdminAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableOrganizationAdminAccountOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableOrganizationAdminAccountOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableOrganizationAdminAccountOutputResponse()"}
}

extension EnableOrganizationAdminAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableOrganizationAdminAccountOutputResponse: Swift.Equatable {

    public init() {}
}

struct EnableOrganizationAdminAccountOutputResponseBody: Swift.Equatable {
}

extension EnableOrganizationAdminAccountOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct EnableSecurityHubInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableSecurityHubInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableSecurityHubInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableSecurityHubOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableSecurityHubInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableSecurityHubOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableSecurityHubOutputError>
}

extension EnableSecurityHubInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableSecurityHubInput(enableDefaultStandards: \(Swift.String(describing: enableDefaultStandards)), tags: \(Swift.String(describing: tags)))"}
}

extension EnableSecurityHubInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableDefaultStandards = "EnableDefaultStandards"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if enableDefaultStandards != false {
            try encodeContainer.encode(enableDefaultStandards, forKey: .enableDefaultStandards)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct EnableSecurityHubInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableSecurityHubInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableSecurityHubInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableSecurityHubOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableSecurityHubInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableSecurityHubOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableSecurityHubOutputError>
}

public struct EnableSecurityHubInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "EnableSecurityHubInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<EnableSecurityHubInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<EnableSecurityHubOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<EnableSecurityHubInput>
    public typealias MOutput = ClientRuntime.OperationOutput<EnableSecurityHubOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<EnableSecurityHubOutputError>
}

public struct EnableSecurityHubInput: Swift.Equatable {
    /// <p>Whether to enable the security standards that Security Hub has designated as automatically
    ///          enabled. If you do not provide a value for <code>EnableDefaultStandards</code>, it is set
    ///          to <code>true</code>. To not enable the automatically enabled standards, set
    ///             <code>EnableDefaultStandards</code> to <code>false</code>.</p>
    public let enableDefaultStandards: Swift.Bool
    /// <p>The tags to add to the hub resource when you enable Security Hub.</p>
    public let tags: [Swift.String:Swift.String]?

    public init (
        enableDefaultStandards: Swift.Bool = false,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.enableDefaultStandards = enableDefaultStandards
        self.tags = tags
    }
}

struct EnableSecurityHubInputBody: Swift.Equatable {
    public let tags: [Swift.String:Swift.String]?
    public let enableDefaultStandards: Swift.Bool
}

extension EnableSecurityHubInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case enableDefaultStandards = "EnableDefaultStandards"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
        let enableDefaultStandardsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enableDefaultStandards)
        enableDefaultStandards = enableDefaultStandardsDecoded
    }
}

extension EnableSecurityHubOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension EnableSecurityHubOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceConflictException" : self = .resourceConflictException(try ResourceConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum EnableSecurityHubOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case limitExceededException(LimitExceededException)
    case resourceConflictException(ResourceConflictException)
    case unknown(UnknownAWSHttpServiceError)
}

extension EnableSecurityHubOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EnableSecurityHubOutputResponse()"}
}

extension EnableSecurityHubOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct EnableSecurityHubOutputResponse: Swift.Equatable {

    public init() {}
}

struct EnableSecurityHubOutputResponseBody: Swift.Equatable {
}

extension EnableSecurityHubOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SecurityHubClientTypes.FindingProviderFields: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case confidence = "Confidence"
        case criticality = "Criticality"
        case relatedFindings = "RelatedFindings"
        case severity = "Severity"
        case types = "Types"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if confidence != 0 {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if criticality != 0 {
            try encodeContainer.encode(criticality, forKey: .criticality)
        }
        if let relatedFindings = relatedFindings {
            var relatedFindingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedFindings)
            for relatedfindinglist0 in relatedFindings {
                try relatedFindingsContainer.encode(relatedfindinglist0)
            }
        }
        if let severity = severity {
            try encodeContainer.encode(severity, forKey: .severity)
        }
        if let types = types {
            var typesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .types)
            for typelist0 in types {
                try typesContainer.encode(typelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let confidenceDecoded = try containerValues.decode(Swift.Int.self, forKey: .confidence)
        confidence = confidenceDecoded
        let criticalityDecoded = try containerValues.decode(Swift.Int.self, forKey: .criticality)
        criticality = criticalityDecoded
        let relatedFindingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.RelatedFinding?].self, forKey: .relatedFindings)
        var relatedFindingsDecoded0:[SecurityHubClientTypes.RelatedFinding]? = nil
        if let relatedFindingsContainer = relatedFindingsContainer {
            relatedFindingsDecoded0 = [SecurityHubClientTypes.RelatedFinding]()
            for structure0 in relatedFindingsContainer {
                if let structure0 = structure0 {
                    relatedFindingsDecoded0?.append(structure0)
                }
            }
        }
        relatedFindings = relatedFindingsDecoded0
        let severityDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.FindingProviderSeverity.self, forKey: .severity)
        severity = severityDecoded
        let typesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .types)
        var typesDecoded0:[Swift.String]? = nil
        if let typesContainer = typesContainer {
            typesDecoded0 = [Swift.String]()
            for string0 in typesContainer {
                if let string0 = string0 {
                    typesDecoded0?.append(string0)
                }
            }
        }
        types = typesDecoded0
    }
}

extension SecurityHubClientTypes.FindingProviderFields: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FindingProviderFields(confidence: \(Swift.String(describing: confidence)), criticality: \(Swift.String(describing: criticality)), relatedFindings: \(Swift.String(describing: relatedFindings)), severity: \(Swift.String(describing: severity)), types: \(Swift.String(describing: types)))"}
}

extension SecurityHubClientTypes {
    /// <p>In a <code>BatchImportFindings</code> request, finding providers use <code>FindingProviderFields</code> to provide and update values for confidence, criticality, related findings, severity, and types.</p>
    public struct FindingProviderFields: Swift.Equatable {
        /// <p>A finding's confidence. Confidence is defined as the likelihood that a finding
        ///          accurately identifies the behavior or issue that it was intended to identify.</p>
        ///          <p>Confidence is scored on a 0-100 basis using a ratio scale, where 0 means zero percent
        ///          confidence and 100 means 100 percent confidence.</p>
        public let confidence: Swift.Int
        /// <p>The level of importance assigned to the resources associated with the finding.</p>
        ///          <p>A score of 0 means that the underlying resources have no criticality, and a score of 100
        ///          is reserved for the most critical resources.</p>
        public let criticality: Swift.Int
        /// <p>A list of findings that are related to the current finding.</p>
        public let relatedFindings: [SecurityHubClientTypes.RelatedFinding]?
        /// <p>The severity of a finding.</p>
        public let severity: SecurityHubClientTypes.FindingProviderSeverity?
        /// <p>One or more finding types in the format of <code>namespace/category/classifier</code>
        ///          that classify a finding.</p>
        ///          <p>Valid namespace values are: Software and Configuration Checks | TTPs | Effects | Unusual
        ///          Behaviors | Sensitive Data Identifications</p>
        public let types: [Swift.String]?

        public init (
            confidence: Swift.Int = 0,
            criticality: Swift.Int = 0,
            relatedFindings: [SecurityHubClientTypes.RelatedFinding]? = nil,
            severity: SecurityHubClientTypes.FindingProviderSeverity? = nil,
            types: [Swift.String]? = nil
        )
        {
            self.confidence = confidence
            self.criticality = criticality
            self.relatedFindings = relatedFindings
            self.severity = severity
            self.types = types
        }
    }

}

extension SecurityHubClientTypes.FindingProviderSeverity: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case label = "Label"
        case original = "Original"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let label = label {
            try encodeContainer.encode(label.rawValue, forKey: .label)
        }
        if let original = original {
            try encodeContainer.encode(original, forKey: .original)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let labelDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.SeverityLabel.self, forKey: .label)
        label = labelDecoded
        let originalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .original)
        original = originalDecoded
    }
}

extension SecurityHubClientTypes.FindingProviderSeverity: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "FindingProviderSeverity(label: \(Swift.String(describing: label)), original: \(Swift.String(describing: original)))"}
}

extension SecurityHubClientTypes {
    /// <p>The severity assigned to the finding by the finding provider.</p>
    public struct FindingProviderSeverity: Swift.Equatable {
        /// <p>The severity label assigned to the finding by the finding provider.</p>
        public let label: SecurityHubClientTypes.SeverityLabel?
        /// <p>The finding provider's original value for the severity.</p>
        public let original: Swift.String?

        public init (
            label: SecurityHubClientTypes.SeverityLabel? = nil,
            original: Swift.String? = nil
        )
        {
            self.label = label
            self.original = original
        }
    }

}

extension SecurityHubClientTypes.GeoLocation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lat = "Lat"
        case lon = "Lon"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if lat != 0.0 {
            try encodeContainer.encode(lat, forKey: .lat)
        }
        if lon != 0.0 {
            try encodeContainer.encode(lon, forKey: .lon)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lonDecoded = try containerValues.decode(Swift.Double.self, forKey: .lon)
        lon = lonDecoded
        let latDecoded = try containerValues.decode(Swift.Double.self, forKey: .lat)
        lat = latDecoded
    }
}

extension SecurityHubClientTypes.GeoLocation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GeoLocation(lat: \(Swift.String(describing: lat)), lon: \(Swift.String(describing: lon)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides the latitude and longitude coordinates of a location.</p>
    public struct GeoLocation: Swift.Equatable {
        /// <p>The latitude of the location.</p>
        public let lat: Swift.Double
        /// <p>The longitude of the location.</p>
        public let lon: Swift.Double

        public init (
            lat: Swift.Double = 0.0,
            lon: Swift.Double = 0.0
        )
        {
            self.lat = lat
            self.lon = lon
        }
    }

}

extension GetAdministratorAccountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAdministratorAccountInput()"}
}

extension GetAdministratorAccountInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetAdministratorAccountInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAdministratorAccountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAdministratorAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAdministratorAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAdministratorAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAdministratorAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAdministratorAccountOutputError>
}

public struct GetAdministratorAccountInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAdministratorAccountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAdministratorAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAdministratorAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAdministratorAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAdministratorAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAdministratorAccountOutputError>
}

public struct GetAdministratorAccountInput: Swift.Equatable {

    public init() {}
}

struct GetAdministratorAccountInputBody: Swift.Equatable {
}

extension GetAdministratorAccountInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetAdministratorAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAdministratorAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAdministratorAccountOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAdministratorAccountOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAdministratorAccountOutputResponse(administrator: \(Swift.String(describing: administrator)))"}
}

extension GetAdministratorAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAdministratorAccountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.administrator = output.administrator
        } else {
            self.administrator = nil
        }
    }
}

public struct GetAdministratorAccountOutputResponse: Swift.Equatable {
    /// <p>Details about an invitation.</p>
    public let administrator: SecurityHubClientTypes.Invitation?

    public init (
        administrator: SecurityHubClientTypes.Invitation? = nil
    )
    {
        self.administrator = administrator
    }
}

struct GetAdministratorAccountOutputResponseBody: Swift.Equatable {
    public let administrator: SecurityHubClientTypes.Invitation?
}

extension GetAdministratorAccountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case administrator = "Administrator"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let administratorDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Invitation.self, forKey: .administrator)
        administrator = administratorDecoded
    }
}

public struct GetEnabledStandardsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEnabledStandardsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEnabledStandardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEnabledStandardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEnabledStandardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEnabledStandardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEnabledStandardsOutputError>
}

extension GetEnabledStandardsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEnabledStandardsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), standardsSubscriptionArns: \(Swift.String(describing: standardsSubscriptionArns)))"}
}

extension GetEnabledStandardsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case standardsSubscriptionArns = "StandardsSubscriptionArns"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let standardsSubscriptionArns = standardsSubscriptionArns {
            var standardsSubscriptionArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .standardsSubscriptionArns)
            for standardssubscriptionarns0 in standardsSubscriptionArns {
                try standardsSubscriptionArnsContainer.encode(standardssubscriptionarns0)
            }
        }
    }
}

public struct GetEnabledStandardsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEnabledStandardsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEnabledStandardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEnabledStandardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEnabledStandardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEnabledStandardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEnabledStandardsOutputError>
}

public struct GetEnabledStandardsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEnabledStandardsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEnabledStandardsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEnabledStandardsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEnabledStandardsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEnabledStandardsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEnabledStandardsOutputError>
}

public struct GetEnabledStandardsInput: Swift.Equatable {
    /// <p>The maximum number of results to return in the response.</p>
    public let maxResults: Swift.Int
    /// <p>The token that is required for pagination. On your first call to the
    ///             <code>GetEnabledStandards</code> operation, set the value of this parameter to
    ///             <code>NULL</code>.</p>
    ///          <p>For subsequent calls to the operation, to continue listing data, set the value of this
    ///          parameter to the value returned from the previous response.</p>
    public let nextToken: Swift.String?
    /// <p>The list of the standards subscription ARNs for the standards to retrieve.</p>
    public let standardsSubscriptionArns: [Swift.String]?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        standardsSubscriptionArns: [Swift.String]? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.standardsSubscriptionArns = standardsSubscriptionArns
    }
}

struct GetEnabledStandardsInputBody: Swift.Equatable {
    public let standardsSubscriptionArns: [Swift.String]?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int
}

extension GetEnabledStandardsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case standardsSubscriptionArns = "StandardsSubscriptionArns"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let standardsSubscriptionArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .standardsSubscriptionArns)
        var standardsSubscriptionArnsDecoded0:[Swift.String]? = nil
        if let standardsSubscriptionArnsContainer = standardsSubscriptionArnsContainer {
            standardsSubscriptionArnsDecoded0 = [Swift.String]()
            for string0 in standardsSubscriptionArnsContainer {
                if let string0 = string0 {
                    standardsSubscriptionArnsDecoded0?.append(string0)
                }
            }
        }
        standardsSubscriptionArns = standardsSubscriptionArnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetEnabledStandardsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEnabledStandardsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetEnabledStandardsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEnabledStandardsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEnabledStandardsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), standardsSubscriptions: \(Swift.String(describing: standardsSubscriptions)))"}
}

extension GetEnabledStandardsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetEnabledStandardsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.standardsSubscriptions = output.standardsSubscriptions
        } else {
            self.nextToken = nil
            self.standardsSubscriptions = nil
        }
    }
}

public struct GetEnabledStandardsOutputResponse: Swift.Equatable {
    /// <p>The pagination token to use to request the next page of results.</p>
    public let nextToken: Swift.String?
    /// <p>The list of <code>StandardsSubscriptions</code> objects that include information about
    ///          the enabled standards.</p>
    public let standardsSubscriptions: [SecurityHubClientTypes.StandardsSubscription]?

    public init (
        nextToken: Swift.String? = nil,
        standardsSubscriptions: [SecurityHubClientTypes.StandardsSubscription]? = nil
    )
    {
        self.nextToken = nextToken
        self.standardsSubscriptions = standardsSubscriptions
    }
}

struct GetEnabledStandardsOutputResponseBody: Swift.Equatable {
    public let standardsSubscriptions: [SecurityHubClientTypes.StandardsSubscription]?
    public let nextToken: Swift.String?
}

extension GetEnabledStandardsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case standardsSubscriptions = "StandardsSubscriptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let standardsSubscriptionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.StandardsSubscription?].self, forKey: .standardsSubscriptions)
        var standardsSubscriptionsDecoded0:[SecurityHubClientTypes.StandardsSubscription]? = nil
        if let standardsSubscriptionsContainer = standardsSubscriptionsContainer {
            standardsSubscriptionsDecoded0 = [SecurityHubClientTypes.StandardsSubscription]()
            for structure0 in standardsSubscriptionsContainer {
                if let structure0 = structure0 {
                    standardsSubscriptionsDecoded0?.append(structure0)
                }
            }
        }
        standardsSubscriptions = standardsSubscriptionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

public struct GetFindingsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetFindingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetFindingsOutputError>
}

extension GetFindingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetFindingsInput(filters: \(Swift.String(describing: filters)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), sortCriteria: \(Swift.String(describing: sortCriteria)))"}
}

extension GetFindingsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortCriteria = "SortCriteria"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let sortCriteria = sortCriteria {
            var sortCriteriaContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sortCriteria)
            for sortcriteria0 in sortCriteria {
                try sortCriteriaContainer.encode(sortcriteria0)
            }
        }
    }
}

public struct GetFindingsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetFindingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetFindingsOutputError>
}

public struct GetFindingsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetFindingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetFindingsOutputError>
}

public struct GetFindingsInput: Swift.Equatable {
    /// <p>The finding attributes used to define a condition to filter the returned
    ///          findings.</p>
    ///          <p>You can filter by up to 10 finding attributes. For each attribute, you can provide up to
    ///          20 filter values.</p>
    ///          <p>Note that in the available filter fields, <code>WorkflowState</code> is deprecated. To
    ///          search for a finding based on its workflow status, use <code>WorkflowStatus</code>.</p>
    public let filters: SecurityHubClientTypes.AwsSecurityFindingFilters?
    /// <p>The maximum number of findings to return.</p>
    public let maxResults: Swift.Int
    /// <p>The token that is required for pagination. On your first call to the
    ///             <code>GetFindings</code> operation, set the value of this parameter to
    ///          <code>NULL</code>.</p>
    ///          <p>For subsequent calls to the operation, to continue listing data, set the value of this
    ///          parameter to the value returned from the previous response.</p>
    public let nextToken: Swift.String?
    /// <p>The finding attributes used to sort the list of returned findings.</p>
    public let sortCriteria: [SecurityHubClientTypes.SortCriterion]?

    public init (
        filters: SecurityHubClientTypes.AwsSecurityFindingFilters? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        sortCriteria: [SecurityHubClientTypes.SortCriterion]? = nil
    )
    {
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.sortCriteria = sortCriteria
    }
}

struct GetFindingsInputBody: Swift.Equatable {
    public let filters: SecurityHubClientTypes.AwsSecurityFindingFilters?
    public let sortCriteria: [SecurityHubClientTypes.SortCriterion]?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int
}

extension GetFindingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
        case sortCriteria = "SortCriteria"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSecurityFindingFilters.self, forKey: .filters)
        filters = filtersDecoded
        let sortCriteriaContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.SortCriterion?].self, forKey: .sortCriteria)
        var sortCriteriaDecoded0:[SecurityHubClientTypes.SortCriterion]? = nil
        if let sortCriteriaContainer = sortCriteriaContainer {
            sortCriteriaDecoded0 = [SecurityHubClientTypes.SortCriterion]()
            for structure0 in sortCriteriaContainer {
                if let structure0 = structure0 {
                    sortCriteriaDecoded0?.append(structure0)
                }
            }
        }
        sortCriteria = sortCriteriaDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetFindingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetFindingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetFindingsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetFindingsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetFindingsOutputResponse(findings: \(Swift.String(describing: findings)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetFindingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetFindingsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.findings = output.findings
            self.nextToken = output.nextToken
        } else {
            self.findings = nil
            self.nextToken = nil
        }
    }
}

public struct GetFindingsOutputResponse: Swift.Equatable {
    /// <p>The findings that matched the filters specified in the request.</p>
    public let findings: [SecurityHubClientTypes.AwsSecurityFinding]?
    /// <p>The pagination token to use to request the next page of results.</p>
    public let nextToken: Swift.String?

    public init (
        findings: [SecurityHubClientTypes.AwsSecurityFinding]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.findings = findings
        self.nextToken = nextToken
    }
}

struct GetFindingsOutputResponseBody: Swift.Equatable {
    public let findings: [SecurityHubClientTypes.AwsSecurityFinding]?
    public let nextToken: Swift.String?
}

extension GetFindingsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case findings = "Findings"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let findingsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AwsSecurityFinding?].self, forKey: .findings)
        var findingsDecoded0:[SecurityHubClientTypes.AwsSecurityFinding]? = nil
        if let findingsContainer = findingsContainer {
            findingsDecoded0 = [SecurityHubClientTypes.AwsSecurityFinding]()
            for structure0 in findingsContainer {
                if let structure0 = structure0 {
                    findingsDecoded0?.append(structure0)
                }
            }
        }
        findings = findingsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetInsightResultsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInsightResultsInput(insightArn: \(Swift.String(describing: insightArn)))"}
}

extension GetInsightResultsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetInsightResultsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInsightResultsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInsightResultsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInsightResultsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInsightResultsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInsightResultsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInsightResultsOutputError>
}

public struct GetInsightResultsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInsightResultsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInsightResultsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInsightResultsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInsightResultsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInsightResultsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInsightResultsOutputError>
}

public struct GetInsightResultsInput: Swift.Equatable {
    /// <p>The ARN of the insight for which to return results.</p>
    public let insightArn: Swift.String?

    public init (
        insightArn: Swift.String? = nil
    )
    {
        self.insightArn = insightArn
    }
}

struct GetInsightResultsInputBody: Swift.Equatable {
}

extension GetInsightResultsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetInsightResultsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInsightResultsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetInsightResultsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInsightResultsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInsightResultsOutputResponse(insightResults: \(Swift.String(describing: insightResults)))"}
}

extension GetInsightResultsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetInsightResultsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.insightResults = output.insightResults
        } else {
            self.insightResults = nil
        }
    }
}

public struct GetInsightResultsOutputResponse: Swift.Equatable {
    /// <p>The insight results returned by the operation.</p>
    public let insightResults: SecurityHubClientTypes.InsightResults?

    public init (
        insightResults: SecurityHubClientTypes.InsightResults? = nil
    )
    {
        self.insightResults = insightResults
    }
}

struct GetInsightResultsOutputResponseBody: Swift.Equatable {
    public let insightResults: SecurityHubClientTypes.InsightResults?
}

extension GetInsightResultsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightResults = "InsightResults"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightResultsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.InsightResults.self, forKey: .insightResults)
        insightResults = insightResultsDecoded
    }
}

public struct GetInsightsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInsightsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInsightsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInsightsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInsightsOutputError>
}

extension GetInsightsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInsightsInput(insightArns: \(Swift.String(describing: insightArns)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetInsightsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightArns = "InsightArns"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let insightArns = insightArns {
            var insightArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .insightArns)
            for arnlist0 in insightArns {
                try insightArnsContainer.encode(arnlist0)
            }
        }
        if maxResults != 0 {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct GetInsightsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInsightsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInsightsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInsightsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInsightsOutputError>
}

public struct GetInsightsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInsightsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInsightsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInsightsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInsightsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInsightsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInsightsOutputError>
}

public struct GetInsightsInput: Swift.Equatable {
    /// <p>The ARNs of the insights to describe. If you do not provide any insight ARNs, then
    ///             <code>GetInsights</code> returns all of your custom insights. It does not return any
    ///          managed insights.</p>
    public let insightArns: [Swift.String]?
    /// <p>The maximum number of items to return in the response.</p>
    public let maxResults: Swift.Int
    /// <p>The token that is required for pagination. On your first call to the
    ///             <code>GetInsights</code> operation, set the value of this parameter to
    ///          <code>NULL</code>.</p>
    ///          <p>For subsequent calls to the operation, to continue listing data, set the value of this
    ///          parameter to the value returned from the previous response.</p>
    public let nextToken: Swift.String?

    public init (
        insightArns: [Swift.String]? = nil,
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.insightArns = insightArns
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetInsightsInputBody: Swift.Equatable {
    public let insightArns: [Swift.String]?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int
}

extension GetInsightsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insightArns = "InsightArns"
        case maxResults = "MaxResults"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .insightArns)
        var insightArnsDecoded0:[Swift.String]? = nil
        if let insightArnsContainer = insightArnsContainer {
            insightArnsDecoded0 = [Swift.String]()
            for string0 in insightArnsContainer {
                if let string0 = string0 {
                    insightArnsDecoded0?.append(string0)
                }
            }
        }
        insightArns = insightArnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetInsightsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInsightsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetInsightsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInsightsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInsightsOutputResponse(insights: \(Swift.String(describing: insights)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetInsightsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetInsightsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.insights = output.insights
            self.nextToken = output.nextToken
        } else {
            self.insights = nil
            self.nextToken = nil
        }
    }
}

public struct GetInsightsOutputResponse: Swift.Equatable {
    /// <p>The insights returned by the operation.</p>
    public let insights: [SecurityHubClientTypes.Insight]?
    /// <p>The pagination token to use to request the next page of results.</p>
    public let nextToken: Swift.String?

    public init (
        insights: [SecurityHubClientTypes.Insight]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.insights = insights
        self.nextToken = nextToken
    }
}

struct GetInsightsOutputResponseBody: Swift.Equatable {
    public let insights: [SecurityHubClientTypes.Insight]?
    public let nextToken: Swift.String?
}

extension GetInsightsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case insights = "Insights"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Insight?].self, forKey: .insights)
        var insightsDecoded0:[SecurityHubClientTypes.Insight]? = nil
        if let insightsContainer = insightsContainer {
            insightsDecoded0 = [SecurityHubClientTypes.Insight]()
            for structure0 in insightsContainer {
                if let structure0 = structure0 {
                    insightsDecoded0?.append(structure0)
                }
            }
        }
        insights = insightsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension GetInvitationsCountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInvitationsCountInput()"}
}

extension GetInvitationsCountInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetInvitationsCountInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInvitationsCountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInvitationsCountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInvitationsCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInvitationsCountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInvitationsCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInvitationsCountOutputError>
}

public struct GetInvitationsCountInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetInvitationsCountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetInvitationsCountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetInvitationsCountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetInvitationsCountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetInvitationsCountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetInvitationsCountOutputError>
}

public struct GetInvitationsCountInput: Swift.Equatable {

    public init() {}
}

struct GetInvitationsCountInputBody: Swift.Equatable {
}

extension GetInvitationsCountInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetInvitationsCountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetInvitationsCountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetInvitationsCountOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetInvitationsCountOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetInvitationsCountOutputResponse(invitationsCount: \(Swift.String(describing: invitationsCount)))"}
}

extension GetInvitationsCountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetInvitationsCountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.invitationsCount = output.invitationsCount
        } else {
            self.invitationsCount = 0
        }
    }
}

public struct GetInvitationsCountOutputResponse: Swift.Equatable {
    /// <p>The number of all membership invitations sent to this Security Hub member account, not
    ///          including the currently accepted invitation.</p>
    public let invitationsCount: Swift.Int

    public init (
        invitationsCount: Swift.Int = 0
    )
    {
        self.invitationsCount = invitationsCount
    }
}

struct GetInvitationsCountOutputResponseBody: Swift.Equatable {
    public let invitationsCount: Swift.Int
}

extension GetInvitationsCountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invitationsCount = "InvitationsCount"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invitationsCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .invitationsCount)
        invitationsCount = invitationsCountDecoded
    }
}

extension GetMasterAccountInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMasterAccountInput()"}
}

extension GetMasterAccountInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetMasterAccountInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMasterAccountInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMasterAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMasterAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMasterAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMasterAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMasterAccountOutputError>
}

public struct GetMasterAccountInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMasterAccountInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMasterAccountInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMasterAccountOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMasterAccountInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMasterAccountOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMasterAccountOutputError>
}

public struct GetMasterAccountInput: Swift.Equatable {

    public init() {}
}

struct GetMasterAccountInputBody: Swift.Equatable {
}

extension GetMasterAccountInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetMasterAccountOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMasterAccountOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMasterAccountOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMasterAccountOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMasterAccountOutputResponse(master: \(Swift.String(describing: master)))"}
}

extension GetMasterAccountOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMasterAccountOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.master = output.master
        } else {
            self.master = nil
        }
    }
}

public struct GetMasterAccountOutputResponse: Swift.Equatable {
    /// <p>A list of details about the Security Hub administrator account for the current member account.
    ///       </p>
    public let master: SecurityHubClientTypes.Invitation?

    public init (
        master: SecurityHubClientTypes.Invitation? = nil
    )
    {
        self.master = master
    }
}

struct GetMasterAccountOutputResponseBody: Swift.Equatable {
    public let master: SecurityHubClientTypes.Invitation?
}

extension GetMasterAccountOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case master = "Master"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let masterDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Invitation.self, forKey: .master)
        master = masterDecoded
    }
}

public struct GetMembersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMembersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMembersOutputError>
}

extension GetMembersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMembersInput(accountIds: \(Swift.String(describing: accountIds)))"}
}

extension GetMembersInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountidlist0 in accountIds {
                try accountIdsContainer.encode(accountidlist0)
            }
        }
    }
}

public struct GetMembersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMembersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMembersOutputError>
}

public struct GetMembersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMembersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMembersOutputError>
}

public struct GetMembersInput: Swift.Equatable {
    /// <p>The list of account IDs for the Security Hub member accounts to return the details for. </p>
    public let accountIds: [Swift.String]?

    public init (
        accountIds: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
    }
}

struct GetMembersInputBody: Swift.Equatable {
    public let accountIds: [Swift.String]?
}

extension GetMembersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
    }
}

extension GetMembersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMembersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMembersOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMembersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMembersOutputResponse(members: \(Swift.String(describing: members)), unprocessedAccounts: \(Swift.String(describing: unprocessedAccounts)))"}
}

extension GetMembersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMembersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.members = output.members
            self.unprocessedAccounts = output.unprocessedAccounts
        } else {
            self.members = nil
            self.unprocessedAccounts = nil
        }
    }
}

public struct GetMembersOutputResponse: Swift.Equatable {
    /// <p>The list of details about the Security Hub member accounts.</p>
    public let members: [SecurityHubClientTypes.Member]?
    /// <p>The list of AWS accounts that could not be processed. For each account, the list
    ///          includes the account ID and the email address.</p>
    public let unprocessedAccounts: [SecurityHubClientTypes.Result]?

    public init (
        members: [SecurityHubClientTypes.Member]? = nil,
        unprocessedAccounts: [SecurityHubClientTypes.Result]? = nil
    )
    {
        self.members = members
        self.unprocessedAccounts = unprocessedAccounts
    }
}

struct GetMembersOutputResponseBody: Swift.Equatable {
    public let members: [SecurityHubClientTypes.Member]?
    public let unprocessedAccounts: [SecurityHubClientTypes.Result]?
}

extension GetMembersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case members = "Members"
        case unprocessedAccounts = "UnprocessedAccounts"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let membersContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Member?].self, forKey: .members)
        var membersDecoded0:[SecurityHubClientTypes.Member]? = nil
        if let membersContainer = membersContainer {
            membersDecoded0 = [SecurityHubClientTypes.Member]()
            for structure0 in membersContainer {
                if let structure0 = structure0 {
                    membersDecoded0?.append(structure0)
                }
            }
        }
        members = membersDecoded0
        let unprocessedAccountsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Result?].self, forKey: .unprocessedAccounts)
        var unprocessedAccountsDecoded0:[SecurityHubClientTypes.Result]? = nil
        if let unprocessedAccountsContainer = unprocessedAccountsContainer {
            unprocessedAccountsDecoded0 = [SecurityHubClientTypes.Result]()
            for structure0 in unprocessedAccountsContainer {
                if let structure0 = structure0 {
                    unprocessedAccountsDecoded0?.append(structure0)
                }
            }
        }
        unprocessedAccounts = unprocessedAccountsDecoded0
    }
}

extension SecurityHubClientTypes.IcmpTypeCode: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if code != 0 {
            try encodeContainer.encode(code, forKey: .code)
        }
        if type != 0 {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decode(Swift.Int.self, forKey: .code)
        code = codeDecoded
        let typeDecoded = try containerValues.decode(Swift.Int.self, forKey: .type)
        type = typeDecoded
    }
}

extension SecurityHubClientTypes.IcmpTypeCode: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IcmpTypeCode(code: \(Swift.String(describing: code)), type: \(Swift.String(describing: type)))"}
}

extension SecurityHubClientTypes {
    /// <p>An Internet Control Message Protocol (ICMP) type and code.</p>
    public struct IcmpTypeCode: Swift.Equatable {
        /// <p>The ICMP code for which to deny or allow access. To deny or allow all codes, use the value -1.</p>
        public let code: Swift.Int
        /// <p>The ICMP type for which to deny or allow access. To deny or allow all types, use the value -1.</p>
        public let type: Swift.Int

        public init (
            code: Swift.Int = 0,
            type: Swift.Int = 0
        )
        {
            self.code = code
            self.type = type
        }
    }

}

extension SecurityHubClientTypes.ImportFindingsError: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errorCode = "ErrorCode"
        case errorMessage = "ErrorMessage"
        case id = "Id"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let errorCode = errorCode {
            try encodeContainer.encode(errorCode, forKey: .errorCode)
        }
        if let errorMessage = errorMessage {
            try encodeContainer.encode(errorMessage, forKey: .errorMessage)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let errorCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorCode)
        errorCode = errorCodeDecoded
        let errorMessageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .errorMessage)
        errorMessage = errorMessageDecoded
    }
}

extension SecurityHubClientTypes.ImportFindingsError: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ImportFindingsError(errorCode: \(Swift.String(describing: errorCode)), errorMessage: \(Swift.String(describing: errorMessage)), id: \(Swift.String(describing: id)))"}
}

extension SecurityHubClientTypes {
    /// <p>The list of the findings that cannot be imported. For each finding, the list provides
    ///          the error.</p>
    public struct ImportFindingsError: Swift.Equatable {
        /// <p>The code of the error returned by the <code>BatchImportFindings</code> operation.</p>
        public let errorCode: Swift.String?
        /// <p>The message of the error returned by the <code>BatchImportFindings</code>
        ///          operation.</p>
        public let errorMessage: Swift.String?
        /// <p>The identifier of the finding that could not be updated.</p>
        public let id: Swift.String?

        public init (
            errorCode: Swift.String? = nil,
            errorMessage: Swift.String? = nil,
            id: Swift.String? = nil
        )
        {
            self.errorCode = errorCode
            self.errorMessage = errorMessage
            self.id = id
        }
    }

}

extension SecurityHubClientTypes.Insight: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case groupByAttribute = "GroupByAttribute"
        case insightArn = "InsightArn"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let groupByAttribute = groupByAttribute {
            try encodeContainer.encode(groupByAttribute, forKey: .groupByAttribute)
        }
        if let insightArn = insightArn {
            try encodeContainer.encode(insightArn, forKey: .insightArn)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .insightArn)
        insightArn = insightArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSecurityFindingFilters.self, forKey: .filters)
        filters = filtersDecoded
        let groupByAttributeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupByAttribute)
        groupByAttribute = groupByAttributeDecoded
    }
}

extension SecurityHubClientTypes.Insight: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Insight(filters: \(Swift.String(describing: filters)), groupByAttribute: \(Swift.String(describing: groupByAttribute)), insightArn: \(Swift.String(describing: insightArn)), name: \(Swift.String(describing: name)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains information about a Security Hub insight.</p>
    public struct Insight: Swift.Equatable {
        /// <p>One or more attributes used to filter the findings included in the insight. The insight
        ///          only includes findings that match the criteria defined in the filters.</p>
        public let filters: SecurityHubClientTypes.AwsSecurityFindingFilters?
        /// <p>The grouping attribute for the insight's findings. Indicates how to group the matching
        ///          findings, and identifies the type of item that the insight applies to. For example, if an
        ///          insight is grouped by resource identifier, then the insight produces a list of resource
        ///          identifiers.</p>
        public let groupByAttribute: Swift.String?
        /// <p>The ARN of a Security Hub insight.</p>
        public let insightArn: Swift.String?
        /// <p>The name of a Security Hub insight.</p>
        public let name: Swift.String?

        public init (
            filters: SecurityHubClientTypes.AwsSecurityFindingFilters? = nil,
            groupByAttribute: Swift.String? = nil,
            insightArn: Swift.String? = nil,
            name: Swift.String? = nil
        )
        {
            self.filters = filters
            self.groupByAttribute = groupByAttribute
            self.insightArn = insightArn
            self.name = name
        }
    }

}

extension SecurityHubClientTypes.InsightResultValue: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "Count"
        case groupByAttributeValue = "GroupByAttributeValue"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let groupByAttributeValue = groupByAttributeValue {
            try encodeContainer.encode(groupByAttributeValue, forKey: .groupByAttributeValue)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let groupByAttributeValueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupByAttributeValue)
        groupByAttributeValue = groupByAttributeValueDecoded
        let countDecoded = try containerValues.decode(Swift.Int.self, forKey: .count)
        count = countDecoded
    }
}

extension SecurityHubClientTypes.InsightResultValue: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InsightResultValue(count: \(Swift.String(describing: count)), groupByAttributeValue: \(Swift.String(describing: groupByAttributeValue)))"}
}

extension SecurityHubClientTypes {
    /// <p>The insight result values returned by the <code>GetInsightResults</code>
    ///          operation.</p>
    public struct InsightResultValue: Swift.Equatable {
        /// <p>The number of findings returned for each <code>GroupByAttributeValue</code>.</p>
        public let count: Swift.Int
        /// <p>The value of the attribute that the findings are grouped by for the insight whose
        ///          results are returned by the <code>GetInsightResults</code> operation.</p>
        public let groupByAttributeValue: Swift.String?

        public init (
            count: Swift.Int = 0,
            groupByAttributeValue: Swift.String? = nil
        )
        {
            self.count = count
            self.groupByAttributeValue = groupByAttributeValue
        }
    }

}

extension SecurityHubClientTypes.InsightResults: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case groupByAttribute = "GroupByAttribute"
        case insightArn = "InsightArn"
        case resultValues = "ResultValues"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let groupByAttribute = groupByAttribute {
            try encodeContainer.encode(groupByAttribute, forKey: .groupByAttribute)
        }
        if let insightArn = insightArn {
            try encodeContainer.encode(insightArn, forKey: .insightArn)
        }
        if let resultValues = resultValues {
            var resultValuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .resultValues)
            for insightresultvaluelist0 in resultValues {
                try resultValuesContainer.encode(insightresultvaluelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let insightArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .insightArn)
        insightArn = insightArnDecoded
        let groupByAttributeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupByAttribute)
        groupByAttribute = groupByAttributeDecoded
        let resultValuesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.InsightResultValue?].self, forKey: .resultValues)
        var resultValuesDecoded0:[SecurityHubClientTypes.InsightResultValue]? = nil
        if let resultValuesContainer = resultValuesContainer {
            resultValuesDecoded0 = [SecurityHubClientTypes.InsightResultValue]()
            for structure0 in resultValuesContainer {
                if let structure0 = structure0 {
                    resultValuesDecoded0?.append(structure0)
                }
            }
        }
        resultValues = resultValuesDecoded0
    }
}

extension SecurityHubClientTypes.InsightResults: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InsightResults(groupByAttribute: \(Swift.String(describing: groupByAttribute)), insightArn: \(Swift.String(describing: insightArn)), resultValues: \(Swift.String(describing: resultValues)))"}
}

extension SecurityHubClientTypes {
    /// <p>The insight results returned by the <code>GetInsightResults</code> operation.</p>
    public struct InsightResults: Swift.Equatable {
        /// <p>The attribute that the findings are grouped by for the insight whose results are
        ///          returned by the <code>GetInsightResults</code> operation.</p>
        public let groupByAttribute: Swift.String?
        /// <p>The ARN of the insight whose results are returned by the <code>GetInsightResults</code>
        ///          operation.</p>
        public let insightArn: Swift.String?
        /// <p>The list of insight result values returned by the <code>GetInsightResults</code>
        ///          operation.</p>
        public let resultValues: [SecurityHubClientTypes.InsightResultValue]?

        public init (
            groupByAttribute: Swift.String? = nil,
            insightArn: Swift.String? = nil,
            resultValues: [SecurityHubClientTypes.InsightResultValue]? = nil
        )
        {
            self.groupByAttribute = groupByAttribute
            self.insightArn = insightArn
            self.resultValues = resultValues
        }
    }

}

extension SecurityHubClientTypes {
    public enum IntegrationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case receiveFindingsFromSecurityHub
        case sendFindingsToSecurityHub
        case updateFindingsInSecurityHub
        case sdkUnknown(Swift.String)

        public static var allCases: [IntegrationType] {
            return [
                .receiveFindingsFromSecurityHub,
                .sendFindingsToSecurityHub,
                .updateFindingsInSecurityHub,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .receiveFindingsFromSecurityHub: return "RECEIVE_FINDINGS_FROM_SECURITY_HUB"
            case .sendFindingsToSecurityHub: return "SEND_FINDINGS_TO_SECURITY_HUB"
            case .updateFindingsInSecurityHub: return "UPDATE_FINDINGS_IN_SECURITY_HUB"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = IntegrationType(rawValue: rawValue) ?? IntegrationType.sdkUnknown(rawValue)
        }
    }
}

extension InternalException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalException(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension InternalException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>Internal server error.</p>
public struct InternalException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct InternalExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let code: Swift.String?
}

extension InternalExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension InvalidAccessException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidAccessException(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension InvalidAccessException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidAccessExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>There is an issue with the account used to make the request. Either Security Hub is not enabled
///          for the account, or the account does not have permission to perform this action.</p>
public struct InvalidAccessException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct InvalidAccessExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let code: Swift.String?
}

extension InvalidAccessExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension InvalidInputException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidInputException(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension InvalidInputException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidInputExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request was rejected because you supplied an invalid or out-of-range value for an
///          input parameter.</p>
public struct InvalidInputException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct InvalidInputExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let code: Swift.String?
}

extension InvalidInputExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension SecurityHubClientTypes.Invitation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case invitationId = "InvitationId"
        case invitedAt = "InvitedAt"
        case memberStatus = "MemberStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let invitationId = invitationId {
            try encodeContainer.encode(invitationId, forKey: .invitationId)
        }
        if let invitedAt = invitedAt {
            try encodeContainer.encode(invitedAt.timeIntervalSince1970, forKey: .invitedAt)
        }
        if let memberStatus = memberStatus {
            try encodeContainer.encode(memberStatus, forKey: .memberStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let invitationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .invitationId)
        invitationId = invitationIdDecoded
        let invitedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .invitedAt)
        invitedAt = invitedAtDecoded
        let memberStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memberStatus)
        memberStatus = memberStatusDecoded
    }
}

extension SecurityHubClientTypes.Invitation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Invitation(accountId: \(Swift.String(describing: accountId)), invitationId: \(Swift.String(describing: invitationId)), invitedAt: \(Swift.String(describing: invitedAt)), memberStatus: \(Swift.String(describing: memberStatus)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about an invitation.</p>
    public struct Invitation: Swift.Equatable {
        /// <p>The account ID of the Security Hub administrator account that the invitation was sent from.</p>
        public let accountId: Swift.String?
        /// <p>The ID of the invitation sent to the member account.</p>
        public let invitationId: Swift.String?
        /// <p>The timestamp of when the invitation was sent.</p>
        public let invitedAt: ClientRuntime.Date?
        /// <p>The current status of the association between the member and administrator accounts.</p>
        public let memberStatus: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            invitationId: Swift.String? = nil,
            invitedAt: ClientRuntime.Date? = nil,
            memberStatus: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.invitationId = invitationId
            self.invitedAt = invitedAt
            self.memberStatus = memberStatus
        }
    }

}

public struct InviteMembersInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "InviteMembersInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<InviteMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<InviteMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<InviteMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<InviteMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<InviteMembersOutputError>
}

extension InviteMembersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InviteMembersInput(accountIds: \(Swift.String(describing: accountIds)))"}
}

extension InviteMembersInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountidlist0 in accountIds {
                try accountIdsContainer.encode(accountidlist0)
            }
        }
    }
}

public struct InviteMembersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "InviteMembersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<InviteMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<InviteMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<InviteMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<InviteMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<InviteMembersOutputError>
}

public struct InviteMembersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "InviteMembersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<InviteMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<InviteMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<InviteMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<InviteMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<InviteMembersOutputError>
}

public struct InviteMembersInput: Swift.Equatable {
    /// <p>The list of account IDs of the AWS accounts to invite to Security Hub as members. </p>
    public let accountIds: [Swift.String]?

    public init (
        accountIds: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
    }
}

struct InviteMembersInputBody: Swift.Equatable {
    public let accountIds: [Swift.String]?
}

extension InviteMembersInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds = "AccountIds"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
    }
}

extension InviteMembersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension InviteMembersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum InviteMembersOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension InviteMembersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InviteMembersOutputResponse(unprocessedAccounts: \(Swift.String(describing: unprocessedAccounts)))"}
}

extension InviteMembersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InviteMembersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.unprocessedAccounts = output.unprocessedAccounts
        } else {
            self.unprocessedAccounts = nil
        }
    }
}

public struct InviteMembersOutputResponse: Swift.Equatable {
    /// <p>The list of AWS accounts that could not be processed. For each account, the list
    ///          includes the account ID and the email address.</p>
    public let unprocessedAccounts: [SecurityHubClientTypes.Result]?

    public init (
        unprocessedAccounts: [SecurityHubClientTypes.Result]? = nil
    )
    {
        self.unprocessedAccounts = unprocessedAccounts
    }
}

struct InviteMembersOutputResponseBody: Swift.Equatable {
    public let unprocessedAccounts: [SecurityHubClientTypes.Result]?
}

extension InviteMembersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case unprocessedAccounts = "UnprocessedAccounts"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let unprocessedAccountsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Result?].self, forKey: .unprocessedAccounts)
        var unprocessedAccountsDecoded0:[SecurityHubClientTypes.Result]? = nil
        if let unprocessedAccountsContainer = unprocessedAccountsContainer {
            unprocessedAccountsDecoded0 = [SecurityHubClientTypes.Result]()
            for structure0 in unprocessedAccountsContainer {
                if let structure0 = structure0 {
                    unprocessedAccountsDecoded0?.append(structure0)
                }
            }
        }
        unprocessedAccounts = unprocessedAccountsDecoded0
    }
}

extension SecurityHubClientTypes.IpFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cidr = "Cidr"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cidr = cidr {
            try encodeContainer.encode(cidr, forKey: .cidr)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let cidrDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidr)
        cidr = cidrDecoded
    }
}

extension SecurityHubClientTypes.IpFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IpFilter(cidr: \(Swift.String(describing: cidr)))"}
}

extension SecurityHubClientTypes {
    /// <p>The IP filter for querying findings.</p>
    public struct IpFilter: Swift.Equatable {
        /// <p>A finding's CIDR value.</p>
        public let cidr: Swift.String?

        public init (
            cidr: Swift.String? = nil
        )
        {
            self.cidr = cidr
        }
    }

}

extension SecurityHubClientTypes.IpOrganizationDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case asn = "Asn"
        case asnOrg = "AsnOrg"
        case isp = "Isp"
        case org = "Org"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if asn != 0 {
            try encodeContainer.encode(asn, forKey: .asn)
        }
        if let asnOrg = asnOrg {
            try encodeContainer.encode(asnOrg, forKey: .asnOrg)
        }
        if let isp = isp {
            try encodeContainer.encode(isp, forKey: .isp)
        }
        if let org = org {
            try encodeContainer.encode(org, forKey: .org)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let asnDecoded = try containerValues.decode(Swift.Int.self, forKey: .asn)
        asn = asnDecoded
        let asnOrgDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .asnOrg)
        asnOrg = asnOrgDecoded
        let ispDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .isp)
        isp = ispDecoded
        let orgDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .org)
        org = orgDecoded
    }
}

extension SecurityHubClientTypes.IpOrganizationDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "IpOrganizationDetails(asn: \(Swift.String(describing: asn)), asnOrg: \(Swift.String(describing: asnOrg)), isp: \(Swift.String(describing: isp)), org: \(Swift.String(describing: org)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about an internet provider.</p>
    public struct IpOrganizationDetails: Swift.Equatable {
        /// <p>The Autonomous System Number (ASN) of the internet provider</p>
        public let asn: Swift.Int
        /// <p>The name of the organization that registered the ASN.</p>
        public let asnOrg: Swift.String?
        /// <p>The ISP information for the internet provider.</p>
        public let isp: Swift.String?
        /// <p>The name of the internet provider.</p>
        public let org: Swift.String?

        public init (
            asn: Swift.Int = 0,
            asnOrg: Swift.String? = nil,
            isp: Swift.String? = nil,
            org: Swift.String? = nil
        )
        {
            self.asn = asn
            self.asnOrg = asnOrg
            self.isp = isp
            self.org = org
        }
    }

}

extension SecurityHubClientTypes.Ipv6CidrBlockAssociation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case associationId = "AssociationId"
        case cidrBlockState = "CidrBlockState"
        case ipv6CidrBlock = "Ipv6CidrBlock"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let associationId = associationId {
            try encodeContainer.encode(associationId, forKey: .associationId)
        }
        if let cidrBlockState = cidrBlockState {
            try encodeContainer.encode(cidrBlockState, forKey: .cidrBlockState)
        }
        if let ipv6CidrBlock = ipv6CidrBlock {
            try encodeContainer.encode(ipv6CidrBlock, forKey: .ipv6CidrBlock)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let associationIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .associationId)
        associationId = associationIdDecoded
        let ipv6CidrBlockDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ipv6CidrBlock)
        ipv6CidrBlock = ipv6CidrBlockDecoded
        let cidrBlockStateDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .cidrBlockState)
        cidrBlockState = cidrBlockStateDecoded
    }
}

extension SecurityHubClientTypes.Ipv6CidrBlockAssociation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Ipv6CidrBlockAssociation(associationId: \(Swift.String(describing: associationId)), cidrBlockState: \(Swift.String(describing: cidrBlockState)), ipv6CidrBlock: \(Swift.String(describing: ipv6CidrBlock)))"}
}

extension SecurityHubClientTypes {
    /// <p>An IPV6 CIDR block association.</p>
    public struct Ipv6CidrBlockAssociation: Swift.Equatable {
        /// <p>The association ID for the IPv6 CIDR block.</p>
        public let associationId: Swift.String?
        /// <p>Information about the state of the CIDR block.</p>
        public let cidrBlockState: Swift.String?
        /// <p>The IPv6 CIDR block.</p>
        public let ipv6CidrBlock: Swift.String?

        public init (
            associationId: Swift.String? = nil,
            cidrBlockState: Swift.String? = nil,
            ipv6CidrBlock: Swift.String? = nil
        )
        {
            self.associationId = associationId
            self.cidrBlockState = cidrBlockState
            self.ipv6CidrBlock = ipv6CidrBlock
        }
    }

}

extension SecurityHubClientTypes.KeywordFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension SecurityHubClientTypes.KeywordFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "KeywordFilter(value: \(Swift.String(describing: value)))"}
}

extension SecurityHubClientTypes {
    /// <p>A keyword filter for querying findings.</p>
    public struct KeywordFilter: Swift.Equatable {
        /// <p>A value for the keyword.</p>
        public let value: Swift.String?

        public init (
            value: Swift.String? = nil
        )
        {
            self.value = value
        }
    }

}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request was rejected because it attempted to create resources beyond the current AWS
///          account or throttling limits. The error code describes the limit exceeded.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let code: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension ListEnabledProductsForImportInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListEnabledProductsForImportInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListEnabledProductsForImportInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListEnabledProductsForImportInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListEnabledProductsForImportInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListEnabledProductsForImportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListEnabledProductsForImportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListEnabledProductsForImportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListEnabledProductsForImportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListEnabledProductsForImportOutputError>
}

public struct ListEnabledProductsForImportInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListEnabledProductsForImportInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListEnabledProductsForImportInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListEnabledProductsForImportOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListEnabledProductsForImportInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListEnabledProductsForImportOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListEnabledProductsForImportOutputError>
}

public struct ListEnabledProductsForImportInput: Swift.Equatable {
    /// <p>The maximum number of items to return in the response.</p>
    public let maxResults: Swift.Int
    /// <p>The token that is required for pagination. On your first call to the
    ///             <code>ListEnabledProductsForImport</code> operation, set the value of this parameter to
    ///             <code>NULL</code>.</p>
    ///          <p>For subsequent calls to the operation, to continue listing data, set the value of this
    ///          parameter to the value returned from the previous response.</p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListEnabledProductsForImportInputBody: Swift.Equatable {
}

extension ListEnabledProductsForImportInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListEnabledProductsForImportOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListEnabledProductsForImportOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListEnabledProductsForImportOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListEnabledProductsForImportOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListEnabledProductsForImportOutputResponse(nextToken: \(Swift.String(describing: nextToken)), productSubscriptions: \(Swift.String(describing: productSubscriptions)))"}
}

extension ListEnabledProductsForImportOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListEnabledProductsForImportOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.productSubscriptions = output.productSubscriptions
        } else {
            self.nextToken = nil
            self.productSubscriptions = nil
        }
    }
}

public struct ListEnabledProductsForImportOutputResponse: Swift.Equatable {
    /// <p>The pagination token to use to request the next page of results.</p>
    public let nextToken: Swift.String?
    /// <p>The list of ARNs for the resources that represent your subscriptions to products. </p>
    public let productSubscriptions: [Swift.String]?

    public init (
        nextToken: Swift.String? = nil,
        productSubscriptions: [Swift.String]? = nil
    )
    {
        self.nextToken = nextToken
        self.productSubscriptions = productSubscriptions
    }
}

struct ListEnabledProductsForImportOutputResponseBody: Swift.Equatable {
    public let productSubscriptions: [Swift.String]?
    public let nextToken: Swift.String?
}

extension ListEnabledProductsForImportOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case productSubscriptions = "ProductSubscriptions"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productSubscriptionsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .productSubscriptions)
        var productSubscriptionsDecoded0:[Swift.String]? = nil
        if let productSubscriptionsContainer = productSubscriptionsContainer {
            productSubscriptionsDecoded0 = [Swift.String]()
            for string0 in productSubscriptionsContainer {
                if let string0 = string0 {
                    productSubscriptionsDecoded0?.append(string0)
                }
            }
        }
        productSubscriptions = productSubscriptionsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListInvitationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInvitationsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListInvitationsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListInvitationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInvitationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInvitationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInvitationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInvitationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInvitationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInvitationsOutputError>
}

public struct ListInvitationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListInvitationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListInvitationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListInvitationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListInvitationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListInvitationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListInvitationsOutputError>
}

public struct ListInvitationsInput: Swift.Equatable {
    /// <p>The maximum number of items to return in the response. </p>
    public let maxResults: Swift.Int
    /// <p>The token that is required for pagination. On your first call to the
    ///             <code>ListInvitations</code> operation, set the value of this parameter to
    ///             <code>NULL</code>.</p>
    ///          <p>For subsequent calls to the operation, to continue listing data, set the value of this
    ///          parameter to the value returned from the previous response.</p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListInvitationsInputBody: Swift.Equatable {
}

extension ListInvitationsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListInvitationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListInvitationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListInvitationsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListInvitationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListInvitationsOutputResponse(invitations: \(Swift.String(describing: invitations)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListInvitationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListInvitationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.invitations = output.invitations
            self.nextToken = output.nextToken
        } else {
            self.invitations = nil
            self.nextToken = nil
        }
    }
}

public struct ListInvitationsOutputResponse: Swift.Equatable {
    /// <p>The details of the invitations returned by the operation.</p>
    public let invitations: [SecurityHubClientTypes.Invitation]?
    /// <p>The pagination token to use to request the next page of results.</p>
    public let nextToken: Swift.String?

    public init (
        invitations: [SecurityHubClientTypes.Invitation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.invitations = invitations
        self.nextToken = nextToken
    }
}

struct ListInvitationsOutputResponseBody: Swift.Equatable {
    public let invitations: [SecurityHubClientTypes.Invitation]?
    public let nextToken: Swift.String?
}

extension ListInvitationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case invitations = "Invitations"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let invitationsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Invitation?].self, forKey: .invitations)
        var invitationsDecoded0:[SecurityHubClientTypes.Invitation]? = nil
        if let invitationsContainer = invitationsContainer {
            invitationsDecoded0 = [SecurityHubClientTypes.Invitation]()
            for structure0 in invitationsContainer {
                if let structure0 = structure0 {
                    invitationsDecoded0?.append(structure0)
                }
            }
        }
        invitations = invitationsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListMembersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMembersInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), onlyAssociated: \(Swift.String(describing: onlyAssociated)))"}
}

extension ListMembersInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListMembersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMembersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMembersOutputError>
}

public struct ListMembersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMembersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMembersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMembersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        if input.operationInput.onlyAssociated != false {
            let onlyAssociatedQueryItem = ClientRuntime.URLQueryItem(name: "OnlyAssociated".urlPercentEncoding(), value: Swift.String(input.operationInput.onlyAssociated).urlPercentEncoding())
            input.builder.withQueryItem(onlyAssociatedQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMembersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMembersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMembersOutputError>
}

public struct ListMembersInput: Swift.Equatable {
    /// <p>The maximum number of items to return in the response. </p>
    public let maxResults: Swift.Int
    /// <p>The token that is required for pagination. On your first call to the
    ///             <code>ListMembers</code> operation, set the value of this parameter to
    ///          <code>NULL</code>.</p>
    ///          <p>For subsequent calls to the operation, to continue listing data, set the value of this
    ///          parameter to the value returned from the previous response.</p>
    public let nextToken: Swift.String?
    /// <p>Specifies which member accounts to include in the response based on their relationship
    ///          status with the administrator account. The default value is <code>TRUE</code>.</p>
    ///          <p>If <code>OnlyAssociated</code> is set to <code>TRUE</code>, the response includes member
    ///          accounts whose relationship status with the administrator account is set to <code>ENABLED</code>.</p>
    ///          <p>If <code>OnlyAssociated</code> is set to <code>FALSE</code>, the response includes all
    ///          existing member accounts. </p>
    public let onlyAssociated: Swift.Bool

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil,
        onlyAssociated: Swift.Bool = false
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.onlyAssociated = onlyAssociated
    }
}

struct ListMembersInputBody: Swift.Equatable {
}

extension ListMembersInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListMembersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMembersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMembersOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMembersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMembersOutputResponse(members: \(Swift.String(describing: members)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListMembersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListMembersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.members = output.members
            self.nextToken = output.nextToken
        } else {
            self.members = nil
            self.nextToken = nil
        }
    }
}

public struct ListMembersOutputResponse: Swift.Equatable {
    /// <p>Member details returned by the operation.</p>
    public let members: [SecurityHubClientTypes.Member]?
    /// <p>The pagination token to use to request the next page of results.</p>
    public let nextToken: Swift.String?

    public init (
        members: [SecurityHubClientTypes.Member]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.members = members
        self.nextToken = nextToken
    }
}

struct ListMembersOutputResponseBody: Swift.Equatable {
    public let members: [SecurityHubClientTypes.Member]?
    public let nextToken: Swift.String?
}

extension ListMembersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case members = "Members"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let membersContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Member?].self, forKey: .members)
        var membersDecoded0:[SecurityHubClientTypes.Member]? = nil
        if let membersContainer = membersContainer {
            membersDecoded0 = [SecurityHubClientTypes.Member]()
            for structure0 in membersContainer {
                if let structure0 = structure0 {
                    membersDecoded0?.append(structure0)
                }
            }
        }
        members = membersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListOrganizationAdminAccountsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListOrganizationAdminAccountsInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListOrganizationAdminAccountsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListOrganizationAdminAccountsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListOrganizationAdminAccountsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListOrganizationAdminAccountsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListOrganizationAdminAccountsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListOrganizationAdminAccountsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListOrganizationAdminAccountsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListOrganizationAdminAccountsOutputError>
}

public struct ListOrganizationAdminAccountsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListOrganizationAdminAccountsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListOrganizationAdminAccountsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListOrganizationAdminAccountsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let nextToken = input.operationInput.nextToken {
            let nextTokenQueryItem = ClientRuntime.URLQueryItem(name: "NextToken".urlPercentEncoding(), value: Swift.String(nextToken).urlPercentEncoding())
            input.builder.withQueryItem(nextTokenQueryItem)
        }
        if input.operationInput.maxResults != 0 {
            let maxResultsQueryItem = ClientRuntime.URLQueryItem(name: "MaxResults".urlPercentEncoding(), value: Swift.String(input.operationInput.maxResults).urlPercentEncoding())
            input.builder.withQueryItem(maxResultsQueryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListOrganizationAdminAccountsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListOrganizationAdminAccountsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListOrganizationAdminAccountsOutputError>
}

public struct ListOrganizationAdminAccountsInput: Swift.Equatable {
    /// <p>The maximum number of items to return in the response.</p>
    public let maxResults: Swift.Int
    /// <p>The token that is required for pagination. On your first call to the
    ///             <code>ListOrganizationAdminAccounts</code> operation, set the value of this parameter to
    ///             <code>NULL</code>. For subsequent calls to the operation, to continue listing data, set
    ///          the value of this parameter to the value returned from the previous response. </p>
    public let nextToken: Swift.String?

    public init (
        maxResults: Swift.Int = 0,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListOrganizationAdminAccountsInputBody: Swift.Equatable {
}

extension ListOrganizationAdminAccountsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListOrganizationAdminAccountsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListOrganizationAdminAccountsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListOrganizationAdminAccountsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListOrganizationAdminAccountsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListOrganizationAdminAccountsOutputResponse(adminAccounts: \(Swift.String(describing: adminAccounts)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListOrganizationAdminAccountsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListOrganizationAdminAccountsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.adminAccounts = output.adminAccounts
            self.nextToken = output.nextToken
        } else {
            self.adminAccounts = nil
            self.nextToken = nil
        }
    }
}

public struct ListOrganizationAdminAccountsOutputResponse: Swift.Equatable {
    /// <p>The list of Security Hub administrator accounts.</p>
    public let adminAccounts: [SecurityHubClientTypes.AdminAccount]?
    /// <p>The pagination token to use to request the next page of results.</p>
    public let nextToken: Swift.String?

    public init (
        adminAccounts: [SecurityHubClientTypes.AdminAccount]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.adminAccounts = adminAccounts
        self.nextToken = nextToken
    }
}

struct ListOrganizationAdminAccountsOutputResponseBody: Swift.Equatable {
    public let adminAccounts: [SecurityHubClientTypes.AdminAccount]?
    public let nextToken: Swift.String?
}

extension ListOrganizationAdminAccountsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case adminAccounts = "AdminAccounts"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let adminAccountsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.AdminAccount?].self, forKey: .adminAccounts)
        var adminAccountsDecoded0:[SecurityHubClientTypes.AdminAccount]? = nil
        if let adminAccountsContainer = adminAccountsContainer {
            adminAccountsDecoded0 = [SecurityHubClientTypes.AdminAccount]()
            for structure0 in adminAccountsContainer {
                if let structure0 = structure0 {
                    adminAccountsDecoded0?.append(structure0)
                }
            }
        }
        adminAccounts = adminAccountsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// <p>The ARN of the resource to retrieve tags for.</p>
    public let resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.tags = output.tags
        } else {
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// <p>The tags associated with a resource.</p>
    public let tags: [Swift.String:Swift.String]?

    public init (
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let tags: [Swift.String:Swift.String]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension SecurityHubClientTypes.LoadBalancerState: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case reason = "Reason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let reason = reason {
            try encodeContainer.encode(reason, forKey: .reason)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let reasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reason)
        reason = reasonDecoded
    }
}

extension SecurityHubClientTypes.LoadBalancerState: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LoadBalancerState(code: \(Swift.String(describing: code)), reason: \(Swift.String(describing: reason)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the state of the load balancer.</p>
    public struct LoadBalancerState: Swift.Equatable {
        /// <p>The state code. The initial state of the load balancer is provisioning.</p>
        ///          <p>After the load balancer is fully set up and ready to route traffic, its state is
        ///          active.</p>
        ///          <p>If the load balancer could not be set up, its state is failed. </p>
        public let code: Swift.String?
        /// <p>A description of the state.</p>
        public let reason: Swift.String?

        public init (
            code: Swift.String? = nil,
            reason: Swift.String? = nil
        )
        {
            self.code = code
            self.reason = reason
        }
    }

}

extension SecurityHubClientTypes.Malware: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case path = "Path"
        case state = "State"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if let state = state {
            try encodeContainer.encode(state.rawValue, forKey: .state)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let typeDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.MalwareType.self, forKey: .type)
        type = typeDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let stateDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.MalwareState.self, forKey: .state)
        state = stateDecoded
    }
}

extension SecurityHubClientTypes.Malware: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Malware(name: \(Swift.String(describing: name)), path: \(Swift.String(describing: path)), state: \(Swift.String(describing: state)), type: \(Swift.String(describing: type)))"}
}

extension SecurityHubClientTypes {
    /// <p>A list of malware related to a finding.</p>
    public struct Malware: Swift.Equatable {
        /// <p>The name of the malware that was observed.</p>
        public let name: Swift.String?
        /// <p>The file system path of the malware that was observed.</p>
        public let path: Swift.String?
        /// <p>The state of the malware that was observed.</p>
        public let state: SecurityHubClientTypes.MalwareState?
        /// <p>The type of the malware that was observed.</p>
        public let type: SecurityHubClientTypes.MalwareType?

        public init (
            name: Swift.String? = nil,
            path: Swift.String? = nil,
            state: SecurityHubClientTypes.MalwareState? = nil,
            type: SecurityHubClientTypes.MalwareType? = nil
        )
        {
            self.name = name
            self.path = path
            self.state = state
            self.type = type
        }
    }

}

extension SecurityHubClientTypes {
    public enum MalwareState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case observed
        case removalFailed
        case removed
        case sdkUnknown(Swift.String)

        public static var allCases: [MalwareState] {
            return [
                .observed,
                .removalFailed,
                .removed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .observed: return "OBSERVED"
            case .removalFailed: return "REMOVAL_FAILED"
            case .removed: return "REMOVED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MalwareState(rawValue: rawValue) ?? MalwareState.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes {
    public enum MalwareType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case adware
        case blendedThreat
        case botnetAgent
        case coinMiner
        case exploitKit
        case keylogger
        case macro
        case potentiallyUnwanted
        case ransomware
        case remoteAccess
        case rootkit
        case spyware
        case trojan
        case virus
        case worm
        case sdkUnknown(Swift.String)

        public static var allCases: [MalwareType] {
            return [
                .adware,
                .blendedThreat,
                .botnetAgent,
                .coinMiner,
                .exploitKit,
                .keylogger,
                .macro,
                .potentiallyUnwanted,
                .ransomware,
                .remoteAccess,
                .rootkit,
                .spyware,
                .trojan,
                .virus,
                .worm,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .adware: return "ADWARE"
            case .blendedThreat: return "BLENDED_THREAT"
            case .botnetAgent: return "BOTNET_AGENT"
            case .coinMiner: return "COIN_MINER"
            case .exploitKit: return "EXPLOIT_KIT"
            case .keylogger: return "KEYLOGGER"
            case .macro: return "MACRO"
            case .potentiallyUnwanted: return "POTENTIALLY_UNWANTED"
            case .ransomware: return "RANSOMWARE"
            case .remoteAccess: return "REMOTE_ACCESS"
            case .rootkit: return "ROOTKIT"
            case .spyware: return "SPYWARE"
            case .trojan: return "TROJAN"
            case .virus: return "VIRUS"
            case .worm: return "WORM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MalwareType(rawValue: rawValue) ?? MalwareType.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes.MapFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparison = "Comparison"
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparison = comparison {
            try encodeContainer.encode(comparison.rawValue, forKey: .comparison)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let comparisonDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.MapFilterComparison.self, forKey: .comparison)
        comparison = comparisonDecoded
    }
}

extension SecurityHubClientTypes.MapFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MapFilter(comparison: \(Swift.String(describing: comparison)), key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension SecurityHubClientTypes {
    /// <p>A map filter for querying findings. Each map filter provides the field to check, the
    ///          value to look for, and the comparison operator.</p>
    public struct MapFilter: Swift.Equatable {
        /// <p>The condition to apply to the key value when querying for findings with a map
        ///          filter.</p>
        ///          <p>To search for values that exactly match the filter value, use <code>EQUALS</code>. For
        ///          example, for the <code>ResourceTags</code> field, the filter <code>Department EQUALS
        ///             Security</code> matches findings that have the value <code>Security</code> for the tag
        ///             <code>Department</code>.</p>
        ///          <p>To search for values other than the filter value, use <code>NOT_EQUALS</code>. For
        ///          example, for the <code>ResourceTags</code> field, the filter <code>Department NOT_EQUALS
        ///             Finance</code> matches findings that do not have the value <code>Finance</code> for the
        ///          tag <code>Department</code>.</p>
        ///          <p>
        ///             <code>EQUALS</code> filters on the same field are joined by <code>OR</code>. A finding
        ///          matches if it matches any one of those filters.</p>
        ///          <p>
        ///             <code>NOT_EQUALS</code> filters on the same field are joined by <code>AND</code>. A
        ///          finding matches only if it matches all of those filters.</p>
        ///          <p>You cannot have both an <code>EQUALS</code> filter and a <code>NOT_EQUALS</code> filter
        ///          on the same field.</p>
        public let comparison: SecurityHubClientTypes.MapFilterComparison?
        /// <p>The key of the map filter. For example, for <code>ResourceTags</code>, <code>Key</code>
        ///          identifies the name of the tag. For <code>UserDefinedFields</code>, <code>Key</code> is the
        ///          name of the field.</p>
        public let key: Swift.String?
        /// <p>The value for the key in the map filter. Filter values are case sensitive. For example,
        ///          one of the values for a tag called <code>Department</code> might be <code>Security</code>.
        ///          If you provide <code>security</code> as the filter value, then there is no match.</p>
        public let value: Swift.String?

        public init (
            comparison: SecurityHubClientTypes.MapFilterComparison? = nil,
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.comparison = comparison
            self.key = key
            self.value = value
        }
    }

}

extension SecurityHubClientTypes {
    public enum MapFilterComparison: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case equals
        case notEquals
        case sdkUnknown(Swift.String)

        public static var allCases: [MapFilterComparison] {
            return [
                .equals,
                .notEquals,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .equals: return "EQUALS"
            case .notEquals: return "NOT_EQUALS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MapFilterComparison(rawValue: rawValue) ?? MapFilterComparison.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes.Member: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case administratorId = "AdministratorId"
        case email = "Email"
        case invitedAt = "InvitedAt"
        case masterId = "MasterId"
        case memberStatus = "MemberStatus"
        case updatedAt = "UpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let administratorId = administratorId {
            try encodeContainer.encode(administratorId, forKey: .administratorId)
        }
        if let email = email {
            try encodeContainer.encode(email, forKey: .email)
        }
        if let invitedAt = invitedAt {
            try encodeContainer.encode(invitedAt.timeIntervalSince1970, forKey: .invitedAt)
        }
        if let masterId = masterId {
            try encodeContainer.encode(masterId, forKey: .masterId)
        }
        if let memberStatus = memberStatus {
            try encodeContainer.encode(memberStatus, forKey: .memberStatus)
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt.timeIntervalSince1970, forKey: .updatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let emailDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .email)
        email = emailDecoded
        let masterIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .masterId)
        masterId = masterIdDecoded
        let administratorIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .administratorId)
        administratorId = administratorIdDecoded
        let memberStatusDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .memberStatus)
        memberStatus = memberStatusDecoded
        let invitedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .invitedAt)
        invitedAt = invitedAtDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension SecurityHubClientTypes.Member: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Member(accountId: \(Swift.String(describing: accountId)), administratorId: \(Swift.String(describing: administratorId)), email: \(Swift.String(describing: email)), invitedAt: \(Swift.String(describing: invitedAt)), masterId: \(Swift.String(describing: masterId)), memberStatus: \(Swift.String(describing: memberStatus)), updatedAt: \(Swift.String(describing: updatedAt)))"}
}

extension SecurityHubClientTypes {
    /// <p>The details about a member account.</p>
    public struct Member: Swift.Equatable {
        /// <p>The AWS account ID of the member account.</p>
        public let accountId: Swift.String?
        /// <p>The AWS account ID of the Security Hub administrator account associated with this member account.</p>
        public let administratorId: Swift.String?
        /// <p>The email address of the member account.</p>
        public let email: Swift.String?
        /// <p>A timestamp for the date and time when the invitation was sent to the member
        ///          account.</p>
        public let invitedAt: ClientRuntime.Date?
        /// <p>This is replaced by <code>AdministratorID</code>.</p>
        ///          <p>The AWS account ID of the Security Hub administrator account associated with this member account.</p>
        @available(*, deprecated, message: "This field is deprecated, use AdministratorId instead.")
        public let masterId: Swift.String?
        /// <p>The status of the relationship between the member account and its administrator account.
        ///       </p>
        ///          <p>The status can have one of the following values:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>CREATED</code> - Indicates that the administrator account added the member account,
        ///                but has not yet invited the member account.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>INVITED</code> - Indicates that the administrator account invited the member
        ///                account. The member account has not yet responded to the invitation.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>ENABLED</code> - Indicates that the member account is currently active. For
        ///                manually invited member accounts, indicates that the member account accepted the
        ///                invitation.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>REMOVED</code> - Indicates that the administrator account disassociated the member
        ///                account.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>RESIGNED</code> - Indicates that the member account disassociated themselves
        ///                from the administrator account.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>DELETED</code> - Indicates that the administrator account deleted the member
        ///                account.</p>
        ///             </li>
        ///          </ul>
        public let memberStatus: Swift.String?
        /// <p>The timestamp for the date and time when the member account was updated.</p>
        public let updatedAt: ClientRuntime.Date?

        public init (
            accountId: Swift.String? = nil,
            administratorId: Swift.String? = nil,
            email: Swift.String? = nil,
            invitedAt: ClientRuntime.Date? = nil,
            masterId: Swift.String? = nil,
            memberStatus: Swift.String? = nil,
            updatedAt: ClientRuntime.Date? = nil
        )
        {
            self.accountId = accountId
            self.administratorId = administratorId
            self.email = email
            self.invitedAt = invitedAt
            self.masterId = masterId
            self.memberStatus = memberStatus
            self.updatedAt = updatedAt
        }
    }

}

extension SecurityHubClientTypes.Network: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destinationDomain = "DestinationDomain"
        case destinationIpV4 = "DestinationIpV4"
        case destinationIpV6 = "DestinationIpV6"
        case destinationPort = "DestinationPort"
        case direction = "Direction"
        case openPortRange = "OpenPortRange"
        case `protocol` = "Protocol"
        case sourceDomain = "SourceDomain"
        case sourceIpV4 = "SourceIpV4"
        case sourceIpV6 = "SourceIpV6"
        case sourceMac = "SourceMac"
        case sourcePort = "SourcePort"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destinationDomain = destinationDomain {
            try encodeContainer.encode(destinationDomain, forKey: .destinationDomain)
        }
        if let destinationIpV4 = destinationIpV4 {
            try encodeContainer.encode(destinationIpV4, forKey: .destinationIpV4)
        }
        if let destinationIpV6 = destinationIpV6 {
            try encodeContainer.encode(destinationIpV6, forKey: .destinationIpV6)
        }
        if destinationPort != 0 {
            try encodeContainer.encode(destinationPort, forKey: .destinationPort)
        }
        if let direction = direction {
            try encodeContainer.encode(direction.rawValue, forKey: .direction)
        }
        if let openPortRange = openPortRange {
            try encodeContainer.encode(openPortRange, forKey: .openPortRange)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`, forKey: .`protocol`)
        }
        if let sourceDomain = sourceDomain {
            try encodeContainer.encode(sourceDomain, forKey: .sourceDomain)
        }
        if let sourceIpV4 = sourceIpV4 {
            try encodeContainer.encode(sourceIpV4, forKey: .sourceIpV4)
        }
        if let sourceIpV6 = sourceIpV6 {
            try encodeContainer.encode(sourceIpV6, forKey: .sourceIpV6)
        }
        if let sourceMac = sourceMac {
            try encodeContainer.encode(sourceMac, forKey: .sourceMac)
        }
        if sourcePort != 0 {
            try encodeContainer.encode(sourcePort, forKey: .sourcePort)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let directionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.NetworkDirection.self, forKey: .direction)
        direction = directionDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let openPortRangeDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.PortRange.self, forKey: .openPortRange)
        openPortRange = openPortRangeDecoded
        let sourceIpV4Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceIpV4)
        sourceIpV4 = sourceIpV4Decoded
        let sourceIpV6Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceIpV6)
        sourceIpV6 = sourceIpV6Decoded
        let sourcePortDecoded = try containerValues.decode(Swift.Int.self, forKey: .sourcePort)
        sourcePort = sourcePortDecoded
        let sourceDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceDomain)
        sourceDomain = sourceDomainDecoded
        let sourceMacDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceMac)
        sourceMac = sourceMacDecoded
        let destinationIpV4Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationIpV4)
        destinationIpV4 = destinationIpV4Decoded
        let destinationIpV6Decoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationIpV6)
        destinationIpV6 = destinationIpV6Decoded
        let destinationPortDecoded = try containerValues.decode(Swift.Int.self, forKey: .destinationPort)
        destinationPort = destinationPortDecoded
        let destinationDomainDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .destinationDomain)
        destinationDomain = destinationDomainDecoded
    }
}

extension SecurityHubClientTypes.Network: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Network(destinationDomain: \(Swift.String(describing: destinationDomain)), destinationIpV4: \(Swift.String(describing: destinationIpV4)), destinationIpV6: \(Swift.String(describing: destinationIpV6)), destinationPort: \(Swift.String(describing: destinationPort)), direction: \(Swift.String(describing: direction)), openPortRange: \(Swift.String(describing: openPortRange)), protocol: \(Swift.String(describing: `protocol`)), sourceDomain: \(Swift.String(describing: sourceDomain)), sourceIpV4: \(Swift.String(describing: sourceIpV4)), sourceIpV6: \(Swift.String(describing: sourceIpV6)), sourceMac: \(Swift.String(describing: sourceMac)), sourcePort: \(Swift.String(describing: sourcePort)))"}
}

extension SecurityHubClientTypes {
    /// <p>The details of network-related information about a finding.</p>
    public struct Network: Swift.Equatable {
        /// <p>The protocol of network-related information about a finding.</p>
        public let `protocol`: Swift.String?
        /// <p>The destination domain of network-related information about a finding.</p>
        public let destinationDomain: Swift.String?
        /// <p>The destination IPv4 address of network-related information about a finding.</p>
        public let destinationIpV4: Swift.String?
        /// <p>The destination IPv6 address of network-related information about a finding.</p>
        public let destinationIpV6: Swift.String?
        /// <p>The destination port of network-related information about a finding.</p>
        public let destinationPort: Swift.Int
        /// <p>The direction of network traffic associated with a finding.</p>
        public let direction: SecurityHubClientTypes.NetworkDirection?
        /// <p>The range of open ports that is present on the network.</p>
        public let openPortRange: SecurityHubClientTypes.PortRange?
        /// <p>The source domain of network-related information about a finding.</p>
        public let sourceDomain: Swift.String?
        /// <p>The source IPv4 address of network-related information about a finding.</p>
        public let sourceIpV4: Swift.String?
        /// <p>The source IPv6 address of network-related information about a finding.</p>
        public let sourceIpV6: Swift.String?
        /// <p>The source media access control (MAC) address of network-related information about a
        ///          finding.</p>
        public let sourceMac: Swift.String?
        /// <p>The source port of network-related information about a finding.</p>
        public let sourcePort: Swift.Int

        public init (
            `protocol`: Swift.String? = nil,
            destinationDomain: Swift.String? = nil,
            destinationIpV4: Swift.String? = nil,
            destinationIpV6: Swift.String? = nil,
            destinationPort: Swift.Int = 0,
            direction: SecurityHubClientTypes.NetworkDirection? = nil,
            openPortRange: SecurityHubClientTypes.PortRange? = nil,
            sourceDomain: Swift.String? = nil,
            sourceIpV4: Swift.String? = nil,
            sourceIpV6: Swift.String? = nil,
            sourceMac: Swift.String? = nil,
            sourcePort: Swift.Int = 0
        )
        {
            self.`protocol` = `protocol`
            self.destinationDomain = destinationDomain
            self.destinationIpV4 = destinationIpV4
            self.destinationIpV6 = destinationIpV6
            self.destinationPort = destinationPort
            self.direction = direction
            self.openPortRange = openPortRange
            self.sourceDomain = sourceDomain
            self.sourceIpV4 = sourceIpV4
            self.sourceIpV6 = sourceIpV6
            self.sourceMac = sourceMac
            self.sourcePort = sourcePort
        }
    }

}

extension SecurityHubClientTypes.NetworkConnectionAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blocked = "Blocked"
        case connectionDirection = "ConnectionDirection"
        case localPortDetails = "LocalPortDetails"
        case `protocol` = "Protocol"
        case remoteIpDetails = "RemoteIpDetails"
        case remotePortDetails = "RemotePortDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if blocked != false {
            try encodeContainer.encode(blocked, forKey: .blocked)
        }
        if let connectionDirection = connectionDirection {
            try encodeContainer.encode(connectionDirection, forKey: .connectionDirection)
        }
        if let localPortDetails = localPortDetails {
            try encodeContainer.encode(localPortDetails, forKey: .localPortDetails)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`, forKey: .`protocol`)
        }
        if let remoteIpDetails = remoteIpDetails {
            try encodeContainer.encode(remoteIpDetails, forKey: .remoteIpDetails)
        }
        if let remotePortDetails = remotePortDetails {
            try encodeContainer.encode(remotePortDetails, forKey: .remotePortDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let connectionDirectionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .connectionDirection)
        connectionDirection = connectionDirectionDecoded
        let remoteIpDetailsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ActionRemoteIpDetails.self, forKey: .remoteIpDetails)
        remoteIpDetails = remoteIpDetailsDecoded
        let remotePortDetailsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ActionRemotePortDetails.self, forKey: .remotePortDetails)
        remotePortDetails = remotePortDetailsDecoded
        let localPortDetailsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ActionLocalPortDetails.self, forKey: .localPortDetails)
        localPortDetails = localPortDetailsDecoded
        let protocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let blockedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .blocked)
        blocked = blockedDecoded
    }
}

extension SecurityHubClientTypes.NetworkConnectionAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NetworkConnectionAction(blocked: \(Swift.String(describing: blocked)), connectionDirection: \(Swift.String(describing: connectionDirection)), localPortDetails: \(Swift.String(describing: localPortDetails)), protocol: \(Swift.String(describing: `protocol`)), remoteIpDetails: \(Swift.String(describing: remoteIpDetails)), remotePortDetails: \(Swift.String(describing: remotePortDetails)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provided if <code>ActionType</code> is <code>NETWORK_CONNECTION</code>. It provides
    ///          details about the attempted network connection that was detected.</p>
    public struct NetworkConnectionAction: Swift.Equatable {
        /// <p>The protocol used to make the network connection request.</p>
        public let `protocol`: Swift.String?
        /// <p>Indicates whether the network connection attempt was blocked.</p>
        public let blocked: Swift.Bool
        /// <p>The direction of the network connection request (<code>IN</code> or
        ///          <code>OUT</code>).</p>
        public let connectionDirection: Swift.String?
        /// <p>Information about the port on the EC2 instance.</p>
        public let localPortDetails: SecurityHubClientTypes.ActionLocalPortDetails?
        /// <p>Information about the remote IP address that issued the network connection
        ///          request.</p>
        public let remoteIpDetails: SecurityHubClientTypes.ActionRemoteIpDetails?
        /// <p>Information about the port on the remote IP address.</p>
        public let remotePortDetails: SecurityHubClientTypes.ActionRemotePortDetails?

        public init (
            `protocol`: Swift.String? = nil,
            blocked: Swift.Bool = false,
            connectionDirection: Swift.String? = nil,
            localPortDetails: SecurityHubClientTypes.ActionLocalPortDetails? = nil,
            remoteIpDetails: SecurityHubClientTypes.ActionRemoteIpDetails? = nil,
            remotePortDetails: SecurityHubClientTypes.ActionRemotePortDetails? = nil
        )
        {
            self.`protocol` = `protocol`
            self.blocked = blocked
            self.connectionDirection = connectionDirection
            self.localPortDetails = localPortDetails
            self.remoteIpDetails = remoteIpDetails
            self.remotePortDetails = remotePortDetails
        }
    }

}

extension SecurityHubClientTypes {
    public enum NetworkDirection: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case `in`
        case out
        case sdkUnknown(Swift.String)

        public static var allCases: [NetworkDirection] {
            return [
                .in,
                .out,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .in: return "IN"
            case .out: return "OUT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = NetworkDirection(rawValue: rawValue) ?? NetworkDirection.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes.NetworkHeader: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case destination = "Destination"
        case `protocol` = "Protocol"
        case source = "Source"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let `protocol` = `protocol` {
            try encodeContainer.encode(`protocol`, forKey: .`protocol`)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let protocolDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .protocol)
        `protocol` = protocolDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.NetworkPathComponentDetails.self, forKey: .destination)
        destination = destinationDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.NetworkPathComponentDetails.self, forKey: .source)
        source = sourceDecoded
    }
}

extension SecurityHubClientTypes.NetworkHeader: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NetworkHeader(destination: \(Swift.String(describing: destination)), protocol: \(Swift.String(describing: `protocol`)), source: \(Swift.String(describing: source)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about a network path component that occurs before or after the current
    ///          component.</p>
    public struct NetworkHeader: Swift.Equatable {
        /// <p>The protocol used for the component.</p>
        public let `protocol`: Swift.String?
        /// <p>Information about the destination of the component.</p>
        public let destination: SecurityHubClientTypes.NetworkPathComponentDetails?
        /// <p>Information about the origin of the component.</p>
        public let source: SecurityHubClientTypes.NetworkPathComponentDetails?

        public init (
            `protocol`: Swift.String? = nil,
            destination: SecurityHubClientTypes.NetworkPathComponentDetails? = nil,
            source: SecurityHubClientTypes.NetworkPathComponentDetails? = nil
        )
        {
            self.`protocol` = `protocol`
            self.destination = destination
            self.source = source
        }
    }

}

extension SecurityHubClientTypes.NetworkPathComponent: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case componentId = "ComponentId"
        case componentType = "ComponentType"
        case egress = "Egress"
        case ingress = "Ingress"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let componentId = componentId {
            try encodeContainer.encode(componentId, forKey: .componentId)
        }
        if let componentType = componentType {
            try encodeContainer.encode(componentType, forKey: .componentType)
        }
        if let egress = egress {
            try encodeContainer.encode(egress, forKey: .egress)
        }
        if let ingress = ingress {
            try encodeContainer.encode(ingress, forKey: .ingress)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let componentIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentId)
        componentId = componentIdDecoded
        let componentTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .componentType)
        componentType = componentTypeDecoded
        let egressDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.NetworkHeader.self, forKey: .egress)
        egress = egressDecoded
        let ingressDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.NetworkHeader.self, forKey: .ingress)
        ingress = ingressDecoded
    }
}

extension SecurityHubClientTypes.NetworkPathComponent: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NetworkPathComponent(componentId: \(Swift.String(describing: componentId)), componentType: \(Swift.String(describing: componentType)), egress: \(Swift.String(describing: egress)), ingress: \(Swift.String(describing: ingress)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about a network path component.</p>
    public struct NetworkPathComponent: Swift.Equatable {
        /// <p>The identifier of a component in the network path.</p>
        public let componentId: Swift.String?
        /// <p>The type of component.</p>
        public let componentType: Swift.String?
        /// <p>Information about the component that comes after the current component in the network
        ///          path.</p>
        public let egress: SecurityHubClientTypes.NetworkHeader?
        /// <p>Information about the component that comes before the current node in the network
        ///          path.</p>
        public let ingress: SecurityHubClientTypes.NetworkHeader?

        public init (
            componentId: Swift.String? = nil,
            componentType: Swift.String? = nil,
            egress: SecurityHubClientTypes.NetworkHeader? = nil,
            ingress: SecurityHubClientTypes.NetworkHeader? = nil
        )
        {
            self.componentId = componentId
            self.componentType = componentType
            self.egress = egress
            self.ingress = ingress
        }
    }

}

extension SecurityHubClientTypes.NetworkPathComponentDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case address = "Address"
        case portRanges = "PortRanges"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let address = address {
            var addressContainer = encodeContainer.nestedUnkeyedContainer(forKey: .address)
            for stringlist0 in address {
                try addressContainer.encode(stringlist0)
            }
        }
        if let portRanges = portRanges {
            var portRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .portRanges)
            for portrangelist0 in portRanges {
                try portRangesContainer.encode(portrangelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let addressContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .address)
        var addressDecoded0:[Swift.String]? = nil
        if let addressContainer = addressContainer {
            addressDecoded0 = [Swift.String]()
            for string0 in addressContainer {
                if let string0 = string0 {
                    addressDecoded0?.append(string0)
                }
            }
        }
        address = addressDecoded0
        let portRangesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.PortRange?].self, forKey: .portRanges)
        var portRangesDecoded0:[SecurityHubClientTypes.PortRange]? = nil
        if let portRangesContainer = portRangesContainer {
            portRangesDecoded0 = [SecurityHubClientTypes.PortRange]()
            for structure0 in portRangesContainer {
                if let structure0 = structure0 {
                    portRangesDecoded0?.append(structure0)
                }
            }
        }
        portRanges = portRangesDecoded0
    }
}

extension SecurityHubClientTypes.NetworkPathComponentDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NetworkPathComponentDetails(address: \(Swift.String(describing: address)), portRanges: \(Swift.String(describing: portRanges)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about the destination of the next component in the network path.</p>
    public struct NetworkPathComponentDetails: Swift.Equatable {
        /// <p>The IP addresses of the destination.</p>
        public let address: [Swift.String]?
        /// <p>A list of port ranges for the destination.</p>
        public let portRanges: [SecurityHubClientTypes.PortRange]?

        public init (
            address: [Swift.String]? = nil,
            portRanges: [SecurityHubClientTypes.PortRange]? = nil
        )
        {
            self.address = address
            self.portRanges = portRanges
        }
    }

}

extension SecurityHubClientTypes.Note: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case text = "Text"
        case updatedAt = "UpdatedAt"
        case updatedBy = "UpdatedBy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let text = text {
            try encodeContainer.encode(text, forKey: .text)
        }
        if let updatedAt = updatedAt {
            try encodeContainer.encode(updatedAt, forKey: .updatedAt)
        }
        if let updatedBy = updatedBy {
            try encodeContainer.encode(updatedBy, forKey: .updatedBy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let updatedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedBy)
        updatedBy = updatedByDecoded
        let updatedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedAt)
        updatedAt = updatedAtDecoded
    }
}

extension SecurityHubClientTypes.Note: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Note(text: \(Swift.String(describing: text)), updatedAt: \(Swift.String(describing: updatedAt)), updatedBy: \(Swift.String(describing: updatedBy)))"}
}

extension SecurityHubClientTypes {
    /// <p>A user-defined note added to a finding.</p>
    public struct Note: Swift.Equatable {
        /// <p>The text of a note.</p>
        public let text: Swift.String?
        /// <p>The timestamp of when the note was updated.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let updatedAt: Swift.String?
        /// <p>The principal that created a note.</p>
        public let updatedBy: Swift.String?

        public init (
            text: Swift.String? = nil,
            updatedAt: Swift.String? = nil,
            updatedBy: Swift.String? = nil
        )
        {
            self.text = text
            self.updatedAt = updatedAt
            self.updatedBy = updatedBy
        }
    }

}

extension SecurityHubClientTypes.NoteUpdate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case text = "Text"
        case updatedBy = "UpdatedBy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let text = text {
            try encodeContainer.encode(text, forKey: .text)
        }
        if let updatedBy = updatedBy {
            try encodeContainer.encode(updatedBy, forKey: .updatedBy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let updatedByDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .updatedBy)
        updatedBy = updatedByDecoded
    }
}

extension SecurityHubClientTypes.NoteUpdate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NoteUpdate(text: \(Swift.String(describing: text)), updatedBy: \(Swift.String(describing: updatedBy)))"}
}

extension SecurityHubClientTypes {
    /// <p>The updated note.</p>
    public struct NoteUpdate: Swift.Equatable {
        /// <p>The updated note text.</p>
        public let text: Swift.String?
        /// <p>The principal that updated the note.</p>
        public let updatedBy: Swift.String?

        public init (
            text: Swift.String? = nil,
            updatedBy: Swift.String? = nil
        )
        {
            self.text = text
            self.updatedBy = updatedBy
        }
    }

}

extension SecurityHubClientTypes.NumberFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case eq = "Eq"
        case gte = "Gte"
        case lte = "Lte"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if eq != 0.0 {
            try encodeContainer.encode(eq, forKey: .eq)
        }
        if gte != 0.0 {
            try encodeContainer.encode(gte, forKey: .gte)
        }
        if lte != 0.0 {
            try encodeContainer.encode(lte, forKey: .lte)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let gteDecoded = try containerValues.decode(Swift.Double.self, forKey: .gte)
        gte = gteDecoded
        let lteDecoded = try containerValues.decode(Swift.Double.self, forKey: .lte)
        lte = lteDecoded
        let eqDecoded = try containerValues.decode(Swift.Double.self, forKey: .eq)
        eq = eqDecoded
    }
}

extension SecurityHubClientTypes.NumberFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NumberFilter(eq: \(Swift.String(describing: eq)), gte: \(Swift.String(describing: gte)), lte: \(Swift.String(describing: lte)))"}
}

extension SecurityHubClientTypes {
    /// <p>A number filter for querying findings.</p>
    public struct NumberFilter: Swift.Equatable {
        /// <p>The equal-to condition to be applied to a single field when querying for
        ///          findings.</p>
        public let eq: Swift.Double
        /// <p>The greater-than-equal condition to be applied to a single field when querying for
        ///          findings. </p>
        public let gte: Swift.Double
        /// <p>The less-than-equal condition to be applied to a single field when querying for
        ///          findings. </p>
        public let lte: Swift.Double

        public init (
            eq: Swift.Double = 0.0,
            gte: Swift.Double = 0.0,
            lte: Swift.Double = 0.0
        )
        {
            self.eq = eq
            self.gte = gte
            self.lte = lte
        }
    }

}

extension SecurityHubClientTypes.Occurrences: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cells = "Cells"
        case lineRanges = "LineRanges"
        case offsetRanges = "OffsetRanges"
        case pages = "Pages"
        case records = "Records"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cells = cells {
            var cellsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cells)
            for cells0 in cells {
                try cellsContainer.encode(cells0)
            }
        }
        if let lineRanges = lineRanges {
            var lineRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .lineRanges)
            for ranges0 in lineRanges {
                try lineRangesContainer.encode(ranges0)
            }
        }
        if let offsetRanges = offsetRanges {
            var offsetRangesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .offsetRanges)
            for ranges0 in offsetRanges {
                try offsetRangesContainer.encode(ranges0)
            }
        }
        if let pages = pages {
            var pagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .pages)
            for pages0 in pages {
                try pagesContainer.encode(pages0)
            }
        }
        if let records = records {
            var recordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .records)
            for records0 in records {
                try recordsContainer.encode(records0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lineRangesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Range?].self, forKey: .lineRanges)
        var lineRangesDecoded0:[SecurityHubClientTypes.Range]? = nil
        if let lineRangesContainer = lineRangesContainer {
            lineRangesDecoded0 = [SecurityHubClientTypes.Range]()
            for structure0 in lineRangesContainer {
                if let structure0 = structure0 {
                    lineRangesDecoded0?.append(structure0)
                }
            }
        }
        lineRanges = lineRangesDecoded0
        let offsetRangesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Range?].self, forKey: .offsetRanges)
        var offsetRangesDecoded0:[SecurityHubClientTypes.Range]? = nil
        if let offsetRangesContainer = offsetRangesContainer {
            offsetRangesDecoded0 = [SecurityHubClientTypes.Range]()
            for structure0 in offsetRangesContainer {
                if let structure0 = structure0 {
                    offsetRangesDecoded0?.append(structure0)
                }
            }
        }
        offsetRanges = offsetRangesDecoded0
        let pagesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Page?].self, forKey: .pages)
        var pagesDecoded0:[SecurityHubClientTypes.Page]? = nil
        if let pagesContainer = pagesContainer {
            pagesDecoded0 = [SecurityHubClientTypes.Page]()
            for structure0 in pagesContainer {
                if let structure0 = structure0 {
                    pagesDecoded0?.append(structure0)
                }
            }
        }
        pages = pagesDecoded0
        let recordsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Record?].self, forKey: .records)
        var recordsDecoded0:[SecurityHubClientTypes.Record]? = nil
        if let recordsContainer = recordsContainer {
            recordsDecoded0 = [SecurityHubClientTypes.Record]()
            for structure0 in recordsContainer {
                if let structure0 = structure0 {
                    recordsDecoded0?.append(structure0)
                }
            }
        }
        records = recordsDecoded0
        let cellsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Cell?].self, forKey: .cells)
        var cellsDecoded0:[SecurityHubClientTypes.Cell]? = nil
        if let cellsContainer = cellsContainer {
            cellsDecoded0 = [SecurityHubClientTypes.Cell]()
            for structure0 in cellsContainer {
                if let structure0 = structure0 {
                    cellsDecoded0?.append(structure0)
                }
            }
        }
        cells = cellsDecoded0
    }
}

extension SecurityHubClientTypes.Occurrences: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Occurrences(cells: \(Swift.String(describing: cells)), lineRanges: \(Swift.String(describing: lineRanges)), offsetRanges: \(Swift.String(describing: offsetRanges)), pages: \(Swift.String(describing: pages)), records: \(Swift.String(describing: records)))"}
}

extension SecurityHubClientTypes {
    /// <p>The detected occurrences of sensitive data.</p>
    public struct Occurrences: Swift.Equatable {
        /// <p>Occurrences of sensitive data detected in Microsoft Excel workbooks, comma-separated value (CSV) files, or tab-separated value (TSV) files.</p>
        public let cells: [SecurityHubClientTypes.Cell]?
        /// <p>Occurrences of sensitive data detected in a non-binary text file or a Microsoft Word file. Non-binary text files include files such as HTML, XML, JSON, and TXT files.</p>
        public let lineRanges: [SecurityHubClientTypes.Range]?
        /// <p>Occurrences of sensitive data detected in a binary text file.</p>
        public let offsetRanges: [SecurityHubClientTypes.Range]?
        /// <p>Occurrences of sensitive data in an Adobe Portable Document Format (PDF) file.</p>
        public let pages: [SecurityHubClientTypes.Page]?
        /// <p>Occurrences of sensitive data in an Apache Avro object container or an Apache Parquet file.</p>
        public let records: [SecurityHubClientTypes.Record]?

        public init (
            cells: [SecurityHubClientTypes.Cell]? = nil,
            lineRanges: [SecurityHubClientTypes.Range]? = nil,
            offsetRanges: [SecurityHubClientTypes.Range]? = nil,
            pages: [SecurityHubClientTypes.Page]? = nil,
            records: [SecurityHubClientTypes.Record]? = nil
        )
        {
            self.cells = cells
            self.lineRanges = lineRanges
            self.offsetRanges = offsetRanges
            self.pages = pages
            self.records = records
        }
    }

}

extension SecurityHubClientTypes.Page: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lineRange = "LineRange"
        case offsetRange = "OffsetRange"
        case pageNumber = "PageNumber"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let lineRange = lineRange {
            try encodeContainer.encode(lineRange, forKey: .lineRange)
        }
        if let offsetRange = offsetRange {
            try encodeContainer.encode(offsetRange, forKey: .offsetRange)
        }
        if pageNumber != 0 {
            try encodeContainer.encode(pageNumber, forKey: .pageNumber)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let pageNumberDecoded = try containerValues.decode(Swift.Int.self, forKey: .pageNumber)
        pageNumber = pageNumberDecoded
        let lineRangeDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Range.self, forKey: .lineRange)
        lineRange = lineRangeDecoded
        let offsetRangeDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Range.self, forKey: .offsetRange)
        offsetRange = offsetRangeDecoded
    }
}

extension SecurityHubClientTypes.Page: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Page(lineRange: \(Swift.String(describing: lineRange)), offsetRange: \(Swift.String(describing: offsetRange)), pageNumber: \(Swift.String(describing: pageNumber)))"}
}

extension SecurityHubClientTypes {
    /// <p>An occurrence of sensitive data in an Adobe Portable Document Format (PDF) file.</p>
    public struct Page: Swift.Equatable {
        /// <p>An occurrence of sensitive data detected in a non-binary text file or a Microsoft Word file. Non-binary text files include files such as HTML, XML, JSON, and TXT files.</p>
        public let lineRange: SecurityHubClientTypes.Range?
        /// <p>An occurrence of sensitive data detected in a binary text file.</p>
        public let offsetRange: SecurityHubClientTypes.Range?
        /// <p>The page number of the page that contains the sensitive data.</p>
        public let pageNumber: Swift.Int

        public init (
            lineRange: SecurityHubClientTypes.Range? = nil,
            offsetRange: SecurityHubClientTypes.Range? = nil,
            pageNumber: Swift.Int = 0
        )
        {
            self.lineRange = lineRange
            self.offsetRange = offsetRange
            self.pageNumber = pageNumber
        }
    }

}

extension SecurityHubClientTypes {
    public enum Partition: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case aws
        case awsCn
        case awsUsGov
        case sdkUnknown(Swift.String)

        public static var allCases: [Partition] {
            return [
                .aws,
                .awsCn,
                .awsUsGov,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .aws: return "aws"
            case .awsCn: return "aws-cn"
            case .awsUsGov: return "aws-us-gov"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Partition(rawValue: rawValue) ?? Partition.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes.PatchSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failedCount = "FailedCount"
        case id = "Id"
        case installedCount = "InstalledCount"
        case installedOtherCount = "InstalledOtherCount"
        case installedPendingReboot = "InstalledPendingReboot"
        case installedRejectedCount = "InstalledRejectedCount"
        case missingCount = "MissingCount"
        case operation = "Operation"
        case operationEndTime = "OperationEndTime"
        case operationStartTime = "OperationStartTime"
        case rebootOption = "RebootOption"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if failedCount != 0 {
            try encodeContainer.encode(failedCount, forKey: .failedCount)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if installedCount != 0 {
            try encodeContainer.encode(installedCount, forKey: .installedCount)
        }
        if installedOtherCount != 0 {
            try encodeContainer.encode(installedOtherCount, forKey: .installedOtherCount)
        }
        if installedPendingReboot != 0 {
            try encodeContainer.encode(installedPendingReboot, forKey: .installedPendingReboot)
        }
        if installedRejectedCount != 0 {
            try encodeContainer.encode(installedRejectedCount, forKey: .installedRejectedCount)
        }
        if missingCount != 0 {
            try encodeContainer.encode(missingCount, forKey: .missingCount)
        }
        if let operation = operation {
            try encodeContainer.encode(operation, forKey: .operation)
        }
        if let operationEndTime = operationEndTime {
            try encodeContainer.encode(operationEndTime, forKey: .operationEndTime)
        }
        if let operationStartTime = operationStartTime {
            try encodeContainer.encode(operationStartTime, forKey: .operationStartTime)
        }
        if let rebootOption = rebootOption {
            try encodeContainer.encode(rebootOption, forKey: .rebootOption)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let installedCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .installedCount)
        installedCount = installedCountDecoded
        let missingCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .missingCount)
        missingCount = missingCountDecoded
        let failedCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .failedCount)
        failedCount = failedCountDecoded
        let installedOtherCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .installedOtherCount)
        installedOtherCount = installedOtherCountDecoded
        let installedRejectedCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .installedRejectedCount)
        installedRejectedCount = installedRejectedCountDecoded
        let installedPendingRebootDecoded = try containerValues.decode(Swift.Int.self, forKey: .installedPendingReboot)
        installedPendingReboot = installedPendingRebootDecoded
        let operationStartTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationStartTime)
        operationStartTime = operationStartTimeDecoded
        let operationEndTimeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operationEndTime)
        operationEndTime = operationEndTimeDecoded
        let rebootOptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .rebootOption)
        rebootOption = rebootOptionDecoded
        let operationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .operation)
        operation = operationDecoded
    }
}

extension SecurityHubClientTypes.PatchSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PatchSummary(failedCount: \(Swift.String(describing: failedCount)), id: \(Swift.String(describing: id)), installedCount: \(Swift.String(describing: installedCount)), installedOtherCount: \(Swift.String(describing: installedOtherCount)), installedPendingReboot: \(Swift.String(describing: installedPendingReboot)), installedRejectedCount: \(Swift.String(describing: installedRejectedCount)), missingCount: \(Swift.String(describing: missingCount)), operation: \(Swift.String(describing: operation)), operationEndTime: \(Swift.String(describing: operationEndTime)), operationStartTime: \(Swift.String(describing: operationStartTime)), rebootOption: \(Swift.String(describing: rebootOption)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides an overview of the patch compliance status for an instance against a selected
    ///          compliance standard.</p>
    public struct PatchSummary: Swift.Equatable {
        /// <p>The number of patches from the compliance standard that failed to install.</p>
        public let failedCount: Swift.Int
        /// <p>The identifier of the compliance standard that was used to determine the patch
        ///          compliance status.</p>
        public let id: Swift.String?
        /// <p>The number of patches from the compliance standard that were installed
        ///          successfully.</p>
        public let installedCount: Swift.Int
        /// <p>The number of installed patches that are not part of the compliance standard.</p>
        public let installedOtherCount: Swift.Int
        /// <p>The number of patches that were applied, but that require the instance to be rebooted in
        ///          order to be marked as installed.</p>
        public let installedPendingReboot: Swift.Int
        /// <p>The number of patches that are installed but are also on a list of patches that the
        ///          customer rejected.</p>
        public let installedRejectedCount: Swift.Int
        /// <p>The number of patches that are part of the compliance standard but are not installed.
        ///          The count includes patches that failed to install.</p>
        public let missingCount: Swift.Int
        /// <p>The type of patch operation performed. For Patch Manager, the values are
        ///             <code>SCAN</code> and <code>INSTALL</code>. </p>
        public let operation: Swift.String?
        /// <p>Indicates when the operation completed.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let operationEndTime: Swift.String?
        /// <p>Indicates when the operation started.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let operationStartTime: Swift.String?
        /// <p>The reboot option specified for the instance.</p>
        public let rebootOption: Swift.String?

        public init (
            failedCount: Swift.Int = 0,
            id: Swift.String? = nil,
            installedCount: Swift.Int = 0,
            installedOtherCount: Swift.Int = 0,
            installedPendingReboot: Swift.Int = 0,
            installedRejectedCount: Swift.Int = 0,
            missingCount: Swift.Int = 0,
            operation: Swift.String? = nil,
            operationEndTime: Swift.String? = nil,
            operationStartTime: Swift.String? = nil,
            rebootOption: Swift.String? = nil
        )
        {
            self.failedCount = failedCount
            self.id = id
            self.installedCount = installedCount
            self.installedOtherCount = installedOtherCount
            self.installedPendingReboot = installedPendingReboot
            self.installedRejectedCount = installedRejectedCount
            self.missingCount = missingCount
            self.operation = operation
            self.operationEndTime = operationEndTime
            self.operationStartTime = operationStartTime
            self.rebootOption = rebootOption
        }
    }

}

extension SecurityHubClientTypes.PortProbeAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case blocked = "Blocked"
        case portProbeDetails = "PortProbeDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if blocked != false {
            try encodeContainer.encode(blocked, forKey: .blocked)
        }
        if let portProbeDetails = portProbeDetails {
            var portProbeDetailsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .portProbeDetails)
            for portprobedetaillist0 in portProbeDetails {
                try portProbeDetailsContainer.encode(portprobedetaillist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let portProbeDetailsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.PortProbeDetail?].self, forKey: .portProbeDetails)
        var portProbeDetailsDecoded0:[SecurityHubClientTypes.PortProbeDetail]? = nil
        if let portProbeDetailsContainer = portProbeDetailsContainer {
            portProbeDetailsDecoded0 = [SecurityHubClientTypes.PortProbeDetail]()
            for structure0 in portProbeDetailsContainer {
                if let structure0 = structure0 {
                    portProbeDetailsDecoded0?.append(structure0)
                }
            }
        }
        portProbeDetails = portProbeDetailsDecoded0
        let blockedDecoded = try containerValues.decode(Swift.Bool.self, forKey: .blocked)
        blocked = blockedDecoded
    }
}

extension SecurityHubClientTypes.PortProbeAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PortProbeAction(blocked: \(Swift.String(describing: blocked)), portProbeDetails: \(Swift.String(describing: portProbeDetails)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provided if <code>ActionType</code> is <code>PORT_PROBE</code>. It provides details
    ///          about the attempted port probe that was detected.</p>
    public struct PortProbeAction: Swift.Equatable {
        /// <p>Indicates whether the port probe was blocked.</p>
        public let blocked: Swift.Bool
        /// <p>Information about the ports affected by the port probe.</p>
        public let portProbeDetails: [SecurityHubClientTypes.PortProbeDetail]?

        public init (
            blocked: Swift.Bool = false,
            portProbeDetails: [SecurityHubClientTypes.PortProbeDetail]? = nil
        )
        {
            self.blocked = blocked
            self.portProbeDetails = portProbeDetails
        }
    }

}

extension SecurityHubClientTypes.PortProbeDetail: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case localIpDetails = "LocalIpDetails"
        case localPortDetails = "LocalPortDetails"
        case remoteIpDetails = "RemoteIpDetails"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let localIpDetails = localIpDetails {
            try encodeContainer.encode(localIpDetails, forKey: .localIpDetails)
        }
        if let localPortDetails = localPortDetails {
            try encodeContainer.encode(localPortDetails, forKey: .localPortDetails)
        }
        if let remoteIpDetails = remoteIpDetails {
            try encodeContainer.encode(remoteIpDetails, forKey: .remoteIpDetails)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let localPortDetailsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ActionLocalPortDetails.self, forKey: .localPortDetails)
        localPortDetails = localPortDetailsDecoded
        let localIpDetailsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ActionLocalIpDetails.self, forKey: .localIpDetails)
        localIpDetails = localIpDetailsDecoded
        let remoteIpDetailsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ActionRemoteIpDetails.self, forKey: .remoteIpDetails)
        remoteIpDetails = remoteIpDetailsDecoded
    }
}

extension SecurityHubClientTypes.PortProbeDetail: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PortProbeDetail(localIpDetails: \(Swift.String(describing: localIpDetails)), localPortDetails: \(Swift.String(describing: localPortDetails)), remoteIpDetails: \(Swift.String(describing: remoteIpDetails)))"}
}

extension SecurityHubClientTypes {
    /// <p>A port scan that was part of the port probe. For each scan, PortProbeDetails provides
    ///          information about the local IP address and port that were scanned, and the remote IP
    ///          address that the scan originated from.</p>
    public struct PortProbeDetail: Swift.Equatable {
        /// <p>Provides information about the IP address where the scanned port is located.</p>
        public let localIpDetails: SecurityHubClientTypes.ActionLocalIpDetails?
        /// <p>Provides information about the port that was scanned.</p>
        public let localPortDetails: SecurityHubClientTypes.ActionLocalPortDetails?
        /// <p>Provides information about the remote IP address that performed the scan.</p>
        public let remoteIpDetails: SecurityHubClientTypes.ActionRemoteIpDetails?

        public init (
            localIpDetails: SecurityHubClientTypes.ActionLocalIpDetails? = nil,
            localPortDetails: SecurityHubClientTypes.ActionLocalPortDetails? = nil,
            remoteIpDetails: SecurityHubClientTypes.ActionRemoteIpDetails? = nil
        )
        {
            self.localIpDetails = localIpDetails
            self.localPortDetails = localPortDetails
            self.remoteIpDetails = remoteIpDetails
        }
    }

}

extension SecurityHubClientTypes.PortRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case begin = "Begin"
        case end = "End"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if begin != 0 {
            try encodeContainer.encode(begin, forKey: .begin)
        }
        if end != 0 {
            try encodeContainer.encode(end, forKey: .end)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let beginDecoded = try containerValues.decode(Swift.Int.self, forKey: .begin)
        begin = beginDecoded
        let endDecoded = try containerValues.decode(Swift.Int.self, forKey: .end)
        end = endDecoded
    }
}

extension SecurityHubClientTypes.PortRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PortRange(begin: \(Swift.String(describing: begin)), end: \(Swift.String(describing: end)))"}
}

extension SecurityHubClientTypes {
    /// <p>A range of ports.</p>
    public struct PortRange: Swift.Equatable {
        /// <p>The first port in the port range.</p>
        public let begin: Swift.Int
        /// <p>The last port in the port range.</p>
        public let end: Swift.Int

        public init (
            begin: Swift.Int = 0,
            end: Swift.Int = 0
        )
        {
            self.begin = begin
            self.end = end
        }
    }

}

extension SecurityHubClientTypes.PortRangeFromTo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case from = "From"
        case to = "To"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if from != 0 {
            try encodeContainer.encode(from, forKey: .from)
        }
        if to != 0 {
            try encodeContainer.encode(to, forKey: .to)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fromDecoded = try containerValues.decode(Swift.Int.self, forKey: .from)
        from = fromDecoded
        let toDecoded = try containerValues.decode(Swift.Int.self, forKey: .to)
        to = toDecoded
    }
}

extension SecurityHubClientTypes.PortRangeFromTo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "PortRangeFromTo(from: \(Swift.String(describing: from)), to: \(Swift.String(describing: to)))"}
}

extension SecurityHubClientTypes {
    /// <p>A range of ports.</p>
    public struct PortRangeFromTo: Swift.Equatable {
        /// <p>The first port in the port range.</p>
        public let from: Swift.Int
        /// <p>The last port in the port range.</p>
        public let to: Swift.Int

        public init (
            from: Swift.Int = 0,
            to: Swift.Int = 0
        )
        {
            self.from = from
            self.to = to
        }
    }

}

extension SecurityHubClientTypes.ProcessDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case launchedAt = "LaunchedAt"
        case name = "Name"
        case parentPid = "ParentPid"
        case path = "Path"
        case pid = "Pid"
        case terminatedAt = "TerminatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let launchedAt = launchedAt {
            try encodeContainer.encode(launchedAt, forKey: .launchedAt)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if parentPid != 0 {
            try encodeContainer.encode(parentPid, forKey: .parentPid)
        }
        if let path = path {
            try encodeContainer.encode(path, forKey: .path)
        }
        if pid != 0 {
            try encodeContainer.encode(pid, forKey: .pid)
        }
        if let terminatedAt = terminatedAt {
            try encodeContainer.encode(terminatedAt, forKey: .terminatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let pathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .path)
        path = pathDecoded
        let pidDecoded = try containerValues.decode(Swift.Int.self, forKey: .pid)
        pid = pidDecoded
        let parentPidDecoded = try containerValues.decode(Swift.Int.self, forKey: .parentPid)
        parentPid = parentPidDecoded
        let launchedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .launchedAt)
        launchedAt = launchedAtDecoded
        let terminatedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .terminatedAt)
        terminatedAt = terminatedAtDecoded
    }
}

extension SecurityHubClientTypes.ProcessDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProcessDetails(launchedAt: \(Swift.String(describing: launchedAt)), name: \(Swift.String(describing: name)), parentPid: \(Swift.String(describing: parentPid)), path: \(Swift.String(describing: path)), pid: \(Swift.String(describing: pid)), terminatedAt: \(Swift.String(describing: terminatedAt)))"}
}

extension SecurityHubClientTypes {
    /// <p>The details of process-related information about a finding.</p>
    public struct ProcessDetails: Swift.Equatable {
        /// <p>Indicates when the process was launched.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let launchedAt: Swift.String?
        /// <p>The name of the process.</p>
        public let name: Swift.String?
        /// <p>The parent process ID.</p>
        public let parentPid: Swift.Int
        /// <p>The path to the process executable.</p>
        public let path: Swift.String?
        /// <p>The process ID.</p>
        public let pid: Swift.Int
        /// <p>Indicates when the process was terminated.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let terminatedAt: Swift.String?

        public init (
            launchedAt: Swift.String? = nil,
            name: Swift.String? = nil,
            parentPid: Swift.Int = 0,
            path: Swift.String? = nil,
            pid: Swift.Int = 0,
            terminatedAt: Swift.String? = nil
        )
        {
            self.launchedAt = launchedAt
            self.name = name
            self.parentPid = parentPid
            self.path = path
            self.pid = pid
            self.terminatedAt = terminatedAt
        }
    }

}

extension SecurityHubClientTypes.Product: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case activationUrl = "ActivationUrl"
        case categories = "Categories"
        case companyName = "CompanyName"
        case description = "Description"
        case integrationTypes = "IntegrationTypes"
        case marketplaceUrl = "MarketplaceUrl"
        case productArn = "ProductArn"
        case productName = "ProductName"
        case productSubscriptionResourcePolicy = "ProductSubscriptionResourcePolicy"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let activationUrl = activationUrl {
            try encodeContainer.encode(activationUrl, forKey: .activationUrl)
        }
        if let categories = categories {
            var categoriesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .categories)
            for categorylist0 in categories {
                try categoriesContainer.encode(categorylist0)
            }
        }
        if let companyName = companyName {
            try encodeContainer.encode(companyName, forKey: .companyName)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let integrationTypes = integrationTypes {
            var integrationTypesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .integrationTypes)
            for integrationtypelist0 in integrationTypes {
                try integrationTypesContainer.encode(integrationtypelist0.rawValue)
            }
        }
        if let marketplaceUrl = marketplaceUrl {
            try encodeContainer.encode(marketplaceUrl, forKey: .marketplaceUrl)
        }
        if let productArn = productArn {
            try encodeContainer.encode(productArn, forKey: .productArn)
        }
        if let productName = productName {
            try encodeContainer.encode(productName, forKey: .productName)
        }
        if let productSubscriptionResourcePolicy = productSubscriptionResourcePolicy {
            try encodeContainer.encode(productSubscriptionResourcePolicy, forKey: .productSubscriptionResourcePolicy)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productArn)
        productArn = productArnDecoded
        let productNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productName)
        productName = productNameDecoded
        let companyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .companyName)
        companyName = companyNameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let categoriesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .categories)
        var categoriesDecoded0:[Swift.String]? = nil
        if let categoriesContainer = categoriesContainer {
            categoriesDecoded0 = [Swift.String]()
            for string0 in categoriesContainer {
                if let string0 = string0 {
                    categoriesDecoded0?.append(string0)
                }
            }
        }
        categories = categoriesDecoded0
        let integrationTypesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.IntegrationType?].self, forKey: .integrationTypes)
        var integrationTypesDecoded0:[SecurityHubClientTypes.IntegrationType]? = nil
        if let integrationTypesContainer = integrationTypesContainer {
            integrationTypesDecoded0 = [SecurityHubClientTypes.IntegrationType]()
            for string0 in integrationTypesContainer {
                if let string0 = string0 {
                    integrationTypesDecoded0?.append(string0)
                }
            }
        }
        integrationTypes = integrationTypesDecoded0
        let marketplaceUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .marketplaceUrl)
        marketplaceUrl = marketplaceUrlDecoded
        let activationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .activationUrl)
        activationUrl = activationUrlDecoded
        let productSubscriptionResourcePolicyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productSubscriptionResourcePolicy)
        productSubscriptionResourcePolicy = productSubscriptionResourcePolicyDecoded
    }
}

extension SecurityHubClientTypes.Product: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Product(activationUrl: \(Swift.String(describing: activationUrl)), categories: \(Swift.String(describing: categories)), companyName: \(Swift.String(describing: companyName)), description: \(Swift.String(describing: description)), integrationTypes: \(Swift.String(describing: integrationTypes)), marketplaceUrl: \(Swift.String(describing: marketplaceUrl)), productArn: \(Swift.String(describing: productArn)), productName: \(Swift.String(describing: productName)), productSubscriptionResourcePolicy: \(Swift.String(describing: productSubscriptionResourcePolicy)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains details about a product.</p>
    public struct Product: Swift.Equatable {
        /// <p>The URL to the service or product documentation about the integration with Security Hub, including how to activate the integration.</p>
        public let activationUrl: Swift.String?
        /// <p>The categories assigned to the product.</p>
        public let categories: [Swift.String]?
        /// <p>The name of the company that provides the product.</p>
        public let companyName: Swift.String?
        /// <p>A description of the product.</p>
        public let description: Swift.String?
        /// <p>The types of integration that the product supports. Available values are the
        ///          following.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>SEND_FINDINGS_TO_SECURITY_HUB</code> - The integration sends
        ///                findings to Security Hub.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>RECEIVE_FINDINGS_FROM_SECURITY_HUB</code> - The integration
        ///                receives findings from Security Hub.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>UPDATE_FINDINGS_IN_SECURITY_HUB</code> - The integration does not send new findings to Security Hub, but does make updates to the findings that it receives from Security Hub.</p>
        ///             </li>
        ///          </ul>
        public let integrationTypes: [SecurityHubClientTypes.IntegrationType]?
        /// <p>For integrations with AWS services, the AWS Console URL from which to activate the service.</p>
        ///          <p>For integrations with third-party products, the AWS Marketplace URL from which to subscribe to or purchase the product.</p>
        public let marketplaceUrl: Swift.String?
        /// <p>The ARN assigned to the product.</p>
        public let productArn: Swift.String?
        /// <p>The name of the product.</p>
        public let productName: Swift.String?
        /// <p>The resource policy associated with the product.</p>
        public let productSubscriptionResourcePolicy: Swift.String?

        public init (
            activationUrl: Swift.String? = nil,
            categories: [Swift.String]? = nil,
            companyName: Swift.String? = nil,
            description: Swift.String? = nil,
            integrationTypes: [SecurityHubClientTypes.IntegrationType]? = nil,
            marketplaceUrl: Swift.String? = nil,
            productArn: Swift.String? = nil,
            productName: Swift.String? = nil,
            productSubscriptionResourcePolicy: Swift.String? = nil
        )
        {
            self.activationUrl = activationUrl
            self.categories = categories
            self.companyName = companyName
            self.description = description
            self.integrationTypes = integrationTypes
            self.marketplaceUrl = marketplaceUrl
            self.productArn = productArn
            self.productName = productName
            self.productSubscriptionResourcePolicy = productSubscriptionResourcePolicy
        }
    }

}

extension SecurityHubClientTypes.Range: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case end = "End"
        case start = "Start"
        case startColumn = "StartColumn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if end != 0 {
            try encodeContainer.encode(end, forKey: .end)
        }
        if start != 0 {
            try encodeContainer.encode(start, forKey: .start)
        }
        if startColumn != 0 {
            try encodeContainer.encode(startColumn, forKey: .startColumn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startDecoded = try containerValues.decode(Swift.Int.self, forKey: .start)
        start = startDecoded
        let endDecoded = try containerValues.decode(Swift.Int.self, forKey: .end)
        end = endDecoded
        let startColumnDecoded = try containerValues.decode(Swift.Int.self, forKey: .startColumn)
        startColumn = startColumnDecoded
    }
}

extension SecurityHubClientTypes.Range: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Range(end: \(Swift.String(describing: end)), start: \(Swift.String(describing: start)), startColumn: \(Swift.String(describing: startColumn)))"}
}

extension SecurityHubClientTypes {
    /// <p>Identifies where the sensitive data begins and ends.</p>
    public struct Range: Swift.Equatable {
        /// <p>The number of lines (for a line range) or characters (for an offset range) from the beginning of the file to the end of the sensitive data.</p>
        public let end: Swift.Int
        /// <p>The number of lines (for a line range) or characters (for an offset range) from the beginning of the file to the end of the sensitive data.</p>
        public let start: Swift.Int
        /// <p>In the line where the sensitive data starts, the column within the line where the sensitive data starts.</p>
        public let startColumn: Swift.Int

        public init (
            end: Swift.Int = 0,
            start: Swift.Int = 0,
            startColumn: Swift.Int = 0
        )
        {
            self.end = end
            self.start = start
            self.startColumn = startColumn
        }
    }

}

extension SecurityHubClientTypes.Recommendation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case text = "Text"
        case url = "Url"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let text = text {
            try encodeContainer.encode(text, forKey: .text)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let textDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .text)
        text = textDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
    }
}

extension SecurityHubClientTypes.Recommendation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Recommendation(text: \(Swift.String(describing: text)), url: \(Swift.String(describing: url)))"}
}

extension SecurityHubClientTypes {
    /// <p>A recommendation on how to remediate the issue identified in a finding.</p>
    public struct Recommendation: Swift.Equatable {
        /// <p>Describes the recommended steps to take to remediate an issue identified in a finding.</p>
        public let text: Swift.String?
        /// <p>A URL to a page or site that contains information about how to remediate a finding.</p>
        public let url: Swift.String?

        public init (
            text: Swift.String? = nil,
            url: Swift.String? = nil
        )
        {
            self.text = text
            self.url = url
        }
    }

}

extension SecurityHubClientTypes.Record: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jsonPath = "JsonPath"
        case recordIndex = "RecordIndex"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let jsonPath = jsonPath {
            try encodeContainer.encode(jsonPath, forKey: .jsonPath)
        }
        if recordIndex != 0 {
            try encodeContainer.encode(recordIndex, forKey: .recordIndex)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jsonPathDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jsonPath)
        jsonPath = jsonPathDecoded
        let recordIndexDecoded = try containerValues.decode(Swift.Int.self, forKey: .recordIndex)
        recordIndex = recordIndexDecoded
    }
}

extension SecurityHubClientTypes.Record: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Record(jsonPath: \(Swift.String(describing: jsonPath)), recordIndex: \(Swift.String(describing: recordIndex)))"}
}

extension SecurityHubClientTypes {
    /// <p>An occurrence of sensitive data in an Apache Avro object container or an Apache Parquet file.</p>
    public struct Record: Swift.Equatable {
        /// <p>The path, as a JSONPath expression, to the field in the record that contains the data. If the field name is longer than 20 characters, it is truncated. If the path is longer than 250 characters, it is truncated.</p>
        public let jsonPath: Swift.String?
        /// <p>The record index, starting from 0, for the record that contains the data.</p>
        public let recordIndex: Swift.Int

        public init (
            jsonPath: Swift.String? = nil,
            recordIndex: Swift.Int = 0
        )
        {
            self.jsonPath = jsonPath
            self.recordIndex = recordIndex
        }
    }

}

extension SecurityHubClientTypes {
    public enum RecordState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case archived
        case sdkUnknown(Swift.String)

        public static var allCases: [RecordState] {
            return [
                .active,
                .archived,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "ACTIVE"
            case .archived: return "ARCHIVED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecordState(rawValue: rawValue) ?? RecordState.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes.RelatedFinding: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case id = "Id"
        case productArn = "ProductArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let productArn = productArn {
            try encodeContainer.encode(productArn, forKey: .productArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .productArn)
        productArn = productArnDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
    }
}

extension SecurityHubClientTypes.RelatedFinding: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RelatedFinding(id: \(Swift.String(describing: id)), productArn: \(Swift.String(describing: productArn)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about a related finding.</p>
    public struct RelatedFinding: Swift.Equatable {
        /// <p>The product-generated identifier for a related finding.</p>
        public let id: Swift.String?
        /// <p>The ARN of the product that generated a related finding.</p>
        public let productArn: Swift.String?

        public init (
            id: Swift.String? = nil,
            productArn: Swift.String? = nil
        )
        {
            self.id = id
            self.productArn = productArn
        }
    }

}

extension SecurityHubClientTypes.Remediation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recommendation = "Recommendation"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let recommendation = recommendation {
            try encodeContainer.encode(recommendation, forKey: .recommendation)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Recommendation.self, forKey: .recommendation)
        recommendation = recommendationDecoded
    }
}

extension SecurityHubClientTypes.Remediation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Remediation(recommendation: \(Swift.String(describing: recommendation)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about the remediation steps for a finding.</p>
    public struct Remediation: Swift.Equatable {
        /// <p>A recommendation on the steps to take to remediate the issue identified by a finding.</p>
        public let recommendation: SecurityHubClientTypes.Recommendation?

        public init (
            recommendation: SecurityHubClientTypes.Recommendation? = nil
        )
        {
            self.recommendation = recommendation
        }
    }

}

extension SecurityHubClientTypes.Resource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataClassification = "DataClassification"
        case details = "Details"
        case id = "Id"
        case partition = "Partition"
        case region = "Region"
        case resourceRole = "ResourceRole"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataClassification = dataClassification {
            try encodeContainer.encode(dataClassification, forKey: .dataClassification)
        }
        if let details = details {
            try encodeContainer.encode(details, forKey: .details)
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let partition = partition {
            try encodeContainer.encode(partition.rawValue, forKey: .partition)
        }
        if let region = region {
            try encodeContainer.encode(region, forKey: .region)
        }
        if let resourceRole = resourceRole {
            try encodeContainer.encode(resourceRole, forKey: .resourceRole)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, fieldmap0) in tags {
                try tagsContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let partitionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Partition.self, forKey: .partition)
        partition = partitionDecoded
        let regionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .region)
        region = regionDecoded
        let resourceRoleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceRole)
        resourceRole = resourceRoleDecoded
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in tagsContainer {
                if let nonemptystring0 = nonemptystring0 {
                    tagsDecoded0?[key0] = nonemptystring0
                }
            }
        }
        tags = tagsDecoded0
        let dataClassificationDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.DataClassificationDetails.self, forKey: .dataClassification)
        dataClassification = dataClassificationDecoded
        let detailsDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ResourceDetails.self, forKey: .details)
        details = detailsDecoded
    }
}

extension SecurityHubClientTypes.Resource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Resource(dataClassification: \(Swift.String(describing: dataClassification)), details: \(Swift.String(describing: details)), id: \(Swift.String(describing: id)), partition: \(Swift.String(describing: partition)), region: \(Swift.String(describing: region)), resourceRole: \(Swift.String(describing: resourceRole)), tags: \(Swift.String(describing: tags)), type: \(Swift.String(describing: type)))"}
}

extension SecurityHubClientTypes {
    /// <p>A resource related to a finding.</p>
    public struct Resource: Swift.Equatable {
        /// <p>Contains information about sensitive data that was detected on the resource.</p>
        public let dataClassification: SecurityHubClientTypes.DataClassificationDetails?
        /// <p>Additional details about the resource related to a finding.</p>
        public let details: SecurityHubClientTypes.ResourceDetails?
        /// <p>The canonical identifier for the given resource type.</p>
        public let id: Swift.String?
        /// <p>The canonical AWS partition name that the Region is assigned to.</p>
        public let partition: SecurityHubClientTypes.Partition?
        /// <p>The canonical AWS external Region name where this resource is located.</p>
        public let region: Swift.String?
        /// <p>Identifies the role of the resource in the finding. A resource is either the actor or target of the finding activity,</p>
        public let resourceRole: Swift.String?
        /// <p>A list of AWS tags associated with a resource at the time the finding was
        ///          processed.</p>
        public let tags: [Swift.String:Swift.String]?
        /// <p>The type of the resource that details are provided for. If possible, set
        ///             <code>Type</code> to one of the supported resource types. For example, if the resource
        ///          is an EC2 instance, then set <code>Type</code> to <code>AwsEc2Instance</code>.</p>
        ///          <p>If the resource does not match any of the provided types, then set <code>Type</code> to
        ///             <code>Other</code>. </p>
        public let type: Swift.String?

        public init (
            dataClassification: SecurityHubClientTypes.DataClassificationDetails? = nil,
            details: SecurityHubClientTypes.ResourceDetails? = nil,
            id: Swift.String? = nil,
            partition: SecurityHubClientTypes.Partition? = nil,
            region: Swift.String? = nil,
            resourceRole: Swift.String? = nil,
            tags: [Swift.String:Swift.String]? = nil,
            type: Swift.String? = nil
        )
        {
            self.dataClassification = dataClassification
            self.details = details
            self.id = id
            self.partition = partition
            self.region = region
            self.resourceRole = resourceRole
            self.tags = tags
            self.type = type
        }
    }

}

extension ResourceConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceConflictException(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension ResourceConflictException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The resource specified in the request conflicts with an existing resource.</p>
public struct ResourceConflictException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct ResourceConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let code: Swift.String?
}

extension ResourceConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension SecurityHubClientTypes.ResourceDetails: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case awsApiGatewayRestApi = "AwsApiGatewayRestApi"
        case awsApiGatewayStage = "AwsApiGatewayStage"
        case awsApiGatewayV2Api = "AwsApiGatewayV2Api"
        case awsApiGatewayV2Stage = "AwsApiGatewayV2Stage"
        case awsAutoScalingAutoScalingGroup = "AwsAutoScalingAutoScalingGroup"
        case awsCertificateManagerCertificate = "AwsCertificateManagerCertificate"
        case awsCloudFrontDistribution = "AwsCloudFrontDistribution"
        case awsCloudTrailTrail = "AwsCloudTrailTrail"
        case awsCodeBuildProject = "AwsCodeBuildProject"
        case awsDynamoDbTable = "AwsDynamoDbTable"
        case awsEc2Eip = "AwsEc2Eip"
        case awsEc2Instance = "AwsEc2Instance"
        case awsEc2NetworkAcl = "AwsEc2NetworkAcl"
        case awsEc2NetworkInterface = "AwsEc2NetworkInterface"
        case awsEc2SecurityGroup = "AwsEc2SecurityGroup"
        case awsEc2Subnet = "AwsEc2Subnet"
        case awsEc2Volume = "AwsEc2Volume"
        case awsEc2Vpc = "AwsEc2Vpc"
        case awsElasticBeanstalkEnvironment = "AwsElasticBeanstalkEnvironment"
        case awsElasticsearchDomain = "AwsElasticsearchDomain"
        case awsElbLoadBalancer = "AwsElbLoadBalancer"
        case awsElbv2LoadBalancer = "AwsElbv2LoadBalancer"
        case awsIamAccessKey = "AwsIamAccessKey"
        case awsIamGroup = "AwsIamGroup"
        case awsIamPolicy = "AwsIamPolicy"
        case awsIamRole = "AwsIamRole"
        case awsIamUser = "AwsIamUser"
        case awsKmsKey = "AwsKmsKey"
        case awsLambdaFunction = "AwsLambdaFunction"
        case awsLambdaLayerVersion = "AwsLambdaLayerVersion"
        case awsRdsDbCluster = "AwsRdsDbCluster"
        case awsRdsDbClusterSnapshot = "AwsRdsDbClusterSnapshot"
        case awsRdsDbInstance = "AwsRdsDbInstance"
        case awsRdsDbSnapshot = "AwsRdsDbSnapshot"
        case awsRedshiftCluster = "AwsRedshiftCluster"
        case awsS3AccountPublicAccessBlock = "AwsS3AccountPublicAccessBlock"
        case awsS3Bucket = "AwsS3Bucket"
        case awsS3Object = "AwsS3Object"
        case awsSecretsManagerSecret = "AwsSecretsManagerSecret"
        case awsSnsTopic = "AwsSnsTopic"
        case awsSqsQueue = "AwsSqsQueue"
        case awsSsmPatchCompliance = "AwsSsmPatchCompliance"
        case awsWafWebAcl = "AwsWafWebAcl"
        case container = "Container"
        case other = "Other"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let awsApiGatewayRestApi = awsApiGatewayRestApi {
            try encodeContainer.encode(awsApiGatewayRestApi, forKey: .awsApiGatewayRestApi)
        }
        if let awsApiGatewayStage = awsApiGatewayStage {
            try encodeContainer.encode(awsApiGatewayStage, forKey: .awsApiGatewayStage)
        }
        if let awsApiGatewayV2Api = awsApiGatewayV2Api {
            try encodeContainer.encode(awsApiGatewayV2Api, forKey: .awsApiGatewayV2Api)
        }
        if let awsApiGatewayV2Stage = awsApiGatewayV2Stage {
            try encodeContainer.encode(awsApiGatewayV2Stage, forKey: .awsApiGatewayV2Stage)
        }
        if let awsAutoScalingAutoScalingGroup = awsAutoScalingAutoScalingGroup {
            try encodeContainer.encode(awsAutoScalingAutoScalingGroup, forKey: .awsAutoScalingAutoScalingGroup)
        }
        if let awsCertificateManagerCertificate = awsCertificateManagerCertificate {
            try encodeContainer.encode(awsCertificateManagerCertificate, forKey: .awsCertificateManagerCertificate)
        }
        if let awsCloudFrontDistribution = awsCloudFrontDistribution {
            try encodeContainer.encode(awsCloudFrontDistribution, forKey: .awsCloudFrontDistribution)
        }
        if let awsCloudTrailTrail = awsCloudTrailTrail {
            try encodeContainer.encode(awsCloudTrailTrail, forKey: .awsCloudTrailTrail)
        }
        if let awsCodeBuildProject = awsCodeBuildProject {
            try encodeContainer.encode(awsCodeBuildProject, forKey: .awsCodeBuildProject)
        }
        if let awsDynamoDbTable = awsDynamoDbTable {
            try encodeContainer.encode(awsDynamoDbTable, forKey: .awsDynamoDbTable)
        }
        if let awsEc2Eip = awsEc2Eip {
            try encodeContainer.encode(awsEc2Eip, forKey: .awsEc2Eip)
        }
        if let awsEc2Instance = awsEc2Instance {
            try encodeContainer.encode(awsEc2Instance, forKey: .awsEc2Instance)
        }
        if let awsEc2NetworkAcl = awsEc2NetworkAcl {
            try encodeContainer.encode(awsEc2NetworkAcl, forKey: .awsEc2NetworkAcl)
        }
        if let awsEc2NetworkInterface = awsEc2NetworkInterface {
            try encodeContainer.encode(awsEc2NetworkInterface, forKey: .awsEc2NetworkInterface)
        }
        if let awsEc2SecurityGroup = awsEc2SecurityGroup {
            try encodeContainer.encode(awsEc2SecurityGroup, forKey: .awsEc2SecurityGroup)
        }
        if let awsEc2Subnet = awsEc2Subnet {
            try encodeContainer.encode(awsEc2Subnet, forKey: .awsEc2Subnet)
        }
        if let awsEc2Volume = awsEc2Volume {
            try encodeContainer.encode(awsEc2Volume, forKey: .awsEc2Volume)
        }
        if let awsEc2Vpc = awsEc2Vpc {
            try encodeContainer.encode(awsEc2Vpc, forKey: .awsEc2Vpc)
        }
        if let awsElasticBeanstalkEnvironment = awsElasticBeanstalkEnvironment {
            try encodeContainer.encode(awsElasticBeanstalkEnvironment, forKey: .awsElasticBeanstalkEnvironment)
        }
        if let awsElasticsearchDomain = awsElasticsearchDomain {
            try encodeContainer.encode(awsElasticsearchDomain, forKey: .awsElasticsearchDomain)
        }
        if let awsElbLoadBalancer = awsElbLoadBalancer {
            try encodeContainer.encode(awsElbLoadBalancer, forKey: .awsElbLoadBalancer)
        }
        if let awsElbv2LoadBalancer = awsElbv2LoadBalancer {
            try encodeContainer.encode(awsElbv2LoadBalancer, forKey: .awsElbv2LoadBalancer)
        }
        if let awsIamAccessKey = awsIamAccessKey {
            try encodeContainer.encode(awsIamAccessKey, forKey: .awsIamAccessKey)
        }
        if let awsIamGroup = awsIamGroup {
            try encodeContainer.encode(awsIamGroup, forKey: .awsIamGroup)
        }
        if let awsIamPolicy = awsIamPolicy {
            try encodeContainer.encode(awsIamPolicy, forKey: .awsIamPolicy)
        }
        if let awsIamRole = awsIamRole {
            try encodeContainer.encode(awsIamRole, forKey: .awsIamRole)
        }
        if let awsIamUser = awsIamUser {
            try encodeContainer.encode(awsIamUser, forKey: .awsIamUser)
        }
        if let awsKmsKey = awsKmsKey {
            try encodeContainer.encode(awsKmsKey, forKey: .awsKmsKey)
        }
        if let awsLambdaFunction = awsLambdaFunction {
            try encodeContainer.encode(awsLambdaFunction, forKey: .awsLambdaFunction)
        }
        if let awsLambdaLayerVersion = awsLambdaLayerVersion {
            try encodeContainer.encode(awsLambdaLayerVersion, forKey: .awsLambdaLayerVersion)
        }
        if let awsRdsDbCluster = awsRdsDbCluster {
            try encodeContainer.encode(awsRdsDbCluster, forKey: .awsRdsDbCluster)
        }
        if let awsRdsDbClusterSnapshot = awsRdsDbClusterSnapshot {
            try encodeContainer.encode(awsRdsDbClusterSnapshot, forKey: .awsRdsDbClusterSnapshot)
        }
        if let awsRdsDbInstance = awsRdsDbInstance {
            try encodeContainer.encode(awsRdsDbInstance, forKey: .awsRdsDbInstance)
        }
        if let awsRdsDbSnapshot = awsRdsDbSnapshot {
            try encodeContainer.encode(awsRdsDbSnapshot, forKey: .awsRdsDbSnapshot)
        }
        if let awsRedshiftCluster = awsRedshiftCluster {
            try encodeContainer.encode(awsRedshiftCluster, forKey: .awsRedshiftCluster)
        }
        if let awsS3AccountPublicAccessBlock = awsS3AccountPublicAccessBlock {
            try encodeContainer.encode(awsS3AccountPublicAccessBlock, forKey: .awsS3AccountPublicAccessBlock)
        }
        if let awsS3Bucket = awsS3Bucket {
            try encodeContainer.encode(awsS3Bucket, forKey: .awsS3Bucket)
        }
        if let awsS3Object = awsS3Object {
            try encodeContainer.encode(awsS3Object, forKey: .awsS3Object)
        }
        if let awsSecretsManagerSecret = awsSecretsManagerSecret {
            try encodeContainer.encode(awsSecretsManagerSecret, forKey: .awsSecretsManagerSecret)
        }
        if let awsSnsTopic = awsSnsTopic {
            try encodeContainer.encode(awsSnsTopic, forKey: .awsSnsTopic)
        }
        if let awsSqsQueue = awsSqsQueue {
            try encodeContainer.encode(awsSqsQueue, forKey: .awsSqsQueue)
        }
        if let awsSsmPatchCompliance = awsSsmPatchCompliance {
            try encodeContainer.encode(awsSsmPatchCompliance, forKey: .awsSsmPatchCompliance)
        }
        if let awsWafWebAcl = awsWafWebAcl {
            try encodeContainer.encode(awsWafWebAcl, forKey: .awsWafWebAcl)
        }
        if let container = container {
            try encodeContainer.encode(container, forKey: .container)
        }
        if let other = other {
            var otherContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .other)
            for (dictKey0, fieldmap0) in other {
                try otherContainer.encode(fieldmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let awsAutoScalingAutoScalingGroupDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsAutoScalingAutoScalingGroupDetails.self, forKey: .awsAutoScalingAutoScalingGroup)
        awsAutoScalingAutoScalingGroup = awsAutoScalingAutoScalingGroupDecoded
        let awsCodeBuildProjectDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCodeBuildProjectDetails.self, forKey: .awsCodeBuildProject)
        awsCodeBuildProject = awsCodeBuildProjectDecoded
        let awsCloudFrontDistributionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCloudFrontDistributionDetails.self, forKey: .awsCloudFrontDistribution)
        awsCloudFrontDistribution = awsCloudFrontDistributionDecoded
        let awsEc2InstanceDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2InstanceDetails.self, forKey: .awsEc2Instance)
        awsEc2Instance = awsEc2InstanceDecoded
        let awsEc2NetworkInterfaceDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2NetworkInterfaceDetails.self, forKey: .awsEc2NetworkInterface)
        awsEc2NetworkInterface = awsEc2NetworkInterfaceDecoded
        let awsEc2SecurityGroupDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2SecurityGroupDetails.self, forKey: .awsEc2SecurityGroup)
        awsEc2SecurityGroup = awsEc2SecurityGroupDecoded
        let awsEc2VolumeDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2VolumeDetails.self, forKey: .awsEc2Volume)
        awsEc2Volume = awsEc2VolumeDecoded
        let awsEc2VpcDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2VpcDetails.self, forKey: .awsEc2Vpc)
        awsEc2Vpc = awsEc2VpcDecoded
        let awsEc2EipDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2EipDetails.self, forKey: .awsEc2Eip)
        awsEc2Eip = awsEc2EipDecoded
        let awsEc2SubnetDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2SubnetDetails.self, forKey: .awsEc2Subnet)
        awsEc2Subnet = awsEc2SubnetDecoded
        let awsEc2NetworkAclDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsEc2NetworkAclDetails.self, forKey: .awsEc2NetworkAcl)
        awsEc2NetworkAcl = awsEc2NetworkAclDecoded
        let awsElbv2LoadBalancerDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbv2LoadBalancerDetails.self, forKey: .awsElbv2LoadBalancer)
        awsElbv2LoadBalancer = awsElbv2LoadBalancerDecoded
        let awsElasticBeanstalkEnvironmentDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentDetails.self, forKey: .awsElasticBeanstalkEnvironment)
        awsElasticBeanstalkEnvironment = awsElasticBeanstalkEnvironmentDecoded
        let awsElasticsearchDomainDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElasticsearchDomainDetails.self, forKey: .awsElasticsearchDomain)
        awsElasticsearchDomain = awsElasticsearchDomainDecoded
        let awsS3BucketDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3BucketDetails.self, forKey: .awsS3Bucket)
        awsS3Bucket = awsS3BucketDecoded
        let awsS3AccountPublicAccessBlockDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3AccountPublicAccessBlockDetails.self, forKey: .awsS3AccountPublicAccessBlock)
        awsS3AccountPublicAccessBlock = awsS3AccountPublicAccessBlockDecoded
        let awsS3ObjectDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsS3ObjectDetails.self, forKey: .awsS3Object)
        awsS3Object = awsS3ObjectDecoded
        let awsSecretsManagerSecretDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSecretsManagerSecretDetails.self, forKey: .awsSecretsManagerSecret)
        awsSecretsManagerSecret = awsSecretsManagerSecretDecoded
        let awsIamAccessKeyDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamAccessKeyDetails.self, forKey: .awsIamAccessKey)
        awsIamAccessKey = awsIamAccessKeyDecoded
        let awsIamUserDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamUserDetails.self, forKey: .awsIamUser)
        awsIamUser = awsIamUserDecoded
        let awsIamPolicyDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamPolicyDetails.self, forKey: .awsIamPolicy)
        awsIamPolicy = awsIamPolicyDecoded
        let awsApiGatewayV2StageDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiGatewayV2StageDetails.self, forKey: .awsApiGatewayV2Stage)
        awsApiGatewayV2Stage = awsApiGatewayV2StageDecoded
        let awsApiGatewayV2ApiDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiGatewayV2ApiDetails.self, forKey: .awsApiGatewayV2Api)
        awsApiGatewayV2Api = awsApiGatewayV2ApiDecoded
        let awsDynamoDbTableDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsDynamoDbTableDetails.self, forKey: .awsDynamoDbTable)
        awsDynamoDbTable = awsDynamoDbTableDecoded
        let awsApiGatewayStageDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiGatewayStageDetails.self, forKey: .awsApiGatewayStage)
        awsApiGatewayStage = awsApiGatewayStageDecoded
        let awsApiGatewayRestApiDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsApiGatewayRestApiDetails.self, forKey: .awsApiGatewayRestApi)
        awsApiGatewayRestApi = awsApiGatewayRestApiDecoded
        let awsCloudTrailTrailDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCloudTrailTrailDetails.self, forKey: .awsCloudTrailTrail)
        awsCloudTrailTrail = awsCloudTrailTrailDecoded
        let awsSsmPatchComplianceDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSsmPatchComplianceDetails.self, forKey: .awsSsmPatchCompliance)
        awsSsmPatchCompliance = awsSsmPatchComplianceDecoded
        let awsCertificateManagerCertificateDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsCertificateManagerCertificateDetails.self, forKey: .awsCertificateManagerCertificate)
        awsCertificateManagerCertificate = awsCertificateManagerCertificateDecoded
        let awsRedshiftClusterDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRedshiftClusterDetails.self, forKey: .awsRedshiftCluster)
        awsRedshiftCluster = awsRedshiftClusterDecoded
        let awsElbLoadBalancerDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsElbLoadBalancerDetails.self, forKey: .awsElbLoadBalancer)
        awsElbLoadBalancer = awsElbLoadBalancerDecoded
        let awsIamGroupDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamGroupDetails.self, forKey: .awsIamGroup)
        awsIamGroup = awsIamGroupDecoded
        let awsIamRoleDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsIamRoleDetails.self, forKey: .awsIamRole)
        awsIamRole = awsIamRoleDecoded
        let awsKmsKeyDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsKmsKeyDetails.self, forKey: .awsKmsKey)
        awsKmsKey = awsKmsKeyDecoded
        let awsLambdaFunctionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsLambdaFunctionDetails.self, forKey: .awsLambdaFunction)
        awsLambdaFunction = awsLambdaFunctionDecoded
        let awsLambdaLayerVersionDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsLambdaLayerVersionDetails.self, forKey: .awsLambdaLayerVersion)
        awsLambdaLayerVersion = awsLambdaLayerVersionDecoded
        let awsRdsDbInstanceDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbInstanceDetails.self, forKey: .awsRdsDbInstance)
        awsRdsDbInstance = awsRdsDbInstanceDecoded
        let awsSnsTopicDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSnsTopicDetails.self, forKey: .awsSnsTopic)
        awsSnsTopic = awsSnsTopicDecoded
        let awsSqsQueueDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSqsQueueDetails.self, forKey: .awsSqsQueue)
        awsSqsQueue = awsSqsQueueDecoded
        let awsWafWebAclDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsWafWebAclDetails.self, forKey: .awsWafWebAcl)
        awsWafWebAcl = awsWafWebAclDecoded
        let awsRdsDbSnapshotDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbSnapshotDetails.self, forKey: .awsRdsDbSnapshot)
        awsRdsDbSnapshot = awsRdsDbSnapshotDecoded
        let awsRdsDbClusterSnapshotDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbClusterSnapshotDetails.self, forKey: .awsRdsDbClusterSnapshot)
        awsRdsDbClusterSnapshot = awsRdsDbClusterSnapshotDecoded
        let awsRdsDbClusterDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsRdsDbClusterDetails.self, forKey: .awsRdsDbCluster)
        awsRdsDbCluster = awsRdsDbClusterDecoded
        let containerDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ContainerDetails.self, forKey: .container)
        container = containerDecoded
        let otherContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .other)
        var otherDecoded0: [Swift.String:Swift.String]? = nil
        if let otherContainer = otherContainer {
            otherDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in otherContainer {
                if let nonemptystring0 = nonemptystring0 {
                    otherDecoded0?[key0] = nonemptystring0
                }
            }
        }
        other = otherDecoded0
    }
}

extension SecurityHubClientTypes.ResourceDetails: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceDetails(awsApiGatewayRestApi: \(Swift.String(describing: awsApiGatewayRestApi)), awsApiGatewayStage: \(Swift.String(describing: awsApiGatewayStage)), awsApiGatewayV2Api: \(Swift.String(describing: awsApiGatewayV2Api)), awsApiGatewayV2Stage: \(Swift.String(describing: awsApiGatewayV2Stage)), awsAutoScalingAutoScalingGroup: \(Swift.String(describing: awsAutoScalingAutoScalingGroup)), awsCertificateManagerCertificate: \(Swift.String(describing: awsCertificateManagerCertificate)), awsCloudFrontDistribution: \(Swift.String(describing: awsCloudFrontDistribution)), awsCloudTrailTrail: \(Swift.String(describing: awsCloudTrailTrail)), awsCodeBuildProject: \(Swift.String(describing: awsCodeBuildProject)), awsDynamoDbTable: \(Swift.String(describing: awsDynamoDbTable)), awsEc2Eip: \(Swift.String(describing: awsEc2Eip)), awsEc2Instance: \(Swift.String(describing: awsEc2Instance)), awsEc2NetworkAcl: \(Swift.String(describing: awsEc2NetworkAcl)), awsEc2NetworkInterface: \(Swift.String(describing: awsEc2NetworkInterface)), awsEc2SecurityGroup: \(Swift.String(describing: awsEc2SecurityGroup)), awsEc2Subnet: \(Swift.String(describing: awsEc2Subnet)), awsEc2Volume: \(Swift.String(describing: awsEc2Volume)), awsEc2Vpc: \(Swift.String(describing: awsEc2Vpc)), awsElasticBeanstalkEnvironment: \(Swift.String(describing: awsElasticBeanstalkEnvironment)), awsElasticsearchDomain: \(Swift.String(describing: awsElasticsearchDomain)), awsElbLoadBalancer: \(Swift.String(describing: awsElbLoadBalancer)), awsElbv2LoadBalancer: \(Swift.String(describing: awsElbv2LoadBalancer)), awsIamAccessKey: \(Swift.String(describing: awsIamAccessKey)), awsIamGroup: \(Swift.String(describing: awsIamGroup)), awsIamPolicy: \(Swift.String(describing: awsIamPolicy)), awsIamRole: \(Swift.String(describing: awsIamRole)), awsIamUser: \(Swift.String(describing: awsIamUser)), awsKmsKey: \(Swift.String(describing: awsKmsKey)), awsLambdaFunction: \(Swift.String(describing: awsLambdaFunction)), awsLambdaLayerVersion: \(Swift.String(describing: awsLambdaLayerVersion)), awsRdsDbCluster: \(Swift.String(describing: awsRdsDbCluster)), awsRdsDbClusterSnapshot: \(Swift.String(describing: awsRdsDbClusterSnapshot)), awsRdsDbInstance: \(Swift.String(describing: awsRdsDbInstance)), awsRdsDbSnapshot: \(Swift.String(describing: awsRdsDbSnapshot)), awsRedshiftCluster: \(Swift.String(describing: awsRedshiftCluster)), awsS3AccountPublicAccessBlock: \(Swift.String(describing: awsS3AccountPublicAccessBlock)), awsS3Bucket: \(Swift.String(describing: awsS3Bucket)), awsS3Object: \(Swift.String(describing: awsS3Object)), awsSecretsManagerSecret: \(Swift.String(describing: awsSecretsManagerSecret)), awsSnsTopic: \(Swift.String(describing: awsSnsTopic)), awsSqsQueue: \(Swift.String(describing: awsSqsQueue)), awsSsmPatchCompliance: \(Swift.String(describing: awsSsmPatchCompliance)), awsWafWebAcl: \(Swift.String(describing: awsWafWebAcl)), container: \(Swift.String(describing: container)), other: \(Swift.String(describing: other)))"}
}

extension SecurityHubClientTypes {
    /// <p>Additional details about a resource related to a finding.</p>
    ///          <p>To provide the details, use the object that corresponds to the resource type. For
    ///          example, if the resource type is <code>AwsEc2Instance</code>, then you use the
    ///             <code>AwsEc2Instance</code> object to provide the details.</p>
    ///          <p>If the type-specific object does not contain all of the fields you want to populate,
    ///          then you use the <code>Other</code> object to populate those additional fields.</p>
    ///          <p>You also use the <code>Other</code> object to populate the details when the selected
    ///          type does not have a corresponding object.</p>
    public struct ResourceDetails: Swift.Equatable {
        /// <p>Provides information about a REST API in version 1 of Amazon API Gateway.</p>
        public let awsApiGatewayRestApi: SecurityHubClientTypes.AwsApiGatewayRestApiDetails?
        /// <p>Provides information about a version 1 Amazon API Gateway stage.</p>
        public let awsApiGatewayStage: SecurityHubClientTypes.AwsApiGatewayStageDetails?
        /// <p>Provides information about a version 2 API in Amazon API Gateway.</p>
        public let awsApiGatewayV2Api: SecurityHubClientTypes.AwsApiGatewayV2ApiDetails?
        /// <p>Provides information about a version 2 stage for Amazon API Gateway.</p>
        public let awsApiGatewayV2Stage: SecurityHubClientTypes.AwsApiGatewayV2StageDetails?
        /// <p>Details for an autoscaling group.</p>
        public let awsAutoScalingAutoScalingGroup: SecurityHubClientTypes.AwsAutoScalingAutoScalingGroupDetails?
        /// <p>Provides details about an AWS Certificate Manager (ACM) certificate.</p>
        public let awsCertificateManagerCertificate: SecurityHubClientTypes.AwsCertificateManagerCertificateDetails?
        /// <p>Details about a CloudFront distribution.</p>
        public let awsCloudFrontDistribution: SecurityHubClientTypes.AwsCloudFrontDistributionDetails?
        /// <p>Provides details about a CloudTrail trail.</p>
        public let awsCloudTrailTrail: SecurityHubClientTypes.AwsCloudTrailTrailDetails?
        /// <p>Details for an AWS CodeBuild project.</p>
        public let awsCodeBuildProject: SecurityHubClientTypes.AwsCodeBuildProjectDetails?
        /// <p>Details about a DynamoDB table.</p>
        public let awsDynamoDbTable: SecurityHubClientTypes.AwsDynamoDbTableDetails?
        /// <p>Details about an Elastic IP address.</p>
        public let awsEc2Eip: SecurityHubClientTypes.AwsEc2EipDetails?
        /// <p>Details about an Amazon EC2 instance related to a finding.</p>
        public let awsEc2Instance: SecurityHubClientTypes.AwsEc2InstanceDetails?
        /// <p>Details about an EC2 network access control list (ACL).</p>
        public let awsEc2NetworkAcl: SecurityHubClientTypes.AwsEc2NetworkAclDetails?
        /// <p>Details for an Amazon EC2 network interface.</p>
        public let awsEc2NetworkInterface: SecurityHubClientTypes.AwsEc2NetworkInterfaceDetails?
        /// <p>Details for an EC2 security group.</p>
        public let awsEc2SecurityGroup: SecurityHubClientTypes.AwsEc2SecurityGroupDetails?
        /// <p>Details about a subnet in EC2.</p>
        public let awsEc2Subnet: SecurityHubClientTypes.AwsEc2SubnetDetails?
        /// <p>Details for an EC2 volume.</p>
        public let awsEc2Volume: SecurityHubClientTypes.AwsEc2VolumeDetails?
        /// <p>Details for an EC2 VPC.</p>
        public let awsEc2Vpc: SecurityHubClientTypes.AwsEc2VpcDetails?
        /// <p>Details about an Elastic Beanstalk environment.</p>
        public let awsElasticBeanstalkEnvironment: SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentDetails?
        /// <p>Details for an Elasticsearch domain.</p>
        public let awsElasticsearchDomain: SecurityHubClientTypes.AwsElasticsearchDomainDetails?
        /// <p>contains details about a Classic Load Balancer.</p>
        public let awsElbLoadBalancer: SecurityHubClientTypes.AwsElbLoadBalancerDetails?
        /// <p>Details about a load balancer.</p>
        public let awsElbv2LoadBalancer: SecurityHubClientTypes.AwsElbv2LoadBalancerDetails?
        /// <p>Details about an IAM access key related to a finding.</p>
        public let awsIamAccessKey: SecurityHubClientTypes.AwsIamAccessKeyDetails?
        /// <p>Contains details about an IAM group.</p>
        public let awsIamGroup: SecurityHubClientTypes.AwsIamGroupDetails?
        /// <p>Details about an IAM permissions policy.</p>
        public let awsIamPolicy: SecurityHubClientTypes.AwsIamPolicyDetails?
        /// <p>Details about an IAM role.</p>
        public let awsIamRole: SecurityHubClientTypes.AwsIamRoleDetails?
        /// <p>Details about an IAM user.</p>
        public let awsIamUser: SecurityHubClientTypes.AwsIamUserDetails?
        /// <p>Details about a KMS key.</p>
        public let awsKmsKey: SecurityHubClientTypes.AwsKmsKeyDetails?
        /// <p>Details about a Lambda function.</p>
        public let awsLambdaFunction: SecurityHubClientTypes.AwsLambdaFunctionDetails?
        /// <p>Details for a Lambda layer version.</p>
        public let awsLambdaLayerVersion: SecurityHubClientTypes.AwsLambdaLayerVersionDetails?
        /// <p>Details about an Amazon RDS database cluster.</p>
        public let awsRdsDbCluster: SecurityHubClientTypes.AwsRdsDbClusterDetails?
        /// <p>Details about an Amazon RDS database cluster snapshot.</p>
        public let awsRdsDbClusterSnapshot: SecurityHubClientTypes.AwsRdsDbClusterSnapshotDetails?
        /// <p>Details about an Amazon RDS database instance.</p>
        public let awsRdsDbInstance: SecurityHubClientTypes.AwsRdsDbInstanceDetails?
        /// <p>Details about an Amazon RDS database snapshot.</p>
        public let awsRdsDbSnapshot: SecurityHubClientTypes.AwsRdsDbSnapshotDetails?
        /// <p>Contains details about an Amazon Redshift cluster.</p>
        public let awsRedshiftCluster: SecurityHubClientTypes.AwsRedshiftClusterDetails?
        /// <p>Details about the Amazon S3 Public Access Block configuration for an account.</p>
        public let awsS3AccountPublicAccessBlock: SecurityHubClientTypes.AwsS3AccountPublicAccessBlockDetails?
        /// <p>Details about an Amazon S3 bucket related to a finding.</p>
        public let awsS3Bucket: SecurityHubClientTypes.AwsS3BucketDetails?
        /// <p>Details about an Amazon S3 object related to a finding.</p>
        public let awsS3Object: SecurityHubClientTypes.AwsS3ObjectDetails?
        /// <p>Details about a Secrets Manager secret.</p>
        public let awsSecretsManagerSecret: SecurityHubClientTypes.AwsSecretsManagerSecretDetails?
        /// <p>Details about an SNS topic.</p>
        public let awsSnsTopic: SecurityHubClientTypes.AwsSnsTopicDetails?
        /// <p>Details about an SQS queue.</p>
        public let awsSqsQueue: SecurityHubClientTypes.AwsSqsQueueDetails?
        /// <p>Provides information about the state of a patch on an instance based on the patch baseline that was used to patch the instance.</p>
        public let awsSsmPatchCompliance: SecurityHubClientTypes.AwsSsmPatchComplianceDetails?
        /// <p>Details for a WAF WebACL.</p>
        public let awsWafWebAcl: SecurityHubClientTypes.AwsWafWebAclDetails?
        /// <p>Details about a container resource related to a finding.</p>
        public let container: SecurityHubClientTypes.ContainerDetails?
        /// <p>Details about a resource that are not available in a type-specific details object. Use
        ///          the <code>Other</code> object in the following cases.</p>
        ///          <ul>
        ///             <li>
        ///                <p>The type-specific object does not contain all of the fields that you want to
        ///                populate. In this case, first use the type-specific object to populate those fields.
        ///                Use the <code>Other</code> object to populate the fields that are missing from the
        ///                type-specific object.</p>
        ///             </li>
        ///             <li>
        ///                <p>The resource type does not have a corresponding object. This includes resources
        ///                for which the type is <code>Other</code>. </p>
        ///             </li>
        ///          </ul>
        public let other: [Swift.String:Swift.String]?

        public init (
            awsApiGatewayRestApi: SecurityHubClientTypes.AwsApiGatewayRestApiDetails? = nil,
            awsApiGatewayStage: SecurityHubClientTypes.AwsApiGatewayStageDetails? = nil,
            awsApiGatewayV2Api: SecurityHubClientTypes.AwsApiGatewayV2ApiDetails? = nil,
            awsApiGatewayV2Stage: SecurityHubClientTypes.AwsApiGatewayV2StageDetails? = nil,
            awsAutoScalingAutoScalingGroup: SecurityHubClientTypes.AwsAutoScalingAutoScalingGroupDetails? = nil,
            awsCertificateManagerCertificate: SecurityHubClientTypes.AwsCertificateManagerCertificateDetails? = nil,
            awsCloudFrontDistribution: SecurityHubClientTypes.AwsCloudFrontDistributionDetails? = nil,
            awsCloudTrailTrail: SecurityHubClientTypes.AwsCloudTrailTrailDetails? = nil,
            awsCodeBuildProject: SecurityHubClientTypes.AwsCodeBuildProjectDetails? = nil,
            awsDynamoDbTable: SecurityHubClientTypes.AwsDynamoDbTableDetails? = nil,
            awsEc2Eip: SecurityHubClientTypes.AwsEc2EipDetails? = nil,
            awsEc2Instance: SecurityHubClientTypes.AwsEc2InstanceDetails? = nil,
            awsEc2NetworkAcl: SecurityHubClientTypes.AwsEc2NetworkAclDetails? = nil,
            awsEc2NetworkInterface: SecurityHubClientTypes.AwsEc2NetworkInterfaceDetails? = nil,
            awsEc2SecurityGroup: SecurityHubClientTypes.AwsEc2SecurityGroupDetails? = nil,
            awsEc2Subnet: SecurityHubClientTypes.AwsEc2SubnetDetails? = nil,
            awsEc2Volume: SecurityHubClientTypes.AwsEc2VolumeDetails? = nil,
            awsEc2Vpc: SecurityHubClientTypes.AwsEc2VpcDetails? = nil,
            awsElasticBeanstalkEnvironment: SecurityHubClientTypes.AwsElasticBeanstalkEnvironmentDetails? = nil,
            awsElasticsearchDomain: SecurityHubClientTypes.AwsElasticsearchDomainDetails? = nil,
            awsElbLoadBalancer: SecurityHubClientTypes.AwsElbLoadBalancerDetails? = nil,
            awsElbv2LoadBalancer: SecurityHubClientTypes.AwsElbv2LoadBalancerDetails? = nil,
            awsIamAccessKey: SecurityHubClientTypes.AwsIamAccessKeyDetails? = nil,
            awsIamGroup: SecurityHubClientTypes.AwsIamGroupDetails? = nil,
            awsIamPolicy: SecurityHubClientTypes.AwsIamPolicyDetails? = nil,
            awsIamRole: SecurityHubClientTypes.AwsIamRoleDetails? = nil,
            awsIamUser: SecurityHubClientTypes.AwsIamUserDetails? = nil,
            awsKmsKey: SecurityHubClientTypes.AwsKmsKeyDetails? = nil,
            awsLambdaFunction: SecurityHubClientTypes.AwsLambdaFunctionDetails? = nil,
            awsLambdaLayerVersion: SecurityHubClientTypes.AwsLambdaLayerVersionDetails? = nil,
            awsRdsDbCluster: SecurityHubClientTypes.AwsRdsDbClusterDetails? = nil,
            awsRdsDbClusterSnapshot: SecurityHubClientTypes.AwsRdsDbClusterSnapshotDetails? = nil,
            awsRdsDbInstance: SecurityHubClientTypes.AwsRdsDbInstanceDetails? = nil,
            awsRdsDbSnapshot: SecurityHubClientTypes.AwsRdsDbSnapshotDetails? = nil,
            awsRedshiftCluster: SecurityHubClientTypes.AwsRedshiftClusterDetails? = nil,
            awsS3AccountPublicAccessBlock: SecurityHubClientTypes.AwsS3AccountPublicAccessBlockDetails? = nil,
            awsS3Bucket: SecurityHubClientTypes.AwsS3BucketDetails? = nil,
            awsS3Object: SecurityHubClientTypes.AwsS3ObjectDetails? = nil,
            awsSecretsManagerSecret: SecurityHubClientTypes.AwsSecretsManagerSecretDetails? = nil,
            awsSnsTopic: SecurityHubClientTypes.AwsSnsTopicDetails? = nil,
            awsSqsQueue: SecurityHubClientTypes.AwsSqsQueueDetails? = nil,
            awsSsmPatchCompliance: SecurityHubClientTypes.AwsSsmPatchComplianceDetails? = nil,
            awsWafWebAcl: SecurityHubClientTypes.AwsWafWebAclDetails? = nil,
            container: SecurityHubClientTypes.ContainerDetails? = nil,
            other: [Swift.String:Swift.String]? = nil
        )
        {
            self.awsApiGatewayRestApi = awsApiGatewayRestApi
            self.awsApiGatewayStage = awsApiGatewayStage
            self.awsApiGatewayV2Api = awsApiGatewayV2Api
            self.awsApiGatewayV2Stage = awsApiGatewayV2Stage
            self.awsAutoScalingAutoScalingGroup = awsAutoScalingAutoScalingGroup
            self.awsCertificateManagerCertificate = awsCertificateManagerCertificate
            self.awsCloudFrontDistribution = awsCloudFrontDistribution
            self.awsCloudTrailTrail = awsCloudTrailTrail
            self.awsCodeBuildProject = awsCodeBuildProject
            self.awsDynamoDbTable = awsDynamoDbTable
            self.awsEc2Eip = awsEc2Eip
            self.awsEc2Instance = awsEc2Instance
            self.awsEc2NetworkAcl = awsEc2NetworkAcl
            self.awsEc2NetworkInterface = awsEc2NetworkInterface
            self.awsEc2SecurityGroup = awsEc2SecurityGroup
            self.awsEc2Subnet = awsEc2Subnet
            self.awsEc2Volume = awsEc2Volume
            self.awsEc2Vpc = awsEc2Vpc
            self.awsElasticBeanstalkEnvironment = awsElasticBeanstalkEnvironment
            self.awsElasticsearchDomain = awsElasticsearchDomain
            self.awsElbLoadBalancer = awsElbLoadBalancer
            self.awsElbv2LoadBalancer = awsElbv2LoadBalancer
            self.awsIamAccessKey = awsIamAccessKey
            self.awsIamGroup = awsIamGroup
            self.awsIamPolicy = awsIamPolicy
            self.awsIamRole = awsIamRole
            self.awsIamUser = awsIamUser
            self.awsKmsKey = awsKmsKey
            self.awsLambdaFunction = awsLambdaFunction
            self.awsLambdaLayerVersion = awsLambdaLayerVersion
            self.awsRdsDbCluster = awsRdsDbCluster
            self.awsRdsDbClusterSnapshot = awsRdsDbClusterSnapshot
            self.awsRdsDbInstance = awsRdsDbInstance
            self.awsRdsDbSnapshot = awsRdsDbSnapshot
            self.awsRedshiftCluster = awsRedshiftCluster
            self.awsS3AccountPublicAccessBlock = awsS3AccountPublicAccessBlock
            self.awsS3Bucket = awsS3Bucket
            self.awsS3Object = awsS3Object
            self.awsSecretsManagerSecret = awsSecretsManagerSecret
            self.awsSnsTopic = awsSnsTopic
            self.awsSqsQueue = awsSqsQueue
            self.awsSsmPatchCompliance = awsSsmPatchCompliance
            self.awsWafWebAcl = awsWafWebAcl
            self.container = container
            self.other = other
        }
    }

}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(code: \(Swift.String(describing: code)), message: \(Swift.String(describing: message)))"}
}

extension ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.code = output.code
            self.message = output.message
        } else {
            self.code = nil
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request was rejected because we can't find the specified resource.</p>
public struct ResourceNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var code: Swift.String?
    public var message: Swift.String?

    public init (
        code: Swift.String? = nil,
        message: Swift.String? = nil
    )
    {
        self.code = code
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
    public let code: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code = "Code"
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
    }
}

extension SecurityHubClientTypes.Result: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId = "AccountId"
        case processingResult = "ProcessingResult"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let processingResult = processingResult {
            try encodeContainer.encode(processingResult, forKey: .processingResult)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let processingResultDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .processingResult)
        processingResult = processingResultDecoded
    }
}

extension SecurityHubClientTypes.Result: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Result(accountId: \(Swift.String(describing: accountId)), processingResult: \(Swift.String(describing: processingResult)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about the account that was not processed.</p>
    public struct Result: Swift.Equatable {
        /// <p>An AWS account ID of the account that was not processed.</p>
        public let accountId: Swift.String?
        /// <p>The reason that the account was not processed.</p>
        public let processingResult: Swift.String?

        public init (
            accountId: Swift.String? = nil,
            processingResult: Swift.String? = nil
        )
        {
            self.accountId = accountId
            self.processingResult = processingResult
        }
    }

}

extension SecurityHubClientTypes.SensitiveDataDetections: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case count = "Count"
        case occurrences = "Occurrences"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if count != 0 {
            try encodeContainer.encode(count, forKey: .count)
        }
        if let occurrences = occurrences {
            try encodeContainer.encode(occurrences, forKey: .occurrences)
        }
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let countDecoded = try containerValues.decode(Swift.Int.self, forKey: .count)
        count = countDecoded
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
        let occurrencesDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.Occurrences.self, forKey: .occurrences)
        occurrences = occurrencesDecoded
    }
}

extension SecurityHubClientTypes.SensitiveDataDetections: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SensitiveDataDetections(count: \(Swift.String(describing: count)), occurrences: \(Swift.String(describing: occurrences)), type: \(Swift.String(describing: type)))"}
}

extension SecurityHubClientTypes {
    /// <p>The list of detected instances of sensitive data.</p>
    public struct SensitiveDataDetections: Swift.Equatable {
        /// <p>The total number of occurrences of sensitive data that were detected.</p>
        public let count: Swift.Int
        /// <p>Details about the sensitive data that was detected.</p>
        public let occurrences: SecurityHubClientTypes.Occurrences?
        /// <p>The type of sensitive data that was detected. For example, the type might indicate that the data is an email address.</p>
        public let type: Swift.String?

        public init (
            count: Swift.Int = 0,
            occurrences: SecurityHubClientTypes.Occurrences? = nil,
            type: Swift.String? = nil
        )
        {
            self.count = count
            self.occurrences = occurrences
            self.type = type
        }
    }

}

extension SecurityHubClientTypes.SensitiveDataResult: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category = "Category"
        case detections = "Detections"
        case totalCount = "TotalCount"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let category = category {
            try encodeContainer.encode(category, forKey: .category)
        }
        if let detections = detections {
            var detectionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .detections)
            for sensitivedatadetectionslist0 in detections {
                try detectionsContainer.encode(sensitivedatadetectionslist0)
            }
        }
        if totalCount != 0 {
            try encodeContainer.encode(totalCount, forKey: .totalCount)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .category)
        category = categoryDecoded
        let detectionsContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.SensitiveDataDetections?].self, forKey: .detections)
        var detectionsDecoded0:[SecurityHubClientTypes.SensitiveDataDetections]? = nil
        if let detectionsContainer = detectionsContainer {
            detectionsDecoded0 = [SecurityHubClientTypes.SensitiveDataDetections]()
            for structure0 in detectionsContainer {
                if let structure0 = structure0 {
                    detectionsDecoded0?.append(structure0)
                }
            }
        }
        detections = detectionsDecoded0
        let totalCountDecoded = try containerValues.decode(Swift.Int.self, forKey: .totalCount)
        totalCount = totalCountDecoded
    }
}

extension SecurityHubClientTypes.SensitiveDataResult: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SensitiveDataResult(category: \(Swift.String(describing: category)), detections: \(Swift.String(describing: detections)), totalCount: \(Swift.String(describing: totalCount)))"}
}

extension SecurityHubClientTypes {
    /// <p>Contains a detected instance of sensitive data that are based on built-in identifiers.</p>
    public struct SensitiveDataResult: Swift.Equatable {
        /// <p>The category of sensitive data that was detected. For example, the category can indicate that the sensitive data involved credentials, financial information, or personal information.</p>
        public let category: Swift.String?
        /// <p>The list of detected instances of sensitive data.</p>
        public let detections: [SecurityHubClientTypes.SensitiveDataDetections]?
        /// <p>The total number of occurrences of sensitive data.</p>
        public let totalCount: Swift.Int

        public init (
            category: Swift.String? = nil,
            detections: [SecurityHubClientTypes.SensitiveDataDetections]? = nil,
            totalCount: Swift.Int = 0
        )
        {
            self.category = category
            self.detections = detections
            self.totalCount = totalCount
        }
    }

}

extension SecurityHubClientTypes.Severity: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case label = "Label"
        case normalized = "Normalized"
        case original = "Original"
        case product = "Product"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let label = label {
            try encodeContainer.encode(label.rawValue, forKey: .label)
        }
        if normalized != 0 {
            try encodeContainer.encode(normalized, forKey: .normalized)
        }
        if let original = original {
            try encodeContainer.encode(original, forKey: .original)
        }
        if product != 0.0 {
            try encodeContainer.encode(product, forKey: .product)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let productDecoded = try containerValues.decode(Swift.Double.self, forKey: .product)
        product = productDecoded
        let labelDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.SeverityLabel.self, forKey: .label)
        label = labelDecoded
        let normalizedDecoded = try containerValues.decode(Swift.Int.self, forKey: .normalized)
        normalized = normalizedDecoded
        let originalDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .original)
        original = originalDecoded
    }
}

extension SecurityHubClientTypes.Severity: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Severity(label: \(Swift.String(describing: label)), normalized: \(Swift.String(describing: normalized)), original: \(Swift.String(describing: original)), product: \(Swift.String(describing: product)))"}
}

extension SecurityHubClientTypes {
    /// <p>The severity of the finding.</p>
    ///          <p>The finding provider can provide the initial severity. The finding provider can only
    ///          update the severity if it has not been updated using
    ///          <code>BatchUpdateFindings</code>.</p>
    ///          <p>The finding must have either <code>Label</code> or <code>Normalized</code> populated. If
    ///          only one of these attributes is populated, then Security Hub automatically populates the other
    ///          one. If neither attribute is populated, then the finding is invalid. <code>Label</code> is
    ///          the preferred attribute.</p>
    public struct Severity: Swift.Equatable {
        /// <p>The severity value of the finding. The allowed values are the following.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>INFORMATIONAL</code> - No issue was found.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>LOW</code> - The issue does not require action on its own.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>MEDIUM</code> - The issue must be addressed but not urgently.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>HIGH</code> - The issue must be addressed as a priority.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>CRITICAL</code> - The issue must be remediated immediately to avoid it
        ///                escalating.</p>
        ///             </li>
        ///          </ul>
        ///          <p>If you provide <code>Normalized</code> and do not provide <code>Label</code>, then
        ///             <code>Label</code> is set automatically as follows. </p>
        ///          <ul>
        ///             <li>
        ///                <p>0 - <code>INFORMATIONAL</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>1–39 - <code>LOW</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>40–69 - <code>MEDIUM</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>70–89 - <code>HIGH</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>90–100 - <code>CRITICAL</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let label: SecurityHubClientTypes.SeverityLabel?
        /// <p>Deprecated. The normalized severity of a finding. This attribute is being deprecated.
        ///          Instead of providing <code>Normalized</code>, provide <code>Label</code>.</p>
        ///          <p>If you provide <code>Label</code> and do not provide <code>Normalized</code>, then
        ///             <code>Normalized</code> is set automatically as follows.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>INFORMATIONAL</code> - 0</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>LOW</code> - 1</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>MEDIUM</code> - 40</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>HIGH</code> - 70</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>CRITICAL</code> - 90</p>
        ///             </li>
        ///          </ul>
        public let normalized: Swift.Int
        /// <p>The native severity from the finding product that generated the finding.</p>
        public let original: Swift.String?
        /// <p>Deprecated. This attribute is being deprecated. Instead of providing
        ///             <code>Product</code>, provide <code>Original</code>.</p>
        ///          <p>The native severity as defined by the AWS service or integrated partner product that
        ///          generated the finding.</p>
        public let product: Swift.Double

        public init (
            label: SecurityHubClientTypes.SeverityLabel? = nil,
            normalized: Swift.Int = 0,
            original: Swift.String? = nil,
            product: Swift.Double = 0.0
        )
        {
            self.label = label
            self.normalized = normalized
            self.original = original
            self.product = product
        }
    }

}

extension SecurityHubClientTypes {
    public enum SeverityLabel: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case critical
        case high
        case informational
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [SeverityLabel] {
            return [
                .critical,
                .high,
                .informational,
                .low,
                .medium,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .critical: return "CRITICAL"
            case .high: return "HIGH"
            case .informational: return "INFORMATIONAL"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SeverityLabel(rawValue: rawValue) ?? SeverityLabel.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes {
    public enum SeverityRating: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case critical
        case high
        case low
        case medium
        case sdkUnknown(Swift.String)

        public static var allCases: [SeverityRating] {
            return [
                .critical,
                .high,
                .low,
                .medium,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .critical: return "CRITICAL"
            case .high: return "HIGH"
            case .low: return "LOW"
            case .medium: return "MEDIUM"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SeverityRating(rawValue: rawValue) ?? SeverityRating.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes.SeverityUpdate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case label = "Label"
        case normalized = "Normalized"
        case product = "Product"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let label = label {
            try encodeContainer.encode(label.rawValue, forKey: .label)
        }
        if normalized != 0 {
            try encodeContainer.encode(normalized, forKey: .normalized)
        }
        if product != 0.0 {
            try encodeContainer.encode(product, forKey: .product)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let normalizedDecoded = try containerValues.decode(Swift.Int.self, forKey: .normalized)
        normalized = normalizedDecoded
        let productDecoded = try containerValues.decode(Swift.Double.self, forKey: .product)
        product = productDecoded
        let labelDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.SeverityLabel.self, forKey: .label)
        label = labelDecoded
    }
}

extension SecurityHubClientTypes.SeverityUpdate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SeverityUpdate(label: \(Swift.String(describing: label)), normalized: \(Swift.String(describing: normalized)), product: \(Swift.String(describing: product)))"}
}

extension SecurityHubClientTypes {
    /// <p>Updates to the severity information for a finding.</p>
    public struct SeverityUpdate: Swift.Equatable {
        /// <p>The severity value of the finding. The allowed values are the following.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>INFORMATIONAL</code> - No issue was found.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>LOW</code> - The issue does not require action on its own.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>MEDIUM</code> - The issue must be addressed but not urgently.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>HIGH</code> - The issue must be addressed as a priority.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>CRITICAL</code> - The issue must be remediated immediately to avoid it
        ///                escalating.</p>
        ///             </li>
        ///          </ul>
        public let label: SecurityHubClientTypes.SeverityLabel?
        /// <p>The normalized severity for the finding. This attribute is to be deprecated in favor of
        ///             <code>Label</code>.</p>
        ///          <p>If you provide <code>Normalized</code> and do not provide <code>Label</code>,
        ///             <code>Label</code> is set automatically as follows.</p>
        ///          <ul>
        ///             <li>
        ///                <p>0 - <code>INFORMATIONAL</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>1–39 - <code>LOW</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>40–69 - <code>MEDIUM</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>70–89 - <code>HIGH</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>90–100 - <code>CRITICAL</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let normalized: Swift.Int
        /// <p>The native severity as defined by the AWS service or integrated partner product that
        ///          generated the finding.</p>
        public let product: Swift.Double

        public init (
            label: SecurityHubClientTypes.SeverityLabel? = nil,
            normalized: Swift.Int = 0,
            product: Swift.Double = 0.0
        )
        {
            self.label = label
            self.normalized = normalized
            self.product = product
        }
    }

}

extension SecurityHubClientTypes.SoftwarePackage: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case architecture = "Architecture"
        case epoch = "Epoch"
        case name = "Name"
        case release = "Release"
        case version = "Version"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let architecture = architecture {
            try encodeContainer.encode(architecture, forKey: .architecture)
        }
        if let epoch = epoch {
            try encodeContainer.encode(epoch, forKey: .epoch)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let release = release {
            try encodeContainer.encode(release, forKey: .release)
        }
        if let version = version {
            try encodeContainer.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let versionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .version)
        version = versionDecoded
        let epochDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .epoch)
        epoch = epochDecoded
        let releaseDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .release)
        release = releaseDecoded
        let architectureDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .architecture)
        architecture = architectureDecoded
    }
}

extension SecurityHubClientTypes.SoftwarePackage: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SoftwarePackage(architecture: \(Swift.String(describing: architecture)), epoch: \(Swift.String(describing: epoch)), name: \(Swift.String(describing: name)), release: \(Swift.String(describing: release)), version: \(Swift.String(describing: version)))"}
}

extension SecurityHubClientTypes {
    /// <p>Information about a software package.</p>
    public struct SoftwarePackage: Swift.Equatable {
        /// <p>The architecture used for the software package.</p>
        public let architecture: Swift.String?
        /// <p>The epoch of the software package.</p>
        public let epoch: Swift.String?
        /// <p>The name of the software package.</p>
        public let name: Swift.String?
        /// <p>The release of the software package.</p>
        public let release: Swift.String?
        /// <p>The version of the software package.</p>
        public let version: Swift.String?

        public init (
            architecture: Swift.String? = nil,
            epoch: Swift.String? = nil,
            name: Swift.String? = nil,
            release: Swift.String? = nil,
            version: Swift.String? = nil
        )
        {
            self.architecture = architecture
            self.epoch = epoch
            self.name = name
            self.release = release
            self.version = version
        }
    }

}

extension SecurityHubClientTypes.SortCriterion: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case field = "Field"
        case sortOrder = "SortOrder"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let field = field {
            try encodeContainer.encode(field, forKey: .field)
        }
        if let sortOrder = sortOrder {
            try encodeContainer.encode(sortOrder.rawValue, forKey: .sortOrder)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let fieldDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .field)
        field = fieldDecoded
        let sortOrderDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.SortOrder.self, forKey: .sortOrder)
        sortOrder = sortOrderDecoded
    }
}

extension SecurityHubClientTypes.SortCriterion: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SortCriterion(field: \(Swift.String(describing: field)), sortOrder: \(Swift.String(describing: sortOrder)))"}
}

extension SecurityHubClientTypes {
    /// <p>A collection of finding attributes used to sort findings.</p>
    public struct SortCriterion: Swift.Equatable {
        /// <p>The finding attribute used to sort findings.</p>
        public let field: Swift.String?
        /// <p>The order used to sort findings.</p>
        public let sortOrder: SecurityHubClientTypes.SortOrder?

        public init (
            field: Swift.String? = nil,
            sortOrder: SecurityHubClientTypes.SortOrder? = nil
        )
        {
            self.field = field
            self.sortOrder = sortOrder
        }
    }

}

extension SecurityHubClientTypes {
    public enum SortOrder: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case ascending
        case descending
        case sdkUnknown(Swift.String)

        public static var allCases: [SortOrder] {
            return [
                .ascending,
                .descending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .ascending: return "asc"
            case .descending: return "desc"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SortOrder(rawValue: rawValue) ?? SortOrder.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes.Standard: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case enabledByDefault = "EnabledByDefault"
        case name = "Name"
        case standardsArn = "StandardsArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if enabledByDefault != false {
            try encodeContainer.encode(enabledByDefault, forKey: .enabledByDefault)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let standardsArn = standardsArn {
            try encodeContainer.encode(standardsArn, forKey: .standardsArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let standardsArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .standardsArn)
        standardsArn = standardsArnDecoded
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let enabledByDefaultDecoded = try containerValues.decode(Swift.Bool.self, forKey: .enabledByDefault)
        enabledByDefault = enabledByDefaultDecoded
    }
}

extension SecurityHubClientTypes.Standard: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Standard(description: \(Swift.String(describing: description)), enabledByDefault: \(Swift.String(describing: enabledByDefault)), name: \(Swift.String(describing: name)), standardsArn: \(Swift.String(describing: standardsArn)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about a specific standard.</p>
    public struct Standard: Swift.Equatable {
        /// <p>A description of the standard.</p>
        public let description: Swift.String?
        /// <p>Whether the standard is enabled by default. When Security Hub is enabled from the console, if a
        ///          standard is enabled by default, the check box for that standard is selected by
        ///          default.</p>
        ///          <p>When Security Hub is enabled using the <code>EnableSecurityHub</code> API operation, the
        ///          standard is enabled by default unless <code>EnableDefaultStandards</code> is set to
        ///             <code>false</code>.</p>
        public let enabledByDefault: Swift.Bool
        /// <p>The name of the standard.</p>
        public let name: Swift.String?
        /// <p>The ARN of a standard.</p>
        public let standardsArn: Swift.String?

        public init (
            description: Swift.String? = nil,
            enabledByDefault: Swift.Bool = false,
            name: Swift.String? = nil,
            standardsArn: Swift.String? = nil
        )
        {
            self.description = description
            self.enabledByDefault = enabledByDefault
            self.name = name
            self.standardsArn = standardsArn
        }
    }

}

extension SecurityHubClientTypes.StandardsControl: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlId = "ControlId"
        case controlStatus = "ControlStatus"
        case controlStatusUpdatedAt = "ControlStatusUpdatedAt"
        case description = "Description"
        case disabledReason = "DisabledReason"
        case relatedRequirements = "RelatedRequirements"
        case remediationUrl = "RemediationUrl"
        case severityRating = "SeverityRating"
        case standardsControlArn = "StandardsControlArn"
        case title = "Title"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlId = controlId {
            try encodeContainer.encode(controlId, forKey: .controlId)
        }
        if let controlStatus = controlStatus {
            try encodeContainer.encode(controlStatus.rawValue, forKey: .controlStatus)
        }
        if let controlStatusUpdatedAt = controlStatusUpdatedAt {
            try encodeContainer.encode(controlStatusUpdatedAt.timeIntervalSince1970, forKey: .controlStatusUpdatedAt)
        }
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let disabledReason = disabledReason {
            try encodeContainer.encode(disabledReason, forKey: .disabledReason)
        }
        if let relatedRequirements = relatedRequirements {
            var relatedRequirementsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedRequirements)
            for relatedrequirementslist0 in relatedRequirements {
                try relatedRequirementsContainer.encode(relatedrequirementslist0)
            }
        }
        if let remediationUrl = remediationUrl {
            try encodeContainer.encode(remediationUrl, forKey: .remediationUrl)
        }
        if let severityRating = severityRating {
            try encodeContainer.encode(severityRating.rawValue, forKey: .severityRating)
        }
        if let standardsControlArn = standardsControlArn {
            try encodeContainer.encode(standardsControlArn, forKey: .standardsControlArn)
        }
        if let title = title {
            try encodeContainer.encode(title, forKey: .title)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let standardsControlArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .standardsControlArn)
        standardsControlArn = standardsControlArnDecoded
        let controlStatusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ControlStatus.self, forKey: .controlStatus)
        controlStatus = controlStatusDecoded
        let disabledReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .disabledReason)
        disabledReason = disabledReasonDecoded
        let controlStatusUpdatedAtDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .controlStatusUpdatedAt)
        controlStatusUpdatedAt = controlStatusUpdatedAtDecoded
        let controlIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .controlId)
        controlId = controlIdDecoded
        let titleDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .title)
        title = titleDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
        let remediationUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .remediationUrl)
        remediationUrl = remediationUrlDecoded
        let severityRatingDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.SeverityRating.self, forKey: .severityRating)
        severityRating = severityRatingDecoded
        let relatedRequirementsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .relatedRequirements)
        var relatedRequirementsDecoded0:[Swift.String]? = nil
        if let relatedRequirementsContainer = relatedRequirementsContainer {
            relatedRequirementsDecoded0 = [Swift.String]()
            for string0 in relatedRequirementsContainer {
                if let string0 = string0 {
                    relatedRequirementsDecoded0?.append(string0)
                }
            }
        }
        relatedRequirements = relatedRequirementsDecoded0
    }
}

extension SecurityHubClientTypes.StandardsControl: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StandardsControl(controlId: \(Swift.String(describing: controlId)), controlStatus: \(Swift.String(describing: controlStatus)), controlStatusUpdatedAt: \(Swift.String(describing: controlStatusUpdatedAt)), description: \(Swift.String(describing: description)), disabledReason: \(Swift.String(describing: disabledReason)), relatedRequirements: \(Swift.String(describing: relatedRequirements)), remediationUrl: \(Swift.String(describing: remediationUrl)), severityRating: \(Swift.String(describing: severityRating)), standardsControlArn: \(Swift.String(describing: standardsControlArn)), title: \(Swift.String(describing: title)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details for an individual security standard control.</p>
    public struct StandardsControl: Swift.Equatable {
        /// <p>The identifier of the security standard control.</p>
        public let controlId: Swift.String?
        /// <p>The current status of the security standard control. Indicates whether the control is
        ///          enabled or disabled. Security Hub does not check against disabled controls.</p>
        public let controlStatus: SecurityHubClientTypes.ControlStatus?
        /// <p>The date and time that the status of the security standard control was most recently
        ///          updated.</p>
        public let controlStatusUpdatedAt: ClientRuntime.Date?
        /// <p>The longer description of the security standard control. Provides information about what
        ///          the control is checking for.</p>
        public let description: Swift.String?
        /// <p>The reason provided for the most recent change in status for the control.</p>
        public let disabledReason: Swift.String?
        /// <p>The list of requirements that are related to this control.</p>
        public let relatedRequirements: [Swift.String]?
        /// <p>A link to remediation information for the control in the Security Hub user
        ///          documentation.</p>
        public let remediationUrl: Swift.String?
        /// <p>The severity of findings generated from this security standard control.</p>
        ///          <p>The finding severity is based on an assessment of how easy it would be to compromise AWS
        ///          resources if the issue is detected.</p>
        public let severityRating: SecurityHubClientTypes.SeverityRating?
        /// <p>The ARN of the security standard control.</p>
        public let standardsControlArn: Swift.String?
        /// <p>The title of the security standard control.</p>
        public let title: Swift.String?

        public init (
            controlId: Swift.String? = nil,
            controlStatus: SecurityHubClientTypes.ControlStatus? = nil,
            controlStatusUpdatedAt: ClientRuntime.Date? = nil,
            description: Swift.String? = nil,
            disabledReason: Swift.String? = nil,
            relatedRequirements: [Swift.String]? = nil,
            remediationUrl: Swift.String? = nil,
            severityRating: SecurityHubClientTypes.SeverityRating? = nil,
            standardsControlArn: Swift.String? = nil,
            title: Swift.String? = nil
        )
        {
            self.controlId = controlId
            self.controlStatus = controlStatus
            self.controlStatusUpdatedAt = controlStatusUpdatedAt
            self.description = description
            self.disabledReason = disabledReason
            self.relatedRequirements = relatedRequirements
            self.remediationUrl = remediationUrl
            self.severityRating = severityRating
            self.standardsControlArn = standardsControlArn
            self.title = title
        }
    }

}

extension SecurityHubClientTypes {
    public enum StandardsStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case deleting
        case failed
        case incomplete
        case pending
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [StandardsStatus] {
            return [
                .deleting,
                .failed,
                .incomplete,
                .pending,
                .ready,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .deleting: return "DELETING"
            case .failed: return "FAILED"
            case .incomplete: return "INCOMPLETE"
            case .pending: return "PENDING"
            case .ready: return "READY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StandardsStatus(rawValue: rawValue) ?? StandardsStatus.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes.StandardsSubscription: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case standardsArn = "StandardsArn"
        case standardsInput = "StandardsInput"
        case standardsStatus = "StandardsStatus"
        case standardsSubscriptionArn = "StandardsSubscriptionArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let standardsArn = standardsArn {
            try encodeContainer.encode(standardsArn, forKey: .standardsArn)
        }
        if let standardsInput = standardsInput {
            var standardsInputContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .standardsInput)
            for (dictKey0, standardsinputparametermap0) in standardsInput {
                try standardsInputContainer.encode(standardsinputparametermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let standardsStatus = standardsStatus {
            try encodeContainer.encode(standardsStatus.rawValue, forKey: .standardsStatus)
        }
        if let standardsSubscriptionArn = standardsSubscriptionArn {
            try encodeContainer.encode(standardsSubscriptionArn, forKey: .standardsSubscriptionArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let standardsSubscriptionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .standardsSubscriptionArn)
        standardsSubscriptionArn = standardsSubscriptionArnDecoded
        let standardsArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .standardsArn)
        standardsArn = standardsArnDecoded
        let standardsInputContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .standardsInput)
        var standardsInputDecoded0: [Swift.String:Swift.String]? = nil
        if let standardsInputContainer = standardsInputContainer {
            standardsInputDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in standardsInputContainer {
                if let nonemptystring0 = nonemptystring0 {
                    standardsInputDecoded0?[key0] = nonemptystring0
                }
            }
        }
        standardsInput = standardsInputDecoded0
        let standardsStatusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.StandardsStatus.self, forKey: .standardsStatus)
        standardsStatus = standardsStatusDecoded
    }
}

extension SecurityHubClientTypes.StandardsSubscription: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StandardsSubscription(standardsArn: \(Swift.String(describing: standardsArn)), standardsInput: \(Swift.String(describing: standardsInput)), standardsStatus: \(Swift.String(describing: standardsStatus)), standardsSubscriptionArn: \(Swift.String(describing: standardsSubscriptionArn)))"}
}

extension SecurityHubClientTypes {
    /// <p>A resource that represents your subscription to a supported standard.</p>
    public struct StandardsSubscription: Swift.Equatable {
        /// <p>The ARN of a standard.</p>
        public let standardsArn: Swift.String?
        /// <p>A key-value pair of input for the standard.</p>
        public let standardsInput: [Swift.String:Swift.String]?
        /// <p>The status of the standard subscription.</p>
        ///          <p>The status values are as follows:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>PENDING</code> - Standard is in the process of being enabled.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>READY</code> - Standard is enabled.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>INCOMPLETE</code> - Standard could not be enabled completely. Some controls may not be available.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>DELETING</code> - Standard is in the process of being disabled.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>FAILED</code> - Standard could not be disabled.</p>
        ///             </li>
        ///          </ul>
        public let standardsStatus: SecurityHubClientTypes.StandardsStatus?
        /// <p>The ARN of a resource that represents your subscription to a supported standard.</p>
        public let standardsSubscriptionArn: Swift.String?

        public init (
            standardsArn: Swift.String? = nil,
            standardsInput: [Swift.String:Swift.String]? = nil,
            standardsStatus: SecurityHubClientTypes.StandardsStatus? = nil,
            standardsSubscriptionArn: Swift.String? = nil
        )
        {
            self.standardsArn = standardsArn
            self.standardsInput = standardsInput
            self.standardsStatus = standardsStatus
            self.standardsSubscriptionArn = standardsSubscriptionArn
        }
    }

}

extension SecurityHubClientTypes.StandardsSubscriptionRequest: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case standardsArn = "StandardsArn"
        case standardsInput = "StandardsInput"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let standardsArn = standardsArn {
            try encodeContainer.encode(standardsArn, forKey: .standardsArn)
        }
        if let standardsInput = standardsInput {
            var standardsInputContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .standardsInput)
            for (dictKey0, standardsinputparametermap0) in standardsInput {
                try standardsInputContainer.encode(standardsinputparametermap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let standardsArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .standardsArn)
        standardsArn = standardsArnDecoded
        let standardsInputContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .standardsInput)
        var standardsInputDecoded0: [Swift.String:Swift.String]? = nil
        if let standardsInputContainer = standardsInputContainer {
            standardsInputDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in standardsInputContainer {
                if let nonemptystring0 = nonemptystring0 {
                    standardsInputDecoded0?[key0] = nonemptystring0
                }
            }
        }
        standardsInput = standardsInputDecoded0
    }
}

extension SecurityHubClientTypes.StandardsSubscriptionRequest: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StandardsSubscriptionRequest(standardsArn: \(Swift.String(describing: standardsArn)), standardsInput: \(Swift.String(describing: standardsInput)))"}
}

extension SecurityHubClientTypes {
    /// <p>The standard that you want to enable.</p>
    public struct StandardsSubscriptionRequest: Swift.Equatable {
        /// <p>The ARN of the standard that you want to enable. To view the list of available standards
        ///          and their ARNs, use the <code>
        ///                <a>DescribeStandards</a>
        ///             </code> operation.</p>
        public let standardsArn: Swift.String?
        /// <p>A key-value pair of input for the standard.</p>
        public let standardsInput: [Swift.String:Swift.String]?

        public init (
            standardsArn: Swift.String? = nil,
            standardsInput: [Swift.String:Swift.String]? = nil
        )
        {
            self.standardsArn = standardsArn
            self.standardsInput = standardsInput
        }
    }

}

extension SecurityHubClientTypes.StatusReason: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case reasonCode = "ReasonCode"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let reasonCode = reasonCode {
            try encodeContainer.encode(reasonCode, forKey: .reasonCode)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let reasonCodeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .reasonCode)
        reasonCode = reasonCodeDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension SecurityHubClientTypes.StatusReason: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StatusReason(description: \(Swift.String(describing: description)), reasonCode: \(Swift.String(describing: reasonCode)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides additional context for the value of <code>Compliance.Status</code>.</p>
    public struct StatusReason: Swift.Equatable {
        /// <p>The corresponding description for the status reason code.</p>
        public let description: Swift.String?
        /// <p>A code that represents a reason for the control status. For the list of status reason
        ///          codes and their meanings, see <a href="https://docs.aws.amazon.com/securityhub/latest/userguide/securityhub-standards-results.html#securityhub-standards-results-asff">Standards-related information in the ASFF</a> in the
        ///             <i>AWS Security Hub User Guide</i>. </p>
        public let reasonCode: Swift.String?

        public init (
            description: Swift.String? = nil,
            reasonCode: Swift.String? = nil
        )
        {
            self.description = description
            self.reasonCode = reasonCode
        }
    }

}

extension SecurityHubClientTypes.StringFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case comparison = "Comparison"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let comparison = comparison {
            try encodeContainer.encode(comparison.rawValue, forKey: .comparison)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let comparisonDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.StringFilterComparison.self, forKey: .comparison)
        comparison = comparisonDecoded
    }
}

extension SecurityHubClientTypes.StringFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StringFilter(comparison: \(Swift.String(describing: comparison)), value: \(Swift.String(describing: value)))"}
}

extension SecurityHubClientTypes {
    /// <p>A string filter for querying findings.</p>
    public struct StringFilter: Swift.Equatable {
        /// <p>The condition to apply to a string value when querying for findings. To search for
        ///          values that contain the filter criteria value, use one of the following comparison
        ///          operators:</p>
        ///          <ul>
        ///             <li>
        ///                <p>To search for values that exactly match the filter value, use
        ///                <code>EQUALS</code>.</p>
        ///                <p>For example, the filter <code>ResourceType EQUALS AwsEc2SecurityGroup</code> only
        ///                matches findings that have a resource type of
        ///                <code>AwsEc2SecurityGroup</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>To search for values that start with the filter value, use
        ///                <code>PREFIX</code>.</p>
        ///                <p>For example, the filter <code>ResourceType PREFIX AwsIam</code> matches findings
        ///                that have a resource type that starts with <code>AwsIam</code>. Findings with a
        ///                resource type of <code>AwsIamPolicy</code>, <code>AwsIamRole</code>, or
        ///                   <code>AwsIamUser</code> would all match.</p>
        ///             </li>
        ///          </ul>
        ///          <p>
        ///             <code>EQUALS</code> and <code>PREFIX</code> filters on the same field are joined by
        ///             <code>OR</code>. A finding matches if it matches any one of those filters.</p>
        ///          <p>To search for values that do not contain the filter criteria value, use one of the
        ///          following comparison operators:</p>
        ///          <ul>
        ///             <li>
        ///                <p>To search for values that do not exactly match the filter value, use
        ///                   <code>NOT_EQUALS</code>.</p>
        ///                <p>For example, the filter <code>ResourceType NOT_EQUALS AwsIamPolicy</code> matches
        ///                findings that have a resource type other than <code>AwsIamPolicy</code>.</p>
        ///             </li>
        ///             <li>
        ///                <p>To search for values that do not start with the filter value, use
        ///                   <code>PREFIX_NOT_EQUALS</code>.</p>
        ///                <p>For example, the filter <code>ResourceType PREFIX_NOT_EQUALS AwsIam</code> matches
        ///                findings that have a resource type that does not start with <code>AwsIam</code>.
        ///                Findings with a resource type of <code>AwsIamPolicy</code>, <code>AwsIamRole</code>,
        ///                or <code>AwsIamUser</code> would all be excluded from the results.</p>
        ///             </li>
        ///          </ul>
        ///          <p>
        ///             <code>NOT_EQUALS</code> and <code>PREFIX_NOT_EQUALS</code> filters on the same field are
        ///          joined by <code>AND</code>. A finding matches only if it matches all of those
        ///          filters.</p>
        ///          <p>For filters on the same field, you cannot provide both an <code>EQUALS</code> filter and
        ///          a <code>NOT_EQUALS</code> or <code>PREFIX_NOT_EQUALS</code> filter. Combining filters in
        ///          this way always returns an error, even if the provided filter values would return valid
        ///          results.</p>
        ///          <p>You can combine <code>PREFIX</code> filters with <code>NOT_EQUALS</code> or
        ///             <code>PREFIX_NOT_EQUALS</code> filters for the same field. Security Hub first processes the
        ///             <code>PREFIX</code> filters, then the <code>NOT_EQUALS</code> or
        ///             <code>PREFIX_NOT_EQUALS</code> filters.</p>
        ///          <p> For example, for the following filter, Security Hub first identifies findings that have
        ///          resource types that start with either <code>AwsIAM</code> or <code>AwsEc2</code>. It then
        ///          excludes findings that have a resource type of <code>AwsIamPolicy</code> and findings that
        ///          have a resource type of <code>AwsEc2NetworkInterface</code>.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>ResourceType PREFIX AwsIam</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>ResourceType PREFIX AwsEc2</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>ResourceType NOT_EQUALS AwsIamPolicy</code>
        ///                </p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>ResourceType NOT_EQUALS AwsEc2NetworkInterface</code>
        ///                </p>
        ///             </li>
        ///          </ul>
        public let comparison: SecurityHubClientTypes.StringFilterComparison?
        /// <p>The string filter value. Filter values are case sensitive. For example, the product name
        ///          for control-based findings is <code>Security Hub</code>. If you provide <code>security hub</code>
        ///          as the filter text, then there is no match.</p>
        public let value: Swift.String?

        public init (
            comparison: SecurityHubClientTypes.StringFilterComparison? = nil,
            value: Swift.String? = nil
        )
        {
            self.comparison = comparison
            self.value = value
        }
    }

}

extension SecurityHubClientTypes {
    public enum StringFilterComparison: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case equals
        case notEquals
        case prefix
        case prefixNotEquals
        case sdkUnknown(Swift.String)

        public static var allCases: [StringFilterComparison] {
            return [
                .equals,
                .notEquals,
                .prefix,
                .prefixNotEquals,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .equals: return "EQUALS"
            case .notEquals: return "NOT_EQUALS"
            case .prefix: return "PREFIX"
            case .prefixNotEquals: return "PREFIX_NOT_EQUALS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = StringFilterComparison(rawValue: rawValue) ?? StringFilterComparison.sdkUnknown(rawValue)
        }
    }
}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .tags)
            for (dictKey0, tagmap0) in tags {
                try tagsContainer.encode(tagmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// <p>The ARN of the resource to apply the tags to.</p>
    public let resourceArn: Swift.String?
    /// <p>The tags to add to the resource. You can add up to 50 tags at a time. The tag keys can be no longer than 128 characters. The tag values can be no longer than 256 characters.</p>
    public let tags: [Swift.String:Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [Swift.String:Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let tags: [Swift.String:Swift.String]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .tags)
        var tagsDecoded0: [Swift.String:Swift.String]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [Swift.String:Swift.String]()
            for (key0, tagvalue0) in tagsContainer {
                if let tagvalue0 = tagvalue0 {
                    tagsDecoded0?[key0] = tagvalue0
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SecurityHubClientTypes.ThreatIntelIndicator: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case category = "Category"
        case lastObservedAt = "LastObservedAt"
        case source = "Source"
        case sourceUrl = "SourceUrl"
        case type = "Type"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let category = category {
            try encodeContainer.encode(category.rawValue, forKey: .category)
        }
        if let lastObservedAt = lastObservedAt {
            try encodeContainer.encode(lastObservedAt, forKey: .lastObservedAt)
        }
        if let source = source {
            try encodeContainer.encode(source, forKey: .source)
        }
        if let sourceUrl = sourceUrl {
            try encodeContainer.encode(sourceUrl, forKey: .sourceUrl)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ThreatIntelIndicatorType.self, forKey: .type)
        type = typeDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
        let categoryDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ThreatIntelIndicatorCategory.self, forKey: .category)
        category = categoryDecoded
        let lastObservedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .lastObservedAt)
        lastObservedAt = lastObservedAtDecoded
        let sourceDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .source)
        source = sourceDecoded
        let sourceUrlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .sourceUrl)
        sourceUrl = sourceUrlDecoded
    }
}

extension SecurityHubClientTypes.ThreatIntelIndicator: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThreatIntelIndicator(category: \(Swift.String(describing: category)), lastObservedAt: \(Swift.String(describing: lastObservedAt)), source: \(Swift.String(describing: source)), sourceUrl: \(Swift.String(describing: sourceUrl)), type: \(Swift.String(describing: type)), value: \(Swift.String(describing: value)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about the threat intelligence related to a finding.</p>
    public struct ThreatIntelIndicator: Swift.Equatable {
        /// <p>The category of a threat intelligence indicator.</p>
        public let category: SecurityHubClientTypes.ThreatIntelIndicatorCategory?
        /// <p>Indicates when the most recent instance of a threat intelligence indicator was
        ///          observed.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let lastObservedAt: Swift.String?
        /// <p>The source of the threat intelligence indicator.</p>
        public let source: Swift.String?
        /// <p>The URL to the page or site where you can get more information about the threat
        ///          intelligence indicator.</p>
        public let sourceUrl: Swift.String?
        /// <p>The type of threat intelligence indicator.</p>
        public let type: SecurityHubClientTypes.ThreatIntelIndicatorType?
        /// <p>The value of a threat intelligence indicator.</p>
        public let value: Swift.String?

        public init (
            category: SecurityHubClientTypes.ThreatIntelIndicatorCategory? = nil,
            lastObservedAt: Swift.String? = nil,
            source: Swift.String? = nil,
            sourceUrl: Swift.String? = nil,
            type: SecurityHubClientTypes.ThreatIntelIndicatorType? = nil,
            value: Swift.String? = nil
        )
        {
            self.category = category
            self.lastObservedAt = lastObservedAt
            self.source = source
            self.sourceUrl = sourceUrl
            self.type = type
            self.value = value
        }
    }

}

extension SecurityHubClientTypes {
    public enum ThreatIntelIndicatorCategory: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case backdoor
        case cardStealer
        case commandAndControl
        case dropSite
        case exploitSite
        case keylogger
        case sdkUnknown(Swift.String)

        public static var allCases: [ThreatIntelIndicatorCategory] {
            return [
                .backdoor,
                .cardStealer,
                .commandAndControl,
                .dropSite,
                .exploitSite,
                .keylogger,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .backdoor: return "BACKDOOR"
            case .cardStealer: return "CARD_STEALER"
            case .commandAndControl: return "COMMAND_AND_CONTROL"
            case .dropSite: return "DROP_SITE"
            case .exploitSite: return "EXPLOIT_SITE"
            case .keylogger: return "KEYLOGGER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ThreatIntelIndicatorCategory(rawValue: rawValue) ?? ThreatIntelIndicatorCategory.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes {
    public enum ThreatIntelIndicatorType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case domain
        case emailAddress
        case hashMd5
        case hashSha1
        case hashSha256
        case hashSha512
        case ipv4Address
        case ipv6Address
        case mutex
        case process
        case url
        case sdkUnknown(Swift.String)

        public static var allCases: [ThreatIntelIndicatorType] {
            return [
                .domain,
                .emailAddress,
                .hashMd5,
                .hashSha1,
                .hashSha256,
                .hashSha512,
                .ipv4Address,
                .ipv6Address,
                .mutex,
                .process,
                .url,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .domain: return "DOMAIN"
            case .emailAddress: return "EMAIL_ADDRESS"
            case .hashMd5: return "HASH_MD5"
            case .hashSha1: return "HASH_SHA1"
            case .hashSha256: return "HASH_SHA256"
            case .hashSha512: return "HASH_SHA512"
            case .ipv4Address: return "IPV4_ADDRESS"
            case .ipv6Address: return "IPV6_ADDRESS"
            case .mutex: return "MUTEX"
            case .process: return "PROCESS"
            case .url: return "URL"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ThreatIntelIndicatorType(rawValue: rawValue) ?? ThreatIntelIndicatorType.sdkUnknown(rawValue)
        }
    }
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let tagKeys = input.operationInput.tagKeys {
            tagKeys.forEach { queryItemValue in
                let queryItem = ClientRuntime.URLQueryItem(name: "tagKeys".urlPercentEncoding(), value: Swift.String(queryItemValue).urlPercentEncoding())
                input.builder.withQueryItem(queryItem)
            }
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// <p>The ARN of the resource to remove the tags from.</p>
    public let resourceArn: Swift.String?
    /// <p>The tag keys associated with the tags to remove from the resource. You can remove up to 50 tags at a time.</p>
    public let tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
}

extension UntagResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateActionTargetInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateActionTargetInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateActionTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateActionTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateActionTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateActionTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateActionTargetOutputError>
}

extension UpdateActionTargetInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateActionTargetInput(actionTargetArn: \(Swift.String(describing: actionTargetArn)), description: \(Swift.String(describing: description)), name: \(Swift.String(describing: name)))"}
}

extension UpdateActionTargetInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let description = description {
            try encodeContainer.encode(description, forKey: .description)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct UpdateActionTargetInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateActionTargetInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateActionTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateActionTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateActionTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateActionTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateActionTargetOutputError>
}

public struct UpdateActionTargetInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateActionTargetInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateActionTargetInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateActionTargetOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateActionTargetInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateActionTargetOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateActionTargetOutputError>
}

public struct UpdateActionTargetInput: Swift.Equatable {
    /// <p>The ARN of the custom action target to update.</p>
    public let actionTargetArn: Swift.String?
    /// <p>The updated description for the custom action target.</p>
    public let description: Swift.String?
    /// <p>The updated name of the custom action target.</p>
    public let name: Swift.String?

    public init (
        actionTargetArn: Swift.String? = nil,
        description: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.actionTargetArn = actionTargetArn
        self.description = description
        self.name = name
    }
}

struct UpdateActionTargetInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let description: Swift.String?
}

extension UpdateActionTargetInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case description = "Description"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .description)
        description = descriptionDecoded
    }
}

extension UpdateActionTargetOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateActionTargetOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateActionTargetOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateActionTargetOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateActionTargetOutputResponse()"}
}

extension UpdateActionTargetOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateActionTargetOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateActionTargetOutputResponseBody: Swift.Equatable {
}

extension UpdateActionTargetOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateFindingsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateFindingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateFindingsOutputError>
}

extension UpdateFindingsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateFindingsInput(filters: \(Swift.String(describing: filters)), note: \(Swift.String(describing: note)), recordState: \(Swift.String(describing: recordState)))"}
}

extension UpdateFindingsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case note = "Note"
        case recordState = "RecordState"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let note = note {
            try encodeContainer.encode(note, forKey: .note)
        }
        if let recordState = recordState {
            try encodeContainer.encode(recordState.rawValue, forKey: .recordState)
        }
    }
}

public struct UpdateFindingsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateFindingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateFindingsOutputError>
}

public struct UpdateFindingsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateFindingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateFindingsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateFindingsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateFindingsOutputError>
}

public struct UpdateFindingsInput: Swift.Equatable {
    /// <p>A collection of attributes that specify which findings you want to update.</p>
    public let filters: SecurityHubClientTypes.AwsSecurityFindingFilters?
    /// <p>The updated note for the finding.</p>
    public let note: SecurityHubClientTypes.NoteUpdate?
    /// <p>The updated record state for the finding.</p>
    public let recordState: SecurityHubClientTypes.RecordState?

    public init (
        filters: SecurityHubClientTypes.AwsSecurityFindingFilters? = nil,
        note: SecurityHubClientTypes.NoteUpdate? = nil,
        recordState: SecurityHubClientTypes.RecordState? = nil
    )
    {
        self.filters = filters
        self.note = note
        self.recordState = recordState
    }
}

struct UpdateFindingsInputBody: Swift.Equatable {
    public let filters: SecurityHubClientTypes.AwsSecurityFindingFilters?
    public let note: SecurityHubClientTypes.NoteUpdate?
    public let recordState: SecurityHubClientTypes.RecordState?
}

extension UpdateFindingsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case note = "Note"
        case recordState = "RecordState"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let filtersDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSecurityFindingFilters.self, forKey: .filters)
        filters = filtersDecoded
        let noteDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.NoteUpdate.self, forKey: .note)
        note = noteDecoded
        let recordStateDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.RecordState.self, forKey: .recordState)
        recordState = recordStateDecoded
    }
}

extension UpdateFindingsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateFindingsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateFindingsOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateFindingsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateFindingsOutputResponse()"}
}

extension UpdateFindingsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateFindingsOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateFindingsOutputResponseBody: Swift.Equatable {
}

extension UpdateFindingsOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateInsightInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInsightInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateInsightInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateInsightInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInsightOutputError>
}

extension UpdateInsightInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateInsightInput(filters: \(Swift.String(describing: filters)), groupByAttribute: \(Swift.String(describing: groupByAttribute)), insightArn: \(Swift.String(describing: insightArn)), name: \(Swift.String(describing: name)))"}
}

extension UpdateInsightInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case groupByAttribute = "GroupByAttribute"
        case name = "Name"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            try encodeContainer.encode(filters, forKey: .filters)
        }
        if let groupByAttribute = groupByAttribute {
            try encodeContainer.encode(groupByAttribute, forKey: .groupByAttribute)
        }
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
    }
}

public struct UpdateInsightInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInsightInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateInsightInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateInsightInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInsightOutputError>
}

public struct UpdateInsightInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateInsightInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateInsightInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateInsightOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateInsightInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateInsightOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateInsightOutputError>
}

public struct UpdateInsightInput: Swift.Equatable {
    /// <p>The updated filters that define this insight.</p>
    public let filters: SecurityHubClientTypes.AwsSecurityFindingFilters?
    /// <p>The updated <code>GroupBy</code> attribute that defines this insight.</p>
    public let groupByAttribute: Swift.String?
    /// <p>The ARN of the insight that you want to update.</p>
    public let insightArn: Swift.String?
    /// <p>The updated name for the insight.</p>
    public let name: Swift.String?

    public init (
        filters: SecurityHubClientTypes.AwsSecurityFindingFilters? = nil,
        groupByAttribute: Swift.String? = nil,
        insightArn: Swift.String? = nil,
        name: Swift.String? = nil
    )
    {
        self.filters = filters
        self.groupByAttribute = groupByAttribute
        self.insightArn = insightArn
        self.name = name
    }
}

struct UpdateInsightInputBody: Swift.Equatable {
    public let name: Swift.String?
    public let filters: SecurityHubClientTypes.AwsSecurityFindingFilters?
    public let groupByAttribute: Swift.String?
}

extension UpdateInsightInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters = "Filters"
        case groupByAttribute = "GroupByAttribute"
        case name = "Name"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let filtersDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.AwsSecurityFindingFilters.self, forKey: .filters)
        filters = filtersDecoded
        let groupByAttributeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .groupByAttribute)
        groupByAttribute = groupByAttributeDecoded
    }
}

extension UpdateInsightOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateInsightOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateInsightOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateInsightOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateInsightOutputResponse()"}
}

extension UpdateInsightOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateInsightOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateInsightOutputResponseBody: Swift.Equatable {
}

extension UpdateInsightOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateOrganizationConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateOrganizationConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateOrganizationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateOrganizationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateOrganizationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateOrganizationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateOrganizationConfigurationOutputError>
}

extension UpdateOrganizationConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateOrganizationConfigurationInput(autoEnable: \(Swift.String(describing: autoEnable)))"}
}

extension UpdateOrganizationConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoEnable = "AutoEnable"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if autoEnable != false {
            try encodeContainer.encode(autoEnable, forKey: .autoEnable)
        }
    }
}

public struct UpdateOrganizationConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateOrganizationConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateOrganizationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateOrganizationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateOrganizationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateOrganizationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateOrganizationConfigurationOutputError>
}

public struct UpdateOrganizationConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateOrganizationConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateOrganizationConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateOrganizationConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateOrganizationConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateOrganizationConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateOrganizationConfigurationOutputError>
}

public struct UpdateOrganizationConfigurationInput: Swift.Equatable {
    /// <p>Whether to automatically enable Security Hub for new accounts in the organization.</p>
    ///          <p>By default, this is <code>false</code>, and new accounts are not added
    ///          automatically.</p>
    ///          <p>To automatically enable Security Hub for new accounts, set this to <code>true</code>.</p>
    public let autoEnable: Swift.Bool

    public init (
        autoEnable: Swift.Bool = false
    )
    {
        self.autoEnable = autoEnable
    }
}

struct UpdateOrganizationConfigurationInputBody: Swift.Equatable {
    public let autoEnable: Swift.Bool
}

extension UpdateOrganizationConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoEnable = "AutoEnable"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoEnableDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoEnable)
        autoEnable = autoEnableDecoded
    }
}

extension UpdateOrganizationConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateOrganizationConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateOrganizationConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateOrganizationConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateOrganizationConfigurationOutputResponse()"}
}

extension UpdateOrganizationConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateOrganizationConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateOrganizationConfigurationOutputResponseBody: Swift.Equatable {
}

extension UpdateOrganizationConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateSecurityHubConfigurationInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateSecurityHubConfigurationInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateSecurityHubConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateSecurityHubConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateSecurityHubConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateSecurityHubConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateSecurityHubConfigurationOutputError>
}

extension UpdateSecurityHubConfigurationInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSecurityHubConfigurationInput(autoEnableControls: \(Swift.String(describing: autoEnableControls)))"}
}

extension UpdateSecurityHubConfigurationInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoEnableControls = "AutoEnableControls"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if autoEnableControls != false {
            try encodeContainer.encode(autoEnableControls, forKey: .autoEnableControls)
        }
    }
}

public struct UpdateSecurityHubConfigurationInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateSecurityHubConfigurationInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateSecurityHubConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateSecurityHubConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateSecurityHubConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateSecurityHubConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateSecurityHubConfigurationOutputError>
}

public struct UpdateSecurityHubConfigurationInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateSecurityHubConfigurationInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateSecurityHubConfigurationInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateSecurityHubConfigurationOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateSecurityHubConfigurationInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateSecurityHubConfigurationOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateSecurityHubConfigurationOutputError>
}

public struct UpdateSecurityHubConfigurationInput: Swift.Equatable {
    /// <p>Whether to automatically enable new controls when they are added to standards that are
    ///          enabled.</p>
    ///          <p>By default, this is set to <code>true</code>, and new controls are enabled
    ///          automatically. To not automatically enable new controls, set this to <code>false</code>.
    ///       </p>
    public let autoEnableControls: Swift.Bool

    public init (
        autoEnableControls: Swift.Bool = false
    )
    {
        self.autoEnableControls = autoEnableControls
    }
}

struct UpdateSecurityHubConfigurationInputBody: Swift.Equatable {
    public let autoEnableControls: Swift.Bool
}

extension UpdateSecurityHubConfigurationInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoEnableControls = "AutoEnableControls"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let autoEnableControlsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .autoEnableControls)
        autoEnableControls = autoEnableControlsDecoded
    }
}

extension UpdateSecurityHubConfigurationOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateSecurityHubConfigurationOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateSecurityHubConfigurationOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case limitExceededException(LimitExceededException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateSecurityHubConfigurationOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateSecurityHubConfigurationOutputResponse()"}
}

extension UpdateSecurityHubConfigurationOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateSecurityHubConfigurationOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateSecurityHubConfigurationOutputResponseBody: Swift.Equatable {
}

extension UpdateSecurityHubConfigurationOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateStandardsControlInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStandardsControlInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStandardsControlInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStandardsControlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStandardsControlInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStandardsControlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStandardsControlOutputError>
}

extension UpdateStandardsControlInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateStandardsControlInput(controlStatus: \(Swift.String(describing: controlStatus)), disabledReason: \(Swift.String(describing: disabledReason)), standardsControlArn: \(Swift.String(describing: standardsControlArn)))"}
}

extension UpdateStandardsControlInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlStatus = "ControlStatus"
        case disabledReason = "DisabledReason"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let controlStatus = controlStatus {
            try encodeContainer.encode(controlStatus.rawValue, forKey: .controlStatus)
        }
        if let disabledReason = disabledReason {
            try encodeContainer.encode(disabledReason, forKey: .disabledReason)
        }
    }
}

public struct UpdateStandardsControlInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStandardsControlInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStandardsControlInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStandardsControlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStandardsControlInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStandardsControlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStandardsControlOutputError>
}

public struct UpdateStandardsControlInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateStandardsControlInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateStandardsControlInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateStandardsControlOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateStandardsControlInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateStandardsControlOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateStandardsControlOutputError>
}

public struct UpdateStandardsControlInput: Swift.Equatable {
    /// <p>The updated status of the security standard control.</p>
    public let controlStatus: SecurityHubClientTypes.ControlStatus?
    /// <p>A description of the reason why you are disabling a security standard control. If you
    ///          are disabling a control, then this is required.</p>
    public let disabledReason: Swift.String?
    /// <p>The ARN of the security standard control to enable or disable.</p>
    public let standardsControlArn: Swift.String?

    public init (
        controlStatus: SecurityHubClientTypes.ControlStatus? = nil,
        disabledReason: Swift.String? = nil,
        standardsControlArn: Swift.String? = nil
    )
    {
        self.controlStatus = controlStatus
        self.disabledReason = disabledReason
        self.standardsControlArn = standardsControlArn
    }
}

struct UpdateStandardsControlInputBody: Swift.Equatable {
    public let controlStatus: SecurityHubClientTypes.ControlStatus?
    public let disabledReason: Swift.String?
}

extension UpdateStandardsControlInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case controlStatus = "ControlStatus"
        case disabledReason = "DisabledReason"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let controlStatusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.ControlStatus.self, forKey: .controlStatus)
        controlStatus = controlStatusDecoded
        let disabledReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .disabledReason)
        disabledReason = disabledReasonDecoded
    }
}

extension UpdateStandardsControlOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateStandardsControlOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "InternalException" : self = .internalException(try InternalException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidAccessException" : self = .invalidAccessException(try InvalidAccessException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidInputException" : self = .invalidInputException(try InvalidInputException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateStandardsControlOutputError: Swift.Error, Swift.Equatable {
    case internalException(InternalException)
    case invalidAccessException(InvalidAccessException)
    case invalidInputException(InvalidInputException)
    case resourceNotFoundException(ResourceNotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateStandardsControlOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateStandardsControlOutputResponse()"}
}

extension UpdateStandardsControlOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UpdateStandardsControlOutputResponse: Swift.Equatable {

    public init() {}
}

struct UpdateStandardsControlOutputResponseBody: Swift.Equatable {
}

extension UpdateStandardsControlOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension SecurityHubClientTypes {
    public enum VerificationState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case benignPositive
        case falsePositive
        case truePositive
        case unknown
        case sdkUnknown(Swift.String)

        public static var allCases: [VerificationState] {
            return [
                .benignPositive,
                .falsePositive,
                .truePositive,
                .unknown,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .benignPositive: return "BENIGN_POSITIVE"
            case .falsePositive: return "FALSE_POSITIVE"
            case .truePositive: return "TRUE_POSITIVE"
            case .unknown: return "UNKNOWN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VerificationState(rawValue: rawValue) ?? VerificationState.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes.Vulnerability: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case cvss = "Cvss"
        case id = "Id"
        case referenceUrls = "ReferenceUrls"
        case relatedVulnerabilities = "RelatedVulnerabilities"
        case vendor = "Vendor"
        case vulnerablePackages = "VulnerablePackages"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let cvss = cvss {
            var cvssContainer = encodeContainer.nestedUnkeyedContainer(forKey: .cvss)
            for cvsslist0 in cvss {
                try cvssContainer.encode(cvsslist0)
            }
        }
        if let id = id {
            try encodeContainer.encode(id, forKey: .id)
        }
        if let referenceUrls = referenceUrls {
            var referenceUrlsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .referenceUrls)
            for stringlist0 in referenceUrls {
                try referenceUrlsContainer.encode(stringlist0)
            }
        }
        if let relatedVulnerabilities = relatedVulnerabilities {
            var relatedVulnerabilitiesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedVulnerabilities)
            for stringlist0 in relatedVulnerabilities {
                try relatedVulnerabilitiesContainer.encode(stringlist0)
            }
        }
        if let vendor = vendor {
            try encodeContainer.encode(vendor, forKey: .vendor)
        }
        if let vulnerablePackages = vulnerablePackages {
            var vulnerablePackagesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .vulnerablePackages)
            for softwarepackagelist0 in vulnerablePackages {
                try vulnerablePackagesContainer.encode(softwarepackagelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let idDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .id)
        id = idDecoded
        let vulnerablePackagesContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.SoftwarePackage?].self, forKey: .vulnerablePackages)
        var vulnerablePackagesDecoded0:[SecurityHubClientTypes.SoftwarePackage]? = nil
        if let vulnerablePackagesContainer = vulnerablePackagesContainer {
            vulnerablePackagesDecoded0 = [SecurityHubClientTypes.SoftwarePackage]()
            for structure0 in vulnerablePackagesContainer {
                if let structure0 = structure0 {
                    vulnerablePackagesDecoded0?.append(structure0)
                }
            }
        }
        vulnerablePackages = vulnerablePackagesDecoded0
        let cvssContainer = try containerValues.decodeIfPresent([SecurityHubClientTypes.Cvss?].self, forKey: .cvss)
        var cvssDecoded0:[SecurityHubClientTypes.Cvss]? = nil
        if let cvssContainer = cvssContainer {
            cvssDecoded0 = [SecurityHubClientTypes.Cvss]()
            for structure0 in cvssContainer {
                if let structure0 = structure0 {
                    cvssDecoded0?.append(structure0)
                }
            }
        }
        cvss = cvssDecoded0
        let relatedVulnerabilitiesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .relatedVulnerabilities)
        var relatedVulnerabilitiesDecoded0:[Swift.String]? = nil
        if let relatedVulnerabilitiesContainer = relatedVulnerabilitiesContainer {
            relatedVulnerabilitiesDecoded0 = [Swift.String]()
            for string0 in relatedVulnerabilitiesContainer {
                if let string0 = string0 {
                    relatedVulnerabilitiesDecoded0?.append(string0)
                }
            }
        }
        relatedVulnerabilities = relatedVulnerabilitiesDecoded0
        let vendorDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.VulnerabilityVendor.self, forKey: .vendor)
        vendor = vendorDecoded
        let referenceUrlsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .referenceUrls)
        var referenceUrlsDecoded0:[Swift.String]? = nil
        if let referenceUrlsContainer = referenceUrlsContainer {
            referenceUrlsDecoded0 = [Swift.String]()
            for string0 in referenceUrlsContainer {
                if let string0 = string0 {
                    referenceUrlsDecoded0?.append(string0)
                }
            }
        }
        referenceUrls = referenceUrlsDecoded0
    }
}

extension SecurityHubClientTypes.Vulnerability: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Vulnerability(cvss: \(Swift.String(describing: cvss)), id: \(Swift.String(describing: id)), referenceUrls: \(Swift.String(describing: referenceUrls)), relatedVulnerabilities: \(Swift.String(describing: relatedVulnerabilities)), vendor: \(Swift.String(describing: vendor)), vulnerablePackages: \(Swift.String(describing: vulnerablePackages)))"}
}

extension SecurityHubClientTypes {
    /// <p>A vulnerability associated with a finding.</p>
    public struct Vulnerability: Swift.Equatable {
        /// <p>CVSS scores from the advisory related to the vulnerability.</p>
        public let cvss: [SecurityHubClientTypes.Cvss]?
        /// <p>The identifier of the vulnerability.</p>
        public let id: Swift.String?
        /// <p>A list of URLs that provide additional information about the vulnerability.</p>
        public let referenceUrls: [Swift.String]?
        /// <p>List of vulnerabilities that are related to this vulnerability.</p>
        public let relatedVulnerabilities: [Swift.String]?
        /// <p>Information about the vendor that generates the vulnerability report.</p>
        public let vendor: SecurityHubClientTypes.VulnerabilityVendor?
        /// <p>List of software packages that have the vulnerability.</p>
        public let vulnerablePackages: [SecurityHubClientTypes.SoftwarePackage]?

        public init (
            cvss: [SecurityHubClientTypes.Cvss]? = nil,
            id: Swift.String? = nil,
            referenceUrls: [Swift.String]? = nil,
            relatedVulnerabilities: [Swift.String]? = nil,
            vendor: SecurityHubClientTypes.VulnerabilityVendor? = nil,
            vulnerablePackages: [SecurityHubClientTypes.SoftwarePackage]? = nil
        )
        {
            self.cvss = cvss
            self.id = id
            self.referenceUrls = referenceUrls
            self.relatedVulnerabilities = relatedVulnerabilities
            self.vendor = vendor
            self.vulnerablePackages = vulnerablePackages
        }
    }

}

extension SecurityHubClientTypes.VulnerabilityVendor: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name = "Name"
        case url = "Url"
        case vendorCreatedAt = "VendorCreatedAt"
        case vendorSeverity = "VendorSeverity"
        case vendorUpdatedAt = "VendorUpdatedAt"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name, forKey: .name)
        }
        if let url = url {
            try encodeContainer.encode(url, forKey: .url)
        }
        if let vendorCreatedAt = vendorCreatedAt {
            try encodeContainer.encode(vendorCreatedAt, forKey: .vendorCreatedAt)
        }
        if let vendorSeverity = vendorSeverity {
            try encodeContainer.encode(vendorSeverity, forKey: .vendorSeverity)
        }
        if let vendorUpdatedAt = vendorUpdatedAt {
            try encodeContainer.encode(vendorUpdatedAt, forKey: .vendorUpdatedAt)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .name)
        name = nameDecoded
        let urlDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .url)
        url = urlDecoded
        let vendorSeverityDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vendorSeverity)
        vendorSeverity = vendorSeverityDecoded
        let vendorCreatedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vendorCreatedAt)
        vendorCreatedAt = vendorCreatedAtDecoded
        let vendorUpdatedAtDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vendorUpdatedAt)
        vendorUpdatedAt = vendorUpdatedAtDecoded
    }
}

extension SecurityHubClientTypes.VulnerabilityVendor: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VulnerabilityVendor(name: \(Swift.String(describing: name)), url: \(Swift.String(describing: url)), vendorCreatedAt: \(Swift.String(describing: vendorCreatedAt)), vendorSeverity: \(Swift.String(describing: vendorSeverity)), vendorUpdatedAt: \(Swift.String(describing: vendorUpdatedAt)))"}
}

extension SecurityHubClientTypes {
    /// <p>A vendor that generates a vulnerability report.</p>
    public struct VulnerabilityVendor: Swift.Equatable {
        /// <p>The name of the vendor.</p>
        public let name: Swift.String?
        /// <p>The URL of the vulnerability advisory.</p>
        public let url: Swift.String?
        /// <p>Indicates when the vulnerability advisory was created.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let vendorCreatedAt: Swift.String?
        /// <p>The severity that the vendor assigned to the vulnerability.</p>
        public let vendorSeverity: Swift.String?
        /// <p>Indicates when the vulnerability advisory was last updated.</p>
        ///          <p>Uses the <code>date-time</code> format specified in <a href="https://tools.ietf.org/html/rfc3339#section-5.6">RFC 3339 section 5.6, Internet
        ///             Date/Time Format</a>. The value cannot contain spaces. For example,
        ///             <code>2020-03-22T13:22:13.933Z</code>.</p>
        public let vendorUpdatedAt: Swift.String?

        public init (
            name: Swift.String? = nil,
            url: Swift.String? = nil,
            vendorCreatedAt: Swift.String? = nil,
            vendorSeverity: Swift.String? = nil,
            vendorUpdatedAt: Swift.String? = nil
        )
        {
            self.name = name
            self.url = url
            self.vendorCreatedAt = vendorCreatedAt
            self.vendorSeverity = vendorSeverity
            self.vendorUpdatedAt = vendorUpdatedAt
        }
    }

}

extension SecurityHubClientTypes.WafAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension SecurityHubClientTypes.WafAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WafAction(type: \(Swift.String(describing: type)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about the action that CloudFront or AWS WAF takes when a web request matches the
    ///          conditions in the rule. </p>
    public struct WafAction: Swift.Equatable {
        /// <p>Specifies how you want AWS WAF to respond to requests that match the settings in a
        ///          rule.</p>
        ///          <p>Valid settings include the following:</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>ALLOW</code> - AWS WAF allows requests</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>BLOCK</code> - AWS WAF blocks requests</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>COUNT</code> - AWS WAF increments a counter of the requests that match all
        ///                of the conditions in the rule. AWS WAF then continues to inspect the web request
        ///                based on the remaining rules in the web ACL. You can't specify <code>COUNT</code> for
        ///                the default action for a WebACL.</p>
        ///             </li>
        ///          </ul>
        public let type: Swift.String?

        public init (
            type: Swift.String? = nil
        )
        {
            self.type = type
        }
    }

}

extension SecurityHubClientTypes.WafExcludedRule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case ruleId = "RuleId"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let ruleId = ruleId {
            try encodeContainer.encode(ruleId, forKey: .ruleId)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let ruleIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .ruleId)
        ruleId = ruleIdDecoded
    }
}

extension SecurityHubClientTypes.WafExcludedRule: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WafExcludedRule(ruleId: \(Swift.String(describing: ruleId)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about a rule to exclude from a rule group.</p>
    public struct WafExcludedRule: Swift.Equatable {
        /// <p>The unique identifier for the rule to exclude from the rule group.</p>
        public let ruleId: Swift.String?

        public init (
            ruleId: Swift.String? = nil
        )
        {
            self.ruleId = ruleId
        }
    }

}

extension SecurityHubClientTypes.WafOverrideAction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let type = type {
            try encodeContainer.encode(type, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let typeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .type)
        type = typeDecoded
    }
}

extension SecurityHubClientTypes.WafOverrideAction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WafOverrideAction(type: \(Swift.String(describing: type)))"}
}

extension SecurityHubClientTypes {
    /// <p>Details about an override action for a rule.</p>
    public struct WafOverrideAction: Swift.Equatable {
        /// <p>
        ///             <code>COUNT</code> overrides the action specified by the individual rule within a
        ///             <code>RuleGroup</code> .</p>
        ///          <p>If set to <code>NONE</code>, the rule's action takes place.</p>
        public let type: Swift.String?

        public init (
            type: Swift.String? = nil
        )
        {
            self.type = type
        }
    }

}

extension SecurityHubClientTypes.Workflow: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.WorkflowStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityHubClientTypes.Workflow: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Workflow(status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>Provides information about the status of the investigation into a finding.</p>
    public struct Workflow: Swift.Equatable {
        /// <p>The status of the investigation into the finding. The allowed values are the
        ///          following.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>NEW</code> - The initial state of a finding, before it is reviewed.</p>
        ///                <p>Security Hub also resets the workflow status from <code>NOTIFIED</code> or
        ///                   <code>RESOLVED</code> to <code>NEW</code> in the following cases:</p>
        ///                <ul>
        ///                   <li>
        ///                      <p>
        ///                         <code>RecordState</code> changes from <code>ARCHIVED</code> to
        ///                         <code>ACTIVE</code>.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>
        ///                         <code>ComplianceStatus</code> changes from <code>PASSED</code> to either
        ///                         <code>WARNING</code>, <code>FAILED</code>, or
        ///                      <code>NOT_AVAILABLE</code>.</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NOTIFIED</code> - Indicates that you notified the resource owner about the
        ///                security issue. Used when the initial reviewer is not the resource owner, and needs
        ///                intervention from the resource owner.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SUPPRESSED</code> - The finding will not be reviewed again and will not be
        ///                acted upon.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>RESOLVED</code> - The finding was reviewed and remediated and is now
        ///                considered resolved. </p>
        ///             </li>
        ///          </ul>
        public let status: SecurityHubClientTypes.WorkflowStatus?

        public init (
            status: SecurityHubClientTypes.WorkflowStatus? = nil
        )
        {
            self.status = status
        }
    }

}

extension SecurityHubClientTypes {
    @available(*, deprecated, message: "This field is deprecated, use Workflow.Status instead.")
    public enum WorkflowState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case assigned
        case deferred
        case inProgress
        case new
        case resolved
        case sdkUnknown(Swift.String)

        public static var allCases: [WorkflowState] {
            return [
                .assigned,
                .deferred,
                .inProgress,
                .new,
                .resolved,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .assigned: return "ASSIGNED"
            case .deferred: return "DEFERRED"
            case .inProgress: return "IN_PROGRESS"
            case .new: return "NEW"
            case .resolved: return "RESOLVED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WorkflowState(rawValue: rawValue) ?? WorkflowState.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes {
    public enum WorkflowStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case new
        case notified
        case resolved
        case suppressed
        case sdkUnknown(Swift.String)

        public static var allCases: [WorkflowStatus] {
            return [
                .new,
                .notified,
                .resolved,
                .suppressed,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .new: return "NEW"
            case .notified: return "NOTIFIED"
            case .resolved: return "RESOLVED"
            case .suppressed: return "SUPPRESSED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = WorkflowStatus(rawValue: rawValue) ?? WorkflowStatus.sdkUnknown(rawValue)
        }
    }
}

extension SecurityHubClientTypes.WorkflowUpdate: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status = "Status"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SecurityHubClientTypes.WorkflowStatus.self, forKey: .status)
        status = statusDecoded
    }
}

extension SecurityHubClientTypes.WorkflowUpdate: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "WorkflowUpdate(status: \(Swift.String(describing: status)))"}
}

extension SecurityHubClientTypes {
    /// <p>Used to update information about the investigation into the finding.</p>
    public struct WorkflowUpdate: Swift.Equatable {
        /// <p>The status of the investigation into the finding. The allowed values are the
        ///          following.</p>
        ///          <ul>
        ///             <li>
        ///                <p>
        ///                   <code>NEW</code> - The initial state of a finding, before it is reviewed.</p>
        ///                <p>Security Hub also resets <code>WorkFlowStatus</code> from <code>NOTIFIED</code> or
        ///                   <code>RESOLVED</code> to <code>NEW</code> in the following cases:</p>
        ///                <ul>
        ///                   <li>
        ///                      <p>The record state changes from <code>ARCHIVED</code> to
        ///                      <code>ACTIVE</code>.</p>
        ///                   </li>
        ///                   <li>
        ///                      <p>The compliance status changes from <code>PASSED</code> to either
        ///                         <code>WARNING</code>, <code>FAILED</code>, or
        ///                      <code>NOT_AVAILABLE</code>.</p>
        ///                   </li>
        ///                </ul>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>NOTIFIED</code> - Indicates that you notified the resource owner about the
        ///                security issue. Used when the initial reviewer is not the resource owner, and needs
        ///                intervention from the resource owner.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>RESOLVED</code> - The finding was reviewed and remediated and is now
        ///                considered resolved.</p>
        ///             </li>
        ///             <li>
        ///                <p>
        ///                   <code>SUPPRESSED</code> - The finding will not be reviewed again and will not be
        ///                acted upon.</p>
        ///             </li>
        ///          </ul>
        public let status: SecurityHubClientTypes.WorkflowStatus?

        public init (
            status: SecurityHubClientTypes.WorkflowStatus? = nil
        )
        {
            self.status = status
        }
    }

}
