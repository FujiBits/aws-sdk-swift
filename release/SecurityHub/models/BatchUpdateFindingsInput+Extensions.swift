// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct BatchUpdateFindingsInputHeadersMiddleware: Middleware {
    public let id: String = "BatchUpdateFindingsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchUpdateFindingsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchUpdateFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchUpdateFindingsInput>
    public typealias MOutput = OperationOutput<BatchUpdateFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchUpdateFindingsOutputError>
}

public struct BatchUpdateFindingsInputQueryItemMiddleware: Middleware {
    public let id: String = "BatchUpdateFindingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchUpdateFindingsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchUpdateFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchUpdateFindingsInput>
    public typealias MOutput = OperationOutput<BatchUpdateFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchUpdateFindingsOutputError>
}

public struct BatchUpdateFindingsInputBodyMiddleware: Middleware {
    public let id: String = "BatchUpdateFindingsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<BatchUpdateFindingsInput>,
                  next: H) -> Swift.Result<OperationOutput<BatchUpdateFindingsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<BatchUpdateFindingsInput>
    public typealias MOutput = OperationOutput<BatchUpdateFindingsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<BatchUpdateFindingsOutputError>
}

extension BatchUpdateFindingsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case confidence = "Confidence"
        case criticality = "Criticality"
        case findingIdentifiers = "FindingIdentifiers"
        case note = "Note"
        case relatedFindings = "RelatedFindings"
        case severity = "Severity"
        case types = "Types"
        case userDefinedFields = "UserDefinedFields"
        case verificationState = "VerificationState"
        case workflow = "Workflow"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if confidence != 0 {
            try encodeContainer.encode(confidence, forKey: .confidence)
        }
        if criticality != 0 {
            try encodeContainer.encode(criticality, forKey: .criticality)
        }
        if let findingIdentifiers = findingIdentifiers {
            var findingIdentifiersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingIdentifiers)
            for awssecurityfindingidentifierlist0 in findingIdentifiers {
                try findingIdentifiersContainer.encode(awssecurityfindingidentifierlist0)
            }
        }
        if let note = note {
            try encodeContainer.encode(note, forKey: .note)
        }
        if let relatedFindings = relatedFindings {
            var relatedFindingsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .relatedFindings)
            for relatedfindinglist0 in relatedFindings {
                try relatedFindingsContainer.encode(relatedfindinglist0)
            }
        }
        if let severity = severity {
            try encodeContainer.encode(severity, forKey: .severity)
        }
        if let types = types {
            var typesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .types)
            for typelist0 in types {
                try typesContainer.encode(typelist0)
            }
        }
        if let userDefinedFields = userDefinedFields {
            var userDefinedFieldsContainer = encodeContainer.nestedContainer(keyedBy: Key.self, forKey: .userDefinedFields)
            for (dictKey0, fieldmap0) in userDefinedFields {
                try userDefinedFieldsContainer.encode(fieldmap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let verificationState = verificationState {
            try encodeContainer.encode(verificationState.rawValue, forKey: .verificationState)
        }
        if let workflow = workflow {
            try encodeContainer.encode(workflow, forKey: .workflow)
        }
    }
}
