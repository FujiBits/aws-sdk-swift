// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateBatchInferenceJobInputHeadersMiddleware: Middleware {
    public let id: String = "CreateBatchInferenceJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateBatchInferenceJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateBatchInferenceJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateBatchInferenceJobInput>
    public typealias MOutput = OperationOutput<CreateBatchInferenceJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateBatchInferenceJobOutputError>
}

public struct CreateBatchInferenceJobInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateBatchInferenceJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateBatchInferenceJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateBatchInferenceJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateBatchInferenceJobInput>
    public typealias MOutput = OperationOutput<CreateBatchInferenceJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateBatchInferenceJobOutputError>
}

public struct CreateBatchInferenceJobInputBodyMiddleware: Middleware {
    public let id: String = "CreateBatchInferenceJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateBatchInferenceJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateBatchInferenceJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateBatchInferenceJobInput>
    public typealias MOutput = OperationOutput<CreateBatchInferenceJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateBatchInferenceJobOutputError>
}

extension CreateBatchInferenceJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case batchInferenceJobConfig
        case filterArn
        case jobInput
        case jobName
        case jobOutput
        case numResults
        case roleArn
        case solutionVersionArn
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let batchInferenceJobConfig = batchInferenceJobConfig {
            try encodeContainer.encode(batchInferenceJobConfig, forKey: .batchInferenceJobConfig)
        }
        if let filterArn = filterArn {
            try encodeContainer.encode(filterArn, forKey: .filterArn)
        }
        if let jobInput = jobInput {
            try encodeContainer.encode(jobInput, forKey: .jobInput)
        }
        if let jobName = jobName {
            try encodeContainer.encode(jobName, forKey: .jobName)
        }
        if let jobOutput = jobOutput {
            try encodeContainer.encode(jobOutput, forKey: .jobOutput)
        }
        if let numResults = numResults {
            try encodeContainer.encode(numResults, forKey: .numResults)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
        if let solutionVersionArn = solutionVersionArn {
            try encodeContainer.encode(solutionVersionArn, forKey: .solutionVersionArn)
        }
    }
}
