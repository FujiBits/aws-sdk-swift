// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension MediaLiveClient {
    /// Accept an incoming input device transfer. The ownership of the device will transfer to your AWS account.
    func acceptInputDeviceTransfer(input: AcceptInputDeviceTransferInput) async throws -> AcceptInputDeviceTransferOutputResponse
    {
        typealias acceptInputDeviceTransferContinuation = CheckedContinuation<AcceptInputDeviceTransferOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acceptInputDeviceTransferContinuation) in
            acceptInputDeviceTransfer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts delete of resources.
    func batchDelete(input: BatchDeleteInput) async throws -> BatchDeleteOutputResponse
    {
        typealias batchDeleteContinuation = CheckedContinuation<BatchDeleteOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDeleteContinuation) in
            batchDelete(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts existing resources
    func batchStart(input: BatchStartInput) async throws -> BatchStartOutputResponse
    {
        typealias batchStartContinuation = CheckedContinuation<BatchStartOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchStartContinuation) in
            batchStart(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops running resources
    func batchStop(input: BatchStopInput) async throws -> BatchStopOutputResponse
    {
        typealias batchStopContinuation = CheckedContinuation<BatchStopOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchStopContinuation) in
            batchStop(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update a channel schedule
    func batchUpdateSchedule(input: BatchUpdateScheduleInput) async throws -> BatchUpdateScheduleOutputResponse
    {
        typealias batchUpdateScheduleContinuation = CheckedContinuation<BatchUpdateScheduleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchUpdateScheduleContinuation) in
            batchUpdateSchedule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Cancel an input device transfer that you have requested.
    func cancelInputDeviceTransfer(input: CancelInputDeviceTransferInput) async throws -> CancelInputDeviceTransferOutputResponse
    {
        typealias cancelInputDeviceTransferContinuation = CheckedContinuation<CancelInputDeviceTransferOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelInputDeviceTransferContinuation) in
            cancelInputDeviceTransfer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Send a request to claim an AWS Elemental device that you have purchased from a third-party vendor. After the request succeeds, you will own the device.
    func claimDevice(input: ClaimDeviceInput) async throws -> ClaimDeviceOutputResponse
    {
        typealias claimDeviceContinuation = CheckedContinuation<ClaimDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: claimDeviceContinuation) in
            claimDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new channel
    func createChannel(input: CreateChannelInput) async throws -> CreateChannelOutputResponse
    {
        typealias createChannelContinuation = CheckedContinuation<CreateChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createChannelContinuation) in
            createChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create an input
    func createInput(input: CreateInputInput) async throws -> CreateInputOutputResponse
    {
        typealias createInputContinuation = CheckedContinuation<CreateInputOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createInputContinuation) in
            createInput(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a Input Security Group
    func createInputSecurityGroup(input: CreateInputSecurityGroupInput) async throws -> CreateInputSecurityGroupOutputResponse
    {
        typealias createInputSecurityGroupContinuation = CheckedContinuation<CreateInputSecurityGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createInputSecurityGroupContinuation) in
            createInputSecurityGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a new multiplex.
    func createMultiplex(input: CreateMultiplexInput) async throws -> CreateMultiplexOutputResponse
    {
        typealias createMultiplexContinuation = CheckedContinuation<CreateMultiplexOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMultiplexContinuation) in
            createMultiplex(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a new program in the multiplex.
    func createMultiplexProgram(input: CreateMultiplexProgramInput) async throws -> CreateMultiplexProgramOutputResponse
    {
        typealias createMultiplexProgramContinuation = CheckedContinuation<CreateMultiplexProgramOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMultiplexProgramContinuation) in
            createMultiplexProgram(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create a partner input
    func createPartnerInput(input: CreatePartnerInputInput) async throws -> CreatePartnerInputOutputResponse
    {
        typealias createPartnerInputContinuation = CheckedContinuation<CreatePartnerInputOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createPartnerInputContinuation) in
            createPartnerInput(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Create tags for a resource
    func createTags(input: CreateTagsInput) async throws -> CreateTagsOutputResponse
    {
        typealias createTagsContinuation = CheckedContinuation<CreateTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTagsContinuation) in
            createTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts deletion of channel. The associated outputs are also deleted.
    func deleteChannel(input: DeleteChannelInput) async throws -> DeleteChannelOutputResponse
    {
        typealias deleteChannelContinuation = CheckedContinuation<DeleteChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteChannelContinuation) in
            deleteChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the input end point
    func deleteInput(input: DeleteInputInput) async throws -> DeleteInputOutputResponse
    {
        typealias deleteInputContinuation = CheckedContinuation<DeleteInputOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteInputContinuation) in
            deleteInput(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an Input Security Group
    func deleteInputSecurityGroup(input: DeleteInputSecurityGroupInput) async throws -> DeleteInputSecurityGroupOutputResponse
    {
        typealias deleteInputSecurityGroupContinuation = CheckedContinuation<DeleteInputSecurityGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteInputSecurityGroupContinuation) in
            deleteInputSecurityGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Delete a multiplex. The multiplex must be idle.
    func deleteMultiplex(input: DeleteMultiplexInput) async throws -> DeleteMultiplexOutputResponse
    {
        typealias deleteMultiplexContinuation = CheckedContinuation<DeleteMultiplexOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMultiplexContinuation) in
            deleteMultiplex(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Delete a program from a multiplex.
    func deleteMultiplexProgram(input: DeleteMultiplexProgramInput) async throws -> DeleteMultiplexProgramOutputResponse
    {
        typealias deleteMultiplexProgramContinuation = CheckedContinuation<DeleteMultiplexProgramOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteMultiplexProgramContinuation) in
            deleteMultiplexProgram(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Delete an expired reservation.
    func deleteReservation(input: DeleteReservationInput) async throws -> DeleteReservationOutputResponse
    {
        typealias deleteReservationContinuation = CheckedContinuation<DeleteReservationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteReservationContinuation) in
            deleteReservation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Delete all schedule actions on a channel.
    func deleteSchedule(input: DeleteScheduleInput) async throws -> DeleteScheduleOutputResponse
    {
        typealias deleteScheduleContinuation = CheckedContinuation<DeleteScheduleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteScheduleContinuation) in
            deleteSchedule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes tags for a resource
    func deleteTags(input: DeleteTagsInput) async throws -> DeleteTagsOutputResponse
    {
        typealias deleteTagsContinuation = CheckedContinuation<DeleteTagsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTagsContinuation) in
            deleteTags(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets details about a channel
    func describeChannel(input: DescribeChannelInput) async throws -> DescribeChannelOutputResponse
    {
        typealias describeChannelContinuation = CheckedContinuation<DescribeChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChannelContinuation) in
            describeChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Produces details about an input
    func describeInput(input: DescribeInputInput) async throws -> DescribeInputOutputResponse
    {
        typealias describeInputContinuation = CheckedContinuation<DescribeInputOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInputContinuation) in
            describeInput(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the details for the input device
    func describeInputDevice(input: DescribeInputDeviceInput) async throws -> DescribeInputDeviceOutputResponse
    {
        typealias describeInputDeviceContinuation = CheckedContinuation<DescribeInputDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInputDeviceContinuation) in
            describeInputDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get the latest thumbnail data for the input device.
    func describeInputDeviceThumbnail(input: DescribeInputDeviceThumbnailInput) async throws -> DescribeInputDeviceThumbnailOutputResponse
    {
        typealias describeInputDeviceThumbnailContinuation = CheckedContinuation<DescribeInputDeviceThumbnailOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInputDeviceThumbnailContinuation) in
            describeInputDeviceThumbnail(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Produces a summary of an Input Security Group
    func describeInputSecurityGroup(input: DescribeInputSecurityGroupInput) async throws -> DescribeInputSecurityGroupOutputResponse
    {
        typealias describeInputSecurityGroupContinuation = CheckedContinuation<DescribeInputSecurityGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeInputSecurityGroupContinuation) in
            describeInputSecurityGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets details about a multiplex.
    func describeMultiplex(input: DescribeMultiplexInput) async throws -> DescribeMultiplexOutputResponse
    {
        typealias describeMultiplexContinuation = CheckedContinuation<DescribeMultiplexOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMultiplexContinuation) in
            describeMultiplex(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get the details for a program in a multiplex.
    func describeMultiplexProgram(input: DescribeMultiplexProgramInput) async throws -> DescribeMultiplexProgramOutputResponse
    {
        typealias describeMultiplexProgramContinuation = CheckedContinuation<DescribeMultiplexProgramOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeMultiplexProgramContinuation) in
            describeMultiplexProgram(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get details for an offering.
    func describeOffering(input: DescribeOfferingInput) async throws -> DescribeOfferingOutputResponse
    {
        typealias describeOfferingContinuation = CheckedContinuation<DescribeOfferingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeOfferingContinuation) in
            describeOffering(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get details for a reservation.
    func describeReservation(input: DescribeReservationInput) async throws -> DescribeReservationOutputResponse
    {
        typealias describeReservationContinuation = CheckedContinuation<DescribeReservationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeReservationContinuation) in
            describeReservation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get a channel schedule
    func describeSchedule(input: DescribeScheduleInput) async throws -> DescribeScheduleOutputResponse
    {
        typealias describeScheduleContinuation = CheckedContinuation<DescribeScheduleOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeScheduleContinuation) in
            describeSchedule(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Produces list of channels that have been created
    func listChannels(input: ListChannelsInput) async throws -> ListChannelsOutputResponse
    {
        typealias listChannelsContinuation = CheckedContinuation<ListChannelsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChannelsContinuation) in
            listChannels(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List input devices that are currently being transferred. List input devices that you are transferring from your AWS account or input devices that another AWS account is transferring to you.
    func listInputDeviceTransfers(input: ListInputDeviceTransfersInput) async throws -> ListInputDeviceTransfersOutputResponse
    {
        typealias listInputDeviceTransfersContinuation = CheckedContinuation<ListInputDeviceTransfersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInputDeviceTransfersContinuation) in
            listInputDeviceTransfers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List input devices
    func listInputDevices(input: ListInputDevicesInput) async throws -> ListInputDevicesOutputResponse
    {
        typealias listInputDevicesContinuation = CheckedContinuation<ListInputDevicesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInputDevicesContinuation) in
            listInputDevices(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Produces a list of Input Security Groups for an account
    func listInputSecurityGroups(input: ListInputSecurityGroupsInput) async throws -> ListInputSecurityGroupsOutputResponse
    {
        typealias listInputSecurityGroupsContinuation = CheckedContinuation<ListInputSecurityGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInputSecurityGroupsContinuation) in
            listInputSecurityGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Produces list of inputs that have been created
    func listInputs(input: ListInputsInput) async throws -> ListInputsOutputResponse
    {
        typealias listInputsContinuation = CheckedContinuation<ListInputsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listInputsContinuation) in
            listInputs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List the programs that currently exist for a specific multiplex.
    func listMultiplexPrograms(input: ListMultiplexProgramsInput) async throws -> ListMultiplexProgramsOutputResponse
    {
        typealias listMultiplexProgramsContinuation = CheckedContinuation<ListMultiplexProgramsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMultiplexProgramsContinuation) in
            listMultiplexPrograms(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieve a list of the existing multiplexes.
    func listMultiplexes(input: ListMultiplexesInput) async throws -> ListMultiplexesOutputResponse
    {
        typealias listMultiplexesContinuation = CheckedContinuation<ListMultiplexesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listMultiplexesContinuation) in
            listMultiplexes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List offerings available for purchase.
    func listOfferings(input: ListOfferingsInput) async throws -> ListOfferingsOutputResponse
    {
        typealias listOfferingsContinuation = CheckedContinuation<ListOfferingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listOfferingsContinuation) in
            listOfferings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// List purchased reservations.
    func listReservations(input: ListReservationsInput) async throws -> ListReservationsOutputResponse
    {
        typealias listReservationsContinuation = CheckedContinuation<ListReservationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listReservationsContinuation) in
            listReservations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Produces list of tags that have been created for a resource
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Purchase an offering and create a reservation.
    func purchaseOffering(input: PurchaseOfferingInput) async throws -> PurchaseOfferingOutputResponse
    {
        typealias purchaseOfferingContinuation = CheckedContinuation<PurchaseOfferingOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: purchaseOfferingContinuation) in
            purchaseOffering(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Reject the transfer of the specified input device to your AWS account.
    func rejectInputDeviceTransfer(input: RejectInputDeviceTransferInput) async throws -> RejectInputDeviceTransferOutputResponse
    {
        typealias rejectInputDeviceTransferContinuation = CheckedContinuation<RejectInputDeviceTransferOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rejectInputDeviceTransferContinuation) in
            rejectInputDeviceTransfer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an existing channel
    func startChannel(input: StartChannelInput) async throws -> StartChannelOutputResponse
    {
        typealias startChannelContinuation = CheckedContinuation<StartChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startChannelContinuation) in
            startChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Start (run) the multiplex. Starting the multiplex does not start the channels. You must explicitly start each channel.
    func startMultiplex(input: StartMultiplexInput) async throws -> StartMultiplexOutputResponse
    {
        typealias startMultiplexContinuation = CheckedContinuation<StartMultiplexOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startMultiplexContinuation) in
            startMultiplex(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops a running channel
    func stopChannel(input: StopChannelInput) async throws -> StopChannelOutputResponse
    {
        typealias stopChannelContinuation = CheckedContinuation<StopChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopChannelContinuation) in
            stopChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops a running multiplex. If the multiplex isn't running, this action has no effect.
    func stopMultiplex(input: StopMultiplexInput) async throws -> StopMultiplexOutputResponse
    {
        typealias stopMultiplexContinuation = CheckedContinuation<StopMultiplexOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopMultiplexContinuation) in
            stopMultiplex(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Start an input device transfer to another AWS account. After you make the request, the other account must accept or reject the transfer.
    func transferInputDevice(input: TransferInputDeviceInput) async throws -> TransferInputDeviceOutputResponse
    {
        typealias transferInputDeviceContinuation = CheckedContinuation<TransferInputDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: transferInputDeviceContinuation) in
            transferInputDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a channel.
    func updateChannel(input: UpdateChannelInput) async throws -> UpdateChannelOutputResponse
    {
        typealias updateChannelContinuation = CheckedContinuation<UpdateChannelOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateChannelContinuation) in
            updateChannel(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Changes the class of the channel.
    func updateChannelClass(input: UpdateChannelClassInput) async throws -> UpdateChannelClassOutputResponse
    {
        typealias updateChannelClassContinuation = CheckedContinuation<UpdateChannelClassOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateChannelClassContinuation) in
            updateChannelClass(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates an input.
    func updateInput(input: UpdateInputInput) async throws -> UpdateInputOutputResponse
    {
        typealias updateInputContinuation = CheckedContinuation<UpdateInputOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateInputContinuation) in
            updateInput(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the parameters for the input device.
    func updateInputDevice(input: UpdateInputDeviceInput) async throws -> UpdateInputDeviceOutputResponse
    {
        typealias updateInputDeviceContinuation = CheckedContinuation<UpdateInputDeviceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateInputDeviceContinuation) in
            updateInputDevice(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update an Input Security Group's Whilelists.
    func updateInputSecurityGroup(input: UpdateInputSecurityGroupInput) async throws -> UpdateInputSecurityGroupOutputResponse
    {
        typealias updateInputSecurityGroupContinuation = CheckedContinuation<UpdateInputSecurityGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateInputSecurityGroupContinuation) in
            updateInputSecurityGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a multiplex.
    func updateMultiplex(input: UpdateMultiplexInput) async throws -> UpdateMultiplexOutputResponse
    {
        typealias updateMultiplexContinuation = CheckedContinuation<UpdateMultiplexOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMultiplexContinuation) in
            updateMultiplex(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update a program in a multiplex.
    func updateMultiplexProgram(input: UpdateMultiplexProgramInput) async throws -> UpdateMultiplexProgramOutputResponse
    {
        typealias updateMultiplexProgramContinuation = CheckedContinuation<UpdateMultiplexProgramOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateMultiplexProgramContinuation) in
            updateMultiplexProgram(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Update reservation.
    func updateReservation(input: UpdateReservationInput) async throws -> UpdateReservationOutputResponse
    {
        typealias updateReservationContinuation = CheckedContinuation<UpdateReservationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateReservationContinuation) in
            updateReservation(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
