// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

/// API for AWS Elemental MediaLive
public protocol MediaLiveClientProtocol {
    /// Accept an incoming input device transfer. The ownership of the device will transfer to your AWS account.
    func acceptInputDeviceTransfer(input: AcceptInputDeviceTransferInput, completion: @escaping (ClientRuntime.SdkResult<AcceptInputDeviceTransferOutputResponse, AcceptInputDeviceTransferOutputError>) -> Void)
    /// Starts delete of resources.
    func batchDelete(input: BatchDeleteInput, completion: @escaping (ClientRuntime.SdkResult<BatchDeleteOutputResponse, BatchDeleteOutputError>) -> Void)
    /// Starts existing resources
    func batchStart(input: BatchStartInput, completion: @escaping (ClientRuntime.SdkResult<BatchStartOutputResponse, BatchStartOutputError>) -> Void)
    /// Stops running resources
    func batchStop(input: BatchStopInput, completion: @escaping (ClientRuntime.SdkResult<BatchStopOutputResponse, BatchStopOutputError>) -> Void)
    /// Update a channel schedule
    func batchUpdateSchedule(input: BatchUpdateScheduleInput, completion: @escaping (ClientRuntime.SdkResult<BatchUpdateScheduleOutputResponse, BatchUpdateScheduleOutputError>) -> Void)
    /// Cancel an input device transfer that you have requested.
    func cancelInputDeviceTransfer(input: CancelInputDeviceTransferInput, completion: @escaping (ClientRuntime.SdkResult<CancelInputDeviceTransferOutputResponse, CancelInputDeviceTransferOutputError>) -> Void)
    /// Creates a new channel
    func createChannel(input: CreateChannelInput, completion: @escaping (ClientRuntime.SdkResult<CreateChannelOutputResponse, CreateChannelOutputError>) -> Void)
    /// Create an input
    func createInput(input: CreateInputInput, completion: @escaping (ClientRuntime.SdkResult<CreateInputOutputResponse, CreateInputOutputError>) -> Void)
    /// Creates a Input Security Group
    func createInputSecurityGroup(input: CreateInputSecurityGroupInput, completion: @escaping (ClientRuntime.SdkResult<CreateInputSecurityGroupOutputResponse, CreateInputSecurityGroupOutputError>) -> Void)
    /// Create a new multiplex.
    func createMultiplex(input: CreateMultiplexInput, completion: @escaping (ClientRuntime.SdkResult<CreateMultiplexOutputResponse, CreateMultiplexOutputError>) -> Void)
    /// Create a new program in the multiplex.
    func createMultiplexProgram(input: CreateMultiplexProgramInput, completion: @escaping (ClientRuntime.SdkResult<CreateMultiplexProgramOutputResponse, CreateMultiplexProgramOutputError>) -> Void)
    /// Create a partner input
    func createPartnerInput(input: CreatePartnerInputInput, completion: @escaping (ClientRuntime.SdkResult<CreatePartnerInputOutputResponse, CreatePartnerInputOutputError>) -> Void)
    /// Create tags for a resource
    func createTags(input: CreateTagsInput, completion: @escaping (ClientRuntime.SdkResult<CreateTagsOutputResponse, CreateTagsOutputError>) -> Void)
    /// Starts deletion of channel. The associated outputs are also deleted.
    func deleteChannel(input: DeleteChannelInput, completion: @escaping (ClientRuntime.SdkResult<DeleteChannelOutputResponse, DeleteChannelOutputError>) -> Void)
    /// Deletes the input end point
    func deleteInput(input: DeleteInputInput, completion: @escaping (ClientRuntime.SdkResult<DeleteInputOutputResponse, DeleteInputOutputError>) -> Void)
    /// Deletes an Input Security Group
    func deleteInputSecurityGroup(input: DeleteInputSecurityGroupInput, completion: @escaping (ClientRuntime.SdkResult<DeleteInputSecurityGroupOutputResponse, DeleteInputSecurityGroupOutputError>) -> Void)
    /// Delete a multiplex. The multiplex must be idle.
    func deleteMultiplex(input: DeleteMultiplexInput, completion: @escaping (ClientRuntime.SdkResult<DeleteMultiplexOutputResponse, DeleteMultiplexOutputError>) -> Void)
    /// Delete a program from a multiplex.
    func deleteMultiplexProgram(input: DeleteMultiplexProgramInput, completion: @escaping (ClientRuntime.SdkResult<DeleteMultiplexProgramOutputResponse, DeleteMultiplexProgramOutputError>) -> Void)
    /// Delete an expired reservation.
    func deleteReservation(input: DeleteReservationInput, completion: @escaping (ClientRuntime.SdkResult<DeleteReservationOutputResponse, DeleteReservationOutputError>) -> Void)
    /// Delete all schedule actions on a channel.
    func deleteSchedule(input: DeleteScheduleInput, completion: @escaping (ClientRuntime.SdkResult<DeleteScheduleOutputResponse, DeleteScheduleOutputError>) -> Void)
    /// Removes tags for a resource
    func deleteTags(input: DeleteTagsInput, completion: @escaping (ClientRuntime.SdkResult<DeleteTagsOutputResponse, DeleteTagsOutputError>) -> Void)
    /// Gets details about a channel
    func describeChannel(input: DescribeChannelInput, completion: @escaping (ClientRuntime.SdkResult<DescribeChannelOutputResponse, DescribeChannelOutputError>) -> Void)
    /// Produces details about an input
    func describeInput(input: DescribeInputInput, completion: @escaping (ClientRuntime.SdkResult<DescribeInputOutputResponse, DescribeInputOutputError>) -> Void)
    /// Gets the details for the input device
    func describeInputDevice(input: DescribeInputDeviceInput, completion: @escaping (ClientRuntime.SdkResult<DescribeInputDeviceOutputResponse, DescribeInputDeviceOutputError>) -> Void)
    /// Get the latest thumbnail data for the input device.
    func describeInputDeviceThumbnail(input: DescribeInputDeviceThumbnailInput, completion: @escaping (ClientRuntime.SdkResult<DescribeInputDeviceThumbnailOutputResponse, DescribeInputDeviceThumbnailOutputError>) -> Void)
    /// Produces a summary of an Input Security Group
    func describeInputSecurityGroup(input: DescribeInputSecurityGroupInput, completion: @escaping (ClientRuntime.SdkResult<DescribeInputSecurityGroupOutputResponse, DescribeInputSecurityGroupOutputError>) -> Void)
    /// Gets details about a multiplex.
    func describeMultiplex(input: DescribeMultiplexInput, completion: @escaping (ClientRuntime.SdkResult<DescribeMultiplexOutputResponse, DescribeMultiplexOutputError>) -> Void)
    /// Get the details for a program in a multiplex.
    func describeMultiplexProgram(input: DescribeMultiplexProgramInput, completion: @escaping (ClientRuntime.SdkResult<DescribeMultiplexProgramOutputResponse, DescribeMultiplexProgramOutputError>) -> Void)
    /// Get details for an offering.
    func describeOffering(input: DescribeOfferingInput, completion: @escaping (ClientRuntime.SdkResult<DescribeOfferingOutputResponse, DescribeOfferingOutputError>) -> Void)
    /// Get details for a reservation.
    func describeReservation(input: DescribeReservationInput, completion: @escaping (ClientRuntime.SdkResult<DescribeReservationOutputResponse, DescribeReservationOutputError>) -> Void)
    /// Get a channel schedule
    func describeSchedule(input: DescribeScheduleInput, completion: @escaping (ClientRuntime.SdkResult<DescribeScheduleOutputResponse, DescribeScheduleOutputError>) -> Void)
    /// Produces list of channels that have been created
    func listChannels(input: ListChannelsInput, completion: @escaping (ClientRuntime.SdkResult<ListChannelsOutputResponse, ListChannelsOutputError>) -> Void)
    /// List input devices
    func listInputDevices(input: ListInputDevicesInput, completion: @escaping (ClientRuntime.SdkResult<ListInputDevicesOutputResponse, ListInputDevicesOutputError>) -> Void)
    /// List input devices that are currently being transferred. List input devices that you are transferring from your AWS account or input devices that another AWS account is transferring to you.
    func listInputDeviceTransfers(input: ListInputDeviceTransfersInput, completion: @escaping (ClientRuntime.SdkResult<ListInputDeviceTransfersOutputResponse, ListInputDeviceTransfersOutputError>) -> Void)
    /// Produces list of inputs that have been created
    func listInputs(input: ListInputsInput, completion: @escaping (ClientRuntime.SdkResult<ListInputsOutputResponse, ListInputsOutputError>) -> Void)
    /// Produces a list of Input Security Groups for an account
    func listInputSecurityGroups(input: ListInputSecurityGroupsInput, completion: @escaping (ClientRuntime.SdkResult<ListInputSecurityGroupsOutputResponse, ListInputSecurityGroupsOutputError>) -> Void)
    /// Retrieve a list of the existing multiplexes.
    func listMultiplexes(input: ListMultiplexesInput, completion: @escaping (ClientRuntime.SdkResult<ListMultiplexesOutputResponse, ListMultiplexesOutputError>) -> Void)
    /// List the programs that currently exist for a specific multiplex.
    func listMultiplexPrograms(input: ListMultiplexProgramsInput, completion: @escaping (ClientRuntime.SdkResult<ListMultiplexProgramsOutputResponse, ListMultiplexProgramsOutputError>) -> Void)
    /// List offerings available for purchase.
    func listOfferings(input: ListOfferingsInput, completion: @escaping (ClientRuntime.SdkResult<ListOfferingsOutputResponse, ListOfferingsOutputError>) -> Void)
    /// List purchased reservations.
    func listReservations(input: ListReservationsInput, completion: @escaping (ClientRuntime.SdkResult<ListReservationsOutputResponse, ListReservationsOutputError>) -> Void)
    /// Produces list of tags that have been created for a resource
    func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (ClientRuntime.SdkResult<ListTagsForResourceOutputResponse, ListTagsForResourceOutputError>) -> Void)
    /// Purchase an offering and create a reservation.
    func purchaseOffering(input: PurchaseOfferingInput, completion: @escaping (ClientRuntime.SdkResult<PurchaseOfferingOutputResponse, PurchaseOfferingOutputError>) -> Void)
    /// Reject the transfer of the specified input device to your AWS account.
    func rejectInputDeviceTransfer(input: RejectInputDeviceTransferInput, completion: @escaping (ClientRuntime.SdkResult<RejectInputDeviceTransferOutputResponse, RejectInputDeviceTransferOutputError>) -> Void)
    /// Starts an existing channel
    func startChannel(input: StartChannelInput, completion: @escaping (ClientRuntime.SdkResult<StartChannelOutputResponse, StartChannelOutputError>) -> Void)
    /// Start (run) the multiplex. Starting the multiplex does not start the channels. You must explicitly start each channel.
    func startMultiplex(input: StartMultiplexInput, completion: @escaping (ClientRuntime.SdkResult<StartMultiplexOutputResponse, StartMultiplexOutputError>) -> Void)
    /// Stops a running channel
    func stopChannel(input: StopChannelInput, completion: @escaping (ClientRuntime.SdkResult<StopChannelOutputResponse, StopChannelOutputError>) -> Void)
    /// Stops a running multiplex. If the multiplex isn't running, this action has no effect.
    func stopMultiplex(input: StopMultiplexInput, completion: @escaping (ClientRuntime.SdkResult<StopMultiplexOutputResponse, StopMultiplexOutputError>) -> Void)
    /// Start an input device transfer to another AWS account. After you make the request, the other account must accept or reject the transfer.
    func transferInputDevice(input: TransferInputDeviceInput, completion: @escaping (ClientRuntime.SdkResult<TransferInputDeviceOutputResponse, TransferInputDeviceOutputError>) -> Void)
    /// Updates a channel.
    func updateChannel(input: UpdateChannelInput, completion: @escaping (ClientRuntime.SdkResult<UpdateChannelOutputResponse, UpdateChannelOutputError>) -> Void)
    /// Changes the class of the channel.
    func updateChannelClass(input: UpdateChannelClassInput, completion: @escaping (ClientRuntime.SdkResult<UpdateChannelClassOutputResponse, UpdateChannelClassOutputError>) -> Void)
    /// Updates an input.
    func updateInput(input: UpdateInputInput, completion: @escaping (ClientRuntime.SdkResult<UpdateInputOutputResponse, UpdateInputOutputError>) -> Void)
    /// Updates the parameters for the input device.
    func updateInputDevice(input: UpdateInputDeviceInput, completion: @escaping (ClientRuntime.SdkResult<UpdateInputDeviceOutputResponse, UpdateInputDeviceOutputError>) -> Void)
    /// Update an Input Security Group's Whilelists.
    func updateInputSecurityGroup(input: UpdateInputSecurityGroupInput, completion: @escaping (ClientRuntime.SdkResult<UpdateInputSecurityGroupOutputResponse, UpdateInputSecurityGroupOutputError>) -> Void)
    /// Updates a multiplex.
    func updateMultiplex(input: UpdateMultiplexInput, completion: @escaping (ClientRuntime.SdkResult<UpdateMultiplexOutputResponse, UpdateMultiplexOutputError>) -> Void)
    /// Update a program in a multiplex.
    func updateMultiplexProgram(input: UpdateMultiplexProgramInput, completion: @escaping (ClientRuntime.SdkResult<UpdateMultiplexProgramOutputResponse, UpdateMultiplexProgramOutputError>) -> Void)
    /// Update reservation.
    func updateReservation(input: UpdateReservationInput, completion: @escaping (ClientRuntime.SdkResult<UpdateReservationOutputResponse, UpdateReservationOutputError>) -> Void)
}

public enum MediaLiveClientTypes {}
