// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ElasticInferenceClient {
    ///
    ///             Describes the locations in which a given accelerator type or set of types is present in a given region.
    ///
    func describeAcceleratorOfferings(input: DescribeAcceleratorOfferingsInput) async throws -> DescribeAcceleratorOfferingsOutputResponse
    {
        typealias describeAcceleratorOfferingsContinuation = CheckedContinuation<DescribeAcceleratorOfferingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAcceleratorOfferingsContinuation) in
            describeAcceleratorOfferings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             Describes the accelerator types available in a given region, as well as their characteristics, such as memory and throughput.
    ///
    func describeAcceleratorTypes(input: DescribeAcceleratorTypesInput) async throws -> DescribeAcceleratorTypesOutputResponse
    {
        typealias describeAcceleratorTypesContinuation = CheckedContinuation<DescribeAcceleratorTypesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAcceleratorTypesContinuation) in
            describeAcceleratorTypes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             Describes information over a provided set of accelerators belonging to an account.
    ///
    func describeAccelerators(input: DescribeAcceleratorsInput) async throws -> DescribeAcceleratorsOutputResponse
    {
        typealias describeAcceleratorsContinuation = CheckedContinuation<DescribeAcceleratorsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeAcceleratorsContinuation) in
            describeAccelerators(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             Returns all tags of an Elastic Inference Accelerator.
    ///
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             Adds the specified tags to an Elastic Inference Accelerator.
    ///
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    ///             Removes the specified tags from an Elastic Inference Accelerator.
    ///
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
