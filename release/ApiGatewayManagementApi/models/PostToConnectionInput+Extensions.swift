// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct PostToConnectionInputHeadersMiddleware: Middleware {
    public let id: String = "PostToConnectionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PostToConnectionInput>,
                  next: H) -> Swift.Result<OperationOutput<PostToConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PostToConnectionInput>
    public typealias MOutput = OperationOutput<PostToConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PostToConnectionOutputError>
}

public struct PostToConnectionInputQueryItemMiddleware: Middleware {
    public let id: String = "PostToConnectionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PostToConnectionInput>,
                  next: H) -> Swift.Result<OperationOutput<PostToConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PostToConnectionInput>
    public typealias MOutput = OperationOutput<PostToConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PostToConnectionOutputError>
}

public struct PostToConnectionInputBodyMiddleware: Middleware {
    public let id: String = "PostToConnectionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<PostToConnectionInput>,
                  next: H) -> Swift.Result<OperationOutput<PostToConnectionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let data = input.operationInput.data {
            let data = data
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<PostToConnectionInput>
    public typealias MOutput = OperationOutput<PostToConnectionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<PostToConnectionOutputError>
}

extension PostToConnectionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case data = "Data"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let data = data {
            try encodeContainer.encode(data.base64EncodedString(), forKey: .data)
        }
    }
}
