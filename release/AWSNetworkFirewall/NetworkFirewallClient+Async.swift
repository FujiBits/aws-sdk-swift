// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension NetworkFirewallClient {
    /// Associates a FirewallPolicy to a Firewall.
    ///          A firewall policy defines how to monitor and manage your VPC network traffic, using a
    ///          collection of inspection rule groups and other settings. Each firewall requires one
    ///          firewall policy association, and you can use the same firewall policy for multiple
    ///          firewalls.
    func associateFirewallPolicy(input: AssociateFirewallPolicyInput) async throws -> AssociateFirewallPolicyOutputResponse
    {
        typealias associateFirewallPolicyContinuation = CheckedContinuation<AssociateFirewallPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateFirewallPolicyContinuation) in
            associateFirewallPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates the specified subnets in the Amazon VPC to the firewall. You can specify one
    ///          subnet for each of the Availability Zones that the VPC spans.
    ///          This request creates an AWS Network Firewall firewall endpoint in each of the subnets. To
    ///          enable the firewall's protections, you must also modify the VPC's route tables for each
    ///          subnet's Availability Zone, to redirect the traffic that's coming into and going out of the
    ///          zone through the firewall endpoint.
    func associateSubnets(input: AssociateSubnetsInput) async throws -> AssociateSubnetsOutputResponse
    {
        typealias associateSubnetsContinuation = CheckedContinuation<AssociateSubnetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: associateSubnetsContinuation) in
            associateSubnets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an AWS Network Firewall Firewall and accompanying FirewallStatus for a VPC.
    ///          The firewall defines the configuration settings for an AWS Network Firewall firewall. The settings that you can define at creation include the firewall policy, the subnets in your VPC to use for the firewall endpoints, and any tags that are attached to the firewall AWS resource.
    ///          After you create a firewall, you can provide additional settings, like the logging configuration.
    ///          To update the settings for a firewall, you use the operations that apply to the settings
    ///          themselves, for example UpdateLoggingConfiguration, AssociateSubnets, and UpdateFirewallDeleteProtection.
    ///          To manage a firewall's tags, use the standard AWS resource tagging operations, ListTagsForResource, TagResource, and UntagResource.
    ///          To retrieve information about firewalls, use ListFirewalls and DescribeFirewall.
    func createFirewall(input: CreateFirewallInput) async throws -> CreateFirewallOutputResponse
    {
        typealias createFirewallContinuation = CheckedContinuation<CreateFirewallOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFirewallContinuation) in
            createFirewall(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates the firewall policy for the firewall according to the specifications.
    ///          An AWS Network Firewall firewall policy defines the behavior of a firewall, in a collection of
    ///          stateless and stateful rule groups and other settings. You can use one firewall policy for
    ///          multiple firewalls.
    func createFirewallPolicy(input: CreateFirewallPolicyInput) async throws -> CreateFirewallPolicyOutputResponse
    {
        typealias createFirewallPolicyContinuation = CheckedContinuation<CreateFirewallPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createFirewallPolicyContinuation) in
            createFirewallPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates the specified stateless or stateful rule group, which includes the rules for
    ///          network traffic inspection, a capacity setting, and tags.
    ///          You provide your rule group specification in your request using either
    ///             RuleGroup or Rules.
    func createRuleGroup(input: CreateRuleGroupInput) async throws -> CreateRuleGroupOutputResponse
    {
        typealias createRuleGroupContinuation = CheckedContinuation<CreateRuleGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createRuleGroupContinuation) in
            createRuleGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified Firewall and its FirewallStatus.
    ///        This operation requires the firewall's DeleteProtection flag to be
    ///             FALSE. You can't revert this operation.
    ///          You can check whether a firewall is
    ///          in use by reviewing the route tables for the Availability Zones where you have
    ///          firewall subnet mappings. Retrieve the subnet mappings by calling DescribeFirewall.
    ///          You define and update the route tables through Amazon VPC. As needed, update the route tables for the
    ///          zones to remove the firewall endpoints. When the route tables no longer use the firewall endpoints,
    ///          you can remove the firewall safely.
    ///          To delete a firewall, remove the delete protection if you need to using UpdateFirewallDeleteProtection,
    ///          then delete the firewall by calling DeleteFirewall.
    func deleteFirewall(input: DeleteFirewallInput) async throws -> DeleteFirewallOutputResponse
    {
        typealias deleteFirewallContinuation = CheckedContinuation<DeleteFirewallOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFirewallContinuation) in
            deleteFirewall(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified FirewallPolicy.
    func deleteFirewallPolicy(input: DeleteFirewallPolicyInput) async throws -> DeleteFirewallPolicyOutputResponse
    {
        typealias deleteFirewallPolicyContinuation = CheckedContinuation<DeleteFirewallPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteFirewallPolicyContinuation) in
            deleteFirewallPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a resource policy that you created in a PutResourcePolicy request.
    func deleteResourcePolicy(input: DeleteResourcePolicyInput) async throws -> DeleteResourcePolicyOutputResponse
    {
        typealias deleteResourcePolicyContinuation = CheckedContinuation<DeleteResourcePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteResourcePolicyContinuation) in
            deleteResourcePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified RuleGroup.
    func deleteRuleGroup(input: DeleteRuleGroupInput) async throws -> DeleteRuleGroupOutputResponse
    {
        typealias deleteRuleGroupContinuation = CheckedContinuation<DeleteRuleGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteRuleGroupContinuation) in
            deleteRuleGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the data objects for the specified firewall.
    func describeFirewall(input: DescribeFirewallInput) async throws -> DescribeFirewallOutputResponse
    {
        typealias describeFirewallContinuation = CheckedContinuation<DescribeFirewallOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeFirewallContinuation) in
            describeFirewall(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the data objects for the specified firewall policy.
    func describeFirewallPolicy(input: DescribeFirewallPolicyInput) async throws -> DescribeFirewallPolicyOutputResponse
    {
        typealias describeFirewallPolicyContinuation = CheckedContinuation<DescribeFirewallPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeFirewallPolicyContinuation) in
            describeFirewallPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the logging configuration for the specified firewall.
    func describeLoggingConfiguration(input: DescribeLoggingConfigurationInput) async throws -> DescribeLoggingConfigurationOutputResponse
    {
        typealias describeLoggingConfigurationContinuation = CheckedContinuation<DescribeLoggingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeLoggingConfigurationContinuation) in
            describeLoggingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves a resource policy that you created in a PutResourcePolicy request.
    func describeResourcePolicy(input: DescribeResourcePolicyInput) async throws -> DescribeResourcePolicyOutputResponse
    {
        typealias describeResourcePolicyContinuation = CheckedContinuation<DescribeResourcePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeResourcePolicyContinuation) in
            describeResourcePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the data objects for the specified rule group.
    func describeRuleGroup(input: DescribeRuleGroupInput) async throws -> DescribeRuleGroupOutputResponse
    {
        typealias describeRuleGroupContinuation = CheckedContinuation<DescribeRuleGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRuleGroupContinuation) in
            describeRuleGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified subnet associations from the firewall. This removes the
    ///           firewall endpoints from the subnets and removes any network filtering protections that the endpoints
    ///           were providing.
    ///
    func disassociateSubnets(input: DisassociateSubnetsInput) async throws -> DisassociateSubnetsOutputResponse
    {
        typealias disassociateSubnetsContinuation = CheckedContinuation<DisassociateSubnetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disassociateSubnetsContinuation) in
            disassociateSubnets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the metadata for the firewall policies that you have defined. Depending on
    ///          your setting for max results and the number of firewall policies, a single call might not
    ///          return the full list.
    func listFirewallPolicies(input: ListFirewallPoliciesInput) async throws -> ListFirewallPoliciesOutputResponse
    {
        typealias listFirewallPoliciesContinuation = CheckedContinuation<ListFirewallPoliciesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFirewallPoliciesContinuation) in
            listFirewallPolicies(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the metadata for the firewalls that you have defined. If you provide VPC
    ///          identifiers in your request, this returns only the firewalls for those VPCs.
    ///          Depending on your setting for max results and the number of firewalls, a single call
    ///          might not return the full list.
    func listFirewalls(input: ListFirewallsInput) async throws -> ListFirewallsOutputResponse
    {
        typealias listFirewallsContinuation = CheckedContinuation<ListFirewallsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listFirewallsContinuation) in
            listFirewalls(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the metadata for the rule groups that you have defined. Depending on your
    ///          setting for max results and the number of rule groups, a single call might not return the
    ///          full list.
    func listRuleGroups(input: ListRuleGroupsInput) async throws -> ListRuleGroupsOutputResponse
    {
        typealias listRuleGroupsContinuation = CheckedContinuation<ListRuleGroupsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listRuleGroupsContinuation) in
            listRuleGroups(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves the tags associated with the specified resource. Tags are key:value pairs that
    ///          you can use to categorize and manage your resources, for purposes like billing. For
    ///          example, you might set the tag key to "customer" and the value to the customer name or ID.
    ///          You can specify one or more tags to add to each AWS resource, up to 50 tags for a
    ///          resource.
    ///          You can tag the AWS resources that you manage through AWS Network Firewall: firewalls, firewall
    ///          policies, and rule groups.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates or updates an AWS Identity and Access Management policy for your rule group or firewall policy. Use this to share rule groups and firewall policies between accounts. This operation works in conjunction with the AWS Resource Access Manager (RAM) service
    ///            to manage resource sharing for Network Firewall.
    ///          Use this operation to create or update a resource policy for your rule group or firewall policy. In the policy, you specify the accounts that you want to share the resource with and the operations that you want the accounts to be able to perform.
    ///          When you add an account in the resource policy, you then run the following Resource Access Manager (RAM) operations to access and accept the shared rule group or firewall policy.
    ///
    ///
    ///
    ///                   <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_GetResourceShareInvitations.html">GetResourceShareInvitations - Returns the Amazon Resource Names (ARNs) of the resource share invitations.
    ///
    ///
    ///
    ///                   <a href="https://docs.aws.amazon.com/ram/latest/APIReference/API_AcceptResourceShareInvitation.html">AcceptResourceShareInvitation - Accepts the share invitation for a specified resource share.
    ///
    ///
    ///          For additional information about resource sharing using RAM, see <a href="https://docs.aws.amazon.com/ram/latest/userguide/what-is.html">AWS Resource Access Manager User Guide.
    func putResourcePolicy(input: PutResourcePolicyInput) async throws -> PutResourcePolicyOutputResponse
    {
        typealias putResourcePolicyContinuation = CheckedContinuation<PutResourcePolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: putResourcePolicyContinuation) in
            putResourcePolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds the specified tags to the specified resource. Tags are key:value pairs that you can
    ///          use to categorize and manage your resources, for purposes like billing. For example, you
    ///          might set the tag key to "customer" and the value to the customer name or ID. You can
    ///          specify one or more tags to add to each AWS resource, up to 50 tags for a resource.
    ///          You can tag the AWS resources that you manage through AWS Network Firewall: firewalls, firewall
    ///          policies, and rule groups.
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the tags with the specified keys from the specified resource. Tags are key:value
    ///          pairs that you can use to categorize and manage your resources, for purposes like billing.
    ///          For example, you might set the tag key to "customer" and the value to the customer name or
    ///          ID. You can specify one or more tags to add to each AWS resource, up to 50 tags for a
    ///          resource.
    ///          You can manage tags for the AWS resources that you manage through AWS Network Firewall:
    ///          firewalls, firewall policies, and rule groups.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies the flag, DeleteProtection, which indicates whether it is possible
    ///          to delete the firewall. If the flag is set to TRUE, the firewall is protected
    ///          against deletion. This setting helps protect against accidentally deleting a firewall
    ///          that's in use.
    func updateFirewallDeleteProtection(input: UpdateFirewallDeleteProtectionInput) async throws -> UpdateFirewallDeleteProtectionOutputResponse
    {
        typealias updateFirewallDeleteProtectionContinuation = CheckedContinuation<UpdateFirewallDeleteProtectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFirewallDeleteProtectionContinuation) in
            updateFirewallDeleteProtection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Modifies the description for the specified firewall. Use the description to help you
    ///          identify the firewall when you're working with it.
    func updateFirewallDescription(input: UpdateFirewallDescriptionInput) async throws -> UpdateFirewallDescriptionOutputResponse
    {
        typealias updateFirewallDescriptionContinuation = CheckedContinuation<UpdateFirewallDescriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFirewallDescriptionContinuation) in
            updateFirewallDescription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the properties of the specified firewall policy.
    func updateFirewallPolicy(input: UpdateFirewallPolicyInput) async throws -> UpdateFirewallPolicyOutputResponse
    {
        typealias updateFirewallPolicyContinuation = CheckedContinuation<UpdateFirewallPolicyOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFirewallPolicyContinuation) in
            updateFirewallPolicy(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    func updateFirewallPolicyChangeProtection(input: UpdateFirewallPolicyChangeProtectionInput) async throws -> UpdateFirewallPolicyChangeProtectionOutputResponse
    {
        typealias updateFirewallPolicyChangeProtectionContinuation = CheckedContinuation<UpdateFirewallPolicyChangeProtectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateFirewallPolicyChangeProtectionContinuation) in
            updateFirewallPolicyChangeProtection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Sets the logging configuration for the specified firewall.
    ///          To change the logging configuration, retrieve the LoggingConfiguration by calling DescribeLoggingConfiguration, then change it and provide
    ///          the modified object to this update call. You must change the logging configuration one
    ///             LogDestinationConfig at a time inside the retrieved LoggingConfiguration object.
    ///          You can perform only one of the following actions in any call to
    ///             UpdateLoggingConfiguration:
    ///
    ///
    ///                Create a new log destination object by adding a single
    ///                   LogDestinationConfig array element to
    ///                   LogDestinationConfigs.
    ///
    ///
    ///                Delete a log destination object by removing a single
    ///                   LogDestinationConfig array element from
    ///                   LogDestinationConfigs.
    ///
    ///
    ///                Change the LogDestination setting in a single
    ///                   LogDestinationConfig array element.
    ///
    ///
    ///          You can't change the LogDestinationType or LogType in a
    ///             LogDestinationConfig. To change these settings, delete the existing
    ///             LogDestinationConfig object and create a new one, using two separate calls
    ///          to this update operation.
    func updateLoggingConfiguration(input: UpdateLoggingConfigurationInput) async throws -> UpdateLoggingConfigurationOutputResponse
    {
        typealias updateLoggingConfigurationContinuation = CheckedContinuation<UpdateLoggingConfigurationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateLoggingConfigurationContinuation) in
            updateLoggingConfiguration(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the rule settings for the specified rule group. You use a rule group by
    ///          reference in one or more firewall policies. When you modify a rule group, you modify all
    ///          firewall policies that use the rule group.
    ///          To update a rule group, first call DescribeRuleGroup to retrieve the
    ///          current RuleGroup object, update the object as needed, and then provide
    ///          the updated object to this call.
    func updateRuleGroup(input: UpdateRuleGroupInput) async throws -> UpdateRuleGroupOutputResponse
    {
        typealias updateRuleGroupContinuation = CheckedContinuation<UpdateRuleGroupOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRuleGroupContinuation) in
            updateRuleGroup(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    ///
    func updateSubnetChangeProtection(input: UpdateSubnetChangeProtectionInput) async throws -> UpdateSubnetChangeProtectionOutputResponse
    {
        typealias updateSubnetChangeProtectionContinuation = CheckedContinuation<UpdateSubnetChangeProtectionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateSubnetChangeProtectionContinuation) in
            updateSubnetChangeProtection(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
