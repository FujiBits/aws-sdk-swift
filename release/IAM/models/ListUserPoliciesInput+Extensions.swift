// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ListUserPoliciesInputHeadersMiddleware: Middleware {
    public let id: String = "ListUserPoliciesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListUserPoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListUserPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListUserPoliciesInput>
    public typealias MOutput = OperationOutput<ListUserPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListUserPoliciesOutputError>
}

public struct ListUserPoliciesInputQueryItemMiddleware: Middleware {
    public let id: String = "ListUserPoliciesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListUserPoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListUserPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListUserPoliciesInput>
    public typealias MOutput = OperationOutput<ListUserPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListUserPoliciesOutputError>
}

public struct ListUserPoliciesInputBodyMiddleware: Middleware {
    public let id: String = "ListUserPoliciesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListUserPoliciesInput>,
                  next: H) -> Swift.Result<OperationOutput<ListUserPoliciesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListUserPoliciesInput>
    public typealias MOutput = OperationOutput<ListUserPoliciesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ListUserPoliciesOutputError>
}

extension ListUserPoliciesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: Key("MaxItems"))
        }
        if let userName = userName {
            try container.encode(userName, forKey: Key("UserName"))
        }
        try container.encode("ListUserPolicies", forKey:Key("Action"))
        try container.encode("2010-05-08", forKey:Key("Version"))
    }
}
