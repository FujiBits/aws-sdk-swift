// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetRoleInputHeadersMiddleware: Middleware {
    public let id: String = "GetRoleInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetRoleInput>,
                  next: H) -> Swift.Result<OperationOutput<GetRoleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetRoleInput>
    public typealias MOutput = OperationOutput<GetRoleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetRoleOutputError>
}

public struct GetRoleInputQueryItemMiddleware: Middleware {
    public let id: String = "GetRoleInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetRoleInput>,
                  next: H) -> Swift.Result<OperationOutput<GetRoleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetRoleInput>
    public typealias MOutput = OperationOutput<GetRoleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetRoleOutputError>
}

public struct GetRoleInputBodyMiddleware: Middleware {
    public let id: String = "GetRoleInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetRoleInput>,
                  next: H) -> Swift.Result<OperationOutput<GetRoleOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetRoleInput>
    public typealias MOutput = OperationOutput<GetRoleOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetRoleOutputError>
}

extension GetRoleInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let roleName = roleName {
            try container.encode(roleName, forKey: Key("RoleName"))
        }
        try container.encode("GetRole", forKey:Key("Action"))
        try container.encode("2010-05-08", forKey:Key("Version"))
    }
}
