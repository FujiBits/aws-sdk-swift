// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SimulatePrincipalPolicyInputHeadersMiddleware: Middleware {
    public let id: String = "SimulatePrincipalPolicyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SimulatePrincipalPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<SimulatePrincipalPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SimulatePrincipalPolicyInput>
    public typealias MOutput = OperationOutput<SimulatePrincipalPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SimulatePrincipalPolicyOutputError>
}

public struct SimulatePrincipalPolicyInputQueryItemMiddleware: Middleware {
    public let id: String = "SimulatePrincipalPolicyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SimulatePrincipalPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<SimulatePrincipalPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SimulatePrincipalPolicyInput>
    public typealias MOutput = OperationOutput<SimulatePrincipalPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SimulatePrincipalPolicyOutputError>
}

public struct SimulatePrincipalPolicyInputBodyMiddleware: Middleware {
    public let id: String = "SimulatePrincipalPolicyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SimulatePrincipalPolicyInput>,
                  next: H) -> Swift.Result<OperationOutput<SimulatePrincipalPolicyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SimulatePrincipalPolicyInput>
    public typealias MOutput = OperationOutput<SimulatePrincipalPolicyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SimulatePrincipalPolicyOutputError>
}

extension SimulatePrincipalPolicyInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let actionNames = actionNames {
            var actionNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ActionNames"))
            for (index0, actionnametype0) in actionNames.enumerated() {
                try actionNamesContainer.encode(actionnametype0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let callerArn = callerArn {
            try container.encode(callerArn, forKey: Key("CallerArn"))
        }
        if let contextEntries = contextEntries {
            var contextEntriesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ContextEntries"))
            for (index0, contextentry0) in contextEntries.enumerated() {
                try contextEntriesContainer.encode(contextentry0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let marker = marker {
            try container.encode(marker, forKey: Key("Marker"))
        }
        if let maxItems = maxItems {
            try container.encode(maxItems, forKey: Key("MaxItems"))
        }
        if let permissionsBoundaryPolicyInputList = permissionsBoundaryPolicyInputList {
            var permissionsBoundaryPolicyInputListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PermissionsBoundaryPolicyInputList"))
            for (index0, policydocumenttype0) in permissionsBoundaryPolicyInputList.enumerated() {
                try permissionsBoundaryPolicyInputListContainer.encode(policydocumenttype0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let policyInputList = policyInputList {
            var policyInputListContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("PolicyInputList"))
            for (index0, policydocumenttype0) in policyInputList.enumerated() {
                try policyInputListContainer.encode(policydocumenttype0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let policySourceArn = policySourceArn {
            try container.encode(policySourceArn, forKey: Key("PolicySourceArn"))
        }
        if let resourceArns = resourceArns {
            var resourceArnsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ResourceArns"))
            for (index0, resourcenametype0) in resourceArns.enumerated() {
                try resourceArnsContainer.encode(resourcenametype0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let resourceHandlingOption = resourceHandlingOption {
            try container.encode(resourceHandlingOption, forKey: Key("ResourceHandlingOption"))
        }
        if let resourceOwner = resourceOwner {
            try container.encode(resourceOwner, forKey: Key("ResourceOwner"))
        }
        if let resourcePolicy = resourcePolicy {
            try container.encode(resourcePolicy, forKey: Key("ResourcePolicy"))
        }
        try container.encode("SimulatePrincipalPolicy", forKey:Key("Action"))
        try container.encode("2010-05-08", forKey:Key("Version"))
    }
}
