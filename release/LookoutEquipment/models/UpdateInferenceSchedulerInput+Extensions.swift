// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct UpdateInferenceSchedulerInputHeadersMiddleware: Middleware {
    public let id: String = "UpdateInferenceSchedulerInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateInferenceSchedulerInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateInferenceSchedulerInput>
    public typealias MOutput = OperationOutput<UpdateInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateInferenceSchedulerOutputError>
}

public struct UpdateInferenceSchedulerInputQueryItemMiddleware: Middleware {
    public let id: String = "UpdateInferenceSchedulerInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateInferenceSchedulerInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateInferenceSchedulerInput>
    public typealias MOutput = OperationOutput<UpdateInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateInferenceSchedulerOutputError>
}

public struct UpdateInferenceSchedulerInputBodyMiddleware: Middleware {
    public let id: String = "UpdateInferenceSchedulerInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<UpdateInferenceSchedulerInput>,
                  next: H) -> Swift.Result<OperationOutput<UpdateInferenceSchedulerOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<UpdateInferenceSchedulerInput>
    public typealias MOutput = OperationOutput<UpdateInferenceSchedulerOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<UpdateInferenceSchedulerOutputError>
}

extension UpdateInferenceSchedulerInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case dataDelayOffsetInMinutes = "DataDelayOffsetInMinutes"
        case dataInputConfiguration = "DataInputConfiguration"
        case dataOutputConfiguration = "DataOutputConfiguration"
        case dataUploadFrequency = "DataUploadFrequency"
        case inferenceSchedulerName = "InferenceSchedulerName"
        case roleArn = "RoleArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataDelayOffsetInMinutes = dataDelayOffsetInMinutes {
            try encodeContainer.encode(dataDelayOffsetInMinutes, forKey: .dataDelayOffsetInMinutes)
        }
        if let dataInputConfiguration = dataInputConfiguration {
            try encodeContainer.encode(dataInputConfiguration, forKey: .dataInputConfiguration)
        }
        if let dataOutputConfiguration = dataOutputConfiguration {
            try encodeContainer.encode(dataOutputConfiguration, forKey: .dataOutputConfiguration)
        }
        if let dataUploadFrequency = dataUploadFrequency {
            try encodeContainer.encode(dataUploadFrequency.rawValue, forKey: .dataUploadFrequency)
        }
        if let inferenceSchedulerName = inferenceSchedulerName {
            try encodeContainer.encode(inferenceSchedulerName, forKey: .inferenceSchedulerName)
        }
        if let roleArn = roleArn {
            try encodeContainer.encode(roleArn, forKey: .roleArn)
        }
    }
}
