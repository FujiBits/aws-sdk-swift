// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct IssueCertificateInputHeadersMiddleware: Middleware {
    public let id: String = "IssueCertificateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IssueCertificateInput>,
                  next: H) -> Swift.Result<OperationOutput<IssueCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IssueCertificateInput>
    public typealias MOutput = OperationOutput<IssueCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IssueCertificateOutputError>
}

public struct IssueCertificateInputQueryItemMiddleware: Middleware {
    public let id: String = "IssueCertificateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IssueCertificateInput>,
                  next: H) -> Swift.Result<OperationOutput<IssueCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IssueCertificateInput>
    public typealias MOutput = OperationOutput<IssueCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IssueCertificateOutputError>
}

public struct IssueCertificateInputBodyMiddleware: Middleware {
    public let id: String = "IssueCertificateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<IssueCertificateInput>,
                  next: H) -> Swift.Result<OperationOutput<IssueCertificateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<IssueCertificateInput>
    public typealias MOutput = OperationOutput<IssueCertificateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<IssueCertificateOutputError>
}

extension IssueCertificateInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case apiPassthrough = "ApiPassthrough"
        case certificateAuthorityArn = "CertificateAuthorityArn"
        case csr = "Csr"
        case idempotencyToken = "IdempotencyToken"
        case signingAlgorithm = "SigningAlgorithm"
        case templateArn = "TemplateArn"
        case validity = "Validity"
        case validityNotBefore = "ValidityNotBefore"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let apiPassthrough = apiPassthrough {
            try encodeContainer.encode(apiPassthrough, forKey: .apiPassthrough)
        }
        if let certificateAuthorityArn = certificateAuthorityArn {
            try encodeContainer.encode(certificateAuthorityArn, forKey: .certificateAuthorityArn)
        }
        if let csr = csr {
            try encodeContainer.encode(csr.base64EncodedString(), forKey: .csr)
        }
        if let idempotencyToken = idempotencyToken {
            try encodeContainer.encode(idempotencyToken, forKey: .idempotencyToken)
        }
        if let signingAlgorithm = signingAlgorithm {
            try encodeContainer.encode(signingAlgorithm.rawValue, forKey: .signingAlgorithm)
        }
        if let templateArn = templateArn {
            try encodeContainer.encode(templateArn, forKey: .templateArn)
        }
        if let validity = validity {
            try encodeContainer.encode(validity, forKey: .validity)
        }
        if let validityNotBefore = validityNotBefore {
            try encodeContainer.encode(validityNotBefore, forKey: .validityNotBefore)
        }
    }
}
