// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SetEndpointAttributesInputHeadersMiddleware: Middleware {
    public let id: String = "SetEndpointAttributesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetEndpointAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<SetEndpointAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetEndpointAttributesInput>
    public typealias MOutput = OperationOutput<SetEndpointAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetEndpointAttributesOutputError>
}

public struct SetEndpointAttributesInputQueryItemMiddleware: Middleware {
    public let id: String = "SetEndpointAttributesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetEndpointAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<SetEndpointAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetEndpointAttributesInput>
    public typealias MOutput = OperationOutput<SetEndpointAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetEndpointAttributesOutputError>
}

public struct SetEndpointAttributesInputBodyMiddleware: Middleware {
    public let id: String = "SetEndpointAttributesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SetEndpointAttributesInput>,
                  next: H) -> Swift.Result<OperationOutput<SetEndpointAttributesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SetEndpointAttributesInput>
    public typealias MOutput = OperationOutput<SetEndpointAttributesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SetEndpointAttributesOutputError>
}

extension SetEndpointAttributesInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let attributes = attributes {
            var attributesContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Attributes"))
            for (index0, element0) in attributes.sorted(by: { $0.key < $1.key }).enumerated() {
                let stringKey0 = element0.key
                let stringValue0 = element0.value
                var entryContainer0 = attributesContainer.nestedContainer(keyedBy: Key.self, forKey: Key("entry.\(index0.advanced(by: 1))"))
                var keyContainer0 = entryContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("key"))
                try keyContainer0.encode(stringKey0, forKey: Key(""))
                var valueContainer0 = entryContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("value"))
                try valueContainer0.encode(stringValue0, forKey: Key(""))
            }
        }
        if let endpointArn = endpointArn {
            try container.encode(endpointArn, forKey: Key("EndpointArn"))
        }
        try container.encode("SetEndpointAttributes", forKey:Key("Action"))
        try container.encode("2010-03-31", forKey:Key("Version"))
    }
}
