// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct DescribeEventAggregatesOutputResponseBody: Equatable {
    public let eventAggregates: [EventAggregate]?
    public let nextToken: String?
}

extension DescribeEventAggregatesOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case eventAggregates
        case nextToken
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let eventAggregatesContainer = try containerValues.decodeIfPresent([EventAggregate?].self, forKey: .eventAggregates)
        var eventAggregatesDecoded0:[EventAggregate]? = nil
        if let eventAggregatesContainer = eventAggregatesContainer {
            eventAggregatesDecoded0 = [EventAggregate]()
            for structure0 in eventAggregatesContainer {
                if let structure0 = structure0 {
                    eventAggregatesDecoded0?.append(structure0)
                }
            }
        }
        eventAggregates = eventAggregatesDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
