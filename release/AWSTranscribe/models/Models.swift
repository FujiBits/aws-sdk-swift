// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension TranscribeClientTypes.AbsoluteTimeRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime = "EndTime"
        case first = "First"
        case last = "Last"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime, forKey: .endTime)
        }
        if let first = first {
            try encodeContainer.encode(first, forKey: .first)
        }
        if let last = last {
            try encodeContainer.encode(last, forKey: .last)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endTime)
        endTime = endTimeDecoded
        let firstDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .first)
        first = firstDecoded
        let lastDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .last)
        last = lastDecoded
    }
}

extension TranscribeClientTypes.AbsoluteTimeRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AbsoluteTimeRange(endTime: \(Swift.String(describing: endTime)), first: \(Swift.String(describing: first)), last: \(Swift.String(describing: last)), startTime: \(Swift.String(describing: startTime)))"}
}

extension TranscribeClientTypes {
    /// A time range, set in seconds, between two points in the call.
    public struct AbsoluteTimeRange: Swift.Equatable {
        /// A value that indicates the end of the time range in milliseconds. To set absolute time range, you must specify a start time and an end time. For example, if you specify the following values:
        ///
        /// * StartTime - 10000
        ///
        /// * Endtime - 50000
        ///
        ///
        /// The time range is set between 10,000 milliseconds and 50,000 milliseconds into the call.
        public var endTime: Swift.Int?
        /// A time range from the beginning of the call to the value that you've specified. For example, if you specify 100000, the time range is set to the first 100,000 milliseconds of the call.
        public var first: Swift.Int?
        /// A time range from the value that you've specified to the end of the call. For example, if you specify 100000, the time range is set to the last 100,000 milliseconds of the call.
        public var last: Swift.Int?
        /// A value that indicates the beginning of the time range in seconds. To set absolute time range, you must specify a start time and an end time. For example, if you specify the following values:
        ///
        /// * StartTime - 10000
        ///
        /// * Endtime - 50000
        ///
        ///
        /// The time range is set between 10,000 milliseconds and 50,000 milliseconds into the call.
        public var startTime: Swift.Int?

        public init (
            endTime: Swift.Int? = nil,
            first: Swift.Int? = nil,
            last: Swift.Int? = nil,
            startTime: Swift.Int? = nil
        )
        {
            self.endTime = endTime
            self.first = first
            self.last = last
            self.startTime = startTime
        }
    }

}

extension BadRequestException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "BadRequestException(message: \(Swift.String(describing: message)))"}
}

extension BadRequestException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: BadRequestExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Your request didn't pass one or more validation tests. For example, if the entity that you're trying to delete doesn't exist or if it is in a non-terminal state (for example, it's "in progress"). See the exception Message field for more information.
public struct BadRequestException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct BadRequestExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension BadRequestExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TranscribeClientTypes {
    public enum BaseModelName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case narrowBand
        case wideBand
        case sdkUnknown(Swift.String)

        public static var allCases: [BaseModelName] {
            return [
                .narrowBand,
                .wideBand,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .narrowBand: return "NarrowBand"
            case .wideBand: return "WideBand"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = BaseModelName(rawValue: rawValue) ?? BaseModelName.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes {
    public enum CLMLanguageCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case enAu
        case enGb
        case enUs
        case esUs
        case hiIn
        case sdkUnknown(Swift.String)

        public static var allCases: [CLMLanguageCode] {
            return [
                .enAu,
                .enGb,
                .enUs,
                .esUs,
                .hiIn,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .enAu: return "en-AU"
            case .enGb: return "en-GB"
            case .enUs: return "en-US"
            case .esUs: return "es-US"
            case .hiIn: return "hi-IN"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CLMLanguageCode(rawValue: rawValue) ?? CLMLanguageCode.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes.CallAnalyticsJob: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAnalyticsJobName = "CallAnalyticsJobName"
        case callAnalyticsJobStatus = "CallAnalyticsJobStatus"
        case channelDefinitions = "ChannelDefinitions"
        case completionTime = "CompletionTime"
        case creationTime = "CreationTime"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case failureReason = "FailureReason"
        case identifiedLanguageScore = "IdentifiedLanguageScore"
        case languageCode = "LanguageCode"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case settings = "Settings"
        case startTime = "StartTime"
        case transcript = "Transcript"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let callAnalyticsJobName = callAnalyticsJobName {
            try encodeContainer.encode(callAnalyticsJobName, forKey: .callAnalyticsJobName)
        }
        if let callAnalyticsJobStatus = callAnalyticsJobStatus {
            try encodeContainer.encode(callAnalyticsJobStatus.rawValue, forKey: .callAnalyticsJobStatus)
        }
        if let channelDefinitions = channelDefinitions {
            var channelDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .channelDefinitions)
            for channeldefinitions0 in channelDefinitions {
                try channelDefinitionsContainer.encode(channeldefinitions0)
            }
        }
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let dataAccessRoleArn = dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let identifiedLanguageScore = identifiedLanguageScore {
            try encodeContainer.encode(identifiedLanguageScore, forKey: .identifiedLanguageScore)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let media = media {
            try encodeContainer.encode(media, forKey: .media)
        }
        if let mediaFormat = mediaFormat {
            try encodeContainer.encode(mediaFormat.rawValue, forKey: .mediaFormat)
        }
        if let mediaSampleRateHertz = mediaSampleRateHertz {
            try encodeContainer.encode(mediaSampleRateHertz, forKey: .mediaSampleRateHertz)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let transcript = transcript {
            try encodeContainer.encode(transcript, forKey: .transcript)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let callAnalyticsJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callAnalyticsJobName)
        callAnalyticsJobName = callAnalyticsJobNameDecoded
        let callAnalyticsJobStatusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.CallAnalyticsJobStatus.self, forKey: .callAnalyticsJobStatus)
        callAnalyticsJobStatus = callAnalyticsJobStatusDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let mediaSampleRateHertzDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mediaSampleRateHertz)
        mediaSampleRateHertz = mediaSampleRateHertzDecoded
        let mediaFormatDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MediaFormat.self, forKey: .mediaFormat)
        mediaFormat = mediaFormatDecoded
        let mediaDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Media.self, forKey: .media)
        media = mediaDecoded
        let transcriptDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Transcript.self, forKey: .transcript)
        transcript = transcriptDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let identifiedLanguageScoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .identifiedLanguageScore)
        identifiedLanguageScore = identifiedLanguageScoreDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.CallAnalyticsJobSettings.self, forKey: .settings)
        settings = settingsDecoded
        let channelDefinitionsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.ChannelDefinition?].self, forKey: .channelDefinitions)
        var channelDefinitionsDecoded0:[TranscribeClientTypes.ChannelDefinition]? = nil
        if let channelDefinitionsContainer = channelDefinitionsContainer {
            channelDefinitionsDecoded0 = [TranscribeClientTypes.ChannelDefinition]()
            for structure0 in channelDefinitionsContainer {
                if let structure0 = structure0 {
                    channelDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        channelDefinitions = channelDefinitionsDecoded0
    }
}

extension TranscribeClientTypes.CallAnalyticsJob: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CallAnalyticsJob(callAnalyticsJobName: \(Swift.String(describing: callAnalyticsJobName)), callAnalyticsJobStatus: \(Swift.String(describing: callAnalyticsJobStatus)), channelDefinitions: \(Swift.String(describing: channelDefinitions)), completionTime: \(Swift.String(describing: completionTime)), creationTime: \(Swift.String(describing: creationTime)), dataAccessRoleArn: \(Swift.String(describing: dataAccessRoleArn)), failureReason: \(Swift.String(describing: failureReason)), identifiedLanguageScore: \(Swift.String(describing: identifiedLanguageScore)), languageCode: \(Swift.String(describing: languageCode)), media: \(Swift.String(describing: media)), mediaFormat: \(Swift.String(describing: mediaFormat)), mediaSampleRateHertz: \(Swift.String(describing: mediaSampleRateHertz)), settings: \(Swift.String(describing: settings)), startTime: \(Swift.String(describing: startTime)), transcript: \(Swift.String(describing: transcript)))"}
}

extension TranscribeClientTypes {
    /// Describes an asynchronous analytics job that was created with the StartAnalyticsJob operation.
    public struct CallAnalyticsJob: Swift.Equatable {
        /// The name of the call analytics job.
        public var callAnalyticsJobName: Swift.String?
        /// The status of the analytics job.
        public var callAnalyticsJobStatus: TranscribeClientTypes.CallAnalyticsJobStatus?
        /// Shows numeric values to indicate the channel assigned to the agent's audio and the channel assigned to the customer's audio.
        public var channelDefinitions: [TranscribeClientTypes.ChannelDefinition]?
        /// A timestamp that shows when the analytics job was completed.
        public var completionTime: ClientRuntime.Date?
        /// A timestamp that shows when the analytics job was created.
        public var creationTime: ClientRuntime.Date?
        /// The Amazon Resource Number (ARN) that you use to access the analytics job. ARNs have the format arn:partition:service:region:account-id:resource-type/resource-id.
        public var dataAccessRoleArn: Swift.String?
        /// If the AnalyticsJobStatus is FAILED, this field contains information about why the job failed. The FailureReason field can contain one of the following values:
        ///
        /// * Unsupported media format: The media format specified in the MediaFormat field of the request isn't valid. See the description of the MediaFormat field for a list of valid values.
        ///
        /// * The media format provided does not match the detected media format: The media format of the audio file doesn't match the format specified in the MediaFormat field in the request. Check the media format of your media file and make sure the two values match.
        ///
        /// * Invalid sample rate for audio file: The sample rate specified in the MediaSampleRateHertz of the request isn't valid. The sample rate must be between 8,000 and 48,000 Hertz.
        ///
        /// * The sample rate provided does not match the detected sample rate: The sample rate in the audio file doesn't match the sample rate specified in the MediaSampleRateHertz field in the request. Check the sample rate of your media file and make sure that the two values match.
        ///
        /// * Invalid file size: file size too large: The size of your audio file is larger than what Amazon Transcribe Medical can process. For more information, see Guidelines and Quotas in the Amazon Transcribe Medical Guide.
        ///
        /// * Invalid number of channels: number of channels too large: Your audio contains more channels than Amazon Transcribe Medical is configured to process. To request additional channels, see Amazon Transcribe Medical Endpoints and Quotas in the [Amazon Web Services General Reference](https://docs.aws.amazon.com/general/latest/gr/Welcome.html).
        public var failureReason: Swift.String?
        /// A value between zero and one that Amazon Transcribe assigned to the language that it identified in the source audio. This value appears only when you don't provide a single language code. Larger values indicate that Amazon Transcribe has higher confidence in the language that it identified
        public var identifiedLanguageScore: Swift.Float?
        /// If you know the language spoken between the customer and the agent, specify a language code for this field. If you don't know the language, you can leave this field blank, and Amazon Transcribe will use machine learning to automatically identify the language. To improve the accuracy of language identification, you can provide an array containing the possible language codes for the language spoken in your audio. Refer to [Supported languages and language-specific features](https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works.html) for additional information.
        public var languageCode: TranscribeClientTypes.LanguageCode?
        /// Describes the input media file in a transcription request.
        public var media: TranscribeClientTypes.Media?
        /// The format of the input audio file. Note: for call analytics jobs, only the following media formats are supported: MP3, MP4, WAV, FLAC, OGG, and WebM.
        public var mediaFormat: TranscribeClientTypes.MediaFormat?
        /// The sample rate, in Hertz, of the audio.
        public var mediaSampleRateHertz: Swift.Int?
        /// Provides information about the settings used to run a transcription job.
        public var settings: TranscribeClientTypes.CallAnalyticsJobSettings?
        /// A timestamp that shows when the analytics job started processing.
        public var startTime: ClientRuntime.Date?
        /// Identifies the location of a transcription.
        public var transcript: TranscribeClientTypes.Transcript?

        public init (
            callAnalyticsJobName: Swift.String? = nil,
            callAnalyticsJobStatus: TranscribeClientTypes.CallAnalyticsJobStatus? = nil,
            channelDefinitions: [TranscribeClientTypes.ChannelDefinition]? = nil,
            completionTime: ClientRuntime.Date? = nil,
            creationTime: ClientRuntime.Date? = nil,
            dataAccessRoleArn: Swift.String? = nil,
            failureReason: Swift.String? = nil,
            identifiedLanguageScore: Swift.Float? = nil,
            languageCode: TranscribeClientTypes.LanguageCode? = nil,
            media: TranscribeClientTypes.Media? = nil,
            mediaFormat: TranscribeClientTypes.MediaFormat? = nil,
            mediaSampleRateHertz: Swift.Int? = nil,
            settings: TranscribeClientTypes.CallAnalyticsJobSettings? = nil,
            startTime: ClientRuntime.Date? = nil,
            transcript: TranscribeClientTypes.Transcript? = nil
        )
        {
            self.callAnalyticsJobName = callAnalyticsJobName
            self.callAnalyticsJobStatus = callAnalyticsJobStatus
            self.channelDefinitions = channelDefinitions
            self.completionTime = completionTime
            self.creationTime = creationTime
            self.dataAccessRoleArn = dataAccessRoleArn
            self.failureReason = failureReason
            self.identifiedLanguageScore = identifiedLanguageScore
            self.languageCode = languageCode
            self.media = media
            self.mediaFormat = mediaFormat
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.settings = settings
            self.startTime = startTime
            self.transcript = transcript
        }
    }

}

extension TranscribeClientTypes.CallAnalyticsJobSettings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentRedaction = "ContentRedaction"
        case languageIdSettings = "LanguageIdSettings"
        case languageModelName = "LanguageModelName"
        case languageOptions = "LanguageOptions"
        case vocabularyFilterMethod = "VocabularyFilterMethod"
        case vocabularyFilterName = "VocabularyFilterName"
        case vocabularyName = "VocabularyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentRedaction = contentRedaction {
            try encodeContainer.encode(contentRedaction, forKey: .contentRedaction)
        }
        if let languageIdSettings = languageIdSettings {
            var languageIdSettingsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .languageIdSettings)
            for (dictKey0, languageidsettingsmap0) in languageIdSettings {
                try languageIdSettingsContainer.encode(languageidsettingsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let languageModelName = languageModelName {
            try encodeContainer.encode(languageModelName, forKey: .languageModelName)
        }
        if let languageOptions = languageOptions {
            var languageOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .languageOptions)
            for languageoptions0 in languageOptions {
                try languageOptionsContainer.encode(languageoptions0.rawValue)
            }
        }
        if let vocabularyFilterMethod = vocabularyFilterMethod {
            try encodeContainer.encode(vocabularyFilterMethod.rawValue, forKey: .vocabularyFilterMethod)
        }
        if let vocabularyFilterName = vocabularyFilterName {
            try encodeContainer.encode(vocabularyFilterName, forKey: .vocabularyFilterName)
        }
        if let vocabularyName = vocabularyName {
            try encodeContainer.encode(vocabularyName, forKey: .vocabularyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let vocabularyFilterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyFilterName)
        vocabularyFilterName = vocabularyFilterNameDecoded
        let vocabularyFilterMethodDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.VocabularyFilterMethod.self, forKey: .vocabularyFilterMethod)
        vocabularyFilterMethod = vocabularyFilterMethodDecoded
        let languageModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageModelName)
        languageModelName = languageModelNameDecoded
        let contentRedactionDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ContentRedaction.self, forKey: .contentRedaction)
        contentRedaction = contentRedactionDecoded
        let languageOptionsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.LanguageCode?].self, forKey: .languageOptions)
        var languageOptionsDecoded0:[TranscribeClientTypes.LanguageCode]? = nil
        if let languageOptionsContainer = languageOptionsContainer {
            languageOptionsDecoded0 = [TranscribeClientTypes.LanguageCode]()
            for string0 in languageOptionsContainer {
                if let string0 = string0 {
                    languageOptionsDecoded0?.append(string0)
                }
            }
        }
        languageOptions = languageOptionsDecoded0
        let languageIdSettingsContainer = try containerValues.decodeIfPresent([Swift.String: TranscribeClientTypes.LanguageIdSettings?].self, forKey: .languageIdSettings)
        var languageIdSettingsDecoded0: [Swift.String:TranscribeClientTypes.LanguageIdSettings]? = nil
        if let languageIdSettingsContainer = languageIdSettingsContainer {
            languageIdSettingsDecoded0 = [Swift.String:TranscribeClientTypes.LanguageIdSettings]()
            for (key0, languageidsettings0) in languageIdSettingsContainer {
                if let languageidsettings0 = languageidsettings0 {
                    languageIdSettingsDecoded0?[key0] = languageidsettings0
                }
            }
        }
        languageIdSettings = languageIdSettingsDecoded0
    }
}

extension TranscribeClientTypes.CallAnalyticsJobSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CallAnalyticsJobSettings(contentRedaction: \(Swift.String(describing: contentRedaction)), languageIdSettings: \(Swift.String(describing: languageIdSettings)), languageModelName: \(Swift.String(describing: languageModelName)), languageOptions: \(Swift.String(describing: languageOptions)), vocabularyFilterMethod: \(Swift.String(describing: vocabularyFilterMethod)), vocabularyFilterName: \(Swift.String(describing: vocabularyFilterName)), vocabularyName: \(Swift.String(describing: vocabularyName)))"}
}

extension TranscribeClientTypes {
    /// Provides optional settings for the CallAnalyticsJob operation.
    public struct CallAnalyticsJobSettings: Swift.Equatable {
        /// Settings for content redaction within a transcription job.
        public var contentRedaction: TranscribeClientTypes.ContentRedaction?
        /// The language identification settings associated with your call analytics job. These settings include VocabularyName, VocabularyFilterName, and LanguageModelName.
        public var languageIdSettings: [Swift.String:TranscribeClientTypes.LanguageIdSettings]?
        /// The structure used to describe a custom language model.
        public var languageModelName: Swift.String?
        /// When you run a call analytics job, you can specify the language spoken in the audio, or you can have Amazon Transcribe identify the language for you. To specify a language, specify an array with one language code. If you don't know the language, you can leave this field blank and Amazon Transcribe will use machine learning to identify the language for you. To improve the ability of Amazon Transcribe to correctly identify the language, you can provide an array of the languages that can be present in the audio. Refer to [Supported languages and language-specific features](https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works.html) for additional information.
        public var languageOptions: [TranscribeClientTypes.LanguageCode]?
        /// Set to mask to remove filtered text from the transcript and replace it with three asterisks ("***") as placeholder text. Set to remove to remove filtered text from the transcript without using placeholder text. Set to tag to mark the word in the transcription output that matches the vocabulary filter. When you set the filter method to tag, the words matching your vocabulary filter are not masked or removed.
        public var vocabularyFilterMethod: TranscribeClientTypes.VocabularyFilterMethod?
        /// The name of the vocabulary filter to use when running a call analytics job. The filter that you specify must have the same language code as the analytics job.
        public var vocabularyFilterName: Swift.String?
        /// The name of a vocabulary to use when processing the call analytics job.
        public var vocabularyName: Swift.String?

        public init (
            contentRedaction: TranscribeClientTypes.ContentRedaction? = nil,
            languageIdSettings: [Swift.String:TranscribeClientTypes.LanguageIdSettings]? = nil,
            languageModelName: Swift.String? = nil,
            languageOptions: [TranscribeClientTypes.LanguageCode]? = nil,
            vocabularyFilterMethod: TranscribeClientTypes.VocabularyFilterMethod? = nil,
            vocabularyFilterName: Swift.String? = nil,
            vocabularyName: Swift.String? = nil
        )
        {
            self.contentRedaction = contentRedaction
            self.languageIdSettings = languageIdSettings
            self.languageModelName = languageModelName
            self.languageOptions = languageOptions
            self.vocabularyFilterMethod = vocabularyFilterMethod
            self.vocabularyFilterName = vocabularyFilterName
            self.vocabularyName = vocabularyName
        }
    }

}

extension TranscribeClientTypes {
    public enum CallAnalyticsJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case queued
        case sdkUnknown(Swift.String)

        public static var allCases: [CallAnalyticsJobStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .queued,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .queued: return "QUEUED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = CallAnalyticsJobStatus(rawValue: rawValue) ?? CallAnalyticsJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes.CallAnalyticsJobSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAnalyticsJobName = "CallAnalyticsJobName"
        case callAnalyticsJobStatus = "CallAnalyticsJobStatus"
        case completionTime = "CompletionTime"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case startTime = "StartTime"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let callAnalyticsJobName = callAnalyticsJobName {
            try encodeContainer.encode(callAnalyticsJobName, forKey: .callAnalyticsJobName)
        }
        if let callAnalyticsJobStatus = callAnalyticsJobStatus {
            try encodeContainer.encode(callAnalyticsJobStatus.rawValue, forKey: .callAnalyticsJobStatus)
        }
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let callAnalyticsJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .callAnalyticsJobName)
        callAnalyticsJobName = callAnalyticsJobNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let callAnalyticsJobStatusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.CallAnalyticsJobStatus.self, forKey: .callAnalyticsJobStatus)
        callAnalyticsJobStatus = callAnalyticsJobStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension TranscribeClientTypes.CallAnalyticsJobSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CallAnalyticsJobSummary(callAnalyticsJobName: \(Swift.String(describing: callAnalyticsJobName)), callAnalyticsJobStatus: \(Swift.String(describing: callAnalyticsJobStatus)), completionTime: \(Swift.String(describing: completionTime)), creationTime: \(Swift.String(describing: creationTime)), failureReason: \(Swift.String(describing: failureReason)), languageCode: \(Swift.String(describing: languageCode)), startTime: \(Swift.String(describing: startTime)))"}
}

extension TranscribeClientTypes {
    /// Provides summary information about a call analytics job.
    public struct CallAnalyticsJobSummary: Swift.Equatable {
        /// The name of the call analytics job.
        public var callAnalyticsJobName: Swift.String?
        /// The status of the call analytics job.
        public var callAnalyticsJobStatus: TranscribeClientTypes.CallAnalyticsJobStatus?
        /// A timestamp that shows when the job was completed.
        public var completionTime: ClientRuntime.Date?
        /// A timestamp that shows when the call analytics job was created.
        public var creationTime: ClientRuntime.Date?
        /// If the CallAnalyticsJobStatus is FAILED, a description of the error.
        public var failureReason: Swift.String?
        /// The language of the transcript in the source audio file.
        public var languageCode: TranscribeClientTypes.LanguageCode?
        /// A timestamp that shows when the job began processing.
        public var startTime: ClientRuntime.Date?

        public init (
            callAnalyticsJobName: Swift.String? = nil,
            callAnalyticsJobStatus: TranscribeClientTypes.CallAnalyticsJobStatus? = nil,
            completionTime: ClientRuntime.Date? = nil,
            creationTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            languageCode: TranscribeClientTypes.LanguageCode? = nil,
            startTime: ClientRuntime.Date? = nil
        )
        {
            self.callAnalyticsJobName = callAnalyticsJobName
            self.callAnalyticsJobStatus = callAnalyticsJobStatus
            self.completionTime = completionTime
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.startTime = startTime
        }
    }

}

extension TranscribeClientTypes.CategoryProperties: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case categoryName = "CategoryName"
        case createTime = "CreateTime"
        case lastUpdateTime = "LastUpdateTime"
        case rules = "Rules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let categoryName = categoryName {
            try encodeContainer.encode(categoryName, forKey: .categoryName)
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let lastUpdateTime = lastUpdateTime {
            try encodeContainer.encode(lastUpdateTime.timeIntervalSince1970, forKey: .lastUpdateTime)
        }
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rulelist0 in rules {
                try rulesContainer.encode(rulelist0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .categoryName)
        categoryName = categoryNameDecoded
        let rulesContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[TranscribeClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [TranscribeClientTypes.Rule]()
            for union0 in rulesContainer {
                if let union0 = union0 {
                    rulesDecoded0?.append(union0)
                }
            }
        }
        rules = rulesDecoded0
        let createTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let lastUpdateTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdateTime)
        lastUpdateTime = lastUpdateTimeDecoded
    }
}

extension TranscribeClientTypes.CategoryProperties: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CategoryProperties(categoryName: \(Swift.String(describing: categoryName)), createTime: \(Swift.String(describing: createTime)), lastUpdateTime: \(Swift.String(describing: lastUpdateTime)), rules: \(Swift.String(describing: rules)))"}
}

extension TranscribeClientTypes {
    /// An object that contains the rules and additional information about a call analytics category.
    public struct CategoryProperties: Swift.Equatable {
        /// The name of the call analytics category.
        public var categoryName: Swift.String?
        /// A timestamp that shows when the call analytics category was created.
        public var createTime: ClientRuntime.Date?
        /// A timestamp that shows when the call analytics category was most recently updated.
        public var lastUpdateTime: ClientRuntime.Date?
        /// The rules used to create a call analytics category.
        public var rules: [TranscribeClientTypes.Rule]?

        public init (
            categoryName: Swift.String? = nil,
            createTime: ClientRuntime.Date? = nil,
            lastUpdateTime: ClientRuntime.Date? = nil,
            rules: [TranscribeClientTypes.Rule]? = nil
        )
        {
            self.categoryName = categoryName
            self.createTime = createTime
            self.lastUpdateTime = lastUpdateTime
            self.rules = rules
        }
    }

}

extension TranscribeClientTypes.ChannelDefinition: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelId = "ChannelId"
        case participantRole = "ParticipantRole"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if channelId != 0 {
            try encodeContainer.encode(channelId, forKey: .channelId)
        }
        if let participantRole = participantRole {
            try encodeContainer.encode(participantRole.rawValue, forKey: .participantRole)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let channelIdDecoded = try containerValues.decode(Swift.Int.self, forKey: .channelId)
        channelId = channelIdDecoded
        let participantRoleDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ParticipantRole.self, forKey: .participantRole)
        participantRole = participantRoleDecoded
    }
}

extension TranscribeClientTypes.ChannelDefinition: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ChannelDefinition(channelId: \(Swift.String(describing: channelId)), participantRole: \(Swift.String(describing: participantRole)))"}
}

extension TranscribeClientTypes {
    /// For a call analytics job, an object that indicates the audio channel that belongs to the agent and the audio channel that belongs to the customer.
    public struct ChannelDefinition: Swift.Equatable {
        /// A value that indicates the audio channel.
        public var channelId: Swift.Int
        /// Indicates whether the person speaking on the audio channel is the agent or customer.
        public var participantRole: TranscribeClientTypes.ParticipantRole?

        public init (
            channelId: Swift.Int = 0,
            participantRole: TranscribeClientTypes.ParticipantRole? = nil
        )
        {
            self.channelId = channelId
            self.participantRole = participantRole
        }
    }

}

extension ConflictException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ConflictException(message: \(Swift.String(describing: message)))"}
}

extension ConflictException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ConflictExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There is already a resource with that name.
public struct ConflictException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ConflictExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ConflictExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TranscribeClientTypes.ContentRedaction: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case redactionOutput = "RedactionOutput"
        case redactionType = "RedactionType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let redactionOutput = redactionOutput {
            try encodeContainer.encode(redactionOutput.rawValue, forKey: .redactionOutput)
        }
        if let redactionType = redactionType {
            try encodeContainer.encode(redactionType.rawValue, forKey: .redactionType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let redactionTypeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.RedactionType.self, forKey: .redactionType)
        redactionType = redactionTypeDecoded
        let redactionOutputDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.RedactionOutput.self, forKey: .redactionOutput)
        redactionOutput = redactionOutputDecoded
    }
}

extension TranscribeClientTypes.ContentRedaction: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ContentRedaction(redactionOutput: \(Swift.String(describing: redactionOutput)), redactionType: \(Swift.String(describing: redactionType)))"}
}

extension TranscribeClientTypes {
    /// Settings for content redaction within a transcription job.
    public struct ContentRedaction: Swift.Equatable {
        /// The output transcript file stored in either the default S3 bucket or in a bucket you specify. When you choose redacted Amazon Transcribe outputs only the redacted transcript. When you choose redacted_and_unredacted Amazon Transcribe outputs both the redacted and unredacted transcripts.
        /// This member is required.
        public var redactionOutput: TranscribeClientTypes.RedactionOutput?
        /// Request parameter that defines the entities to be redacted. The only accepted value is PII.
        /// This member is required.
        public var redactionType: TranscribeClientTypes.RedactionType?

        public init (
            redactionOutput: TranscribeClientTypes.RedactionOutput? = nil,
            redactionType: TranscribeClientTypes.RedactionType? = nil
        )
        {
            self.redactionOutput = redactionOutput
            self.redactionType = redactionType
        }
    }

}

public struct CreateCallAnalyticsCategoryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCallAnalyticsCategoryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCallAnalyticsCategoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCallAnalyticsCategoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCallAnalyticsCategoryOutputError>
}

extension CreateCallAnalyticsCategoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCallAnalyticsCategoryInput(categoryName: \(Swift.String(describing: categoryName)), rules: \(Swift.String(describing: rules)))"}
}

extension CreateCallAnalyticsCategoryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rulelist0 in rules {
                try rulesContainer.encode(rulelist0)
            }
        }
    }
}

public struct CreateCallAnalyticsCategoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCallAnalyticsCategoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCallAnalyticsCategoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCallAnalyticsCategoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCallAnalyticsCategoryOutputError>
}

public struct CreateCallAnalyticsCategoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCallAnalyticsCategoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateCallAnalyticsCategoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateCallAnalyticsCategoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCallAnalyticsCategoryOutputError>
}

public struct CreateCallAnalyticsCategoryInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCallAnalyticsCategoryInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateCallAnalyticsCategoryInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateCallAnalyticsCategoryInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCallAnalyticsCategoryOutputError>
}

public struct CreateCallAnalyticsCategoryInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateCallAnalyticsCategoryInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateCallAnalyticsCategoryInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateCallAnalyticsCategoryInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateCallAnalyticsCategoryOutputError>
}

public struct CreateCallAnalyticsCategoryInput: Swift.Equatable {
    /// The name that you choose for your category when you create it.
    /// This member is required.
    public var categoryName: Swift.String?
    /// To create a category, you must specify between 1 and 20 rules. For each rule, you specify a filter to be applied to the attributes of the call. For example, you can specify a sentiment filter to detect if the customer's sentiment was negative or neutral.
    /// This member is required.
    public var rules: [TranscribeClientTypes.Rule]?

    public init (
        categoryName: Swift.String? = nil,
        rules: [TranscribeClientTypes.Rule]? = nil
    )
    {
        self.categoryName = categoryName
        self.rules = rules
    }
}

struct CreateCallAnalyticsCategoryInputBody: Swift.Equatable {
    public let rules: [TranscribeClientTypes.Rule]?
}

extension CreateCallAnalyticsCategoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rulesContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[TranscribeClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [TranscribeClientTypes.Rule]()
            for union0 in rulesContainer {
                if let union0 = union0 {
                    rulesDecoded0?.append(union0)
                }
            }
        }
        rules = rulesDecoded0
    }
}

extension CreateCallAnalyticsCategoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateCallAnalyticsCategoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateCallAnalyticsCategoryOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateCallAnalyticsCategoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateCallAnalyticsCategoryOutputResponse(categoryProperties: \(Swift.String(describing: categoryProperties)))"}
}

extension CreateCallAnalyticsCategoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateCallAnalyticsCategoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.categoryProperties = output.categoryProperties
        } else {
            self.categoryProperties = nil
        }
    }
}

public struct CreateCallAnalyticsCategoryOutputResponse: Swift.Equatable {
    /// The rules and associated metadata used to create a category.
    public var categoryProperties: TranscribeClientTypes.CategoryProperties?

    public init (
        categoryProperties: TranscribeClientTypes.CategoryProperties? = nil
    )
    {
        self.categoryProperties = categoryProperties
    }
}

struct CreateCallAnalyticsCategoryOutputResponseBody: Swift.Equatable {
    public let categoryProperties: TranscribeClientTypes.CategoryProperties?
}

extension CreateCallAnalyticsCategoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case categoryProperties = "CategoryProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryPropertiesDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.CategoryProperties.self, forKey: .categoryProperties)
        categoryProperties = categoryPropertiesDecoded
    }
}

public struct CreateLanguageModelInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLanguageModelInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLanguageModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLanguageModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLanguageModelOutputError>
}

extension CreateLanguageModelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLanguageModelInput(baseModelName: \(Swift.String(describing: baseModelName)), inputDataConfig: \(Swift.String(describing: inputDataConfig)), languageCode: \(Swift.String(describing: languageCode)), modelName: \(Swift.String(describing: modelName)), tags: \(Swift.String(describing: tags)))"}
}

extension CreateLanguageModelInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseModelName = "BaseModelName"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseModelName = baseModelName {
            try encodeContainer.encode(baseModelName.rawValue, forKey: .baseModelName)
        }
        if let inputDataConfig = inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct CreateLanguageModelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLanguageModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLanguageModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLanguageModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLanguageModelOutputError>
}

public struct CreateLanguageModelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLanguageModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateLanguageModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateLanguageModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLanguageModelOutputError>
}

public struct CreateLanguageModelInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLanguageModelInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateLanguageModelInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLanguageModelInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLanguageModelOutputError>
}

public struct CreateLanguageModelInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateLanguageModelInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateLanguageModelInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateLanguageModelInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateLanguageModelOutputError>
}

public struct CreateLanguageModelInput: Swift.Equatable {
    /// The Amazon Transcribe standard language model, or base model used to create your custom language model. If you want to use your custom language model to transcribe audio with a sample rate of 16,000 Hz or greater, choose Wideband. If you want to use your custom language model to transcribe audio with a sample rate that is less than 16,000 Hz, choose Narrowband.
    /// This member is required.
    public var baseModelName: TranscribeClientTypes.BaseModelName?
    /// Contains the data access role and the Amazon S3 prefixes to read the required input files to create a custom language model.
    /// This member is required.
    public var inputDataConfig: TranscribeClientTypes.InputDataConfig?
    /// The language of the input text you're using to train your custom language model.
    /// This member is required.
    public var languageCode: TranscribeClientTypes.CLMLanguageCode?
    /// The name you choose for your custom language model when you create it.
    /// This member is required.
    public var modelName: Swift.String?
    /// Adds one or more tags, each in the form of a key:value pair, to a new language model at the time you create this new model.
    public var tags: [TranscribeClientTypes.Tag]?

    public init (
        baseModelName: TranscribeClientTypes.BaseModelName? = nil,
        inputDataConfig: TranscribeClientTypes.InputDataConfig? = nil,
        languageCode: TranscribeClientTypes.CLMLanguageCode? = nil,
        modelName: Swift.String? = nil,
        tags: [TranscribeClientTypes.Tag]? = nil
    )
    {
        self.baseModelName = baseModelName
        self.inputDataConfig = inputDataConfig
        self.languageCode = languageCode
        self.modelName = modelName
        self.tags = tags
    }
}

struct CreateLanguageModelInputBody: Swift.Equatable {
    public let languageCode: TranscribeClientTypes.CLMLanguageCode?
    public let baseModelName: TranscribeClientTypes.BaseModelName?
    public let inputDataConfig: TranscribeClientTypes.InputDataConfig?
    public let tags: [TranscribeClientTypes.Tag]?
}

extension CreateLanguageModelInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseModelName = "BaseModelName"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.CLMLanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let baseModelNameDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.BaseModelName.self, forKey: .baseModelName)
        baseModelName = baseModelNameDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TranscribeClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TranscribeClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateLanguageModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateLanguageModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateLanguageModelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateLanguageModelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateLanguageModelOutputResponse(baseModelName: \(Swift.String(describing: baseModelName)), inputDataConfig: \(Swift.String(describing: inputDataConfig)), languageCode: \(Swift.String(describing: languageCode)), modelName: \(Swift.String(describing: modelName)), modelStatus: \(Swift.String(describing: modelStatus)))"}
}

extension CreateLanguageModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateLanguageModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.baseModelName = output.baseModelName
            self.inputDataConfig = output.inputDataConfig
            self.languageCode = output.languageCode
            self.modelName = output.modelName
            self.modelStatus = output.modelStatus
        } else {
            self.baseModelName = nil
            self.inputDataConfig = nil
            self.languageCode = nil
            self.modelName = nil
            self.modelStatus = nil
        }
    }
}

public struct CreateLanguageModelOutputResponse: Swift.Equatable {
    /// The Amazon Transcribe standard language model, or base model you've used to create a custom language model.
    public var baseModelName: TranscribeClientTypes.BaseModelName?
    /// The data access role and Amazon S3 prefixes you've chosen to create your custom language model.
    public var inputDataConfig: TranscribeClientTypes.InputDataConfig?
    /// The language code of the text you've used to create a custom language model.
    public var languageCode: TranscribeClientTypes.CLMLanguageCode?
    /// The name you've chosen for your custom language model.
    public var modelName: Swift.String?
    /// The status of the custom language model. When the status is COMPLETED the model is ready to use.
    public var modelStatus: TranscribeClientTypes.ModelStatus?

    public init (
        baseModelName: TranscribeClientTypes.BaseModelName? = nil,
        inputDataConfig: TranscribeClientTypes.InputDataConfig? = nil,
        languageCode: TranscribeClientTypes.CLMLanguageCode? = nil,
        modelName: Swift.String? = nil,
        modelStatus: TranscribeClientTypes.ModelStatus? = nil
    )
    {
        self.baseModelName = baseModelName
        self.inputDataConfig = inputDataConfig
        self.languageCode = languageCode
        self.modelName = modelName
        self.modelStatus = modelStatus
    }
}

struct CreateLanguageModelOutputResponseBody: Swift.Equatable {
    public let languageCode: TranscribeClientTypes.CLMLanguageCode?
    public let baseModelName: TranscribeClientTypes.BaseModelName?
    public let modelName: Swift.String?
    public let inputDataConfig: TranscribeClientTypes.InputDataConfig?
    public let modelStatus: TranscribeClientTypes.ModelStatus?
}

extension CreateLanguageModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseModelName = "BaseModelName"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case modelName = "ModelName"
        case modelStatus = "ModelStatus"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.CLMLanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let baseModelNameDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.BaseModelName.self, forKey: .baseModelName)
        baseModelName = baseModelNameDecoded
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
        let modelStatusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ModelStatus.self, forKey: .modelStatus)
        modelStatus = modelStatusDecoded
    }
}

public struct CreateMedicalVocabularyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMedicalVocabularyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMedicalVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMedicalVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMedicalVocabularyOutputError>
}

extension CreateMedicalVocabularyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMedicalVocabularyInput(languageCode: \(Swift.String(describing: languageCode)), tags: \(Swift.String(describing: tags)), vocabularyFileUri: \(Swift.String(describing: vocabularyFileUri)), vocabularyName: \(Swift.String(describing: vocabularyName)))"}
}

extension CreateMedicalVocabularyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case tags = "Tags"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let vocabularyFileUri = vocabularyFileUri {
            try encodeContainer.encode(vocabularyFileUri, forKey: .vocabularyFileUri)
        }
    }
}

public struct CreateMedicalVocabularyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMedicalVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMedicalVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMedicalVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMedicalVocabularyOutputError>
}

public struct CreateMedicalVocabularyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMedicalVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateMedicalVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateMedicalVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMedicalVocabularyOutputError>
}

public struct CreateMedicalVocabularyInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMedicalVocabularyInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateMedicalVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateMedicalVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMedicalVocabularyOutputError>
}

public struct CreateMedicalVocabularyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateMedicalVocabularyInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateMedicalVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateMedicalVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateMedicalVocabularyOutputError>
}

public struct CreateMedicalVocabularyInput: Swift.Equatable {
    /// The language code for the language used for the entries in your custom vocabulary. The language code of your custom vocabulary must match the language code of your transcription job. US English (en-US) is the only language code available for Amazon Transcribe Medical.
    /// This member is required.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// Adds one or more tags, each in the form of a key:value pair, to a new medical vocabulary at the time you create this new vocabulary.
    public var tags: [TranscribeClientTypes.Tag]?
    /// The location in Amazon S3 of the text file you use to define your custom vocabulary. The URI must be in the same Amazon Web Services Region as the resource that you're calling. Enter information about your VocabularyFileUri in the following format:  https://s3..amazonaws.com///  The following is an example URI for a vocabulary file that is stored in Amazon S3: https://s3.us-east-1.amazonaws.com/AWSDOC-EXAMPLE-BUCKET/vocab.txt For more information about Amazon S3 object names, see [Object Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys) in the Amazon S3 Developer Guide. For more information about custom vocabularies, see [Medical Custom Vocabularies](https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works.html#how-vocabulary-med).
    /// This member is required.
    public var vocabularyFileUri: Swift.String?
    /// The name of the custom vocabulary. This case-sensitive name must be unique within an Amazon Web Services account. If you try to create a vocabulary with the same name as a previous vocabulary, you get a ConflictException error.
    /// This member is required.
    public var vocabularyName: Swift.String?

    public init (
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        tags: [TranscribeClientTypes.Tag]? = nil,
        vocabularyFileUri: Swift.String? = nil,
        vocabularyName: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.tags = tags
        self.vocabularyFileUri = vocabularyFileUri
        self.vocabularyName = vocabularyName
    }
}

struct CreateMedicalVocabularyInputBody: Swift.Equatable {
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let vocabularyFileUri: Swift.String?
    public let tags: [TranscribeClientTypes.Tag]?
}

extension CreateMedicalVocabularyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case tags = "Tags"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let vocabularyFileUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyFileUri)
        vocabularyFileUri = vocabularyFileUriDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TranscribeClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TranscribeClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateMedicalVocabularyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateMedicalVocabularyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateMedicalVocabularyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateMedicalVocabularyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateMedicalVocabularyOutputResponse(failureReason: \(Swift.String(describing: failureReason)), languageCode: \(Swift.String(describing: languageCode)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), vocabularyName: \(Swift.String(describing: vocabularyName)), vocabularyState: \(Swift.String(describing: vocabularyState)))"}
}

extension CreateMedicalVocabularyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateMedicalVocabularyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failureReason = output.failureReason
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyName = output.vocabularyName
            self.vocabularyState = output.vocabularyState
        } else {
            self.failureReason = nil
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyName = nil
            self.vocabularyState = nil
        }
    }
}

public struct CreateMedicalVocabularyOutputResponse: Swift.Equatable {
    /// If the VocabularyState field is FAILED, this field contains information about why the job failed.
    public var failureReason: Swift.String?
    /// The language code for the entries in your custom vocabulary. US English (en-US) is the only valid language code for Amazon Transcribe Medical.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// The date and time that you created the vocabulary.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the vocabulary. The name must be unique within an Amazon Web Services account and is case sensitive.
    public var vocabularyName: Swift.String?
    /// The processing state of your custom vocabulary in Amazon Transcribe Medical. If the state is READY, you can use the vocabulary in a StartMedicalTranscriptionJob request.
    public var vocabularyState: TranscribeClientTypes.VocabularyState?

    public init (
        failureReason: Swift.String? = nil,
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        vocabularyName: Swift.String? = nil,
        vocabularyState: TranscribeClientTypes.VocabularyState? = nil
    )
    {
        self.failureReason = failureReason
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyName = vocabularyName
        self.vocabularyState = vocabularyState
    }
}

struct CreateMedicalVocabularyOutputResponseBody: Swift.Equatable {
    public let vocabularyName: Swift.String?
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let vocabularyState: TranscribeClientTypes.VocabularyState?
    public let lastModifiedTime: ClientRuntime.Date?
    public let failureReason: Swift.String?
}

extension CreateMedicalVocabularyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyName = "VocabularyName"
        case vocabularyState = "VocabularyState"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let vocabularyStateDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.VocabularyState.self, forKey: .vocabularyState)
        vocabularyState = vocabularyStateDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

public struct CreateVocabularyFilterInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVocabularyFilterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVocabularyFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVocabularyFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVocabularyFilterOutputError>
}

extension CreateVocabularyFilterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVocabularyFilterInput(languageCode: \(Swift.String(describing: languageCode)), tags: \(Swift.String(describing: tags)), vocabularyFilterFileUri: \(Swift.String(describing: vocabularyFilterFileUri)), vocabularyFilterName: \(Swift.String(describing: vocabularyFilterName)), words: \(Swift.String(describing: words)))"}
}

extension CreateVocabularyFilterInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case tags = "Tags"
        case vocabularyFilterFileUri = "VocabularyFilterFileUri"
        case words = "Words"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let vocabularyFilterFileUri = vocabularyFilterFileUri {
            try encodeContainer.encode(vocabularyFilterFileUri, forKey: .vocabularyFilterFileUri)
        }
        if let words = words {
            var wordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .words)
            for words0 in words {
                try wordsContainer.encode(words0)
            }
        }
    }
}

public struct CreateVocabularyFilterInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVocabularyFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVocabularyFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVocabularyFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVocabularyFilterOutputError>
}

public struct CreateVocabularyFilterInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVocabularyFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVocabularyFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVocabularyFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVocabularyFilterOutputError>
}

public struct CreateVocabularyFilterInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVocabularyFilterInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateVocabularyFilterInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateVocabularyFilterInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVocabularyFilterOutputError>
}

public struct CreateVocabularyFilterInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVocabularyFilterInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateVocabularyFilterInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateVocabularyFilterInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVocabularyFilterOutputError>
}

public struct CreateVocabularyFilterInput: Swift.Equatable {
    /// The language code of the words in the vocabulary filter. All words in the filter must be in the same language. The vocabulary filter can only be used with transcription jobs in the specified language.
    /// This member is required.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// Adds one or more tags, each in the form of a key:value pair, to a new Amazon Transcribe vocabulary filter at the time you create this new vocabulary filter.
    public var tags: [TranscribeClientTypes.Tag]?
    /// The Amazon S3 location of a text file used as input to create the vocabulary filter. Only use characters from the character set defined for custom vocabularies. For a list of character sets, see [Character Sets for Custom Vocabularies](https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets). The specified file must be less than 50 KB of UTF-8 characters. If you provide the location of a list of words in the VocabularyFilterFileUri parameter, you can't use the Words parameter.
    public var vocabularyFilterFileUri: Swift.String?
    /// The vocabulary filter name. The name must be unique within the account that contains it. If you try to create a vocabulary filter with the same name as another vocabulary filter, you get a ConflictException error.
    /// This member is required.
    public var vocabularyFilterName: Swift.String?
    /// The words to use in the vocabulary filter. Only use characters from the character set defined for custom vocabularies. For a list of character sets, see [Character Sets for Custom Vocabularies](https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets). If you provide a list of words in the Words parameter, you can't use the VocabularyFilterFileUri parameter.
    public var words: [Swift.String]?

    public init (
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        tags: [TranscribeClientTypes.Tag]? = nil,
        vocabularyFilterFileUri: Swift.String? = nil,
        vocabularyFilterName: Swift.String? = nil,
        words: [Swift.String]? = nil
    )
    {
        self.languageCode = languageCode
        self.tags = tags
        self.vocabularyFilterFileUri = vocabularyFilterFileUri
        self.vocabularyFilterName = vocabularyFilterName
        self.words = words
    }
}

struct CreateVocabularyFilterInputBody: Swift.Equatable {
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let words: [Swift.String]?
    public let vocabularyFilterFileUri: Swift.String?
    public let tags: [TranscribeClientTypes.Tag]?
}

extension CreateVocabularyFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case tags = "Tags"
        case vocabularyFilterFileUri = "VocabularyFilterFileUri"
        case words = "Words"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let wordsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .words)
        var wordsDecoded0:[Swift.String]? = nil
        if let wordsContainer = wordsContainer {
            wordsDecoded0 = [Swift.String]()
            for string0 in wordsContainer {
                if let string0 = string0 {
                    wordsDecoded0?.append(string0)
                }
            }
        }
        words = wordsDecoded0
        let vocabularyFilterFileUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyFilterFileUri)
        vocabularyFilterFileUri = vocabularyFilterFileUriDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TranscribeClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TranscribeClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateVocabularyFilterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVocabularyFilterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateVocabularyFilterOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVocabularyFilterOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVocabularyFilterOutputResponse(languageCode: \(Swift.String(describing: languageCode)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), vocabularyFilterName: \(Swift.String(describing: vocabularyFilterName)))"}
}

extension CreateVocabularyFilterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateVocabularyFilterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyFilterName = output.vocabularyFilterName
        } else {
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyFilterName = nil
        }
    }
}

public struct CreateVocabularyFilterOutputResponse: Swift.Equatable {
    /// The language code of the words in the collection.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// The date and time that the vocabulary filter was modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the vocabulary filter.
    public var vocabularyFilterName: Swift.String?

    public init (
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        vocabularyFilterName: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyFilterName = vocabularyFilterName
    }
}

struct CreateVocabularyFilterOutputResponseBody: Swift.Equatable {
    public let vocabularyFilterName: Swift.String?
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let lastModifiedTime: ClientRuntime.Date?
}

extension CreateVocabularyFilterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyFilterName = "VocabularyFilterName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyFilterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyFilterName)
        vocabularyFilterName = vocabularyFilterNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

public struct CreateVocabularyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVocabularyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVocabularyOutputError>
}

extension CreateVocabularyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVocabularyInput(languageCode: \(Swift.String(describing: languageCode)), phrases: \(Swift.String(describing: phrases)), tags: \(Swift.String(describing: tags)), vocabularyFileUri: \(Swift.String(describing: vocabularyFileUri)), vocabularyName: \(Swift.String(describing: vocabularyName)))"}
}

extension CreateVocabularyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case phrases = "Phrases"
        case tags = "Tags"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let phrases = phrases {
            var phrasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .phrases)
            for phrases0 in phrases {
                try phrasesContainer.encode(phrases0)
            }
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let vocabularyFileUri = vocabularyFileUri {
            try encodeContainer.encode(vocabularyFileUri, forKey: .vocabularyFileUri)
        }
    }
}

public struct CreateVocabularyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVocabularyOutputError>
}

public struct CreateVocabularyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<CreateVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<CreateVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVocabularyOutputError>
}

public struct CreateVocabularyInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVocabularyInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: CreateVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVocabularyOutputError>
}

public struct CreateVocabularyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "CreateVocabularyInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: CreateVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<CreateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = CreateVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<CreateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<CreateVocabularyOutputError>
}

public struct CreateVocabularyInput: Swift.Equatable {
    /// The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see [transcribe-whatis].
    /// This member is required.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// An array of strings that contains the vocabulary entries.
    public var phrases: [Swift.String]?
    /// Adds one or more tags, each in the form of a key:value pair, to a new Amazon Transcribe vocabulary at the time you create this new vocabulary.
    public var tags: [TranscribeClientTypes.Tag]?
    /// The S3 location of the text file that contains the definition of the custom vocabulary. The URI must be in the same region as the API endpoint that you are calling. The general form is: For more information about S3 object names, see [Object Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys) in the Amazon S3 Developer Guide. For more information about custom vocabularies, see [Custom vocabularies](https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary).
    public var vocabularyFileUri: Swift.String?
    /// The name of the vocabulary. The name must be unique within an Amazon Web Services account. The name is case sensitive. If you try to create a vocabulary with the same name as a previous vocabulary you will receive a ConflictException error.
    /// This member is required.
    public var vocabularyName: Swift.String?

    public init (
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        phrases: [Swift.String]? = nil,
        tags: [TranscribeClientTypes.Tag]? = nil,
        vocabularyFileUri: Swift.String? = nil,
        vocabularyName: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.phrases = phrases
        self.tags = tags
        self.vocabularyFileUri = vocabularyFileUri
        self.vocabularyName = vocabularyName
    }
}

struct CreateVocabularyInputBody: Swift.Equatable {
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let phrases: [Swift.String]?
    public let vocabularyFileUri: Swift.String?
    public let tags: [TranscribeClientTypes.Tag]?
}

extension CreateVocabularyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case phrases = "Phrases"
        case tags = "Tags"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let phrasesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .phrases)
        var phrasesDecoded0:[Swift.String]? = nil
        if let phrasesContainer = phrasesContainer {
            phrasesDecoded0 = [Swift.String]()
            for string0 in phrasesContainer {
                if let string0 = string0 {
                    phrasesDecoded0?.append(string0)
                }
            }
        }
        phrases = phrasesDecoded0
        let vocabularyFileUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyFileUri)
        vocabularyFileUri = vocabularyFileUriDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TranscribeClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TranscribeClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension CreateVocabularyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension CreateVocabularyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum CreateVocabularyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension CreateVocabularyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "CreateVocabularyOutputResponse(failureReason: \(Swift.String(describing: failureReason)), languageCode: \(Swift.String(describing: languageCode)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), vocabularyName: \(Swift.String(describing: vocabularyName)), vocabularyState: \(Swift.String(describing: vocabularyState)))"}
}

extension CreateVocabularyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: CreateVocabularyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.failureReason = output.failureReason
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyName = output.vocabularyName
            self.vocabularyState = output.vocabularyState
        } else {
            self.failureReason = nil
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyName = nil
            self.vocabularyState = nil
        }
    }
}

public struct CreateVocabularyOutputResponse: Swift.Equatable {
    /// If the VocabularyState field is FAILED, this field contains information about why the job failed.
    public var failureReason: Swift.String?
    /// The language code of the vocabulary entries.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// The date and time that the vocabulary was created.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the vocabulary.
    public var vocabularyName: Swift.String?
    /// The processing state of the vocabulary. When the VocabularyState field contains READY the vocabulary is ready to be used in a StartTranscriptionJob request.
    public var vocabularyState: TranscribeClientTypes.VocabularyState?

    public init (
        failureReason: Swift.String? = nil,
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        vocabularyName: Swift.String? = nil,
        vocabularyState: TranscribeClientTypes.VocabularyState? = nil
    )
    {
        self.failureReason = failureReason
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyName = vocabularyName
        self.vocabularyState = vocabularyState
    }
}

struct CreateVocabularyOutputResponseBody: Swift.Equatable {
    public let vocabularyName: Swift.String?
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let vocabularyState: TranscribeClientTypes.VocabularyState?
    public let lastModifiedTime: ClientRuntime.Date?
    public let failureReason: Swift.String?
}

extension CreateVocabularyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyName = "VocabularyName"
        case vocabularyState = "VocabularyState"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let vocabularyStateDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.VocabularyState.self, forKey: .vocabularyState)
        vocabularyState = vocabularyStateDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension DeleteCallAnalyticsCategoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCallAnalyticsCategoryInput(categoryName: \(Swift.String(describing: categoryName)))"}
}

extension DeleteCallAnalyticsCategoryInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteCallAnalyticsCategoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCallAnalyticsCategoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCallAnalyticsCategoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCallAnalyticsCategoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCallAnalyticsCategoryOutputError>
}

public struct DeleteCallAnalyticsCategoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCallAnalyticsCategoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCallAnalyticsCategoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCallAnalyticsCategoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCallAnalyticsCategoryOutputError>
}

public struct DeleteCallAnalyticsCategoryInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCallAnalyticsCategoryInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeleteCallAnalyticsCategoryInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteCallAnalyticsCategoryInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCallAnalyticsCategoryOutputError>
}

public struct DeleteCallAnalyticsCategoryInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCallAnalyticsCategoryInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeleteCallAnalyticsCategoryInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteCallAnalyticsCategoryInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCallAnalyticsCategoryOutputError>
}

public struct DeleteCallAnalyticsCategoryInput: Swift.Equatable {
    /// The name of the call analytics category that you're choosing to delete. The value is case sensitive.
    /// This member is required.
    public var categoryName: Swift.String?

    public init (
        categoryName: Swift.String? = nil
    )
    {
        self.categoryName = categoryName
    }
}

struct DeleteCallAnalyticsCategoryInputBody: Swift.Equatable {
}

extension DeleteCallAnalyticsCategoryInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteCallAnalyticsCategoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCallAnalyticsCategoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCallAnalyticsCategoryOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCallAnalyticsCategoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCallAnalyticsCategoryOutputResponse()"}
}

extension DeleteCallAnalyticsCategoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCallAnalyticsCategoryOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteCallAnalyticsCategoryOutputResponseBody: Swift.Equatable {
}

extension DeleteCallAnalyticsCategoryOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteCallAnalyticsJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCallAnalyticsJobInput(callAnalyticsJobName: \(Swift.String(describing: callAnalyticsJobName)))"}
}

extension DeleteCallAnalyticsJobInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteCallAnalyticsJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCallAnalyticsJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCallAnalyticsJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCallAnalyticsJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCallAnalyticsJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCallAnalyticsJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCallAnalyticsJobOutputError>
}

public struct DeleteCallAnalyticsJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCallAnalyticsJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteCallAnalyticsJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCallAnalyticsJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteCallAnalyticsJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCallAnalyticsJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCallAnalyticsJobOutputError>
}

public struct DeleteCallAnalyticsJobInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCallAnalyticsJobInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeleteCallAnalyticsJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCallAnalyticsJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteCallAnalyticsJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCallAnalyticsJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCallAnalyticsJobOutputError>
}

public struct DeleteCallAnalyticsJobInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteCallAnalyticsJobInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeleteCallAnalyticsJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteCallAnalyticsJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteCallAnalyticsJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteCallAnalyticsJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteCallAnalyticsJobOutputError>
}

public struct DeleteCallAnalyticsJobInput: Swift.Equatable {
    /// The name of the call analytics job you want to delete.
    /// This member is required.
    public var callAnalyticsJobName: Swift.String?

    public init (
        callAnalyticsJobName: Swift.String? = nil
    )
    {
        self.callAnalyticsJobName = callAnalyticsJobName
    }
}

struct DeleteCallAnalyticsJobInputBody: Swift.Equatable {
}

extension DeleteCallAnalyticsJobInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteCallAnalyticsJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteCallAnalyticsJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteCallAnalyticsJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteCallAnalyticsJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteCallAnalyticsJobOutputResponse()"}
}

extension DeleteCallAnalyticsJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteCallAnalyticsJobOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteCallAnalyticsJobOutputResponseBody: Swift.Equatable {
}

extension DeleteCallAnalyticsJobOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteLanguageModelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLanguageModelInput(modelName: \(Swift.String(describing: modelName)))"}
}

extension DeleteLanguageModelInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteLanguageModelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLanguageModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLanguageModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLanguageModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLanguageModelOutputError>
}

public struct DeleteLanguageModelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLanguageModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteLanguageModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteLanguageModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLanguageModelOutputError>
}

public struct DeleteLanguageModelInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLanguageModelInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeleteLanguageModelInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteLanguageModelInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLanguageModelOutputError>
}

public struct DeleteLanguageModelInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteLanguageModelInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeleteLanguageModelInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteLanguageModelInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteLanguageModelOutputError>
}

public struct DeleteLanguageModelInput: Swift.Equatable {
    /// The name of the model you're choosing to delete.
    /// This member is required.
    public var modelName: Swift.String?

    public init (
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct DeleteLanguageModelInputBody: Swift.Equatable {
}

extension DeleteLanguageModelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteLanguageModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteLanguageModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteLanguageModelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteLanguageModelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteLanguageModelOutputResponse()"}
}

extension DeleteLanguageModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteLanguageModelOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteLanguageModelOutputResponseBody: Swift.Equatable {
}

extension DeleteLanguageModelOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteMedicalTranscriptionJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMedicalTranscriptionJobInput(medicalTranscriptionJobName: \(Swift.String(describing: medicalTranscriptionJobName)))"}
}

extension DeleteMedicalTranscriptionJobInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteMedicalTranscriptionJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMedicalTranscriptionJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMedicalTranscriptionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMedicalTranscriptionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMedicalTranscriptionJobOutputError>
}

public struct DeleteMedicalTranscriptionJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMedicalTranscriptionJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMedicalTranscriptionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMedicalTranscriptionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMedicalTranscriptionJobOutputError>
}

public struct DeleteMedicalTranscriptionJobInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMedicalTranscriptionJobInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeleteMedicalTranscriptionJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteMedicalTranscriptionJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMedicalTranscriptionJobOutputError>
}

public struct DeleteMedicalTranscriptionJobInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMedicalTranscriptionJobInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeleteMedicalTranscriptionJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteMedicalTranscriptionJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMedicalTranscriptionJobOutputError>
}

public struct DeleteMedicalTranscriptionJobInput: Swift.Equatable {
    /// The name you provide to the DeleteMedicalTranscriptionJob object to delete a transcription job.
    /// This member is required.
    public var medicalTranscriptionJobName: Swift.String?

    public init (
        medicalTranscriptionJobName: Swift.String? = nil
    )
    {
        self.medicalTranscriptionJobName = medicalTranscriptionJobName
    }
}

struct DeleteMedicalTranscriptionJobInputBody: Swift.Equatable {
}

extension DeleteMedicalTranscriptionJobInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteMedicalTranscriptionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMedicalTranscriptionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMedicalTranscriptionJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMedicalTranscriptionJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMedicalTranscriptionJobOutputResponse()"}
}

extension DeleteMedicalTranscriptionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMedicalTranscriptionJobOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteMedicalTranscriptionJobOutputResponseBody: Swift.Equatable {
}

extension DeleteMedicalTranscriptionJobOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteMedicalVocabularyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMedicalVocabularyInput(vocabularyName: \(Swift.String(describing: vocabularyName)))"}
}

extension DeleteMedicalVocabularyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteMedicalVocabularyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMedicalVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMedicalVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMedicalVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMedicalVocabularyOutputError>
}

public struct DeleteMedicalVocabularyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMedicalVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteMedicalVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteMedicalVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMedicalVocabularyOutputError>
}

public struct DeleteMedicalVocabularyInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMedicalVocabularyInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeleteMedicalVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteMedicalVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMedicalVocabularyOutputError>
}

public struct DeleteMedicalVocabularyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteMedicalVocabularyInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeleteMedicalVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteMedicalVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteMedicalVocabularyOutputError>
}

public struct DeleteMedicalVocabularyInput: Swift.Equatable {
    /// The name of the vocabulary that you want to delete.
    /// This member is required.
    public var vocabularyName: Swift.String?

    public init (
        vocabularyName: Swift.String? = nil
    )
    {
        self.vocabularyName = vocabularyName
    }
}

struct DeleteMedicalVocabularyInputBody: Swift.Equatable {
}

extension DeleteMedicalVocabularyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteMedicalVocabularyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteMedicalVocabularyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteMedicalVocabularyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteMedicalVocabularyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteMedicalVocabularyOutputResponse()"}
}

extension DeleteMedicalVocabularyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteMedicalVocabularyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteMedicalVocabularyOutputResponseBody: Swift.Equatable {
}

extension DeleteMedicalVocabularyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteTranscriptionJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTranscriptionJobInput(transcriptionJobName: \(Swift.String(describing: transcriptionJobName)))"}
}

extension DeleteTranscriptionJobInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteTranscriptionJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTranscriptionJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTranscriptionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTranscriptionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTranscriptionJobOutputError>
}

public struct DeleteTranscriptionJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTranscriptionJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteTranscriptionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteTranscriptionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTranscriptionJobOutputError>
}

public struct DeleteTranscriptionJobInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTranscriptionJobInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeleteTranscriptionJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteTranscriptionJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTranscriptionJobOutputError>
}

public struct DeleteTranscriptionJobInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteTranscriptionJobInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeleteTranscriptionJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteTranscriptionJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteTranscriptionJobOutputError>
}

public struct DeleteTranscriptionJobInput: Swift.Equatable {
    /// The name of the transcription job to be deleted.
    /// This member is required.
    public var transcriptionJobName: Swift.String?

    public init (
        transcriptionJobName: Swift.String? = nil
    )
    {
        self.transcriptionJobName = transcriptionJobName
    }
}

struct DeleteTranscriptionJobInputBody: Swift.Equatable {
}

extension DeleteTranscriptionJobInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteTranscriptionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteTranscriptionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteTranscriptionJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteTranscriptionJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteTranscriptionJobOutputResponse()"}
}

extension DeleteTranscriptionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteTranscriptionJobOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteTranscriptionJobOutputResponseBody: Swift.Equatable {
}

extension DeleteTranscriptionJobOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteVocabularyFilterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVocabularyFilterInput(vocabularyFilterName: \(Swift.String(describing: vocabularyFilterName)))"}
}

extension DeleteVocabularyFilterInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteVocabularyFilterInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVocabularyFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVocabularyFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVocabularyFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVocabularyFilterOutputError>
}

public struct DeleteVocabularyFilterInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVocabularyFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVocabularyFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVocabularyFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVocabularyFilterOutputError>
}

public struct DeleteVocabularyFilterInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVocabularyFilterInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeleteVocabularyFilterInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteVocabularyFilterInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVocabularyFilterOutputError>
}

public struct DeleteVocabularyFilterInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVocabularyFilterInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeleteVocabularyFilterInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteVocabularyFilterInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVocabularyFilterOutputError>
}

public struct DeleteVocabularyFilterInput: Swift.Equatable {
    /// The name of the vocabulary filter to remove.
    /// This member is required.
    public var vocabularyFilterName: Swift.String?

    public init (
        vocabularyFilterName: Swift.String? = nil
    )
    {
        self.vocabularyFilterName = vocabularyFilterName
    }
}

struct DeleteVocabularyFilterInputBody: Swift.Equatable {
}

extension DeleteVocabularyFilterInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteVocabularyFilterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVocabularyFilterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteVocabularyFilterOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVocabularyFilterOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVocabularyFilterOutputResponse()"}
}

extension DeleteVocabularyFilterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteVocabularyFilterOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteVocabularyFilterOutputResponseBody: Swift.Equatable {
}

extension DeleteVocabularyFilterOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteVocabularyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVocabularyInput(vocabularyName: \(Swift.String(describing: vocabularyName)))"}
}

extension DeleteVocabularyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DeleteVocabularyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVocabularyOutputError>
}

public struct DeleteVocabularyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DeleteVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DeleteVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVocabularyOutputError>
}

public struct DeleteVocabularyInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVocabularyInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DeleteVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVocabularyOutputError>
}

public struct DeleteVocabularyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DeleteVocabularyInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DeleteVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DeleteVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DeleteVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<DeleteVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DeleteVocabularyOutputError>
}

public struct DeleteVocabularyInput: Swift.Equatable {
    /// The name of the vocabulary to delete.
    /// This member is required.
    public var vocabularyName: Swift.String?

    public init (
        vocabularyName: Swift.String? = nil
    )
    {
        self.vocabularyName = vocabularyName
    }
}

struct DeleteVocabularyInputBody: Swift.Equatable {
}

extension DeleteVocabularyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DeleteVocabularyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DeleteVocabularyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DeleteVocabularyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DeleteVocabularyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DeleteVocabularyOutputResponse()"}
}

extension DeleteVocabularyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct DeleteVocabularyOutputResponse: Swift.Equatable {

    public init() {}
}

struct DeleteVocabularyOutputResponseBody: Swift.Equatable {
}

extension DeleteVocabularyOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeLanguageModelInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLanguageModelInput(modelName: \(Swift.String(describing: modelName)))"}
}

extension DescribeLanguageModelInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct DescribeLanguageModelInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLanguageModelInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLanguageModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLanguageModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLanguageModelOutputError>
}

public struct DescribeLanguageModelInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLanguageModelInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeLanguageModelInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeLanguageModelInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLanguageModelOutputError>
}

public struct DescribeLanguageModelInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLanguageModelInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: DescribeLanguageModelInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLanguageModelInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLanguageModelOutputError>
}

public struct DescribeLanguageModelInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeLanguageModelInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: DescribeLanguageModelInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeLanguageModelOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = DescribeLanguageModelInput
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeLanguageModelOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeLanguageModelOutputError>
}

public struct DescribeLanguageModelInput: Swift.Equatable {
    /// The name of the custom language model you submit to get more information.
    /// This member is required.
    public var modelName: Swift.String?

    public init (
        modelName: Swift.String? = nil
    )
    {
        self.modelName = modelName
    }
}

struct DescribeLanguageModelInputBody: Swift.Equatable {
}

extension DescribeLanguageModelInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension DescribeLanguageModelOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeLanguageModelOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeLanguageModelOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeLanguageModelOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeLanguageModelOutputResponse(languageModel: \(Swift.String(describing: languageModel)))"}
}

extension DescribeLanguageModelOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeLanguageModelOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.languageModel = output.languageModel
        } else {
            self.languageModel = nil
        }
    }
}

public struct DescribeLanguageModelOutputResponse: Swift.Equatable {
    /// The name of the custom language model you requested more information about.
    public var languageModel: TranscribeClientTypes.LanguageModel?

    public init (
        languageModel: TranscribeClientTypes.LanguageModel? = nil
    )
    {
        self.languageModel = languageModel
    }
}

struct DescribeLanguageModelOutputResponseBody: Swift.Equatable {
    public let languageModel: TranscribeClientTypes.LanguageModel?
}

extension DescribeLanguageModelOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageModel = "LanguageModel"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageModelDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageModel.self, forKey: .languageModel)
        languageModel = languageModelDecoded
    }
}

extension GetCallAnalyticsCategoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCallAnalyticsCategoryInput(categoryName: \(Swift.String(describing: categoryName)))"}
}

extension GetCallAnalyticsCategoryInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetCallAnalyticsCategoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCallAnalyticsCategoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCallAnalyticsCategoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCallAnalyticsCategoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCallAnalyticsCategoryOutputError>
}

public struct GetCallAnalyticsCategoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCallAnalyticsCategoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCallAnalyticsCategoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCallAnalyticsCategoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCallAnalyticsCategoryOutputError>
}

public struct GetCallAnalyticsCategoryInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCallAnalyticsCategoryInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: GetCallAnalyticsCategoryInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetCallAnalyticsCategoryInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCallAnalyticsCategoryOutputError>
}

public struct GetCallAnalyticsCategoryInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCallAnalyticsCategoryInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: GetCallAnalyticsCategoryInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetCallAnalyticsCategoryInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCallAnalyticsCategoryOutputError>
}

public struct GetCallAnalyticsCategoryInput: Swift.Equatable {
    /// The name of the category you want information about. This value is case sensitive.
    /// This member is required.
    public var categoryName: Swift.String?

    public init (
        categoryName: Swift.String? = nil
    )
    {
        self.categoryName = categoryName
    }
}

struct GetCallAnalyticsCategoryInputBody: Swift.Equatable {
}

extension GetCallAnalyticsCategoryInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCallAnalyticsCategoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCallAnalyticsCategoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCallAnalyticsCategoryOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCallAnalyticsCategoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCallAnalyticsCategoryOutputResponse(categoryProperties: \(Swift.String(describing: categoryProperties)))"}
}

extension GetCallAnalyticsCategoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCallAnalyticsCategoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.categoryProperties = output.categoryProperties
        } else {
            self.categoryProperties = nil
        }
    }
}

public struct GetCallAnalyticsCategoryOutputResponse: Swift.Equatable {
    /// The rules you've defined for a category.
    public var categoryProperties: TranscribeClientTypes.CategoryProperties?

    public init (
        categoryProperties: TranscribeClientTypes.CategoryProperties? = nil
    )
    {
        self.categoryProperties = categoryProperties
    }
}

struct GetCallAnalyticsCategoryOutputResponseBody: Swift.Equatable {
    public let categoryProperties: TranscribeClientTypes.CategoryProperties?
}

extension GetCallAnalyticsCategoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case categoryProperties = "CategoryProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryPropertiesDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.CategoryProperties.self, forKey: .categoryProperties)
        categoryProperties = categoryPropertiesDecoded
    }
}

extension GetCallAnalyticsJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCallAnalyticsJobInput(callAnalyticsJobName: \(Swift.String(describing: callAnalyticsJobName)))"}
}

extension GetCallAnalyticsJobInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetCallAnalyticsJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCallAnalyticsJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCallAnalyticsJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCallAnalyticsJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCallAnalyticsJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCallAnalyticsJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCallAnalyticsJobOutputError>
}

public struct GetCallAnalyticsJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCallAnalyticsJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetCallAnalyticsJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCallAnalyticsJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetCallAnalyticsJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetCallAnalyticsJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCallAnalyticsJobOutputError>
}

public struct GetCallAnalyticsJobInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCallAnalyticsJobInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: GetCallAnalyticsJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCallAnalyticsJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetCallAnalyticsJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetCallAnalyticsJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCallAnalyticsJobOutputError>
}

public struct GetCallAnalyticsJobInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetCallAnalyticsJobInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: GetCallAnalyticsJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetCallAnalyticsJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetCallAnalyticsJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetCallAnalyticsJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetCallAnalyticsJobOutputError>
}

public struct GetCallAnalyticsJobInput: Swift.Equatable {
    /// The name of the analytics job you want information about. This value is case sensitive.
    /// This member is required.
    public var callAnalyticsJobName: Swift.String?

    public init (
        callAnalyticsJobName: Swift.String? = nil
    )
    {
        self.callAnalyticsJobName = callAnalyticsJobName
    }
}

struct GetCallAnalyticsJobInputBody: Swift.Equatable {
}

extension GetCallAnalyticsJobInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetCallAnalyticsJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetCallAnalyticsJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetCallAnalyticsJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetCallAnalyticsJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetCallAnalyticsJobOutputResponse(callAnalyticsJob: \(Swift.String(describing: callAnalyticsJob)))"}
}

extension GetCallAnalyticsJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetCallAnalyticsJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.callAnalyticsJob = output.callAnalyticsJob
        } else {
            self.callAnalyticsJob = nil
        }
    }
}

public struct GetCallAnalyticsJobOutputResponse: Swift.Equatable {
    /// An object that contains the results of your call analytics job.
    public var callAnalyticsJob: TranscribeClientTypes.CallAnalyticsJob?

    public init (
        callAnalyticsJob: TranscribeClientTypes.CallAnalyticsJob? = nil
    )
    {
        self.callAnalyticsJob = callAnalyticsJob
    }
}

struct GetCallAnalyticsJobOutputResponseBody: Swift.Equatable {
    public let callAnalyticsJob: TranscribeClientTypes.CallAnalyticsJob?
}

extension GetCallAnalyticsJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAnalyticsJob = "CallAnalyticsJob"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let callAnalyticsJobDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.CallAnalyticsJob.self, forKey: .callAnalyticsJob)
        callAnalyticsJob = callAnalyticsJobDecoded
    }
}

extension GetMedicalTranscriptionJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMedicalTranscriptionJobInput(medicalTranscriptionJobName: \(Swift.String(describing: medicalTranscriptionJobName)))"}
}

extension GetMedicalTranscriptionJobInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetMedicalTranscriptionJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMedicalTranscriptionJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMedicalTranscriptionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMedicalTranscriptionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMedicalTranscriptionJobOutputError>
}

public struct GetMedicalTranscriptionJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMedicalTranscriptionJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMedicalTranscriptionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMedicalTranscriptionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMedicalTranscriptionJobOutputError>
}

public struct GetMedicalTranscriptionJobInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMedicalTranscriptionJobInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: GetMedicalTranscriptionJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetMedicalTranscriptionJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMedicalTranscriptionJobOutputError>
}

public struct GetMedicalTranscriptionJobInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMedicalTranscriptionJobInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: GetMedicalTranscriptionJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetMedicalTranscriptionJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMedicalTranscriptionJobOutputError>
}

public struct GetMedicalTranscriptionJobInput: Swift.Equatable {
    /// The name of the medical transcription job.
    /// This member is required.
    public var medicalTranscriptionJobName: Swift.String?

    public init (
        medicalTranscriptionJobName: Swift.String? = nil
    )
    {
        self.medicalTranscriptionJobName = medicalTranscriptionJobName
    }
}

struct GetMedicalTranscriptionJobInputBody: Swift.Equatable {
}

extension GetMedicalTranscriptionJobInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetMedicalTranscriptionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMedicalTranscriptionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMedicalTranscriptionJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMedicalTranscriptionJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMedicalTranscriptionJobOutputResponse(medicalTranscriptionJob: \(Swift.String(describing: medicalTranscriptionJob)))"}
}

extension GetMedicalTranscriptionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMedicalTranscriptionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.medicalTranscriptionJob = output.medicalTranscriptionJob
        } else {
            self.medicalTranscriptionJob = nil
        }
    }
}

public struct GetMedicalTranscriptionJobOutputResponse: Swift.Equatable {
    /// An object that contains the results of the medical transcription job.
    public var medicalTranscriptionJob: TranscribeClientTypes.MedicalTranscriptionJob?

    public init (
        medicalTranscriptionJob: TranscribeClientTypes.MedicalTranscriptionJob? = nil
    )
    {
        self.medicalTranscriptionJob = medicalTranscriptionJob
    }
}

struct GetMedicalTranscriptionJobOutputResponseBody: Swift.Equatable {
    public let medicalTranscriptionJob: TranscribeClientTypes.MedicalTranscriptionJob?
}

extension GetMedicalTranscriptionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case medicalTranscriptionJob = "MedicalTranscriptionJob"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let medicalTranscriptionJobDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MedicalTranscriptionJob.self, forKey: .medicalTranscriptionJob)
        medicalTranscriptionJob = medicalTranscriptionJobDecoded
    }
}

extension GetMedicalVocabularyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMedicalVocabularyInput(vocabularyName: \(Swift.String(describing: vocabularyName)))"}
}

extension GetMedicalVocabularyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetMedicalVocabularyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMedicalVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMedicalVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMedicalVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMedicalVocabularyOutputError>
}

public struct GetMedicalVocabularyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMedicalVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetMedicalVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetMedicalVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMedicalVocabularyOutputError>
}

public struct GetMedicalVocabularyInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMedicalVocabularyInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: GetMedicalVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetMedicalVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMedicalVocabularyOutputError>
}

public struct GetMedicalVocabularyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetMedicalVocabularyInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: GetMedicalVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetMedicalVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetMedicalVocabularyOutputError>
}

public struct GetMedicalVocabularyInput: Swift.Equatable {
    /// The name of the vocabulary that you want information about. The value is case sensitive.
    /// This member is required.
    public var vocabularyName: Swift.String?

    public init (
        vocabularyName: Swift.String? = nil
    )
    {
        self.vocabularyName = vocabularyName
    }
}

struct GetMedicalVocabularyInputBody: Swift.Equatable {
}

extension GetMedicalVocabularyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetMedicalVocabularyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetMedicalVocabularyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetMedicalVocabularyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetMedicalVocabularyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetMedicalVocabularyOutputResponse(downloadUri: \(Swift.String(describing: downloadUri)), failureReason: \(Swift.String(describing: failureReason)), languageCode: \(Swift.String(describing: languageCode)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), vocabularyName: \(Swift.String(describing: vocabularyName)), vocabularyState: \(Swift.String(describing: vocabularyState)))"}
}

extension GetMedicalVocabularyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetMedicalVocabularyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.downloadUri = output.downloadUri
            self.failureReason = output.failureReason
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyName = output.vocabularyName
            self.vocabularyState = output.vocabularyState
        } else {
            self.downloadUri = nil
            self.failureReason = nil
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyName = nil
            self.vocabularyState = nil
        }
    }
}

public struct GetMedicalVocabularyOutputResponse: Swift.Equatable {
    /// The location in Amazon S3 where the vocabulary is stored. Use this URI to get the contents of the vocabulary. You can download your vocabulary from the URI for a limited time.
    public var downloadUri: Swift.String?
    /// If the VocabularyState is FAILED, this field contains information about why the job failed.
    public var failureReason: Swift.String?
    /// The valid language code for your vocabulary entries.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// The date and time that the vocabulary was last modified with a text file different from the one that was previously used.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the vocabulary returned by Amazon Transcribe Medical.
    public var vocabularyName: Swift.String?
    /// The processing state of the vocabulary. If the VocabularyState is READY then you can use it in the StartMedicalTranscriptionJob operation.
    public var vocabularyState: TranscribeClientTypes.VocabularyState?

    public init (
        downloadUri: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        vocabularyName: Swift.String? = nil,
        vocabularyState: TranscribeClientTypes.VocabularyState? = nil
    )
    {
        self.downloadUri = downloadUri
        self.failureReason = failureReason
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyName = vocabularyName
        self.vocabularyState = vocabularyState
    }
}

struct GetMedicalVocabularyOutputResponseBody: Swift.Equatable {
    public let vocabularyName: Swift.String?
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let vocabularyState: TranscribeClientTypes.VocabularyState?
    public let lastModifiedTime: ClientRuntime.Date?
    public let failureReason: Swift.String?
    public let downloadUri: Swift.String?
}

extension GetMedicalVocabularyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case downloadUri = "DownloadUri"
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyName = "VocabularyName"
        case vocabularyState = "VocabularyState"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let vocabularyStateDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.VocabularyState.self, forKey: .vocabularyState)
        vocabularyState = vocabularyStateDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let downloadUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .downloadUri)
        downloadUri = downloadUriDecoded
    }
}

extension GetTranscriptionJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTranscriptionJobInput(transcriptionJobName: \(Swift.String(describing: transcriptionJobName)))"}
}

extension GetTranscriptionJobInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetTranscriptionJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTranscriptionJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTranscriptionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTranscriptionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTranscriptionJobOutputError>
}

public struct GetTranscriptionJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTranscriptionJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetTranscriptionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetTranscriptionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTranscriptionJobOutputError>
}

public struct GetTranscriptionJobInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTranscriptionJobInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: GetTranscriptionJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetTranscriptionJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTranscriptionJobOutputError>
}

public struct GetTranscriptionJobInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetTranscriptionJobInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: GetTranscriptionJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetTranscriptionJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetTranscriptionJobOutputError>
}

public struct GetTranscriptionJobInput: Swift.Equatable {
    /// The name of the job.
    /// This member is required.
    public var transcriptionJobName: Swift.String?

    public init (
        transcriptionJobName: Swift.String? = nil
    )
    {
        self.transcriptionJobName = transcriptionJobName
    }
}

struct GetTranscriptionJobInputBody: Swift.Equatable {
}

extension GetTranscriptionJobInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetTranscriptionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetTranscriptionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetTranscriptionJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetTranscriptionJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetTranscriptionJobOutputResponse(transcriptionJob: \(Swift.String(describing: transcriptionJob)))"}
}

extension GetTranscriptionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetTranscriptionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.transcriptionJob = output.transcriptionJob
        } else {
            self.transcriptionJob = nil
        }
    }
}

public struct GetTranscriptionJobOutputResponse: Swift.Equatable {
    /// An object that contains the results of the transcription job.
    public var transcriptionJob: TranscribeClientTypes.TranscriptionJob?

    public init (
        transcriptionJob: TranscribeClientTypes.TranscriptionJob? = nil
    )
    {
        self.transcriptionJob = transcriptionJob
    }
}

struct GetTranscriptionJobOutputResponseBody: Swift.Equatable {
    public let transcriptionJob: TranscribeClientTypes.TranscriptionJob?
}

extension GetTranscriptionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transcriptionJob = "TranscriptionJob"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptionJobDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.TranscriptionJob.self, forKey: .transcriptionJob)
        transcriptionJob = transcriptionJobDecoded
    }
}

extension GetVocabularyFilterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetVocabularyFilterInput(vocabularyFilterName: \(Swift.String(describing: vocabularyFilterName)))"}
}

extension GetVocabularyFilterInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetVocabularyFilterInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetVocabularyFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetVocabularyFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetVocabularyFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetVocabularyFilterOutputError>
}

public struct GetVocabularyFilterInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetVocabularyFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetVocabularyFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetVocabularyFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetVocabularyFilterOutputError>
}

public struct GetVocabularyFilterInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetVocabularyFilterInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: GetVocabularyFilterInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetVocabularyFilterInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetVocabularyFilterOutputError>
}

public struct GetVocabularyFilterInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetVocabularyFilterInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: GetVocabularyFilterInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetVocabularyFilterInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetVocabularyFilterOutputError>
}

public struct GetVocabularyFilterInput: Swift.Equatable {
    /// The name of the vocabulary filter for which to return information.
    /// This member is required.
    public var vocabularyFilterName: Swift.String?

    public init (
        vocabularyFilterName: Swift.String? = nil
    )
    {
        self.vocabularyFilterName = vocabularyFilterName
    }
}

struct GetVocabularyFilterInputBody: Swift.Equatable {
}

extension GetVocabularyFilterInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetVocabularyFilterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetVocabularyFilterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetVocabularyFilterOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetVocabularyFilterOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetVocabularyFilterOutputResponse(downloadUri: \(Swift.String(describing: downloadUri)), languageCode: \(Swift.String(describing: languageCode)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), vocabularyFilterName: \(Swift.String(describing: vocabularyFilterName)))"}
}

extension GetVocabularyFilterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetVocabularyFilterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.downloadUri = output.downloadUri
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyFilterName = output.vocabularyFilterName
        } else {
            self.downloadUri = nil
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyFilterName = nil
        }
    }
}

public struct GetVocabularyFilterOutputResponse: Swift.Equatable {
    /// The URI of the list of words in the vocabulary filter. You can use this URI to get the list of words.
    public var downloadUri: Swift.String?
    /// The language code of the words in the vocabulary filter.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// The date and time that the contents of the vocabulary filter were updated.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the vocabulary filter.
    public var vocabularyFilterName: Swift.String?

    public init (
        downloadUri: Swift.String? = nil,
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        vocabularyFilterName: Swift.String? = nil
    )
    {
        self.downloadUri = downloadUri
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyFilterName = vocabularyFilterName
    }
}

struct GetVocabularyFilterOutputResponseBody: Swift.Equatable {
    public let vocabularyFilterName: Swift.String?
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let lastModifiedTime: ClientRuntime.Date?
    public let downloadUri: Swift.String?
}

extension GetVocabularyFilterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case downloadUri = "DownloadUri"
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyFilterName = "VocabularyFilterName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyFilterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyFilterName)
        vocabularyFilterName = vocabularyFilterNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let downloadUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .downloadUri)
        downloadUri = downloadUriDecoded
    }
}

extension GetVocabularyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetVocabularyInput(vocabularyName: \(Swift.String(describing: vocabularyName)))"}
}

extension GetVocabularyInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetVocabularyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetVocabularyOutputError>
}

public struct GetVocabularyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetVocabularyOutputError>
}

public struct GetVocabularyInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetVocabularyInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: GetVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetVocabularyOutputError>
}

public struct GetVocabularyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetVocabularyInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: GetVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = GetVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<GetVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetVocabularyOutputError>
}

public struct GetVocabularyInput: Swift.Equatable {
    /// The name of the vocabulary to return information about. The name is case sensitive.
    /// This member is required.
    public var vocabularyName: Swift.String?

    public init (
        vocabularyName: Swift.String? = nil
    )
    {
        self.vocabularyName = vocabularyName
    }
}

struct GetVocabularyInputBody: Swift.Equatable {
}

extension GetVocabularyInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetVocabularyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetVocabularyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetVocabularyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetVocabularyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetVocabularyOutputResponse(downloadUri: \(Swift.String(describing: downloadUri)), failureReason: \(Swift.String(describing: failureReason)), languageCode: \(Swift.String(describing: languageCode)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), vocabularyName: \(Swift.String(describing: vocabularyName)), vocabularyState: \(Swift.String(describing: vocabularyState)))"}
}

extension GetVocabularyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetVocabularyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.downloadUri = output.downloadUri
            self.failureReason = output.failureReason
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyName = output.vocabularyName
            self.vocabularyState = output.vocabularyState
        } else {
            self.downloadUri = nil
            self.failureReason = nil
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyName = nil
            self.vocabularyState = nil
        }
    }
}

public struct GetVocabularyOutputResponse: Swift.Equatable {
    /// The S3 location where the vocabulary is stored. Use this URI to get the contents of the vocabulary. The URI is available for a limited time.
    public var downloadUri: Swift.String?
    /// If the VocabularyState field is FAILED, this field contains information about why the job failed.
    public var failureReason: Swift.String?
    /// The language code of the vocabulary entries.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// The date and time that the vocabulary was last modified.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the vocabulary to return.
    public var vocabularyName: Swift.String?
    /// The processing state of the vocabulary.
    public var vocabularyState: TranscribeClientTypes.VocabularyState?

    public init (
        downloadUri: Swift.String? = nil,
        failureReason: Swift.String? = nil,
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        vocabularyName: Swift.String? = nil,
        vocabularyState: TranscribeClientTypes.VocabularyState? = nil
    )
    {
        self.downloadUri = downloadUri
        self.failureReason = failureReason
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyName = vocabularyName
        self.vocabularyState = vocabularyState
    }
}

struct GetVocabularyOutputResponseBody: Swift.Equatable {
    public let vocabularyName: Swift.String?
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let vocabularyState: TranscribeClientTypes.VocabularyState?
    public let lastModifiedTime: ClientRuntime.Date?
    public let failureReason: Swift.String?
    public let downloadUri: Swift.String?
}

extension GetVocabularyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case downloadUri = "DownloadUri"
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyName = "VocabularyName"
        case vocabularyState = "VocabularyState"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let vocabularyStateDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.VocabularyState.self, forKey: .vocabularyState)
        vocabularyState = vocabularyStateDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let downloadUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .downloadUri)
        downloadUri = downloadUriDecoded
    }
}

extension TranscribeClientTypes.InputDataConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case dataAccessRoleArn = "DataAccessRoleArn"
        case s3Uri = "S3Uri"
        case tuningDataS3Uri = "TuningDataS3Uri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let dataAccessRoleArn = dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let s3Uri = s3Uri {
            try encodeContainer.encode(s3Uri, forKey: .s3Uri)
        }
        if let tuningDataS3Uri = tuningDataS3Uri {
            try encodeContainer.encode(tuningDataS3Uri, forKey: .tuningDataS3Uri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .s3Uri)
        s3Uri = s3UriDecoded
        let tuningDataS3UriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .tuningDataS3Uri)
        tuningDataS3Uri = tuningDataS3UriDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
    }
}

extension TranscribeClientTypes.InputDataConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InputDataConfig(dataAccessRoleArn: \(Swift.String(describing: dataAccessRoleArn)), s3Uri: \(Swift.String(describing: s3Uri)), tuningDataS3Uri: \(Swift.String(describing: tuningDataS3Uri)))"}
}

extension TranscribeClientTypes {
    /// The object that contains the Amazon S3 object location and access role required to train and tune your custom language model.
    public struct InputDataConfig: Swift.Equatable {
        /// The Amazon Resource Name (ARN) that uniquely identifies the permissions you've given Amazon Transcribe to access your Amazon S3 buckets containing your media files or text data. ARNs have the format arn:partition:service:region:account-id:resource-type/resource-id.
        /// This member is required.
        public var dataAccessRoleArn: Swift.String?
        /// The Amazon S3 prefix you specify to access the plain text files that you use to train your custom language model.
        /// This member is required.
        public var s3Uri: Swift.String?
        /// The Amazon S3 prefix you specify to access the plain text files that you use to tune your custom language model.
        public var tuningDataS3Uri: Swift.String?

        public init (
            dataAccessRoleArn: Swift.String? = nil,
            s3Uri: Swift.String? = nil,
            tuningDataS3Uri: Swift.String? = nil
        )
        {
            self.dataAccessRoleArn = dataAccessRoleArn
            self.s3Uri = s3Uri
            self.tuningDataS3Uri = tuningDataS3Uri
        }
    }

}

extension InternalFailureException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalFailureException(message: \(Swift.String(describing: message)))"}
}

extension InternalFailureException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalFailureExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// There was an internal error. Check the error message and try your request again.
public struct InternalFailureException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalFailureExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalFailureExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TranscribeClientTypes.InterruptionFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case absoluteTimeRange = "AbsoluteTimeRange"
        case negate = "Negate"
        case participantRole = "ParticipantRole"
        case relativeTimeRange = "RelativeTimeRange"
        case threshold = "Threshold"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let absoluteTimeRange = absoluteTimeRange {
            try encodeContainer.encode(absoluteTimeRange, forKey: .absoluteTimeRange)
        }
        if let negate = negate {
            try encodeContainer.encode(negate, forKey: .negate)
        }
        if let participantRole = participantRole {
            try encodeContainer.encode(participantRole.rawValue, forKey: .participantRole)
        }
        if let relativeTimeRange = relativeTimeRange {
            try encodeContainer.encode(relativeTimeRange, forKey: .relativeTimeRange)
        }
        if let threshold = threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .threshold)
        threshold = thresholdDecoded
        let participantRoleDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ParticipantRole.self, forKey: .participantRole)
        participantRole = participantRoleDecoded
        let absoluteTimeRangeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.AbsoluteTimeRange.self, forKey: .absoluteTimeRange)
        absoluteTimeRange = absoluteTimeRangeDecoded
        let relativeTimeRangeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.RelativeTimeRange.self, forKey: .relativeTimeRange)
        relativeTimeRange = relativeTimeRangeDecoded
        let negateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .negate)
        negate = negateDecoded
    }
}

extension TranscribeClientTypes.InterruptionFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InterruptionFilter(absoluteTimeRange: \(Swift.String(describing: absoluteTimeRange)), negate: \(Swift.String(describing: negate)), participantRole: \(Swift.String(describing: participantRole)), relativeTimeRange: \(Swift.String(describing: relativeTimeRange)), threshold: \(Swift.String(describing: threshold)))"}
}

extension TranscribeClientTypes {
    /// An object that enables you to configure your category to be applied to call analytics jobs where either the customer or agent was interrupted.
    public struct InterruptionFilter: Swift.Equatable {
        /// An object you can use to specify a time range (in milliseconds) for when you'd want to find the interruption. For example, you could search for an interruption between the 30,000 millisecond mark and the 45,000 millisecond mark. You could also specify the time period as the first 15,000 milliseconds or the last 15,000 milliseconds.
        public var absoluteTimeRange: TranscribeClientTypes.AbsoluteTimeRange?
        /// Set to TRUE to look for a time period where there was no interruption.
        public var negate: Swift.Bool?
        /// Indicates whether the caller or customer was interrupting.
        public var participantRole: TranscribeClientTypes.ParticipantRole?
        /// An object that allows percentages to specify the proportion of the call where there was a interruption. For example, you can specify the first half of the call. You can also specify the period of time between halfway through to three-quarters of the way through the call. Because the length of conversation can vary between calls, you can apply relative time ranges across all calls.
        public var relativeTimeRange: TranscribeClientTypes.RelativeTimeRange?
        /// The duration of the interruption.
        public var threshold: Swift.Int?

        public init (
            absoluteTimeRange: TranscribeClientTypes.AbsoluteTimeRange? = nil,
            negate: Swift.Bool? = nil,
            participantRole: TranscribeClientTypes.ParticipantRole? = nil,
            relativeTimeRange: TranscribeClientTypes.RelativeTimeRange? = nil,
            threshold: Swift.Int? = nil
        )
        {
            self.absoluteTimeRange = absoluteTimeRange
            self.negate = negate
            self.participantRole = participantRole
            self.relativeTimeRange = relativeTimeRange
            self.threshold = threshold
        }
    }

}

extension TranscribeClientTypes.JobExecutionSettings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case allowDeferredExecution = "AllowDeferredExecution"
        case dataAccessRoleArn = "DataAccessRoleArn"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let allowDeferredExecution = allowDeferredExecution {
            try encodeContainer.encode(allowDeferredExecution, forKey: .allowDeferredExecution)
        }
        if let dataAccessRoleArn = dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let allowDeferredExecutionDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .allowDeferredExecution)
        allowDeferredExecution = allowDeferredExecutionDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
    }
}

extension TranscribeClientTypes.JobExecutionSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobExecutionSettings(allowDeferredExecution: \(Swift.String(describing: allowDeferredExecution)), dataAccessRoleArn: \(Swift.String(describing: dataAccessRoleArn)))"}
}

extension TranscribeClientTypes {
    /// Provides information about when a transcription job should be executed.
    public struct JobExecutionSettings: Swift.Equatable {
        /// Indicates whether a job should be queued by Amazon Transcribe when the concurrent execution limit is exceeded. When the AllowDeferredExecution field is true, jobs are queued and executed when the number of executing jobs falls below the concurrent execution limit. If the field is false, Amazon Transcribe returns a LimitExceededException exception. Note that job queuing is enabled by default for call analytics jobs. If you specify the AllowDeferredExecution field, you must specify the DataAccessRoleArn field.
        public var allowDeferredExecution: Swift.Bool?
        /// The Amazon Resource Name (ARN), in the form arn:partition:service:region:account-id:resource-type/resource-id, of a role that has access to the S3 bucket that contains the input files. Amazon Transcribe assumes this role to read queued media files. If you have specified an output S3 bucket for the transcription results, this role should have access to the output bucket as well. If you specify the AllowDeferredExecution field, you must specify the DataAccessRoleArn field.
        public var dataAccessRoleArn: Swift.String?

        public init (
            allowDeferredExecution: Swift.Bool? = nil,
            dataAccessRoleArn: Swift.String? = nil
        )
        {
            self.allowDeferredExecution = allowDeferredExecution
            self.dataAccessRoleArn = dataAccessRoleArn
        }
    }

}

extension TranscribeClientTypes {
    public enum LanguageCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case afZa
        case arAe
        case arSa
        case cyGb
        case daDk
        case deCh
        case deDe
        case enAb
        case enAu
        case enGb
        case enIe
        case enIn
        case enNz
        case enUs
        case enWl
        case enZa
        case esEs
        case esUs
        case faIr
        case frCa
        case frFr
        case gaIe
        case gdGb
        case heIl
        case hiIn
        case idId
        case itIt
        case jaJp
        case koKr
        case msMy
        case nlNl
        case ptBr
        case ptPt
        case ruRu
        case taIn
        case teIn
        case thTh
        case trTr
        case zhCn
        case zhTw
        case sdkUnknown(Swift.String)

        public static var allCases: [LanguageCode] {
            return [
                .afZa,
                .arAe,
                .arSa,
                .cyGb,
                .daDk,
                .deCh,
                .deDe,
                .enAb,
                .enAu,
                .enGb,
                .enIe,
                .enIn,
                .enNz,
                .enUs,
                .enWl,
                .enZa,
                .esEs,
                .esUs,
                .faIr,
                .frCa,
                .frFr,
                .gaIe,
                .gdGb,
                .heIl,
                .hiIn,
                .idId,
                .itIt,
                .jaJp,
                .koKr,
                .msMy,
                .nlNl,
                .ptBr,
                .ptPt,
                .ruRu,
                .taIn,
                .teIn,
                .thTh,
                .trTr,
                .zhCn,
                .zhTw,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .afZa: return "af-ZA"
            case .arAe: return "ar-AE"
            case .arSa: return "ar-SA"
            case .cyGb: return "cy-GB"
            case .daDk: return "da-DK"
            case .deCh: return "de-CH"
            case .deDe: return "de-DE"
            case .enAb: return "en-AB"
            case .enAu: return "en-AU"
            case .enGb: return "en-GB"
            case .enIe: return "en-IE"
            case .enIn: return "en-IN"
            case .enNz: return "en-NZ"
            case .enUs: return "en-US"
            case .enWl: return "en-WL"
            case .enZa: return "en-ZA"
            case .esEs: return "es-ES"
            case .esUs: return "es-US"
            case .faIr: return "fa-IR"
            case .frCa: return "fr-CA"
            case .frFr: return "fr-FR"
            case .gaIe: return "ga-IE"
            case .gdGb: return "gd-GB"
            case .heIl: return "he-IL"
            case .hiIn: return "hi-IN"
            case .idId: return "id-ID"
            case .itIt: return "it-IT"
            case .jaJp: return "ja-JP"
            case .koKr: return "ko-KR"
            case .msMy: return "ms-MY"
            case .nlNl: return "nl-NL"
            case .ptBr: return "pt-BR"
            case .ptPt: return "pt-PT"
            case .ruRu: return "ru-RU"
            case .taIn: return "ta-IN"
            case .teIn: return "te-IN"
            case .thTh: return "th-TH"
            case .trTr: return "tr-TR"
            case .zhCn: return "zh-CN"
            case .zhTw: return "zh-TW"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LanguageCode(rawValue: rawValue) ?? LanguageCode.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes.LanguageIdSettings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageModelName = "LanguageModelName"
        case vocabularyFilterName = "VocabularyFilterName"
        case vocabularyName = "VocabularyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageModelName = languageModelName {
            try encodeContainer.encode(languageModelName, forKey: .languageModelName)
        }
        if let vocabularyFilterName = vocabularyFilterName {
            try encodeContainer.encode(vocabularyFilterName, forKey: .vocabularyFilterName)
        }
        if let vocabularyName = vocabularyName {
            try encodeContainer.encode(vocabularyName, forKey: .vocabularyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let vocabularyFilterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyFilterName)
        vocabularyFilterName = vocabularyFilterNameDecoded
        let languageModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageModelName)
        languageModelName = languageModelNameDecoded
    }
}

extension TranscribeClientTypes.LanguageIdSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LanguageIdSettings(languageModelName: \(Swift.String(describing: languageModelName)), vocabularyFilterName: \(Swift.String(describing: vocabularyFilterName)), vocabularyName: \(Swift.String(describing: vocabularyName)))"}
}

extension TranscribeClientTypes {
    /// Language-specific settings that can be specified when language identification is enabled.
    public struct LanguageIdSettings: Swift.Equatable {
        /// The name of the language model you want to use when transcribing your audio. The model you specify must have the same language code as the transcription job; if the languages don't match, the language model won't be applied.
        public var languageModelName: Swift.String?
        /// The name of the vocabulary filter you want to use when transcribing your audio. The filter you specify must have the same language code as the transcription job; if the languages don't match, the vocabulary filter won't be applied.
        public var vocabularyFilterName: Swift.String?
        /// The name of the vocabulary you want to use when processing your transcription job. The vocabulary you specify must have the same language code as the transcription job; if the languages don't match, the vocabulary won't be applied.
        public var vocabularyName: Swift.String?

        public init (
            languageModelName: Swift.String? = nil,
            vocabularyFilterName: Swift.String? = nil,
            vocabularyName: Swift.String? = nil
        )
        {
            self.languageModelName = languageModelName
            self.vocabularyFilterName = vocabularyFilterName
            self.vocabularyName = vocabularyName
        }
    }

}

extension TranscribeClientTypes.LanguageModel: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case baseModelName = "BaseModelName"
        case createTime = "CreateTime"
        case failureReason = "FailureReason"
        case inputDataConfig = "InputDataConfig"
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case modelName = "ModelName"
        case modelStatus = "ModelStatus"
        case upgradeAvailability = "UpgradeAvailability"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let baseModelName = baseModelName {
            try encodeContainer.encode(baseModelName.rawValue, forKey: .baseModelName)
        }
        if let createTime = createTime {
            try encodeContainer.encode(createTime.timeIntervalSince1970, forKey: .createTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let inputDataConfig = inputDataConfig {
            try encodeContainer.encode(inputDataConfig, forKey: .inputDataConfig)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let modelName = modelName {
            try encodeContainer.encode(modelName, forKey: .modelName)
        }
        if let modelStatus = modelStatus {
            try encodeContainer.encode(modelStatus.rawValue, forKey: .modelStatus)
        }
        if let upgradeAvailability = upgradeAvailability {
            try encodeContainer.encode(upgradeAvailability, forKey: .upgradeAvailability)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let modelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .modelName)
        modelName = modelNameDecoded
        let createTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .createTime)
        createTime = createTimeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.CLMLanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let baseModelNameDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.BaseModelName.self, forKey: .baseModelName)
        baseModelName = baseModelNameDecoded
        let modelStatusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ModelStatus.self, forKey: .modelStatus)
        modelStatus = modelStatusDecoded
        let upgradeAvailabilityDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .upgradeAvailability)
        upgradeAvailability = upgradeAvailabilityDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let inputDataConfigDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.InputDataConfig.self, forKey: .inputDataConfig)
        inputDataConfig = inputDataConfigDecoded
    }
}

extension TranscribeClientTypes.LanguageModel: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LanguageModel(baseModelName: \(Swift.String(describing: baseModelName)), createTime: \(Swift.String(describing: createTime)), failureReason: \(Swift.String(describing: failureReason)), inputDataConfig: \(Swift.String(describing: inputDataConfig)), languageCode: \(Swift.String(describing: languageCode)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), modelName: \(Swift.String(describing: modelName)), modelStatus: \(Swift.String(describing: modelStatus)), upgradeAvailability: \(Swift.String(describing: upgradeAvailability)))"}
}

extension TranscribeClientTypes {
    /// The structure used to describe a custom language model.
    public struct LanguageModel: Swift.Equatable {
        /// The Amazon Transcribe standard language model, or base model used to create the custom language model.
        public var baseModelName: TranscribeClientTypes.BaseModelName?
        /// The time the custom language model was created.
        public var createTime: ClientRuntime.Date?
        /// The reason why the custom language model couldn't be created.
        public var failureReason: Swift.String?
        /// The data access role and Amazon S3 prefixes for the input files used to train the custom language model.
        public var inputDataConfig: TranscribeClientTypes.InputDataConfig?
        /// The language code you used to create your custom language model.
        public var languageCode: TranscribeClientTypes.CLMLanguageCode?
        /// The most recent time the custom language model was modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The name of the custom language model.
        public var modelName: Swift.String?
        /// The creation status of a custom language model. When the status is COMPLETED the model is ready for use.
        public var modelStatus: TranscribeClientTypes.ModelStatus?
        /// Whether the base model used for the custom language model is up to date. If this field is true then you are running the most up-to-date version of the base model in your custom language model.
        public var upgradeAvailability: Swift.Bool?

        public init (
            baseModelName: TranscribeClientTypes.BaseModelName? = nil,
            createTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            inputDataConfig: TranscribeClientTypes.InputDataConfig? = nil,
            languageCode: TranscribeClientTypes.CLMLanguageCode? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            modelName: Swift.String? = nil,
            modelStatus: TranscribeClientTypes.ModelStatus? = nil,
            upgradeAvailability: Swift.Bool? = nil
        )
        {
            self.baseModelName = baseModelName
            self.createTime = createTime
            self.failureReason = failureReason
            self.inputDataConfig = inputDataConfig
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.modelName = modelName
            self.modelStatus = modelStatus
            self.upgradeAvailability = upgradeAvailability
        }
    }

}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// Either you have sent too many requests or your input file is too long. Wait before you resend your request, or use a smaller file and resend the request.
public struct LimitExceededException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ListCallAnalyticsCategoriesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCallAnalyticsCategoriesInput(maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListCallAnalyticsCategoriesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListCallAnalyticsCategoriesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCallAnalyticsCategoriesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCallAnalyticsCategoriesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCallAnalyticsCategoriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCallAnalyticsCategoriesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCallAnalyticsCategoriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCallAnalyticsCategoriesOutputError>
}

public struct ListCallAnalyticsCategoriesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCallAnalyticsCategoriesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCallAnalyticsCategoriesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCallAnalyticsCategoriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCallAnalyticsCategoriesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCallAnalyticsCategoriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCallAnalyticsCategoriesOutputError>
}

public struct ListCallAnalyticsCategoriesInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCallAnalyticsCategoriesInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListCallAnalyticsCategoriesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCallAnalyticsCategoriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListCallAnalyticsCategoriesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListCallAnalyticsCategoriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCallAnalyticsCategoriesOutputError>
}

public struct ListCallAnalyticsCategoriesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCallAnalyticsCategoriesInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListCallAnalyticsCategoriesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCallAnalyticsCategoriesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListCallAnalyticsCategoriesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListCallAnalyticsCategoriesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCallAnalyticsCategoriesOutputError>
}

public struct ListCallAnalyticsCategoriesInput: Swift.Equatable {
    /// The maximum number of categories to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
    public var maxResults: Swift.Int?
    /// When included, NextTokenfetches the next set of categories if the result of the previous request was truncated.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct ListCallAnalyticsCategoriesInputBody: Swift.Equatable {
}

extension ListCallAnalyticsCategoriesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListCallAnalyticsCategoriesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCallAnalyticsCategoriesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCallAnalyticsCategoriesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCallAnalyticsCategoriesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCallAnalyticsCategoriesOutputResponse(categories: \(Swift.String(describing: categories)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListCallAnalyticsCategoriesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCallAnalyticsCategoriesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.categories = output.categories
            self.nextToken = output.nextToken
        } else {
            self.categories = nil
            self.nextToken = nil
        }
    }
}

public struct ListCallAnalyticsCategoriesOutputResponse: Swift.Equatable {
    /// A list of objects containing information about analytics categories.
    public var categories: [TranscribeClientTypes.CategoryProperties]?
    /// The operation returns a page of jobs at a time. The maximum size of the list is set by the MaxResults parameter. If there are more categories in the list than the page size, Amazon Transcribe returns the NextPage token. Include the token in the next request to the operation to return the next page of analytics categories.
    public var nextToken: Swift.String?

    public init (
        categories: [TranscribeClientTypes.CategoryProperties]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.categories = categories
        self.nextToken = nextToken
    }
}

struct ListCallAnalyticsCategoriesOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let categories: [TranscribeClientTypes.CategoryProperties]?
}

extension ListCallAnalyticsCategoriesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case categories = "Categories"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let categoriesContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.CategoryProperties?].self, forKey: .categories)
        var categoriesDecoded0:[TranscribeClientTypes.CategoryProperties]? = nil
        if let categoriesContainer = categoriesContainer {
            categoriesDecoded0 = [TranscribeClientTypes.CategoryProperties]()
            for structure0 in categoriesContainer {
                if let structure0 = structure0 {
                    categoriesDecoded0?.append(structure0)
                }
            }
        }
        categories = categoriesDecoded0
    }
}

extension ListCallAnalyticsJobsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCallAnalyticsJobsInput(jobNameContains: \(Swift.String(describing: jobNameContains)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListCallAnalyticsJobsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListCallAnalyticsJobsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCallAnalyticsJobsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCallAnalyticsJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCallAnalyticsJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCallAnalyticsJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCallAnalyticsJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCallAnalyticsJobsOutputError>
}

public struct ListCallAnalyticsJobsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCallAnalyticsJobsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListCallAnalyticsJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCallAnalyticsJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListCallAnalyticsJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListCallAnalyticsJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCallAnalyticsJobsOutputError>
}

public struct ListCallAnalyticsJobsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCallAnalyticsJobsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListCallAnalyticsJobsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCallAnalyticsJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListCallAnalyticsJobsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListCallAnalyticsJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCallAnalyticsJobsOutputError>
}

public struct ListCallAnalyticsJobsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListCallAnalyticsJobsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListCallAnalyticsJobsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListCallAnalyticsJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListCallAnalyticsJobsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListCallAnalyticsJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListCallAnalyticsJobsOutputError>
}

public struct ListCallAnalyticsJobsInput: Swift.Equatable {
    /// When specified, the jobs returned in the list are limited to jobs whose name contains the specified string.
    public var jobNameContains: Swift.String?
    /// The maximum number of call analytics jobs to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
    public var maxResults: Swift.Int?
    /// If you receive a truncated result in the previous request of , include NextToken to fetch the next set of jobs.
    public var nextToken: Swift.String?
    /// When specified, returns only call analytics jobs with the specified status. Jobs are ordered by creation date, with the most recent jobs returned first. If you don't specify a status, Amazon Transcribe returns all analytics jobs ordered by creation date.
    public var status: TranscribeClientTypes.CallAnalyticsJobStatus?

    public init (
        jobNameContains: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: TranscribeClientTypes.CallAnalyticsJobStatus? = nil
    )
    {
        self.jobNameContains = jobNameContains
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListCallAnalyticsJobsInputBody: Swift.Equatable {
}

extension ListCallAnalyticsJobsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListCallAnalyticsJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListCallAnalyticsJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListCallAnalyticsJobsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListCallAnalyticsJobsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListCallAnalyticsJobsOutputResponse(callAnalyticsJobSummaries: \(Swift.String(describing: callAnalyticsJobSummaries)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListCallAnalyticsJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListCallAnalyticsJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.callAnalyticsJobSummaries = output.callAnalyticsJobSummaries
            self.nextToken = output.nextToken
            self.status = output.status
        } else {
            self.callAnalyticsJobSummaries = nil
            self.nextToken = nil
            self.status = nil
        }
    }
}

public struct ListCallAnalyticsJobsOutputResponse: Swift.Equatable {
    /// A list of objects containing summary information for a transcription job.
    public var callAnalyticsJobSummaries: [TranscribeClientTypes.CallAnalyticsJobSummary]?
    /// The operation returns a page of jobs at a time. The maximum size of the page is set by the MaxResults parameter. If there are more jobs in the list than the page size, Amazon Transcribe returns the NextPage token. Include the token in your next request to the operation to return next page of jobs.
    public var nextToken: Swift.String?
    /// When specified, returns only call analytics jobs with that status. Jobs are ordered by creation date, with the most recent jobs returned first. If you don't specify a status, Amazon Transcribe returns all transcription jobs ordered by creation date.
    public var status: TranscribeClientTypes.CallAnalyticsJobStatus?

    public init (
        callAnalyticsJobSummaries: [TranscribeClientTypes.CallAnalyticsJobSummary]? = nil,
        nextToken: Swift.String? = nil,
        status: TranscribeClientTypes.CallAnalyticsJobStatus? = nil
    )
    {
        self.callAnalyticsJobSummaries = callAnalyticsJobSummaries
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListCallAnalyticsJobsOutputResponseBody: Swift.Equatable {
    public let status: TranscribeClientTypes.CallAnalyticsJobStatus?
    public let nextToken: Swift.String?
    public let callAnalyticsJobSummaries: [TranscribeClientTypes.CallAnalyticsJobSummary]?
}

extension ListCallAnalyticsJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAnalyticsJobSummaries = "CallAnalyticsJobSummaries"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.CallAnalyticsJobStatus.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let callAnalyticsJobSummariesContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.CallAnalyticsJobSummary?].self, forKey: .callAnalyticsJobSummaries)
        var callAnalyticsJobSummariesDecoded0:[TranscribeClientTypes.CallAnalyticsJobSummary]? = nil
        if let callAnalyticsJobSummariesContainer = callAnalyticsJobSummariesContainer {
            callAnalyticsJobSummariesDecoded0 = [TranscribeClientTypes.CallAnalyticsJobSummary]()
            for structure0 in callAnalyticsJobSummariesContainer {
                if let structure0 = structure0 {
                    callAnalyticsJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        callAnalyticsJobSummaries = callAnalyticsJobSummariesDecoded0
    }
}

extension ListLanguageModelsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListLanguageModelsInput(maxResults: \(Swift.String(describing: maxResults)), nameContains: \(Swift.String(describing: nameContains)), nextToken: \(Swift.String(describing: nextToken)), statusEquals: \(Swift.String(describing: statusEquals)))"}
}

extension ListLanguageModelsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListLanguageModelsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLanguageModelsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLanguageModelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLanguageModelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLanguageModelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLanguageModelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLanguageModelsOutputError>
}

public struct ListLanguageModelsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLanguageModelsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListLanguageModelsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLanguageModelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListLanguageModelsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListLanguageModelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLanguageModelsOutputError>
}

public struct ListLanguageModelsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLanguageModelsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListLanguageModelsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLanguageModelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListLanguageModelsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListLanguageModelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLanguageModelsOutputError>
}

public struct ListLanguageModelsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListLanguageModelsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListLanguageModelsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListLanguageModelsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListLanguageModelsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListLanguageModelsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListLanguageModelsOutputError>
}

public struct ListLanguageModelsInput: Swift.Equatable {
    /// The maximum number of language models to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
    public var maxResults: Swift.Int?
    /// When specified, the custom language model names returned contain the substring you've specified.
    public var nameContains: Swift.String?
    /// When included, fetches the next set of jobs if the result of the previous request was truncated.
    public var nextToken: Swift.String?
    /// When specified, returns only custom language models with the specified status. Language models are ordered by creation date, with the newest models first. If you don't specify a status, Amazon Transcribe returns all custom language models ordered by date.
    public var statusEquals: TranscribeClientTypes.ModelStatus?

    public init (
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        statusEquals: TranscribeClientTypes.ModelStatus? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.statusEquals = statusEquals
    }
}

struct ListLanguageModelsInputBody: Swift.Equatable {
}

extension ListLanguageModelsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListLanguageModelsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListLanguageModelsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListLanguageModelsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListLanguageModelsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListLanguageModelsOutputResponse(models: \(Swift.String(describing: models)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListLanguageModelsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListLanguageModelsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.models = output.models
            self.nextToken = output.nextToken
        } else {
            self.models = nil
            self.nextToken = nil
        }
    }
}

public struct ListLanguageModelsOutputResponse: Swift.Equatable {
    /// A list of objects containing information about custom language models.
    public var models: [TranscribeClientTypes.LanguageModel]?
    /// The operation returns a page of jobs at a time. The maximum size of the list is set by the MaxResults parameter. If there are more language models in the list than the page size, Amazon Transcribe returns the NextPage token. Include the token in the next request to the operation to return the next page of language models.
    public var nextToken: Swift.String?

    public init (
        models: [TranscribeClientTypes.LanguageModel]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.models = models
        self.nextToken = nextToken
    }
}

struct ListLanguageModelsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let models: [TranscribeClientTypes.LanguageModel]?
}

extension ListLanguageModelsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case models = "Models"
        case nextToken = "NextToken"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let modelsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.LanguageModel?].self, forKey: .models)
        var modelsDecoded0:[TranscribeClientTypes.LanguageModel]? = nil
        if let modelsContainer = modelsContainer {
            modelsDecoded0 = [TranscribeClientTypes.LanguageModel]()
            for structure0 in modelsContainer {
                if let structure0 = structure0 {
                    modelsDecoded0?.append(structure0)
                }
            }
        }
        models = modelsDecoded0
    }
}

extension ListMedicalTranscriptionJobsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMedicalTranscriptionJobsInput(jobNameContains: \(Swift.String(describing: jobNameContains)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListMedicalTranscriptionJobsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListMedicalTranscriptionJobsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMedicalTranscriptionJobsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMedicalTranscriptionJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMedicalTranscriptionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMedicalTranscriptionJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMedicalTranscriptionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMedicalTranscriptionJobsOutputError>
}

public struct ListMedicalTranscriptionJobsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMedicalTranscriptionJobsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMedicalTranscriptionJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMedicalTranscriptionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMedicalTranscriptionJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMedicalTranscriptionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMedicalTranscriptionJobsOutputError>
}

public struct ListMedicalTranscriptionJobsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMedicalTranscriptionJobsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListMedicalTranscriptionJobsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMedicalTranscriptionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListMedicalTranscriptionJobsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListMedicalTranscriptionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMedicalTranscriptionJobsOutputError>
}

public struct ListMedicalTranscriptionJobsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMedicalTranscriptionJobsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListMedicalTranscriptionJobsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMedicalTranscriptionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListMedicalTranscriptionJobsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListMedicalTranscriptionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMedicalTranscriptionJobsOutputError>
}

public struct ListMedicalTranscriptionJobsInput: Swift.Equatable {
    /// When specified, the jobs returned in the list are limited to jobs whose name contains the specified string.
    public var jobNameContains: Swift.String?
    /// The maximum number of medical transcription jobs to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
    public var maxResults: Swift.Int?
    /// If you a receive a truncated result in the previous request of ListMedicalTranscriptionJobs, include NextToken to fetch the next set of jobs.
    public var nextToken: Swift.String?
    /// When specified, returns only medical transcription jobs with the specified status. Jobs are ordered by creation date, with the newest jobs returned first. If you don't specify a status, Amazon Transcribe Medical returns all transcription jobs ordered by creation date.
    public var status: TranscribeClientTypes.TranscriptionJobStatus?

    public init (
        jobNameContains: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: TranscribeClientTypes.TranscriptionJobStatus? = nil
    )
    {
        self.jobNameContains = jobNameContains
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListMedicalTranscriptionJobsInputBody: Swift.Equatable {
}

extension ListMedicalTranscriptionJobsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListMedicalTranscriptionJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMedicalTranscriptionJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMedicalTranscriptionJobsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMedicalTranscriptionJobsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMedicalTranscriptionJobsOutputResponse(medicalTranscriptionJobSummaries: \(Swift.String(describing: medicalTranscriptionJobSummaries)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListMedicalTranscriptionJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListMedicalTranscriptionJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.medicalTranscriptionJobSummaries = output.medicalTranscriptionJobSummaries
            self.nextToken = output.nextToken
            self.status = output.status
        } else {
            self.medicalTranscriptionJobSummaries = nil
            self.nextToken = nil
            self.status = nil
        }
    }
}

public struct ListMedicalTranscriptionJobsOutputResponse: Swift.Equatable {
    /// A list of objects containing summary information for a transcription job.
    public var medicalTranscriptionJobSummaries: [TranscribeClientTypes.MedicalTranscriptionJobSummary]?
    /// The ListMedicalTranscriptionJobs operation returns a page of jobs at a time. The maximum size of the page is set by the MaxResults parameter. If the number of jobs exceeds what can fit on a page, Amazon Transcribe Medical returns the NextPage token. Include the token in the next request to the ListMedicalTranscriptionJobs operation to return in the next page of jobs.
    public var nextToken: Swift.String?
    /// The requested status of the medical transcription jobs returned.
    public var status: TranscribeClientTypes.TranscriptionJobStatus?

    public init (
        medicalTranscriptionJobSummaries: [TranscribeClientTypes.MedicalTranscriptionJobSummary]? = nil,
        nextToken: Swift.String? = nil,
        status: TranscribeClientTypes.TranscriptionJobStatus? = nil
    )
    {
        self.medicalTranscriptionJobSummaries = medicalTranscriptionJobSummaries
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListMedicalTranscriptionJobsOutputResponseBody: Swift.Equatable {
    public let status: TranscribeClientTypes.TranscriptionJobStatus?
    public let nextToken: Swift.String?
    public let medicalTranscriptionJobSummaries: [TranscribeClientTypes.MedicalTranscriptionJobSummary]?
}

extension ListMedicalTranscriptionJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case medicalTranscriptionJobSummaries = "MedicalTranscriptionJobSummaries"
        case nextToken = "NextToken"
        case status = "Status"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.TranscriptionJobStatus.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let medicalTranscriptionJobSummariesContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.MedicalTranscriptionJobSummary?].self, forKey: .medicalTranscriptionJobSummaries)
        var medicalTranscriptionJobSummariesDecoded0:[TranscribeClientTypes.MedicalTranscriptionJobSummary]? = nil
        if let medicalTranscriptionJobSummariesContainer = medicalTranscriptionJobSummariesContainer {
            medicalTranscriptionJobSummariesDecoded0 = [TranscribeClientTypes.MedicalTranscriptionJobSummary]()
            for structure0 in medicalTranscriptionJobSummariesContainer {
                if let structure0 = structure0 {
                    medicalTranscriptionJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        medicalTranscriptionJobSummaries = medicalTranscriptionJobSummariesDecoded0
    }
}

extension ListMedicalVocabulariesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMedicalVocabulariesInput(maxResults: \(Swift.String(describing: maxResults)), nameContains: \(Swift.String(describing: nameContains)), nextToken: \(Swift.String(describing: nextToken)), stateEquals: \(Swift.String(describing: stateEquals)))"}
}

extension ListMedicalVocabulariesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListMedicalVocabulariesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMedicalVocabulariesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMedicalVocabulariesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMedicalVocabulariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMedicalVocabulariesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMedicalVocabulariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMedicalVocabulariesOutputError>
}

public struct ListMedicalVocabulariesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMedicalVocabulariesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListMedicalVocabulariesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMedicalVocabulariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListMedicalVocabulariesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListMedicalVocabulariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMedicalVocabulariesOutputError>
}

public struct ListMedicalVocabulariesInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMedicalVocabulariesInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListMedicalVocabulariesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMedicalVocabulariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListMedicalVocabulariesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListMedicalVocabulariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMedicalVocabulariesOutputError>
}

public struct ListMedicalVocabulariesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListMedicalVocabulariesInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListMedicalVocabulariesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListMedicalVocabulariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListMedicalVocabulariesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListMedicalVocabulariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListMedicalVocabulariesOutputError>
}

public struct ListMedicalVocabulariesInput: Swift.Equatable {
    /// The maximum number of vocabularies to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
    public var maxResults: Swift.Int?
    /// Returns vocabularies whose names contain the specified string. The search is not case sensitive. ListMedicalVocabularies returns both "vocabularyname" and "VocabularyName".
    public var nameContains: Swift.String?
    /// If the result of your previous request to ListMedicalVocabularies was truncated, include the NextToken to fetch the next set of vocabularies.
    public var nextToken: Swift.String?
    /// When specified, returns only vocabularies with the VocabularyState equal to the specified vocabulary state. Use this field to see which vocabularies are ready for your medical transcription jobs.
    public var stateEquals: TranscribeClientTypes.VocabularyState?

    public init (
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        stateEquals: TranscribeClientTypes.VocabularyState? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.stateEquals = stateEquals
    }
}

struct ListMedicalVocabulariesInputBody: Swift.Equatable {
}

extension ListMedicalVocabulariesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListMedicalVocabulariesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListMedicalVocabulariesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListMedicalVocabulariesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListMedicalVocabulariesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListMedicalVocabulariesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)), vocabularies: \(Swift.String(describing: vocabularies)))"}
}

extension ListMedicalVocabulariesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListMedicalVocabulariesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.status = output.status
            self.vocabularies = output.vocabularies
        } else {
            self.nextToken = nil
            self.status = nil
            self.vocabularies = nil
        }
    }
}

public struct ListMedicalVocabulariesOutputResponse: Swift.Equatable {
    /// The ListMedicalVocabularies operation returns a page of vocabularies at a time. You set the maximum number of vocabularies to return on a page with the MaxResults parameter. If there are more jobs in the list will fit on a page, Amazon Transcribe Medical returns the NextPage token. To return the next page of vocabularies, include the token in the next request to the ListMedicalVocabularies operation .
    public var nextToken: Swift.String?
    /// The requested vocabulary state.
    public var status: TranscribeClientTypes.VocabularyState?
    /// A list of objects that describe the vocabularies that match your search criteria.
    public var vocabularies: [TranscribeClientTypes.VocabularyInfo]?

    public init (
        nextToken: Swift.String? = nil,
        status: TranscribeClientTypes.VocabularyState? = nil,
        vocabularies: [TranscribeClientTypes.VocabularyInfo]? = nil
    )
    {
        self.nextToken = nextToken
        self.status = status
        self.vocabularies = vocabularies
    }
}

struct ListMedicalVocabulariesOutputResponseBody: Swift.Equatable {
    public let status: TranscribeClientTypes.VocabularyState?
    public let nextToken: Swift.String?
    public let vocabularies: [TranscribeClientTypes.VocabularyInfo]?
}

extension ListMedicalVocabulariesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case status = "Status"
        case vocabularies = "Vocabularies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.VocabularyState.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let vocabulariesContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.VocabularyInfo?].self, forKey: .vocabularies)
        var vocabulariesDecoded0:[TranscribeClientTypes.VocabularyInfo]? = nil
        if let vocabulariesContainer = vocabulariesContainer {
            vocabulariesDecoded0 = [TranscribeClientTypes.VocabularyInfo]()
            for structure0 in vocabulariesContainer {
                if let structure0 = structure0 {
                    vocabulariesDecoded0?.append(structure0)
                }
            }
        }
        vocabularies = vocabulariesDecoded0
    }
}

extension ListTagsForResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceInput(resourceArn: \(Swift.String(describing: resourceArn)))"}
}

extension ListTagsForResourceInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTagsForResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTagsForResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTagsForResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListTagsForResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTagsForResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTagsForResourceInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListTagsForResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTagsForResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTagsForResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTagsForResourceOutputError>
}

public struct ListTagsForResourceInput: Swift.Equatable {
    /// Lists all tags associated with a given Amazon Resource Name (ARN). ARNs have the format arn:partition:service:region:account-id:resource-type/resource-id (for example, arn:aws:transcribe:us-east-1:account-id:transcription-job/your-job-name). Valid values for resource-type are: transcription-job, medical-transcription-job, vocabulary, medical-vocabulary, vocabulary-filter, and language-model.
    /// This member is required.
    public var resourceArn: Swift.String?

    public init (
        resourceArn: Swift.String? = nil
    )
    {
        self.resourceArn = resourceArn
    }
}

struct ListTagsForResourceInputBody: Swift.Equatable {
}

extension ListTagsForResourceInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTagsForResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTagsForResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTagsForResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTagsForResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTagsForResourceOutputResponse(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension ListTagsForResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTagsForResourceOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.resourceArn = output.resourceArn
            self.tags = output.tags
        } else {
            self.resourceArn = nil
            self.tags = nil
        }
    }
}

public struct ListTagsForResourceOutputResponse: Swift.Equatable {
    /// Lists all tags associated with the given Amazon Resource Name (ARN).
    public var resourceArn: Swift.String?
    /// Lists all tags associated with the given transcription job, vocabulary, or resource.
    public var tags: [TranscribeClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [TranscribeClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct ListTagsForResourceOutputResponseBody: Swift.Equatable {
    public let resourceArn: Swift.String?
    public let tags: [TranscribeClientTypes.Tag]?
}

extension ListTagsForResourceOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case resourceArn = "ResourceArn"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let resourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .resourceArn)
        resourceArn = resourceArnDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TranscribeClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TranscribeClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension ListTranscriptionJobsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTranscriptionJobsInput(jobNameContains: \(Swift.String(describing: jobNameContains)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)))"}
}

extension ListTranscriptionJobsInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListTranscriptionJobsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTranscriptionJobsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTranscriptionJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTranscriptionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTranscriptionJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTranscriptionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTranscriptionJobsOutputError>
}

public struct ListTranscriptionJobsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTranscriptionJobsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListTranscriptionJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTranscriptionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListTranscriptionJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListTranscriptionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTranscriptionJobsOutputError>
}

public struct ListTranscriptionJobsInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTranscriptionJobsInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListTranscriptionJobsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTranscriptionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTranscriptionJobsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTranscriptionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTranscriptionJobsOutputError>
}

public struct ListTranscriptionJobsInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListTranscriptionJobsInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListTranscriptionJobsInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListTranscriptionJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListTranscriptionJobsInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListTranscriptionJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListTranscriptionJobsOutputError>
}

public struct ListTranscriptionJobsInput: Swift.Equatable {
    /// When specified, the jobs returned in the list are limited to jobs whose name contains the specified string.
    public var jobNameContains: Swift.String?
    /// The maximum number of jobs to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
    public var maxResults: Swift.Int?
    /// If the result of the previous request to ListTranscriptionJobs is truncated, include the NextToken to fetch the next set of jobs.
    public var nextToken: Swift.String?
    /// When specified, returns only transcription jobs with the specified status. Jobs are ordered by creation date, with the newest jobs returned first. If you don’t specify a status, Amazon Transcribe returns all transcription jobs ordered by creation date.
    public var status: TranscribeClientTypes.TranscriptionJobStatus?

    public init (
        jobNameContains: Swift.String? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        status: TranscribeClientTypes.TranscriptionJobStatus? = nil
    )
    {
        self.jobNameContains = jobNameContains
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.status = status
    }
}

struct ListTranscriptionJobsInputBody: Swift.Equatable {
}

extension ListTranscriptionJobsInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListTranscriptionJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListTranscriptionJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListTranscriptionJobsOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListTranscriptionJobsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListTranscriptionJobsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)), transcriptionJobSummaries: \(Swift.String(describing: transcriptionJobSummaries)))"}
}

extension ListTranscriptionJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListTranscriptionJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.status = output.status
            self.transcriptionJobSummaries = output.transcriptionJobSummaries
        } else {
            self.nextToken = nil
            self.status = nil
            self.transcriptionJobSummaries = nil
        }
    }
}

public struct ListTranscriptionJobsOutputResponse: Swift.Equatable {
    /// The ListTranscriptionJobs operation returns a page of jobs at a time. The maximum size of the page is set by the MaxResults parameter. If there are more jobs in the list than the page size, Amazon Transcribe returns the NextPage token. Include the token in the next request to the ListTranscriptionJobs operation to return in the next page of jobs.
    public var nextToken: Swift.String?
    /// The requested status of the jobs returned.
    public var status: TranscribeClientTypes.TranscriptionJobStatus?
    /// A list of objects containing summary information for a transcription job.
    public var transcriptionJobSummaries: [TranscribeClientTypes.TranscriptionJobSummary]?

    public init (
        nextToken: Swift.String? = nil,
        status: TranscribeClientTypes.TranscriptionJobStatus? = nil,
        transcriptionJobSummaries: [TranscribeClientTypes.TranscriptionJobSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.status = status
        self.transcriptionJobSummaries = transcriptionJobSummaries
    }
}

struct ListTranscriptionJobsOutputResponseBody: Swift.Equatable {
    public let status: TranscribeClientTypes.TranscriptionJobStatus?
    public let nextToken: Swift.String?
    public let transcriptionJobSummaries: [TranscribeClientTypes.TranscriptionJobSummary]?
}

extension ListTranscriptionJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case status = "Status"
        case transcriptionJobSummaries = "TranscriptionJobSummaries"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.TranscriptionJobStatus.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let transcriptionJobSummariesContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.TranscriptionJobSummary?].self, forKey: .transcriptionJobSummaries)
        var transcriptionJobSummariesDecoded0:[TranscribeClientTypes.TranscriptionJobSummary]? = nil
        if let transcriptionJobSummariesContainer = transcriptionJobSummariesContainer {
            transcriptionJobSummariesDecoded0 = [TranscribeClientTypes.TranscriptionJobSummary]()
            for structure0 in transcriptionJobSummariesContainer {
                if let structure0 = structure0 {
                    transcriptionJobSummariesDecoded0?.append(structure0)
                }
            }
        }
        transcriptionJobSummaries = transcriptionJobSummariesDecoded0
    }
}

extension ListVocabulariesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVocabulariesInput(maxResults: \(Swift.String(describing: maxResults)), nameContains: \(Swift.String(describing: nameContains)), nextToken: \(Swift.String(describing: nextToken)), stateEquals: \(Swift.String(describing: stateEquals)))"}
}

extension ListVocabulariesInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListVocabulariesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVocabulariesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVocabulariesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVocabulariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVocabulariesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVocabulariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVocabulariesOutputError>
}

public struct ListVocabulariesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVocabulariesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVocabulariesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVocabulariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVocabulariesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVocabulariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVocabulariesOutputError>
}

public struct ListVocabulariesInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVocabulariesInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListVocabulariesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVocabulariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListVocabulariesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListVocabulariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVocabulariesOutputError>
}

public struct ListVocabulariesInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVocabulariesInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListVocabulariesInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVocabulariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListVocabulariesInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListVocabulariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVocabulariesOutputError>
}

public struct ListVocabulariesInput: Swift.Equatable {
    /// The maximum number of vocabularies to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
    public var maxResults: Swift.Int?
    /// When specified, the vocabularies returned in the list are limited to vocabularies whose name contains the specified string. The search is not case sensitive, ListVocabularies returns both "vocabularyname" and "VocabularyName" in the response list.
    public var nameContains: Swift.String?
    /// If the result of the previous request to ListVocabularies was truncated, include the NextToken to fetch the next set of jobs.
    public var nextToken: Swift.String?
    /// When specified, only returns vocabularies with the VocabularyState field equal to the specified state.
    public var stateEquals: TranscribeClientTypes.VocabularyState?

    public init (
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil,
        stateEquals: TranscribeClientTypes.VocabularyState? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
        self.stateEquals = stateEquals
    }
}

struct ListVocabulariesInputBody: Swift.Equatable {
}

extension ListVocabulariesInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListVocabulariesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVocabulariesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListVocabulariesOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVocabulariesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVocabulariesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), status: \(Swift.String(describing: status)), vocabularies: \(Swift.String(describing: vocabularies)))"}
}

extension ListVocabulariesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListVocabulariesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.status = output.status
            self.vocabularies = output.vocabularies
        } else {
            self.nextToken = nil
            self.status = nil
            self.vocabularies = nil
        }
    }
}

public struct ListVocabulariesOutputResponse: Swift.Equatable {
    /// The ListVocabularies operation returns a page of vocabularies at a time. The maximum size of the page is set in the MaxResults parameter. If there are more jobs in the list than will fit on the page, Amazon Transcribe returns the NextPage token. To return in the next page of jobs, include the token in the next request to the ListVocabularies operation.
    public var nextToken: Swift.String?
    /// The requested vocabulary state.
    public var status: TranscribeClientTypes.VocabularyState?
    /// A list of objects that describe the vocabularies that match the search criteria in the request.
    public var vocabularies: [TranscribeClientTypes.VocabularyInfo]?

    public init (
        nextToken: Swift.String? = nil,
        status: TranscribeClientTypes.VocabularyState? = nil,
        vocabularies: [TranscribeClientTypes.VocabularyInfo]? = nil
    )
    {
        self.nextToken = nextToken
        self.status = status
        self.vocabularies = vocabularies
    }
}

struct ListVocabulariesOutputResponseBody: Swift.Equatable {
    public let status: TranscribeClientTypes.VocabularyState?
    public let nextToken: Swift.String?
    public let vocabularies: [TranscribeClientTypes.VocabularyInfo]?
}

extension ListVocabulariesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case status = "Status"
        case vocabularies = "Vocabularies"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.VocabularyState.self, forKey: .status)
        status = statusDecoded
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let vocabulariesContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.VocabularyInfo?].self, forKey: .vocabularies)
        var vocabulariesDecoded0:[TranscribeClientTypes.VocabularyInfo]? = nil
        if let vocabulariesContainer = vocabulariesContainer {
            vocabulariesDecoded0 = [TranscribeClientTypes.VocabularyInfo]()
            for structure0 in vocabulariesContainer {
                if let structure0 = structure0 {
                    vocabulariesDecoded0?.append(structure0)
                }
            }
        }
        vocabularies = vocabulariesDecoded0
    }
}

extension ListVocabularyFiltersInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVocabularyFiltersInput(maxResults: \(Swift.String(describing: maxResults)), nameContains: \(Swift.String(describing: nameContains)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension ListVocabularyFiltersInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct ListVocabularyFiltersInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVocabularyFiltersInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVocabularyFiltersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVocabularyFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVocabularyFiltersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVocabularyFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVocabularyFiltersOutputError>
}

public struct ListVocabularyFiltersInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVocabularyFiltersInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ListVocabularyFiltersInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVocabularyFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ListVocabularyFiltersInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ListVocabularyFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVocabularyFiltersOutputError>
}

public struct ListVocabularyFiltersInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVocabularyFiltersInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: ListVocabularyFiltersInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVocabularyFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListVocabularyFiltersInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListVocabularyFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVocabularyFiltersOutputError>
}

public struct ListVocabularyFiltersInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ListVocabularyFiltersInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: ListVocabularyFiltersInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ListVocabularyFiltersOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = ListVocabularyFiltersInput
    public typealias MOutput = ClientRuntime.OperationOutput<ListVocabularyFiltersOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ListVocabularyFiltersOutputError>
}

public struct ListVocabularyFiltersInput: Swift.Equatable {
    /// The maximum number of filters to return in each page of results. If there are fewer results than the value you specify, only the actual results are returned. If you do not specify a value, the default of 5 is used.
    public var maxResults: Swift.Int?
    /// Filters the response so that it only contains vocabulary filters whose name contains the specified string.
    public var nameContains: Swift.String?
    /// If the result of the previous request to ListVocabularyFilters was truncated, include the NextToken to fetch the next set of collections.
    public var nextToken: Swift.String?

    public init (
        maxResults: Swift.Int? = nil,
        nameContains: Swift.String? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.maxResults = maxResults
        self.nameContains = nameContains
        self.nextToken = nextToken
    }
}

struct ListVocabularyFiltersInputBody: Swift.Equatable {
}

extension ListVocabularyFiltersInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension ListVocabularyFiltersOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ListVocabularyFiltersOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ListVocabularyFiltersOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ListVocabularyFiltersOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ListVocabularyFiltersOutputResponse(nextToken: \(Swift.String(describing: nextToken)), vocabularyFilters: \(Swift.String(describing: vocabularyFilters)))"}
}

extension ListVocabularyFiltersOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ListVocabularyFiltersOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.vocabularyFilters = output.vocabularyFilters
        } else {
            self.nextToken = nil
            self.vocabularyFilters = nil
        }
    }
}

public struct ListVocabularyFiltersOutputResponse: Swift.Equatable {
    /// The ListVocabularyFilters operation returns a page of collections at a time. The maximum size of the page is set by the MaxResults parameter. If there are more jobs in the list than the page size, Amazon Transcribe returns the NextPage token. Include the token in the next request to the ListVocabularyFilters operation to return in the next page of jobs.
    public var nextToken: Swift.String?
    /// The list of vocabulary filters. It contains at most MaxResults number of filters. If there are more filters, call the ListVocabularyFilters operation again with the NextToken parameter in the request set to the value of the NextToken field in the response.
    public var vocabularyFilters: [TranscribeClientTypes.VocabularyFilterInfo]?

    public init (
        nextToken: Swift.String? = nil,
        vocabularyFilters: [TranscribeClientTypes.VocabularyFilterInfo]? = nil
    )
    {
        self.nextToken = nextToken
        self.vocabularyFilters = vocabularyFilters
    }
}

struct ListVocabularyFiltersOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let vocabularyFilters: [TranscribeClientTypes.VocabularyFilterInfo]?
}

extension ListVocabularyFiltersOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken = "NextToken"
        case vocabularyFilters = "VocabularyFilters"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let vocabularyFiltersContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.VocabularyFilterInfo?].self, forKey: .vocabularyFilters)
        var vocabularyFiltersDecoded0:[TranscribeClientTypes.VocabularyFilterInfo]? = nil
        if let vocabularyFiltersContainer = vocabularyFiltersContainer {
            vocabularyFiltersDecoded0 = [TranscribeClientTypes.VocabularyFilterInfo]()
            for structure0 in vocabularyFiltersContainer {
                if let structure0 = structure0 {
                    vocabularyFiltersDecoded0?.append(structure0)
                }
            }
        }
        vocabularyFilters = vocabularyFiltersDecoded0
    }
}

extension TranscribeClientTypes.Media: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case mediaFileUri = "MediaFileUri"
        case redactedMediaFileUri = "RedactedMediaFileUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let mediaFileUri = mediaFileUri {
            try encodeContainer.encode(mediaFileUri, forKey: .mediaFileUri)
        }
        if let redactedMediaFileUri = redactedMediaFileUri {
            try encodeContainer.encode(redactedMediaFileUri, forKey: .redactedMediaFileUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mediaFileUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .mediaFileUri)
        mediaFileUri = mediaFileUriDecoded
        let redactedMediaFileUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .redactedMediaFileUri)
        redactedMediaFileUri = redactedMediaFileUriDecoded
    }
}

extension TranscribeClientTypes.Media: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Media(mediaFileUri: \(Swift.String(describing: mediaFileUri)), redactedMediaFileUri: \(Swift.String(describing: redactedMediaFileUri)))"}
}

extension TranscribeClientTypes {
    /// Describes the input media file in a transcription request.
    public struct Media: Swift.Equatable {
        /// The S3 object location of the input media file. The URI must be in the same region as the API endpoint that you are calling. The general form is: For example: For more information about S3 object names, see [Object Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys) in the Amazon S3 Developer Guide.
        public var mediaFileUri: Swift.String?
        /// The S3 object location for your redacted output media file. This is only supported for call analytics jobs.
        public var redactedMediaFileUri: Swift.String?

        public init (
            mediaFileUri: Swift.String? = nil,
            redactedMediaFileUri: Swift.String? = nil
        )
        {
            self.mediaFileUri = mediaFileUri
            self.redactedMediaFileUri = redactedMediaFileUri
        }
    }

}

extension TranscribeClientTypes {
    public enum MediaFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case amr
        case flac
        case mp3
        case mp4
        case ogg
        case wav
        case webm
        case sdkUnknown(Swift.String)

        public static var allCases: [MediaFormat] {
            return [
                .amr,
                .flac,
                .mp3,
                .mp4,
                .ogg,
                .wav,
                .webm,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .amr: return "amr"
            case .flac: return "flac"
            case .mp3: return "mp3"
            case .mp4: return "mp4"
            case .ogg: return "ogg"
            case .wav: return "wav"
            case .webm: return "webm"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MediaFormat(rawValue: rawValue) ?? MediaFormat.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes {
    public enum MedicalContentIdentificationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case phi
        case sdkUnknown(Swift.String)

        public static var allCases: [MedicalContentIdentificationType] {
            return [
                .phi,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .phi: return "PHI"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MedicalContentIdentificationType(rawValue: rawValue) ?? MedicalContentIdentificationType.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes.MedicalTranscript: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transcriptFileUri = "TranscriptFileUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let transcriptFileUri = transcriptFileUri {
            try encodeContainer.encode(transcriptFileUri, forKey: .transcriptFileUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptFileUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transcriptFileUri)
        transcriptFileUri = transcriptFileUriDecoded
    }
}

extension TranscribeClientTypes.MedicalTranscript: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MedicalTranscript(transcriptFileUri: \(Swift.String(describing: transcriptFileUri)))"}
}

extension TranscribeClientTypes {
    /// Identifies the location of a medical transcript.
    public struct MedicalTranscript: Swift.Equatable {
        /// The S3 object location of the medical transcript. Use this URI to access the medical transcript. This URI points to the S3 bucket you created to store the medical transcript.
        public var transcriptFileUri: Swift.String?

        public init (
            transcriptFileUri: Swift.String? = nil
        )
        {
            self.transcriptFileUri = transcriptFileUri
        }
    }

}

extension TranscribeClientTypes.MedicalTranscriptionJob: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime = "CompletionTime"
        case contentIdentificationType = "ContentIdentificationType"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case medicalTranscriptionJobName = "MedicalTranscriptionJobName"
        case settings = "Settings"
        case specialty = "Specialty"
        case startTime = "StartTime"
        case tags = "Tags"
        case transcript = "Transcript"
        case transcriptionJobStatus = "TranscriptionJobStatus"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let contentIdentificationType = contentIdentificationType {
            try encodeContainer.encode(contentIdentificationType.rawValue, forKey: .contentIdentificationType)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let media = media {
            try encodeContainer.encode(media, forKey: .media)
        }
        if let mediaFormat = mediaFormat {
            try encodeContainer.encode(mediaFormat.rawValue, forKey: .mediaFormat)
        }
        if let mediaSampleRateHertz = mediaSampleRateHertz {
            try encodeContainer.encode(mediaSampleRateHertz, forKey: .mediaSampleRateHertz)
        }
        if let medicalTranscriptionJobName = medicalTranscriptionJobName {
            try encodeContainer.encode(medicalTranscriptionJobName, forKey: .medicalTranscriptionJobName)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let specialty = specialty {
            try encodeContainer.encode(specialty.rawValue, forKey: .specialty)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let transcript = transcript {
            try encodeContainer.encode(transcript, forKey: .transcript)
        }
        if let transcriptionJobStatus = transcriptionJobStatus {
            try encodeContainer.encode(transcriptionJobStatus.rawValue, forKey: .transcriptionJobStatus)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let medicalTranscriptionJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .medicalTranscriptionJobName)
        medicalTranscriptionJobName = medicalTranscriptionJobNameDecoded
        let transcriptionJobStatusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.TranscriptionJobStatus.self, forKey: .transcriptionJobStatus)
        transcriptionJobStatus = transcriptionJobStatusDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let mediaSampleRateHertzDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mediaSampleRateHertz)
        mediaSampleRateHertz = mediaSampleRateHertzDecoded
        let mediaFormatDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MediaFormat.self, forKey: .mediaFormat)
        mediaFormat = mediaFormatDecoded
        let mediaDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Media.self, forKey: .media)
        media = mediaDecoded
        let transcriptDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MedicalTranscript.self, forKey: .transcript)
        transcript = transcriptDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MedicalTranscriptionSetting.self, forKey: .settings)
        settings = settingsDecoded
        let contentIdentificationTypeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MedicalContentIdentificationType.self, forKey: .contentIdentificationType)
        contentIdentificationType = contentIdentificationTypeDecoded
        let specialtyDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Specialty.self, forKey: .specialty)
        specialty = specialtyDecoded
        let typeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ModelType.self, forKey: .type)
        type = typeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TranscribeClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TranscribeClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TranscribeClientTypes.MedicalTranscriptionJob: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MedicalTranscriptionJob(completionTime: \(Swift.String(describing: completionTime)), contentIdentificationType: \(Swift.String(describing: contentIdentificationType)), creationTime: \(Swift.String(describing: creationTime)), failureReason: \(Swift.String(describing: failureReason)), languageCode: \(Swift.String(describing: languageCode)), media: \(Swift.String(describing: media)), mediaFormat: \(Swift.String(describing: mediaFormat)), mediaSampleRateHertz: \(Swift.String(describing: mediaSampleRateHertz)), medicalTranscriptionJobName: \(Swift.String(describing: medicalTranscriptionJobName)), settings: \(Swift.String(describing: settings)), specialty: \(Swift.String(describing: specialty)), startTime: \(Swift.String(describing: startTime)), tags: \(Swift.String(describing: tags)), transcript: \(Swift.String(describing: transcript)), transcriptionJobStatus: \(Swift.String(describing: transcriptionJobStatus)), type: \(Swift.String(describing: type)))"}
}

extension TranscribeClientTypes {
    /// The data structure that contains the information for a medical transcription job.
    public struct MedicalTranscriptionJob: Swift.Equatable {
        /// A timestamp that shows when the job was completed.
        public var completionTime: ClientRuntime.Date?
        /// Shows the type of content that you've configured Amazon Transcribe Medical to identify in a transcription job. If the value is PHI, you've configured the job to identify personal health information (PHI) in the transcription output.
        public var contentIdentificationType: TranscribeClientTypes.MedicalContentIdentificationType?
        /// A timestamp that shows when the job was created.
        public var creationTime: ClientRuntime.Date?
        /// If the TranscriptionJobStatus field is FAILED, this field contains information about why the job failed. The FailureReason field contains one of the following values:
        ///
        /// * Unsupported media format- The media format specified in the MediaFormat field of the request isn't valid. See the description of the MediaFormat field for a list of valid values.
        ///
        /// * The media format provided does not match the detected media format- The media format of the audio file doesn't match the format specified in the MediaFormat field in the request. Check the media format of your media file and make sure the two values match.
        ///
        /// * Invalid sample rate for audio file- The sample rate specified in the MediaSampleRateHertz of the request isn't valid. The sample rate must be between 8,000 and 48,000 Hertz.
        ///
        /// * The sample rate provided does not match the detected sample rate- The sample rate in the audio file doesn't match the sample rate specified in the MediaSampleRateHertz field in the request. Check the sample rate of your media file and make sure that the two values match.
        ///
        /// * Invalid file size: file size too large- The size of your audio file is larger than what Amazon Transcribe Medical can process. For more information, see [Guidelines and Quotas](https://docs.aws.amazon.com/transcribe/latest/dg/limits-guidelines.html#limits) in the Amazon Transcribe Medical Guide
        ///
        /// * Invalid number of channels: number of channels too large- Your audio contains more channels than Amazon Transcribe Medical is configured to process. To request additional channels, see [Amazon Transcribe Medical Endpoints and Quotas](https://docs.aws.amazon.com/general/latest/gr/transcribe-medical.html) in the Amazon Web Services General Reference
        public var failureReason: Swift.String?
        /// The language code for the language spoken in the source audio file. US English (en-US) is the only supported language for medical transcriptions. Any other value you enter for language code results in a BadRequestException error.
        public var languageCode: TranscribeClientTypes.LanguageCode?
        /// Describes the input media file in a transcription request.
        public var media: TranscribeClientTypes.Media?
        /// The format of the input media file.
        public var mediaFormat: TranscribeClientTypes.MediaFormat?
        /// The sample rate, in Hertz, of the source audio containing medical information. If you don't specify the sample rate, Amazon Transcribe Medical determines it for you. If you choose to specify the sample rate, it must match the rate detected by Amazon Transcribe Medical. In most cases, you should leave the MedicalMediaSampleHertz blank and let Amazon Transcribe Medical determine the sample rate.
        public var mediaSampleRateHertz: Swift.Int?
        /// The name for a given medical transcription job.
        public var medicalTranscriptionJobName: Swift.String?
        /// Object that contains object.
        public var settings: TranscribeClientTypes.MedicalTranscriptionSetting?
        /// The medical specialty of any clinicians providing a dictation or having a conversation. Refer to [Transcribing a medical conversation](https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-medical-conversation.html)for a list of supported specialties.
        public var specialty: TranscribeClientTypes.Specialty?
        /// A timestamp that shows when the job started processing.
        public var startTime: ClientRuntime.Date?
        /// A key:value pair assigned to a given medical transcription job.
        public var tags: [TranscribeClientTypes.Tag]?
        /// An object that contains the MedicalTranscript. The MedicalTranscript contains the TranscriptFileUri.
        public var transcript: TranscribeClientTypes.MedicalTranscript?
        /// The completion status of a medical transcription job.
        public var transcriptionJobStatus: TranscribeClientTypes.TranscriptionJobStatus?
        /// The type of speech in the transcription job. CONVERSATION is generally used for patient-physician dialogues. DICTATION is the setting for physicians speaking their notes after seeing a patient. For more information, see [What is Amazon Transcribe Medical?](https://docs.aws.amazon.com/transcribe/latest/dg/what-is-transcribe-med.html).
        public var type: TranscribeClientTypes.ModelType?

        public init (
            completionTime: ClientRuntime.Date? = nil,
            contentIdentificationType: TranscribeClientTypes.MedicalContentIdentificationType? = nil,
            creationTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            languageCode: TranscribeClientTypes.LanguageCode? = nil,
            media: TranscribeClientTypes.Media? = nil,
            mediaFormat: TranscribeClientTypes.MediaFormat? = nil,
            mediaSampleRateHertz: Swift.Int? = nil,
            medicalTranscriptionJobName: Swift.String? = nil,
            settings: TranscribeClientTypes.MedicalTranscriptionSetting? = nil,
            specialty: TranscribeClientTypes.Specialty? = nil,
            startTime: ClientRuntime.Date? = nil,
            tags: [TranscribeClientTypes.Tag]? = nil,
            transcript: TranscribeClientTypes.MedicalTranscript? = nil,
            transcriptionJobStatus: TranscribeClientTypes.TranscriptionJobStatus? = nil,
            type: TranscribeClientTypes.ModelType? = nil
        )
        {
            self.completionTime = completionTime
            self.contentIdentificationType = contentIdentificationType
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.media = media
            self.mediaFormat = mediaFormat
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.medicalTranscriptionJobName = medicalTranscriptionJobName
            self.settings = settings
            self.specialty = specialty
            self.startTime = startTime
            self.tags = tags
            self.transcript = transcript
            self.transcriptionJobStatus = transcriptionJobStatus
            self.type = type
        }
    }

}

extension TranscribeClientTypes.MedicalTranscriptionJobSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime = "CompletionTime"
        case contentIdentificationType = "ContentIdentificationType"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case languageCode = "LanguageCode"
        case medicalTranscriptionJobName = "MedicalTranscriptionJobName"
        case outputLocationType = "OutputLocationType"
        case specialty = "Specialty"
        case startTime = "StartTime"
        case transcriptionJobStatus = "TranscriptionJobStatus"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let contentIdentificationType = contentIdentificationType {
            try encodeContainer.encode(contentIdentificationType.rawValue, forKey: .contentIdentificationType)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let medicalTranscriptionJobName = medicalTranscriptionJobName {
            try encodeContainer.encode(medicalTranscriptionJobName, forKey: .medicalTranscriptionJobName)
        }
        if let outputLocationType = outputLocationType {
            try encodeContainer.encode(outputLocationType.rawValue, forKey: .outputLocationType)
        }
        if let specialty = specialty {
            try encodeContainer.encode(specialty.rawValue, forKey: .specialty)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let transcriptionJobStatus = transcriptionJobStatus {
            try encodeContainer.encode(transcriptionJobStatus.rawValue, forKey: .transcriptionJobStatus)
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let medicalTranscriptionJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .medicalTranscriptionJobName)
        medicalTranscriptionJobName = medicalTranscriptionJobNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let transcriptionJobStatusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.TranscriptionJobStatus.self, forKey: .transcriptionJobStatus)
        transcriptionJobStatus = transcriptionJobStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let outputLocationTypeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.OutputLocationType.self, forKey: .outputLocationType)
        outputLocationType = outputLocationTypeDecoded
        let specialtyDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Specialty.self, forKey: .specialty)
        specialty = specialtyDecoded
        let contentIdentificationTypeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MedicalContentIdentificationType.self, forKey: .contentIdentificationType)
        contentIdentificationType = contentIdentificationTypeDecoded
        let typeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ModelType.self, forKey: .type)
        type = typeDecoded
    }
}

extension TranscribeClientTypes.MedicalTranscriptionJobSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MedicalTranscriptionJobSummary(completionTime: \(Swift.String(describing: completionTime)), contentIdentificationType: \(Swift.String(describing: contentIdentificationType)), creationTime: \(Swift.String(describing: creationTime)), failureReason: \(Swift.String(describing: failureReason)), languageCode: \(Swift.String(describing: languageCode)), medicalTranscriptionJobName: \(Swift.String(describing: medicalTranscriptionJobName)), outputLocationType: \(Swift.String(describing: outputLocationType)), specialty: \(Swift.String(describing: specialty)), startTime: \(Swift.String(describing: startTime)), transcriptionJobStatus: \(Swift.String(describing: transcriptionJobStatus)), type: \(Swift.String(describing: type)))"}
}

extension TranscribeClientTypes {
    /// Provides summary information about a transcription job.
    public struct MedicalTranscriptionJobSummary: Swift.Equatable {
        /// A timestamp that shows when the job was completed.
        public var completionTime: ClientRuntime.Date?
        /// Shows the type of information you've configured Amazon Transcribe Medical to identify in a transcription job. If the value is PHI, you've configured the transcription job to identify personal health information (PHI).
        public var contentIdentificationType: TranscribeClientTypes.MedicalContentIdentificationType?
        /// A timestamp that shows when the medical transcription job was created.
        public var creationTime: ClientRuntime.Date?
        /// If the TranscriptionJobStatus field is FAILED, a description of the error.
        public var failureReason: Swift.String?
        /// The language of the transcript in the source audio file.
        public var languageCode: TranscribeClientTypes.LanguageCode?
        /// The name of a medical transcription job.
        public var medicalTranscriptionJobName: Swift.String?
        /// Indicates the location of the transcription job's output. This field must be the path of an S3 bucket; if you don't already have an S3 bucket, one is created based on the path you add.
        public var outputLocationType: TranscribeClientTypes.OutputLocationType?
        /// The medical specialty of the transcription job. Refer to [Transcribing a medical conversation](https://docs.aws.amazon.com/transcribe/latest/dg/transcribe-medical-conversation.html)for a list of supported specialties.
        public var specialty: TranscribeClientTypes.Specialty?
        /// A timestamp that shows when the job began processing.
        public var startTime: ClientRuntime.Date?
        /// The status of the medical transcription job.
        public var transcriptionJobStatus: TranscribeClientTypes.TranscriptionJobStatus?
        /// The speech of the clinician in the input audio.
        public var type: TranscribeClientTypes.ModelType?

        public init (
            completionTime: ClientRuntime.Date? = nil,
            contentIdentificationType: TranscribeClientTypes.MedicalContentIdentificationType? = nil,
            creationTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            languageCode: TranscribeClientTypes.LanguageCode? = nil,
            medicalTranscriptionJobName: Swift.String? = nil,
            outputLocationType: TranscribeClientTypes.OutputLocationType? = nil,
            specialty: TranscribeClientTypes.Specialty? = nil,
            startTime: ClientRuntime.Date? = nil,
            transcriptionJobStatus: TranscribeClientTypes.TranscriptionJobStatus? = nil,
            type: TranscribeClientTypes.ModelType? = nil
        )
        {
            self.completionTime = completionTime
            self.contentIdentificationType = contentIdentificationType
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.languageCode = languageCode
            self.medicalTranscriptionJobName = medicalTranscriptionJobName
            self.outputLocationType = outputLocationType
            self.specialty = specialty
            self.startTime = startTime
            self.transcriptionJobStatus = transcriptionJobStatus
            self.type = type
        }
    }

}

extension TranscribeClientTypes.MedicalTranscriptionSetting: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelIdentification = "ChannelIdentification"
        case maxAlternatives = "MaxAlternatives"
        case maxSpeakerLabels = "MaxSpeakerLabels"
        case showAlternatives = "ShowAlternatives"
        case showSpeakerLabels = "ShowSpeakerLabels"
        case vocabularyName = "VocabularyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelIdentification = channelIdentification {
            try encodeContainer.encode(channelIdentification, forKey: .channelIdentification)
        }
        if let maxAlternatives = maxAlternatives {
            try encodeContainer.encode(maxAlternatives, forKey: .maxAlternatives)
        }
        if let maxSpeakerLabels = maxSpeakerLabels {
            try encodeContainer.encode(maxSpeakerLabels, forKey: .maxSpeakerLabels)
        }
        if let showAlternatives = showAlternatives {
            try encodeContainer.encode(showAlternatives, forKey: .showAlternatives)
        }
        if let showSpeakerLabels = showSpeakerLabels {
            try encodeContainer.encode(showSpeakerLabels, forKey: .showSpeakerLabels)
        }
        if let vocabularyName = vocabularyName {
            try encodeContainer.encode(vocabularyName, forKey: .vocabularyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let showSpeakerLabelsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .showSpeakerLabels)
        showSpeakerLabels = showSpeakerLabelsDecoded
        let maxSpeakerLabelsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSpeakerLabels)
        maxSpeakerLabels = maxSpeakerLabelsDecoded
        let channelIdentificationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .channelIdentification)
        channelIdentification = channelIdentificationDecoded
        let showAlternativesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .showAlternatives)
        showAlternatives = showAlternativesDecoded
        let maxAlternativesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAlternatives)
        maxAlternatives = maxAlternativesDecoded
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
    }
}

extension TranscribeClientTypes.MedicalTranscriptionSetting: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MedicalTranscriptionSetting(channelIdentification: \(Swift.String(describing: channelIdentification)), maxAlternatives: \(Swift.String(describing: maxAlternatives)), maxSpeakerLabels: \(Swift.String(describing: maxSpeakerLabels)), showAlternatives: \(Swift.String(describing: showAlternatives)), showSpeakerLabels: \(Swift.String(describing: showSpeakerLabels)), vocabularyName: \(Swift.String(describing: vocabularyName)))"}
}

extension TranscribeClientTypes {
    /// Optional settings for the [StartMedicalTranscriptionJob] operation.
    public struct MedicalTranscriptionSetting: Swift.Equatable {
        /// Instructs Amazon Transcribe Medical to process each audio channel separately and then merge the transcription output of each channel into a single transcription. Amazon Transcribe Medical also produces a transcription of each item detected on an audio channel, including the start time and end time of the item and alternative transcriptions of item. The alternative transcriptions also come with confidence scores provided by Amazon Transcribe Medical. You can't set both ShowSpeakerLabels and ChannelIdentification in the same request. If you set both, your request returns a BadRequestException
        public var channelIdentification: Swift.Bool?
        /// The maximum number of alternatives that you tell the service to return. If you specify the MaxAlternatives field, you must set the ShowAlternatives field to true.
        public var maxAlternatives: Swift.Int?
        /// The maximum number of speakers to identify in the input audio. If there are more speakers in the audio than this number, multiple speakers are identified as a single speaker. If you specify the MaxSpeakerLabels field, you must set the ShowSpeakerLabels field to true.
        public var maxSpeakerLabels: Swift.Int?
        /// Determines whether alternative transcripts are generated along with the transcript that has the highest confidence. If you set ShowAlternatives field to true, you must also set the maximum number of alternatives to return in the MaxAlternatives field.
        public var showAlternatives: Swift.Bool?
        /// Determines whether the transcription job uses speaker recognition to identify different speakers in the input audio. Speaker recognition labels individual speakers in the audio file. If you set the ShowSpeakerLabels field to true, you must also set the maximum number of speaker labels in the MaxSpeakerLabels field. You can't set both ShowSpeakerLabels and ChannelIdentification in the same request. If you set both, your request returns a BadRequestException.
        public var showSpeakerLabels: Swift.Bool?
        /// The name of the vocabulary to use when processing a medical transcription job.
        public var vocabularyName: Swift.String?

        public init (
            channelIdentification: Swift.Bool? = nil,
            maxAlternatives: Swift.Int? = nil,
            maxSpeakerLabels: Swift.Int? = nil,
            showAlternatives: Swift.Bool? = nil,
            showSpeakerLabels: Swift.Bool? = nil,
            vocabularyName: Swift.String? = nil
        )
        {
            self.channelIdentification = channelIdentification
            self.maxAlternatives = maxAlternatives
            self.maxSpeakerLabels = maxSpeakerLabels
            self.showAlternatives = showAlternatives
            self.showSpeakerLabels = showSpeakerLabels
            self.vocabularyName = vocabularyName
        }
    }

}

extension TranscribeClientTypes.ModelSettings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageModelName = "LanguageModelName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageModelName = languageModelName {
            try encodeContainer.encode(languageModelName, forKey: .languageModelName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageModelNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .languageModelName)
        languageModelName = languageModelNameDecoded
    }
}

extension TranscribeClientTypes.ModelSettings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ModelSettings(languageModelName: \(Swift.String(describing: languageModelName)))"}
}

extension TranscribeClientTypes {
    /// The object used to call your custom language model to your transcription job.
    public struct ModelSettings: Swift.Equatable {
        /// The name of your custom language model.
        public var languageModelName: Swift.String?

        public init (
            languageModelName: Swift.String? = nil
        )
        {
            self.languageModelName = languageModelName
        }
    }

}

extension TranscribeClientTypes {
    public enum ModelStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelStatus(rawValue: rawValue) ?? ModelStatus.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes.NonTalkTimeFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case absoluteTimeRange = "AbsoluteTimeRange"
        case negate = "Negate"
        case relativeTimeRange = "RelativeTimeRange"
        case threshold = "Threshold"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let absoluteTimeRange = absoluteTimeRange {
            try encodeContainer.encode(absoluteTimeRange, forKey: .absoluteTimeRange)
        }
        if let negate = negate {
            try encodeContainer.encode(negate, forKey: .negate)
        }
        if let relativeTimeRange = relativeTimeRange {
            try encodeContainer.encode(relativeTimeRange, forKey: .relativeTimeRange)
        }
        if let threshold = threshold {
            try encodeContainer.encode(threshold, forKey: .threshold)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let thresholdDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .threshold)
        threshold = thresholdDecoded
        let absoluteTimeRangeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.AbsoluteTimeRange.self, forKey: .absoluteTimeRange)
        absoluteTimeRange = absoluteTimeRangeDecoded
        let relativeTimeRangeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.RelativeTimeRange.self, forKey: .relativeTimeRange)
        relativeTimeRange = relativeTimeRangeDecoded
        let negateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .negate)
        negate = negateDecoded
    }
}

extension TranscribeClientTypes.NonTalkTimeFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NonTalkTimeFilter(absoluteTimeRange: \(Swift.String(describing: absoluteTimeRange)), negate: \(Swift.String(describing: negate)), relativeTimeRange: \(Swift.String(describing: relativeTimeRange)), threshold: \(Swift.String(describing: threshold)))"}
}

extension TranscribeClientTypes {
    /// An object that enables you to configure your category to be applied to call analytics jobs where either the customer or agent was interrupted.
    public struct NonTalkTimeFilter: Swift.Equatable {
        /// An object you can use to specify a time range (in milliseconds) for when no one is talking. For example, you could specify a time period between the 30,000 millisecond mark and the 45,000 millisecond mark. You could also specify the time period as the first 15,000 milliseconds or the last 15,000 milliseconds.
        public var absoluteTimeRange: TranscribeClientTypes.AbsoluteTimeRange?
        /// Set to TRUE to look for a time period when people were talking.
        public var negate: Swift.Bool?
        /// An object that allows percentages to specify the proportion of the call where there was silence. For example, you can specify the first half of the call. You can also specify the period of time between halfway through to three-quarters of the way through the call. Because the length of conversation can vary between calls, you can apply relative time ranges across all calls.
        public var relativeTimeRange: TranscribeClientTypes.RelativeTimeRange?
        /// The duration of the period when neither the customer nor agent was talking.
        public var threshold: Swift.Int?

        public init (
            absoluteTimeRange: TranscribeClientTypes.AbsoluteTimeRange? = nil,
            negate: Swift.Bool? = nil,
            relativeTimeRange: TranscribeClientTypes.RelativeTimeRange? = nil,
            threshold: Swift.Int? = nil
        )
        {
            self.absoluteTimeRange = absoluteTimeRange
            self.negate = negate
            self.relativeTimeRange = relativeTimeRange
            self.threshold = threshold
        }
    }

}

extension NotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "NotFoundException(message: \(Swift.String(describing: message)))"}
}

extension NotFoundException {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: NotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// We can't find the requested resource. Check the name and try your request again.
public struct NotFoundException: AWSClientRuntime.AWSHttpServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct NotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension NotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message = "Message"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension TranscribeClientTypes {
    public enum OutputLocationType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case customerBucket
        case serviceBucket
        case sdkUnknown(Swift.String)

        public static var allCases: [OutputLocationType] {
            return [
                .customerBucket,
                .serviceBucket,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .customerBucket: return "CUSTOMER_BUCKET"
            case .serviceBucket: return "SERVICE_BUCKET"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = OutputLocationType(rawValue: rawValue) ?? OutputLocationType.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes {
    public enum ParticipantRole: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case agent
        case customer
        case sdkUnknown(Swift.String)

        public static var allCases: [ParticipantRole] {
            return [
                .agent,
                .customer,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .agent: return "AGENT"
            case .customer: return "CUSTOMER"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ParticipantRole(rawValue: rawValue) ?? ParticipantRole.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes {
    public enum RedactionOutput: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case redacted
        case redactedAndUnredacted
        case sdkUnknown(Swift.String)

        public static var allCases: [RedactionOutput] {
            return [
                .redacted,
                .redactedAndUnredacted,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .redacted: return "redacted"
            case .redactedAndUnredacted: return "redacted_and_unredacted"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RedactionOutput(rawValue: rawValue) ?? RedactionOutput.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes {
    public enum RedactionType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case pii
        case sdkUnknown(Swift.String)

        public static var allCases: [RedactionType] {
            return [
                .pii,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .pii: return "PII"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RedactionType(rawValue: rawValue) ?? RedactionType.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes.RelativeTimeRange: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endPercentage = "EndPercentage"
        case first = "First"
        case last = "Last"
        case startPercentage = "StartPercentage"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endPercentage = endPercentage {
            try encodeContainer.encode(endPercentage, forKey: .endPercentage)
        }
        if let first = first {
            try encodeContainer.encode(first, forKey: .first)
        }
        if let last = last {
            try encodeContainer.encode(last, forKey: .last)
        }
        if let startPercentage = startPercentage {
            try encodeContainer.encode(startPercentage, forKey: .startPercentage)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let startPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .startPercentage)
        startPercentage = startPercentageDecoded
        let endPercentageDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .endPercentage)
        endPercentage = endPercentageDecoded
        let firstDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .first)
        first = firstDecoded
        let lastDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .last)
        last = lastDecoded
    }
}

extension TranscribeClientTypes.RelativeTimeRange: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RelativeTimeRange(endPercentage: \(Swift.String(describing: endPercentage)), first: \(Swift.String(describing: first)), last: \(Swift.String(describing: last)), startPercentage: \(Swift.String(describing: startPercentage)))"}
}

extension TranscribeClientTypes {
    /// An object that allows percentages to specify the proportion of the call where you would like to apply a filter. For example, you can specify the first half of the call. You can also specify the period of time between halfway through to three-quarters of the way through the call. Because the length of conversation can vary between calls, you can apply relative time ranges across all calls.
    public struct RelativeTimeRange: Swift.Equatable {
        /// A value that indicates the percentage of the end of the time range. To set a relative time range, you must specify a start percentage and an end percentage. For example, if you specify the following values:
        ///
        /// * StartPercentage - 10
        ///
        /// * EndPercentage - 50
        ///
        ///
        /// This looks at the time range starting from 10% of the way into the call to 50% of the way through the call. For a call that lasts 100,000 milliseconds, this example range would apply from the 10,000 millisecond mark to the 50,000 millisecond mark.
        public var endPercentage: Swift.Int?
        /// A range that takes the portion of the call up to the time in milliseconds set by the value that you've specified. For example, if you specify 120000, the time range is set for the first 120,000 milliseconds of the call.
        public var first: Swift.Int?
        /// A range that takes the portion of the call from the time in milliseconds set by the value that you've specified to the end of the call. For example, if you specify 120000, the time range is set for the last 120,000 milliseconds of the call.
        public var last: Swift.Int?
        /// A value that indicates the percentage of the beginning of the time range. To set a relative time range, you must specify a start percentage and an end percentage. For example, if you specify the following values:
        ///
        /// * StartPercentage - 10
        ///
        /// * EndPercentage - 50
        ///
        ///
        /// This looks at the time range starting from 10% of the way into the call to 50% of the way through the call. For a call that lasts 100,000 milliseconds, this example range would apply from the 10,000 millisecond mark to the 50,000 millisecond mark.
        public var startPercentage: Swift.Int?

        public init (
            endPercentage: Swift.Int? = nil,
            first: Swift.Int? = nil,
            last: Swift.Int? = nil,
            startPercentage: Swift.Int? = nil
        )
        {
            self.endPercentage = endPercentage
            self.first = first
            self.last = last
            self.startPercentage = startPercentage
        }
    }

}

extension TranscribeClientTypes.Rule: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case interruptionfilter = "InterruptionFilter"
        case nontalktimefilter = "NonTalkTimeFilter"
        case sentimentfilter = "SentimentFilter"
        case transcriptfilter = "TranscriptFilter"
        case sdkUnknown
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        switch self {
            case let .interruptionfilter(interruptionfilter):
                try container.encode(interruptionfilter, forKey: .interruptionfilter)
            case let .nontalktimefilter(nontalktimefilter):
                try container.encode(nontalktimefilter, forKey: .nontalktimefilter)
            case let .sentimentfilter(sentimentfilter):
                try container.encode(sentimentfilter, forKey: .sentimentfilter)
            case let .transcriptfilter(transcriptfilter):
                try container.encode(transcriptfilter, forKey: .transcriptfilter)
            case let .sdkUnknown(sdkUnknown):
                try container.encode(sdkUnknown, forKey: .sdkUnknown)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let values = try decoder.container(keyedBy: CodingKeys.self)
        let nontalktimefilterDecoded = try values.decodeIfPresent(TranscribeClientTypes.NonTalkTimeFilter.self, forKey: .nontalktimefilter)
        if let nontalktimefilter = nontalktimefilterDecoded {
            self = .nontalktimefilter(nontalktimefilter)
            return
        }
        let interruptionfilterDecoded = try values.decodeIfPresent(TranscribeClientTypes.InterruptionFilter.self, forKey: .interruptionfilter)
        if let interruptionfilter = interruptionfilterDecoded {
            self = .interruptionfilter(interruptionfilter)
            return
        }
        let transcriptfilterDecoded = try values.decodeIfPresent(TranscribeClientTypes.TranscriptFilter.self, forKey: .transcriptfilter)
        if let transcriptfilter = transcriptfilterDecoded {
            self = .transcriptfilter(transcriptfilter)
            return
        }
        let sentimentfilterDecoded = try values.decodeIfPresent(TranscribeClientTypes.SentimentFilter.self, forKey: .sentimentfilter)
        if let sentimentfilter = sentimentfilterDecoded {
            self = .sentimentfilter(sentimentfilter)
            return
        }
        self = .sdkUnknown("")
    }
}

extension TranscribeClientTypes {
    /// A condition in the call between the customer and the agent that you want to filter for.
    public enum Rule: Swift.Equatable {
        /// A condition for a time period when neither the customer nor the agent was talking.
        case nontalktimefilter(TranscribeClientTypes.NonTalkTimeFilter)
        /// A condition for a time period when either the customer or agent was interrupting the other person.
        case interruptionfilter(TranscribeClientTypes.InterruptionFilter)
        /// A condition that catches particular words or phrases based on a exact match. For example, if you set the phrase "I want to speak to the manager", only that exact phrase will be returned.
        case transcriptfilter(TranscribeClientTypes.TranscriptFilter)
        /// A condition that is applied to a particular customer sentiment.
        case sentimentfilter(TranscribeClientTypes.SentimentFilter)
        case sdkUnknown(Swift.String)
    }

}

extension TranscribeClientTypes.SentimentFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case absoluteTimeRange = "AbsoluteTimeRange"
        case negate = "Negate"
        case participantRole = "ParticipantRole"
        case relativeTimeRange = "RelativeTimeRange"
        case sentiments = "Sentiments"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let absoluteTimeRange = absoluteTimeRange {
            try encodeContainer.encode(absoluteTimeRange, forKey: .absoluteTimeRange)
        }
        if let negate = negate {
            try encodeContainer.encode(negate, forKey: .negate)
        }
        if let participantRole = participantRole {
            try encodeContainer.encode(participantRole.rawValue, forKey: .participantRole)
        }
        if let relativeTimeRange = relativeTimeRange {
            try encodeContainer.encode(relativeTimeRange, forKey: .relativeTimeRange)
        }
        if let sentiments = sentiments {
            var sentimentsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .sentiments)
            for sentimentvaluelist0 in sentiments {
                try sentimentsContainer.encode(sentimentvaluelist0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sentimentsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.SentimentValue?].self, forKey: .sentiments)
        var sentimentsDecoded0:[TranscribeClientTypes.SentimentValue]? = nil
        if let sentimentsContainer = sentimentsContainer {
            sentimentsDecoded0 = [TranscribeClientTypes.SentimentValue]()
            for string0 in sentimentsContainer {
                if let string0 = string0 {
                    sentimentsDecoded0?.append(string0)
                }
            }
        }
        sentiments = sentimentsDecoded0
        let absoluteTimeRangeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.AbsoluteTimeRange.self, forKey: .absoluteTimeRange)
        absoluteTimeRange = absoluteTimeRangeDecoded
        let relativeTimeRangeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.RelativeTimeRange.self, forKey: .relativeTimeRange)
        relativeTimeRange = relativeTimeRangeDecoded
        let participantRoleDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ParticipantRole.self, forKey: .participantRole)
        participantRole = participantRoleDecoded
        let negateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .negate)
        negate = negateDecoded
    }
}

extension TranscribeClientTypes.SentimentFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SentimentFilter(absoluteTimeRange: \(Swift.String(describing: absoluteTimeRange)), negate: \(Swift.String(describing: negate)), participantRole: \(Swift.String(describing: participantRole)), relativeTimeRange: \(Swift.String(describing: relativeTimeRange)), sentiments: \(Swift.String(describing: sentiments)))"}
}

extension TranscribeClientTypes {
    /// An object that enables you to specify a particular customer or agent sentiment. If at least 50 percent of the conversation turns (the back-and-forth between two speakers) in a specified time period match the specified sentiment, Amazon Transcribe will consider the sentiment a match.
    public struct SentimentFilter: Swift.Equatable {
        /// The time range, measured in seconds, of the sentiment.
        public var absoluteTimeRange: TranscribeClientTypes.AbsoluteTimeRange?
        /// Set to TRUE to look for sentiments that weren't specified in the request.
        public var negate: Swift.Bool?
        /// A value that determines whether the sentiment belongs to the customer or the agent.
        public var participantRole: TranscribeClientTypes.ParticipantRole?
        /// The time range, set in percentages, that correspond to proportion of the call.
        public var relativeTimeRange: TranscribeClientTypes.RelativeTimeRange?
        /// An array that enables you to specify sentiments for the customer or agent. You can specify one or more values.
        /// This member is required.
        public var sentiments: [TranscribeClientTypes.SentimentValue]?

        public init (
            absoluteTimeRange: TranscribeClientTypes.AbsoluteTimeRange? = nil,
            negate: Swift.Bool? = nil,
            participantRole: TranscribeClientTypes.ParticipantRole? = nil,
            relativeTimeRange: TranscribeClientTypes.RelativeTimeRange? = nil,
            sentiments: [TranscribeClientTypes.SentimentValue]? = nil
        )
        {
            self.absoluteTimeRange = absoluteTimeRange
            self.negate = negate
            self.participantRole = participantRole
            self.relativeTimeRange = relativeTimeRange
            self.sentiments = sentiments
        }
    }

}

extension TranscribeClientTypes {
    public enum SentimentValue: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mixed
        case negative
        case neutral
        case positive
        case sdkUnknown(Swift.String)

        public static var allCases: [SentimentValue] {
            return [
                .mixed,
                .negative,
                .neutral,
                .positive,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mixed: return "MIXED"
            case .negative: return "NEGATIVE"
            case .neutral: return "NEUTRAL"
            case .positive: return "POSITIVE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SentimentValue(rawValue: rawValue) ?? SentimentValue.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes.Settings: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelIdentification = "ChannelIdentification"
        case maxAlternatives = "MaxAlternatives"
        case maxSpeakerLabels = "MaxSpeakerLabels"
        case showAlternatives = "ShowAlternatives"
        case showSpeakerLabels = "ShowSpeakerLabels"
        case vocabularyFilterMethod = "VocabularyFilterMethod"
        case vocabularyFilterName = "VocabularyFilterName"
        case vocabularyName = "VocabularyName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelIdentification = channelIdentification {
            try encodeContainer.encode(channelIdentification, forKey: .channelIdentification)
        }
        if let maxAlternatives = maxAlternatives {
            try encodeContainer.encode(maxAlternatives, forKey: .maxAlternatives)
        }
        if let maxSpeakerLabels = maxSpeakerLabels {
            try encodeContainer.encode(maxSpeakerLabels, forKey: .maxSpeakerLabels)
        }
        if let showAlternatives = showAlternatives {
            try encodeContainer.encode(showAlternatives, forKey: .showAlternatives)
        }
        if let showSpeakerLabels = showSpeakerLabels {
            try encodeContainer.encode(showSpeakerLabels, forKey: .showSpeakerLabels)
        }
        if let vocabularyFilterMethod = vocabularyFilterMethod {
            try encodeContainer.encode(vocabularyFilterMethod.rawValue, forKey: .vocabularyFilterMethod)
        }
        if let vocabularyFilterName = vocabularyFilterName {
            try encodeContainer.encode(vocabularyFilterName, forKey: .vocabularyFilterName)
        }
        if let vocabularyName = vocabularyName {
            try encodeContainer.encode(vocabularyName, forKey: .vocabularyName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let showSpeakerLabelsDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .showSpeakerLabels)
        showSpeakerLabels = showSpeakerLabelsDecoded
        let maxSpeakerLabelsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxSpeakerLabels)
        maxSpeakerLabels = maxSpeakerLabelsDecoded
        let channelIdentificationDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .channelIdentification)
        channelIdentification = channelIdentificationDecoded
        let showAlternativesDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .showAlternatives)
        showAlternatives = showAlternativesDecoded
        let maxAlternativesDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxAlternatives)
        maxAlternatives = maxAlternativesDecoded
        let vocabularyFilterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyFilterName)
        vocabularyFilterName = vocabularyFilterNameDecoded
        let vocabularyFilterMethodDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.VocabularyFilterMethod.self, forKey: .vocabularyFilterMethod)
        vocabularyFilterMethod = vocabularyFilterMethodDecoded
    }
}

extension TranscribeClientTypes.Settings: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Settings(channelIdentification: \(Swift.String(describing: channelIdentification)), maxAlternatives: \(Swift.String(describing: maxAlternatives)), maxSpeakerLabels: \(Swift.String(describing: maxSpeakerLabels)), showAlternatives: \(Swift.String(describing: showAlternatives)), showSpeakerLabels: \(Swift.String(describing: showSpeakerLabels)), vocabularyFilterMethod: \(Swift.String(describing: vocabularyFilterMethod)), vocabularyFilterName: \(Swift.String(describing: vocabularyFilterName)), vocabularyName: \(Swift.String(describing: vocabularyName)))"}
}

extension TranscribeClientTypes {
    /// Provides optional settings for the StartTranscriptionJob operation.
    public struct Settings: Swift.Equatable {
        /// Instructs Amazon Transcribe to process each audio channel separately and then merge the transcription output of each channel into a single transcription. Amazon Transcribe also produces a transcription of each item detected on an audio channel, including the start time and end time of the item and alternative transcriptions of the item including the confidence that Amazon Transcribe has in the transcription. You can't set both ShowSpeakerLabels and ChannelIdentification in the same request. If you set both, your request returns a BadRequestException.
        public var channelIdentification: Swift.Bool?
        /// The number of alternative transcriptions that the service should return. If you specify the MaxAlternatives field, you must set the ShowAlternatives field to true.
        public var maxAlternatives: Swift.Int?
        /// The maximum number of speakers to identify in the input audio. If there are more speakers in the audio than this number, multiple speakers are identified as a single speaker. If you specify the MaxSpeakerLabels field, you must set the ShowSpeakerLabels field to true.
        public var maxSpeakerLabels: Swift.Int?
        /// Determines whether the transcription contains alternative transcriptions. If you set the ShowAlternatives field to true, you must also set the maximum number of alternatives to return in the MaxAlternatives field.
        public var showAlternatives: Swift.Bool?
        /// Determines whether the transcription job uses speaker recognition to identify different speakers in the input audio. Speaker recognition labels individual speakers in the audio file. If you set the ShowSpeakerLabels field to true, you must also set the maximum number of speaker labels MaxSpeakerLabels field. You can't set both ShowSpeakerLabels and ChannelIdentification in the same request. If you set both, your request returns a BadRequestException.
        public var showSpeakerLabels: Swift.Bool?
        /// Set to mask to remove filtered text from the transcript and replace it with three asterisks ("***") as placeholder text. Set to remove to remove filtered text from the transcript without using placeholder text. Set to tag to mark the word in the transcription output that matches the vocabulary filter. When you set the filter method to tag, the words matching your vocabulary filter are not masked or removed.
        public var vocabularyFilterMethod: TranscribeClientTypes.VocabularyFilterMethod?
        /// The name of the vocabulary filter to use when transcribing the audio. The filter that you specify must have the same language code as the transcription job.
        public var vocabularyFilterName: Swift.String?
        /// The name of a vocabulary to use when processing the transcription job.
        public var vocabularyName: Swift.String?

        public init (
            channelIdentification: Swift.Bool? = nil,
            maxAlternatives: Swift.Int? = nil,
            maxSpeakerLabels: Swift.Int? = nil,
            showAlternatives: Swift.Bool? = nil,
            showSpeakerLabels: Swift.Bool? = nil,
            vocabularyFilterMethod: TranscribeClientTypes.VocabularyFilterMethod? = nil,
            vocabularyFilterName: Swift.String? = nil,
            vocabularyName: Swift.String? = nil
        )
        {
            self.channelIdentification = channelIdentification
            self.maxAlternatives = maxAlternatives
            self.maxSpeakerLabels = maxSpeakerLabels
            self.showAlternatives = showAlternatives
            self.showSpeakerLabels = showSpeakerLabels
            self.vocabularyFilterMethod = vocabularyFilterMethod
            self.vocabularyFilterName = vocabularyFilterName
            self.vocabularyName = vocabularyName
        }
    }

}

extension TranscribeClientTypes {
    public enum Specialty: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case primarycare
        case sdkUnknown(Swift.String)

        public static var allCases: [Specialty] {
            return [
                .primarycare,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .primarycare: return "PRIMARYCARE"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Specialty(rawValue: rawValue) ?? Specialty.sdkUnknown(rawValue)
        }
    }
}

public struct StartCallAnalyticsJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartCallAnalyticsJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartCallAnalyticsJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartCallAnalyticsJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartCallAnalyticsJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartCallAnalyticsJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartCallAnalyticsJobOutputError>
}

extension StartCallAnalyticsJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartCallAnalyticsJobInput(callAnalyticsJobName: \(Swift.String(describing: callAnalyticsJobName)), channelDefinitions: \(Swift.String(describing: channelDefinitions)), dataAccessRoleArn: \(Swift.String(describing: dataAccessRoleArn)), media: \(Swift.String(describing: media)), outputEncryptionKMSKeyId: \(Swift.String(describing: outputEncryptionKMSKeyId)), outputLocation: \(Swift.String(describing: outputLocation)), settings: \(Swift.String(describing: settings)))"}
}

extension StartCallAnalyticsJobInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelDefinitions = "ChannelDefinitions"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case media = "Media"
        case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
        case outputLocation = "OutputLocation"
        case settings = "Settings"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let channelDefinitions = channelDefinitions {
            var channelDefinitionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .channelDefinitions)
            for channeldefinitions0 in channelDefinitions {
                try channelDefinitionsContainer.encode(channeldefinitions0)
            }
        }
        if let dataAccessRoleArn = dataAccessRoleArn {
            try encodeContainer.encode(dataAccessRoleArn, forKey: .dataAccessRoleArn)
        }
        if let media = media {
            try encodeContainer.encode(media, forKey: .media)
        }
        if let outputEncryptionKMSKeyId = outputEncryptionKMSKeyId {
            try encodeContainer.encode(outputEncryptionKMSKeyId, forKey: .outputEncryptionKMSKeyId)
        }
        if let outputLocation = outputLocation {
            try encodeContainer.encode(outputLocation, forKey: .outputLocation)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
    }
}

public struct StartCallAnalyticsJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartCallAnalyticsJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartCallAnalyticsJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartCallAnalyticsJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartCallAnalyticsJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartCallAnalyticsJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartCallAnalyticsJobOutputError>
}

public struct StartCallAnalyticsJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartCallAnalyticsJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartCallAnalyticsJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartCallAnalyticsJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartCallAnalyticsJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartCallAnalyticsJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartCallAnalyticsJobOutputError>
}

public struct StartCallAnalyticsJobInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartCallAnalyticsJobInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: StartCallAnalyticsJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartCallAnalyticsJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartCallAnalyticsJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartCallAnalyticsJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartCallAnalyticsJobOutputError>
}

public struct StartCallAnalyticsJobInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartCallAnalyticsJobInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: StartCallAnalyticsJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartCallAnalyticsJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartCallAnalyticsJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartCallAnalyticsJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartCallAnalyticsJobOutputError>
}

public struct StartCallAnalyticsJobInput: Swift.Equatable {
    /// The name of the call analytics job. You can't use the string "." or ".." by themselves as the job name. The name must also be unique within an Amazon Web Services account. If you try to create a call analytics job with the same name as a previous call analytics job, you get a ConflictException error.
    /// This member is required.
    public var callAnalyticsJobName: Swift.String?
    /// When you start a call analytics job, you must pass an array that maps the agent and the customer to specific audio channels. The values you can assign to a channel are 0 and 1. The agent and the customer must each have their own channel. You can't assign more than one channel to an agent or customer.
    public var channelDefinitions: [TranscribeClientTypes.ChannelDefinition]?
    /// The Amazon Resource Name (ARN) of a role that has access to the S3 bucket that contains your input files. Amazon Transcribe assumes this role to read queued audio files. If you have specified an output S3 bucket for your transcription results, this role should have access to the output bucket as well.
    /// This member is required.
    public var dataAccessRoleArn: Swift.String?
    /// Describes the input media file in a transcription request.
    /// This member is required.
    public var media: TranscribeClientTypes.Media?
    /// The Amazon Resource Name (ARN) of the Amazon Web Services Key Management Service key used to encrypt the output of the call analytics job. The user calling the operation must have permission to use the specified KMS key. You use either of the following to identify an Amazon Web Services KMS key in the current account:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * KMS Key Alias: "alias/ExampleAlias"
    ///
    ///
    /// You can use either of the following to identify a KMS key in the current account or another account:
    ///
    /// * Amazon Resource Name (ARN) of a KMS key in the current account or another account: "arn:aws:kms:region:account ID:key/1234abcd-12ab-34cd-56ef1234567890ab"
    ///
    /// * ARN of a KMS Key Alias: "arn:aws:kms:region:account ID:alias/ExampleAlias"
    ///
    ///
    /// If you don't specify an encryption key, the output of the call analytics job is encrypted with the default Amazon S3 key (SSE-S3). If you specify a KMS key to encrypt your output, you must also specify an output location in the OutputLocation parameter.
    public var outputEncryptionKMSKeyId: Swift.String?
    /// The Amazon S3 location where the output of the call analytics job is stored. You can provide the following location types to store the output of call analytics job:
    ///
    /// * s3://DOC-EXAMPLE-BUCKET1 If you specify a bucket, Amazon Transcribe saves the output of the analytics job as a JSON file at the root level of the bucket.
    ///
    /// * s3://DOC-EXAMPLE-BUCKET1/folder/ f you specify a path, Amazon Transcribe saves the output of the analytics job as s3://DOC-EXAMPLE-BUCKET1/folder/your-transcription-job-name.json If you specify a folder, you must provide a trailing slash.
    ///
    /// * s3://DOC-EXAMPLE-BUCKET1/folder/filename.json If you provide a path that has the filename specified, Amazon Transcribe saves the output of the analytics job as s3://DOC-EXAMPLEBUCKET1/folder/filename.json
    ///
    ///
    /// You can specify an Amazon Web Services Key Management Service (KMS) key to encrypt the output of our analytics job using the OutputEncryptionKMSKeyId parameter. If you don't specify a KMS key, Amazon Transcribe uses the default Amazon S3 key for server-side encryption of the analytics job output that is placed in your S3 bucket.
    public var outputLocation: Swift.String?
    /// A Settings object that provides optional settings for a call analytics job.
    public var settings: TranscribeClientTypes.CallAnalyticsJobSettings?

    public init (
        callAnalyticsJobName: Swift.String? = nil,
        channelDefinitions: [TranscribeClientTypes.ChannelDefinition]? = nil,
        dataAccessRoleArn: Swift.String? = nil,
        media: TranscribeClientTypes.Media? = nil,
        outputEncryptionKMSKeyId: Swift.String? = nil,
        outputLocation: Swift.String? = nil,
        settings: TranscribeClientTypes.CallAnalyticsJobSettings? = nil
    )
    {
        self.callAnalyticsJobName = callAnalyticsJobName
        self.channelDefinitions = channelDefinitions
        self.dataAccessRoleArn = dataAccessRoleArn
        self.media = media
        self.outputEncryptionKMSKeyId = outputEncryptionKMSKeyId
        self.outputLocation = outputLocation
        self.settings = settings
    }
}

struct StartCallAnalyticsJobInputBody: Swift.Equatable {
    public let media: TranscribeClientTypes.Media?
    public let outputLocation: Swift.String?
    public let outputEncryptionKMSKeyId: Swift.String?
    public let dataAccessRoleArn: Swift.String?
    public let settings: TranscribeClientTypes.CallAnalyticsJobSettings?
    public let channelDefinitions: [TranscribeClientTypes.ChannelDefinition]?
}

extension StartCallAnalyticsJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case channelDefinitions = "ChannelDefinitions"
        case dataAccessRoleArn = "DataAccessRoleArn"
        case media = "Media"
        case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
        case outputLocation = "OutputLocation"
        case settings = "Settings"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let mediaDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Media.self, forKey: .media)
        media = mediaDecoded
        let outputLocationDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputLocation)
        outputLocation = outputLocationDecoded
        let outputEncryptionKMSKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputEncryptionKMSKeyId)
        outputEncryptionKMSKeyId = outputEncryptionKMSKeyIdDecoded
        let dataAccessRoleArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .dataAccessRoleArn)
        dataAccessRoleArn = dataAccessRoleArnDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.CallAnalyticsJobSettings.self, forKey: .settings)
        settings = settingsDecoded
        let channelDefinitionsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.ChannelDefinition?].self, forKey: .channelDefinitions)
        var channelDefinitionsDecoded0:[TranscribeClientTypes.ChannelDefinition]? = nil
        if let channelDefinitionsContainer = channelDefinitionsContainer {
            channelDefinitionsDecoded0 = [TranscribeClientTypes.ChannelDefinition]()
            for structure0 in channelDefinitionsContainer {
                if let structure0 = structure0 {
                    channelDefinitionsDecoded0?.append(structure0)
                }
            }
        }
        channelDefinitions = channelDefinitionsDecoded0
    }
}

extension StartCallAnalyticsJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartCallAnalyticsJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartCallAnalyticsJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartCallAnalyticsJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartCallAnalyticsJobOutputResponse(callAnalyticsJob: \(Swift.String(describing: callAnalyticsJob)))"}
}

extension StartCallAnalyticsJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartCallAnalyticsJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.callAnalyticsJob = output.callAnalyticsJob
        } else {
            self.callAnalyticsJob = nil
        }
    }
}

public struct StartCallAnalyticsJobOutputResponse: Swift.Equatable {
    /// An object containing the details of the asynchronous call analytics job.
    public var callAnalyticsJob: TranscribeClientTypes.CallAnalyticsJob?

    public init (
        callAnalyticsJob: TranscribeClientTypes.CallAnalyticsJob? = nil
    )
    {
        self.callAnalyticsJob = callAnalyticsJob
    }
}

struct StartCallAnalyticsJobOutputResponseBody: Swift.Equatable {
    public let callAnalyticsJob: TranscribeClientTypes.CallAnalyticsJob?
}

extension StartCallAnalyticsJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case callAnalyticsJob = "CallAnalyticsJob"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let callAnalyticsJobDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.CallAnalyticsJob.self, forKey: .callAnalyticsJob)
        callAnalyticsJob = callAnalyticsJobDecoded
    }
}

public struct StartMedicalTranscriptionJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartMedicalTranscriptionJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartMedicalTranscriptionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartMedicalTranscriptionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartMedicalTranscriptionJobOutputError>
}

extension StartMedicalTranscriptionJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartMedicalTranscriptionJobInput(contentIdentificationType: \(Swift.String(describing: contentIdentificationType)), kMSEncryptionContext: \(Swift.String(describing: kMSEncryptionContext)), languageCode: \(Swift.String(describing: languageCode)), media: \(Swift.String(describing: media)), mediaFormat: \(Swift.String(describing: mediaFormat)), mediaSampleRateHertz: \(Swift.String(describing: mediaSampleRateHertz)), medicalTranscriptionJobName: \(Swift.String(describing: medicalTranscriptionJobName)), outputBucketName: \(Swift.String(describing: outputBucketName)), outputEncryptionKMSKeyId: \(Swift.String(describing: outputEncryptionKMSKeyId)), outputKey: \(Swift.String(describing: outputKey)), settings: \(Swift.String(describing: settings)), specialty: \(Swift.String(describing: specialty)), tags: \(Swift.String(describing: tags)), type: \(Swift.String(describing: type)))"}
}

extension StartMedicalTranscriptionJobInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentIdentificationType = "ContentIdentificationType"
        case kMSEncryptionContext = "KMSEncryptionContext"
        case languageCode = "LanguageCode"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case outputBucketName = "OutputBucketName"
        case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
        case outputKey = "OutputKey"
        case settings = "Settings"
        case specialty = "Specialty"
        case tags = "Tags"
        case type = "Type"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentIdentificationType = contentIdentificationType {
            try encodeContainer.encode(contentIdentificationType.rawValue, forKey: .contentIdentificationType)
        }
        if let kMSEncryptionContext = kMSEncryptionContext {
            var kMSEncryptionContextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .kMSEncryptionContext)
            for (dictKey0, kmsencryptioncontextmap0) in kMSEncryptionContext {
                try kMSEncryptionContextContainer.encode(kmsencryptioncontextmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let media = media {
            try encodeContainer.encode(media, forKey: .media)
        }
        if let mediaFormat = mediaFormat {
            try encodeContainer.encode(mediaFormat.rawValue, forKey: .mediaFormat)
        }
        if let mediaSampleRateHertz = mediaSampleRateHertz {
            try encodeContainer.encode(mediaSampleRateHertz, forKey: .mediaSampleRateHertz)
        }
        if let outputBucketName = outputBucketName {
            try encodeContainer.encode(outputBucketName, forKey: .outputBucketName)
        }
        if let outputEncryptionKMSKeyId = outputEncryptionKMSKeyId {
            try encodeContainer.encode(outputEncryptionKMSKeyId, forKey: .outputEncryptionKMSKeyId)
        }
        if let outputKey = outputKey {
            try encodeContainer.encode(outputKey, forKey: .outputKey)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let specialty = specialty {
            try encodeContainer.encode(specialty.rawValue, forKey: .specialty)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let type = type {
            try encodeContainer.encode(type.rawValue, forKey: .type)
        }
    }
}

public struct StartMedicalTranscriptionJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartMedicalTranscriptionJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartMedicalTranscriptionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartMedicalTranscriptionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartMedicalTranscriptionJobOutputError>
}

public struct StartMedicalTranscriptionJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartMedicalTranscriptionJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartMedicalTranscriptionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartMedicalTranscriptionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartMedicalTranscriptionJobOutputError>
}

public struct StartMedicalTranscriptionJobInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartMedicalTranscriptionJobInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: StartMedicalTranscriptionJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartMedicalTranscriptionJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartMedicalTranscriptionJobOutputError>
}

public struct StartMedicalTranscriptionJobInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartMedicalTranscriptionJobInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: StartMedicalTranscriptionJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartMedicalTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartMedicalTranscriptionJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartMedicalTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartMedicalTranscriptionJobOutputError>
}

public struct StartMedicalTranscriptionJobInput: Swift.Equatable {
    /// You can configure Amazon Transcribe Medical to label content in the transcription output. If you specify PHI, Amazon Transcribe Medical labels the personal health information (PHI) that it identifies in the transcription output.
    public var contentIdentificationType: TranscribeClientTypes.MedicalContentIdentificationType?
    /// A map of plain text, non-secret key:value pairs, known as encryption context pairs, that provide an added layer of security for your data.
    public var kMSEncryptionContext: [Swift.String:Swift.String]?
    /// The language code for the language spoken in the input media file. US English (en-US) is the valid value for medical transcription jobs. Any other value you enter for language code results in a BadRequestException error.
    /// This member is required.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// Describes the input media file in a transcription request.
    /// This member is required.
    public var media: TranscribeClientTypes.Media?
    /// The audio format of the input media file.
    public var mediaFormat: TranscribeClientTypes.MediaFormat?
    /// The sample rate, in Hertz, of the audio track in the input media file. If you do not specify the media sample rate, Amazon Transcribe Medical determines the sample rate. If you specify the sample rate, it must match the rate detected by Amazon Transcribe Medical. In most cases, you should leave the MediaSampleRateHertz field blank and let Amazon Transcribe Medical determine the sample rate.
    public var mediaSampleRateHertz: Swift.Int?
    /// The name of the medical transcription job. You can't use the strings "." or ".." by themselves as the job name. The name must also be unique within an Amazon Web Services account. If you try to create a medical transcription job with the same name as a previous medical transcription job, you get a ConflictException error.
    /// This member is required.
    public var medicalTranscriptionJobName: Swift.String?
    /// The Amazon S3 location where the transcription is stored. You must set OutputBucketName for Amazon Transcribe Medical to store the transcription results. Your transcript appears in the S3 location you specify. When you call the [GetMedicalTranscriptionJob], the operation returns this location in the TranscriptFileUri field. The S3 bucket must have permissions that allow Amazon Transcribe Medical to put files in the bucket. For more information, see [Permissions Required for IAM User Roles](https://docs.aws.amazon.com/transcribe/latest/dg/security_iam_id-based-policy-examples.html#auth-role-iam-user). You can specify an Amazon Web Services Key Management Service (KMS) key to encrypt the output of your transcription using the OutputEncryptionKMSKeyId parameter. If you don't specify a KMS key, Amazon Transcribe Medical uses the default Amazon S3 key for server-side encryption of transcripts that are placed in your S3 bucket.
    /// This member is required.
    public var outputBucketName: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon Web Services Key Management Service (KMS) key used to encrypt the output of the transcription job. The user calling the [StartMedicalTranscriptionJob] operation must have permission to use the specified KMS key. You use either of the following to identify a KMS key in the current account:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * KMS Key Alias: "alias/ExampleAlias"
    ///
    ///
    /// You can use either of the following to identify a KMS key in the current account or another account:
    ///
    /// * Amazon Resource Name (ARN) of a KMS key in the current account or another account: "arn:aws:kms:region:account-ID:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * ARN of a KMS Key Alias: "arn:aws:kms:region:account ID:alias/ExampleAlias"
    ///
    ///
    /// If you don't specify an encryption key, the output of the medical transcription job is encrypted with the default Amazon S3 key (SSE-S3). If you specify a KMS key to encrypt your output, you must also specify an output location in the OutputBucketName parameter.
    public var outputEncryptionKMSKeyId: Swift.String?
    /// You can specify a location in an Amazon S3 bucket to store the output of your medical transcription job. If you don't specify an output key, Amazon Transcribe Medical stores the output of your transcription job in the Amazon S3 bucket you specified. By default, the object key is "your-transcription-job-name.json". You can use output keys to specify the Amazon S3 prefix and file name of the transcription output. For example, specifying the Amazon S3 prefix, "folder1/folder2/", as an output key would lead to the output being stored as "folder1/folder2/your-transcription-job-name.json". If you specify "my-other-job-name.json" as the output key, the object key is changed to "my-other-job-name.json". You can use an output key to change both the prefix and the file name, for example "folder/my-other-job-name.json". If you specify an output key, you must also specify an S3 bucket in the OutputBucketName parameter.
    public var outputKey: Swift.String?
    /// Optional settings for the medical transcription job.
    public var settings: TranscribeClientTypes.MedicalTranscriptionSetting?
    /// The medical specialty of any clinician speaking in the input media.
    /// This member is required.
    public var specialty: TranscribeClientTypes.Specialty?
    /// Add tags to an Amazon Transcribe medical transcription job.
    public var tags: [TranscribeClientTypes.Tag]?
    /// The type of speech in the input audio. CONVERSATION refers to conversations between two or more speakers, e.g., a conversations between doctors and patients. DICTATION refers to single-speaker dictated speech, such as clinical notes.
    /// This member is required.
    public var type: TranscribeClientTypes.ModelType?

    public init (
        contentIdentificationType: TranscribeClientTypes.MedicalContentIdentificationType? = nil,
        kMSEncryptionContext: [Swift.String:Swift.String]? = nil,
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        media: TranscribeClientTypes.Media? = nil,
        mediaFormat: TranscribeClientTypes.MediaFormat? = nil,
        mediaSampleRateHertz: Swift.Int? = nil,
        medicalTranscriptionJobName: Swift.String? = nil,
        outputBucketName: Swift.String? = nil,
        outputEncryptionKMSKeyId: Swift.String? = nil,
        outputKey: Swift.String? = nil,
        settings: TranscribeClientTypes.MedicalTranscriptionSetting? = nil,
        specialty: TranscribeClientTypes.Specialty? = nil,
        tags: [TranscribeClientTypes.Tag]? = nil,
        type: TranscribeClientTypes.ModelType? = nil
    )
    {
        self.contentIdentificationType = contentIdentificationType
        self.kMSEncryptionContext = kMSEncryptionContext
        self.languageCode = languageCode
        self.media = media
        self.mediaFormat = mediaFormat
        self.mediaSampleRateHertz = mediaSampleRateHertz
        self.medicalTranscriptionJobName = medicalTranscriptionJobName
        self.outputBucketName = outputBucketName
        self.outputEncryptionKMSKeyId = outputEncryptionKMSKeyId
        self.outputKey = outputKey
        self.settings = settings
        self.specialty = specialty
        self.tags = tags
        self.type = type
    }
}

struct StartMedicalTranscriptionJobInputBody: Swift.Equatable {
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let mediaSampleRateHertz: Swift.Int?
    public let mediaFormat: TranscribeClientTypes.MediaFormat?
    public let media: TranscribeClientTypes.Media?
    public let outputBucketName: Swift.String?
    public let outputKey: Swift.String?
    public let outputEncryptionKMSKeyId: Swift.String?
    public let kMSEncryptionContext: [Swift.String:Swift.String]?
    public let settings: TranscribeClientTypes.MedicalTranscriptionSetting?
    public let contentIdentificationType: TranscribeClientTypes.MedicalContentIdentificationType?
    public let specialty: TranscribeClientTypes.Specialty?
    public let type: TranscribeClientTypes.ModelType?
    public let tags: [TranscribeClientTypes.Tag]?
}

extension StartMedicalTranscriptionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentIdentificationType = "ContentIdentificationType"
        case kMSEncryptionContext = "KMSEncryptionContext"
        case languageCode = "LanguageCode"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case outputBucketName = "OutputBucketName"
        case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
        case outputKey = "OutputKey"
        case settings = "Settings"
        case specialty = "Specialty"
        case tags = "Tags"
        case type = "Type"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let mediaSampleRateHertzDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mediaSampleRateHertz)
        mediaSampleRateHertz = mediaSampleRateHertzDecoded
        let mediaFormatDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MediaFormat.self, forKey: .mediaFormat)
        mediaFormat = mediaFormatDecoded
        let mediaDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Media.self, forKey: .media)
        media = mediaDecoded
        let outputBucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputBucketName)
        outputBucketName = outputBucketNameDecoded
        let outputKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputKey)
        outputKey = outputKeyDecoded
        let outputEncryptionKMSKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputEncryptionKMSKeyId)
        outputEncryptionKMSKeyId = outputEncryptionKMSKeyIdDecoded
        let kMSEncryptionContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .kMSEncryptionContext)
        var kMSEncryptionContextDecoded0: [Swift.String:Swift.String]? = nil
        if let kMSEncryptionContextContainer = kMSEncryptionContextContainer {
            kMSEncryptionContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in kMSEncryptionContextContainer {
                if let nonemptystring0 = nonemptystring0 {
                    kMSEncryptionContextDecoded0?[key0] = nonemptystring0
                }
            }
        }
        kMSEncryptionContext = kMSEncryptionContextDecoded0
        let settingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MedicalTranscriptionSetting.self, forKey: .settings)
        settings = settingsDecoded
        let contentIdentificationTypeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MedicalContentIdentificationType.self, forKey: .contentIdentificationType)
        contentIdentificationType = contentIdentificationTypeDecoded
        let specialtyDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Specialty.self, forKey: .specialty)
        specialty = specialtyDecoded
        let typeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ModelType.self, forKey: .type)
        type = typeDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TranscribeClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TranscribeClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension StartMedicalTranscriptionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartMedicalTranscriptionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartMedicalTranscriptionJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartMedicalTranscriptionJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartMedicalTranscriptionJobOutputResponse(medicalTranscriptionJob: \(Swift.String(describing: medicalTranscriptionJob)))"}
}

extension StartMedicalTranscriptionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartMedicalTranscriptionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.medicalTranscriptionJob = output.medicalTranscriptionJob
        } else {
            self.medicalTranscriptionJob = nil
        }
    }
}

public struct StartMedicalTranscriptionJobOutputResponse: Swift.Equatable {
    /// A batch job submitted to transcribe medical speech to text.
    public var medicalTranscriptionJob: TranscribeClientTypes.MedicalTranscriptionJob?

    public init (
        medicalTranscriptionJob: TranscribeClientTypes.MedicalTranscriptionJob? = nil
    )
    {
        self.medicalTranscriptionJob = medicalTranscriptionJob
    }
}

struct StartMedicalTranscriptionJobOutputResponseBody: Swift.Equatable {
    public let medicalTranscriptionJob: TranscribeClientTypes.MedicalTranscriptionJob?
}

extension StartMedicalTranscriptionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case medicalTranscriptionJob = "MedicalTranscriptionJob"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let medicalTranscriptionJobDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MedicalTranscriptionJob.self, forKey: .medicalTranscriptionJob)
        medicalTranscriptionJob = medicalTranscriptionJobDecoded
    }
}

public struct StartTranscriptionJobInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartTranscriptionJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartTranscriptionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartTranscriptionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartTranscriptionJobOutputError>
}

extension StartTranscriptionJobInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartTranscriptionJobInput(contentRedaction: \(Swift.String(describing: contentRedaction)), identifyLanguage: \(Swift.String(describing: identifyLanguage)), jobExecutionSettings: \(Swift.String(describing: jobExecutionSettings)), kMSEncryptionContext: \(Swift.String(describing: kMSEncryptionContext)), languageCode: \(Swift.String(describing: languageCode)), languageIdSettings: \(Swift.String(describing: languageIdSettings)), languageOptions: \(Swift.String(describing: languageOptions)), media: \(Swift.String(describing: media)), mediaFormat: \(Swift.String(describing: mediaFormat)), mediaSampleRateHertz: \(Swift.String(describing: mediaSampleRateHertz)), modelSettings: \(Swift.String(describing: modelSettings)), outputBucketName: \(Swift.String(describing: outputBucketName)), outputEncryptionKMSKeyId: \(Swift.String(describing: outputEncryptionKMSKeyId)), outputKey: \(Swift.String(describing: outputKey)), settings: \(Swift.String(describing: settings)), subtitles: \(Swift.String(describing: subtitles)), tags: \(Swift.String(describing: tags)), transcriptionJobName: \(Swift.String(describing: transcriptionJobName)))"}
}

extension StartTranscriptionJobInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentRedaction = "ContentRedaction"
        case identifyLanguage = "IdentifyLanguage"
        case jobExecutionSettings = "JobExecutionSettings"
        case kMSEncryptionContext = "KMSEncryptionContext"
        case languageCode = "LanguageCode"
        case languageIdSettings = "LanguageIdSettings"
        case languageOptions = "LanguageOptions"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case modelSettings = "ModelSettings"
        case outputBucketName = "OutputBucketName"
        case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
        case outputKey = "OutputKey"
        case settings = "Settings"
        case subtitles = "Subtitles"
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let contentRedaction = contentRedaction {
            try encodeContainer.encode(contentRedaction, forKey: .contentRedaction)
        }
        if let identifyLanguage = identifyLanguage {
            try encodeContainer.encode(identifyLanguage, forKey: .identifyLanguage)
        }
        if let jobExecutionSettings = jobExecutionSettings {
            try encodeContainer.encode(jobExecutionSettings, forKey: .jobExecutionSettings)
        }
        if let kMSEncryptionContext = kMSEncryptionContext {
            var kMSEncryptionContextContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .kMSEncryptionContext)
            for (dictKey0, kmsencryptioncontextmap0) in kMSEncryptionContext {
                try kMSEncryptionContextContainer.encode(kmsencryptioncontextmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let languageIdSettings = languageIdSettings {
            var languageIdSettingsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .languageIdSettings)
            for (dictKey0, languageidsettingsmap0) in languageIdSettings {
                try languageIdSettingsContainer.encode(languageidsettingsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let languageOptions = languageOptions {
            var languageOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .languageOptions)
            for languageoptions0 in languageOptions {
                try languageOptionsContainer.encode(languageoptions0.rawValue)
            }
        }
        if let media = media {
            try encodeContainer.encode(media, forKey: .media)
        }
        if let mediaFormat = mediaFormat {
            try encodeContainer.encode(mediaFormat.rawValue, forKey: .mediaFormat)
        }
        if let mediaSampleRateHertz = mediaSampleRateHertz {
            try encodeContainer.encode(mediaSampleRateHertz, forKey: .mediaSampleRateHertz)
        }
        if let modelSettings = modelSettings {
            try encodeContainer.encode(modelSettings, forKey: .modelSettings)
        }
        if let outputBucketName = outputBucketName {
            try encodeContainer.encode(outputBucketName, forKey: .outputBucketName)
        }
        if let outputEncryptionKMSKeyId = outputEncryptionKMSKeyId {
            try encodeContainer.encode(outputEncryptionKMSKeyId, forKey: .outputEncryptionKMSKeyId)
        }
        if let outputKey = outputKey {
            try encodeContainer.encode(outputKey, forKey: .outputKey)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let subtitles = subtitles {
            try encodeContainer.encode(subtitles, forKey: .subtitles)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct StartTranscriptionJobInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartTranscriptionJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartTranscriptionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartTranscriptionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartTranscriptionJobOutputError>
}

public struct StartTranscriptionJobInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartTranscriptionJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<StartTranscriptionJobInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<StartTranscriptionJobInput>
    public typealias MOutput = ClientRuntime.OperationOutput<StartTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartTranscriptionJobOutputError>
}

public struct StartTranscriptionJobInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartTranscriptionJobInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: StartTranscriptionJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartTranscriptionJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartTranscriptionJobOutputError>
}

public struct StartTranscriptionJobInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "StartTranscriptionJobInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: StartTranscriptionJobInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<StartTranscriptionJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = StartTranscriptionJobInput
    public typealias MOutput = ClientRuntime.OperationOutput<StartTranscriptionJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<StartTranscriptionJobOutputError>
}

public struct StartTranscriptionJobInput: Swift.Equatable {
    /// An object that contains the request parameters for content redaction.
    public var contentRedaction: TranscribeClientTypes.ContentRedaction?
    /// Set this field to true to enable automatic language identification. Automatic language identification is disabled by default. You receive a BadRequestException error if you enter a value for a LanguageCode.
    public var identifyLanguage: Swift.Bool?
    /// Provides information about how a transcription job is executed. Use this field to indicate that the job can be queued for deferred execution if the concurrency limit is reached and there are no slots available to immediately run the job.
    public var jobExecutionSettings: TranscribeClientTypes.JobExecutionSettings?
    /// A map of plain text, non-secret key:value pairs, known as encryption context pairs, that provide an added layer of security for your data.
    public var kMSEncryptionContext: [Swift.String:Swift.String]?
    /// The language code for the language used in the input media file. To transcribe speech in Modern Standard Arabic (ar-SA), your audio or video file must be encoded at a sample rate of 16,000 Hz or higher.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// The language identification settings associated with your transcription job. These settings include VocabularyName, VocabularyFilterName, and LanguageModelName.
    public var languageIdSettings: [Swift.String:TranscribeClientTypes.LanguageIdSettings]?
    /// An object containing a list of languages that might be present in your collection of audio files. Automatic language identification chooses a language that best matches the source audio from that list. To transcribe speech in Modern Standard Arabic (ar-SA), your audio or video file must be encoded at a sample rate of 16,000 Hz or higher.
    public var languageOptions: [TranscribeClientTypes.LanguageCode]?
    /// An object that describes the input media for a transcription job.
    /// This member is required.
    public var media: TranscribeClientTypes.Media?
    /// The format of the input media file.
    public var mediaFormat: TranscribeClientTypes.MediaFormat?
    /// The sample rate, in Hertz, of the audio track in the input media file. If you do not specify the media sample rate, Amazon Transcribe determines the sample rate. If you specify the sample rate, it must match the sample rate detected by Amazon Transcribe. In most cases, you should leave the MediaSampleRateHertz field blank and let Amazon Transcribe determine the sample rate.
    public var mediaSampleRateHertz: Swift.Int?
    /// Choose the custom language model you use for your transcription job in this parameter.
    public var modelSettings: TranscribeClientTypes.ModelSettings?
    /// The location where the transcription is stored. If you set the OutputBucketName, Amazon Transcribe puts the transcript in the specified S3 bucket. When you call the [GetTranscriptionJob] operation, the operation returns this location in the TranscriptFileUri field. If you enable content redaction, the redacted transcript appears in RedactedTranscriptFileUri. If you enable content redaction and choose to output an unredacted transcript, that transcript's location still appears in the TranscriptFileUri. The S3 bucket must have permissions that allow Amazon Transcribe to put files in the bucket. For more information, see [Permissions Required for IAM User Roles](https://docs.aws.amazon.com/transcribe/latest/dg/security_iam_id-based-policy-examples.html#auth-role-iam-user). You can specify an Amazon Web Services Key Management Service (KMS) key to encrypt the output of your transcription using the OutputEncryptionKMSKeyId parameter. If you don't specify a KMS key, Amazon Transcribe uses the default Amazon S3 key for server-side encryption of transcripts that are placed in your S3 bucket. If you don't set the OutputBucketName, Amazon Transcribe generates a pre-signed URL, a shareable URL that provides secure access to your transcription, and returns it in the TranscriptFileUri field. Use this URL to download the transcription.
    public var outputBucketName: Swift.String?
    /// The Amazon Resource Name (ARN) of the Amazon Web Services Key Management Service (KMS) key used to encrypt the output of the transcription job. The user calling the StartTranscriptionJob operation must have permission to use the specified KMS key. You can use either of the following to identify a KMS key in the current account:
    ///
    /// * KMS Key ID: "1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * KMS Key Alias: "alias/ExampleAlias"
    ///
    ///
    /// You can use either of the following to identify a KMS key in the current account or another account:
    ///
    /// * Amazon Resource Name (ARN) of a KMS Key: "arn:aws:kms:region:account ID:key/1234abcd-12ab-34cd-56ef-1234567890ab"
    ///
    /// * ARN of a KMS Key Alias: "arn:aws:kms:region:account-ID:alias/ExampleAlias"
    ///
    ///
    /// If you don't specify an encryption key, the output of the transcription job is encrypted with the default Amazon S3 key (SSE-S3). If you specify a KMS key to encrypt your output, you must also specify an output location in the OutputBucketName parameter.
    public var outputEncryptionKMSKeyId: Swift.String?
    /// You can specify a location in an Amazon S3 bucket to store the output of your transcription job. If you don't specify an output key, Amazon Transcribe stores the output of your transcription job in the Amazon S3 bucket you specified. By default, the object key is "your-transcription-job-name.json". You can use output keys to specify the Amazon S3 prefix and file name of the transcription output. For example, specifying the Amazon S3 prefix, "folder1/folder2/", as an output key would lead to the output being stored as "folder1/folder2/your-transcription-job-name.json". If you specify "my-other-job-name.json" as the output key, the object key is changed to "my-other-job-name.json". You can use an output key to change both the prefix and the file name, for example "folder/my-other-job-name.json". If you specify an output key, you must also specify an S3 bucket in the OutputBucketName parameter.
    public var outputKey: Swift.String?
    /// A Settings object that provides optional settings for a transcription job.
    public var settings: TranscribeClientTypes.Settings?
    /// Add subtitles to your batch transcription job.
    public var subtitles: TranscribeClientTypes.Subtitles?
    /// Add tags to an Amazon Transcribe transcription job.
    public var tags: [TranscribeClientTypes.Tag]?
    /// The name of the job. You can't use the strings "." or ".." by themselves as the job name. The name must also be unique within an Amazon Web Services account. If you try to create a transcription job with the same name as a previous transcription job, you get a ConflictException error.
    /// This member is required.
    public var transcriptionJobName: Swift.String?

    public init (
        contentRedaction: TranscribeClientTypes.ContentRedaction? = nil,
        identifyLanguage: Swift.Bool? = nil,
        jobExecutionSettings: TranscribeClientTypes.JobExecutionSettings? = nil,
        kMSEncryptionContext: [Swift.String:Swift.String]? = nil,
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        languageIdSettings: [Swift.String:TranscribeClientTypes.LanguageIdSettings]? = nil,
        languageOptions: [TranscribeClientTypes.LanguageCode]? = nil,
        media: TranscribeClientTypes.Media? = nil,
        mediaFormat: TranscribeClientTypes.MediaFormat? = nil,
        mediaSampleRateHertz: Swift.Int? = nil,
        modelSettings: TranscribeClientTypes.ModelSettings? = nil,
        outputBucketName: Swift.String? = nil,
        outputEncryptionKMSKeyId: Swift.String? = nil,
        outputKey: Swift.String? = nil,
        settings: TranscribeClientTypes.Settings? = nil,
        subtitles: TranscribeClientTypes.Subtitles? = nil,
        tags: [TranscribeClientTypes.Tag]? = nil,
        transcriptionJobName: Swift.String? = nil
    )
    {
        self.contentRedaction = contentRedaction
        self.identifyLanguage = identifyLanguage
        self.jobExecutionSettings = jobExecutionSettings
        self.kMSEncryptionContext = kMSEncryptionContext
        self.languageCode = languageCode
        self.languageIdSettings = languageIdSettings
        self.languageOptions = languageOptions
        self.media = media
        self.mediaFormat = mediaFormat
        self.mediaSampleRateHertz = mediaSampleRateHertz
        self.modelSettings = modelSettings
        self.outputBucketName = outputBucketName
        self.outputEncryptionKMSKeyId = outputEncryptionKMSKeyId
        self.outputKey = outputKey
        self.settings = settings
        self.subtitles = subtitles
        self.tags = tags
        self.transcriptionJobName = transcriptionJobName
    }
}

struct StartTranscriptionJobInputBody: Swift.Equatable {
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let mediaSampleRateHertz: Swift.Int?
    public let mediaFormat: TranscribeClientTypes.MediaFormat?
    public let media: TranscribeClientTypes.Media?
    public let outputBucketName: Swift.String?
    public let outputKey: Swift.String?
    public let outputEncryptionKMSKeyId: Swift.String?
    public let kMSEncryptionContext: [Swift.String:Swift.String]?
    public let settings: TranscribeClientTypes.Settings?
    public let modelSettings: TranscribeClientTypes.ModelSettings?
    public let jobExecutionSettings: TranscribeClientTypes.JobExecutionSettings?
    public let contentRedaction: TranscribeClientTypes.ContentRedaction?
    public let identifyLanguage: Swift.Bool?
    public let languageOptions: [TranscribeClientTypes.LanguageCode]?
    public let subtitles: TranscribeClientTypes.Subtitles?
    public let tags: [TranscribeClientTypes.Tag]?
    public let languageIdSettings: [Swift.String:TranscribeClientTypes.LanguageIdSettings]?
}

extension StartTranscriptionJobInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case contentRedaction = "ContentRedaction"
        case identifyLanguage = "IdentifyLanguage"
        case jobExecutionSettings = "JobExecutionSettings"
        case kMSEncryptionContext = "KMSEncryptionContext"
        case languageCode = "LanguageCode"
        case languageIdSettings = "LanguageIdSettings"
        case languageOptions = "LanguageOptions"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case modelSettings = "ModelSettings"
        case outputBucketName = "OutputBucketName"
        case outputEncryptionKMSKeyId = "OutputEncryptionKMSKeyId"
        case outputKey = "OutputKey"
        case settings = "Settings"
        case subtitles = "Subtitles"
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let mediaSampleRateHertzDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mediaSampleRateHertz)
        mediaSampleRateHertz = mediaSampleRateHertzDecoded
        let mediaFormatDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MediaFormat.self, forKey: .mediaFormat)
        mediaFormat = mediaFormatDecoded
        let mediaDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Media.self, forKey: .media)
        media = mediaDecoded
        let outputBucketNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputBucketName)
        outputBucketName = outputBucketNameDecoded
        let outputKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputKey)
        outputKey = outputKeyDecoded
        let outputEncryptionKMSKeyIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .outputEncryptionKMSKeyId)
        outputEncryptionKMSKeyId = outputEncryptionKMSKeyIdDecoded
        let kMSEncryptionContextContainer = try containerValues.decodeIfPresent([Swift.String: Swift.String?].self, forKey: .kMSEncryptionContext)
        var kMSEncryptionContextDecoded0: [Swift.String:Swift.String]? = nil
        if let kMSEncryptionContextContainer = kMSEncryptionContextContainer {
            kMSEncryptionContextDecoded0 = [Swift.String:Swift.String]()
            for (key0, nonemptystring0) in kMSEncryptionContextContainer {
                if let nonemptystring0 = nonemptystring0 {
                    kMSEncryptionContextDecoded0?[key0] = nonemptystring0
                }
            }
        }
        kMSEncryptionContext = kMSEncryptionContextDecoded0
        let settingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Settings.self, forKey: .settings)
        settings = settingsDecoded
        let modelSettingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ModelSettings.self, forKey: .modelSettings)
        modelSettings = modelSettingsDecoded
        let jobExecutionSettingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.JobExecutionSettings.self, forKey: .jobExecutionSettings)
        jobExecutionSettings = jobExecutionSettingsDecoded
        let contentRedactionDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ContentRedaction.self, forKey: .contentRedaction)
        contentRedaction = contentRedactionDecoded
        let identifyLanguageDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .identifyLanguage)
        identifyLanguage = identifyLanguageDecoded
        let languageOptionsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.LanguageCode?].self, forKey: .languageOptions)
        var languageOptionsDecoded0:[TranscribeClientTypes.LanguageCode]? = nil
        if let languageOptionsContainer = languageOptionsContainer {
            languageOptionsDecoded0 = [TranscribeClientTypes.LanguageCode]()
            for string0 in languageOptionsContainer {
                if let string0 = string0 {
                    languageOptionsDecoded0?.append(string0)
                }
            }
        }
        languageOptions = languageOptionsDecoded0
        let subtitlesDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Subtitles.self, forKey: .subtitles)
        subtitles = subtitlesDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TranscribeClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TranscribeClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let languageIdSettingsContainer = try containerValues.decodeIfPresent([Swift.String: TranscribeClientTypes.LanguageIdSettings?].self, forKey: .languageIdSettings)
        var languageIdSettingsDecoded0: [Swift.String:TranscribeClientTypes.LanguageIdSettings]? = nil
        if let languageIdSettingsContainer = languageIdSettingsContainer {
            languageIdSettingsDecoded0 = [Swift.String:TranscribeClientTypes.LanguageIdSettings]()
            for (key0, languageidsettings0) in languageIdSettingsContainer {
                if let languageidsettings0 = languageidsettings0 {
                    languageIdSettingsDecoded0?[key0] = languageidsettings0
                }
            }
        }
        languageIdSettings = languageIdSettingsDecoded0
    }
}

extension StartTranscriptionJobOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension StartTranscriptionJobOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum StartTranscriptionJobOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case unknown(UnknownAWSHttpServiceError)
}

extension StartTranscriptionJobOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "StartTranscriptionJobOutputResponse(transcriptionJob: \(Swift.String(describing: transcriptionJob)))"}
}

extension StartTranscriptionJobOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: StartTranscriptionJobOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.transcriptionJob = output.transcriptionJob
        } else {
            self.transcriptionJob = nil
        }
    }
}

public struct StartTranscriptionJobOutputResponse: Swift.Equatable {
    /// An object containing details of the asynchronous transcription job.
    public var transcriptionJob: TranscribeClientTypes.TranscriptionJob?

    public init (
        transcriptionJob: TranscribeClientTypes.TranscriptionJob? = nil
    )
    {
        self.transcriptionJob = transcriptionJob
    }
}

struct StartTranscriptionJobOutputResponseBody: Swift.Equatable {
    public let transcriptionJob: TranscribeClientTypes.TranscriptionJob?
}

extension StartTranscriptionJobOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case transcriptionJob = "TranscriptionJob"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptionJobDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.TranscriptionJob.self, forKey: .transcriptionJob)
        transcriptionJob = transcriptionJobDecoded
    }
}

extension TranscribeClientTypes {
    public enum SubtitleFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case srt
        case vtt
        case sdkUnknown(Swift.String)

        public static var allCases: [SubtitleFormat] {
            return [
                .srt,
                .vtt,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .srt: return "srt"
            case .vtt: return "vtt"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = SubtitleFormat(rawValue: rawValue) ?? SubtitleFormat.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes.Subtitles: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case formats = "Formats"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let formats = formats {
            var formatsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .formats)
            for subtitleformats0 in formats {
                try formatsContainer.encode(subtitleformats0.rawValue)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.SubtitleFormat?].self, forKey: .formats)
        var formatsDecoded0:[TranscribeClientTypes.SubtitleFormat]? = nil
        if let formatsContainer = formatsContainer {
            formatsDecoded0 = [TranscribeClientTypes.SubtitleFormat]()
            for string0 in formatsContainer {
                if let string0 = string0 {
                    formatsDecoded0?.append(string0)
                }
            }
        }
        formats = formatsDecoded0
    }
}

extension TranscribeClientTypes.Subtitles: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Subtitles(formats: \(Swift.String(describing: formats)))"}
}

extension TranscribeClientTypes {
    /// Generate subtitles for your batch transcription job.
    public struct Subtitles: Swift.Equatable {
        /// Specify the output format for your subtitle file.
        public var formats: [TranscribeClientTypes.SubtitleFormat]?

        public init (
            formats: [TranscribeClientTypes.SubtitleFormat]? = nil
        )
        {
            self.formats = formats
        }
    }

}

extension TranscribeClientTypes.SubtitlesOutput: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case formats = "Formats"
        case subtitleFileUris = "SubtitleFileUris"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let formats = formats {
            var formatsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .formats)
            for subtitleformats0 in formats {
                try formatsContainer.encode(subtitleformats0.rawValue)
            }
        }
        if let subtitleFileUris = subtitleFileUris {
            var subtitleFileUrisContainer = encodeContainer.nestedUnkeyedContainer(forKey: .subtitleFileUris)
            for subtitlefileuris0 in subtitleFileUris {
                try subtitleFileUrisContainer.encode(subtitlefileuris0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let formatsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.SubtitleFormat?].self, forKey: .formats)
        var formatsDecoded0:[TranscribeClientTypes.SubtitleFormat]? = nil
        if let formatsContainer = formatsContainer {
            formatsDecoded0 = [TranscribeClientTypes.SubtitleFormat]()
            for string0 in formatsContainer {
                if let string0 = string0 {
                    formatsDecoded0?.append(string0)
                }
            }
        }
        formats = formatsDecoded0
        let subtitleFileUrisContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .subtitleFileUris)
        var subtitleFileUrisDecoded0:[Swift.String]? = nil
        if let subtitleFileUrisContainer = subtitleFileUrisContainer {
            subtitleFileUrisDecoded0 = [Swift.String]()
            for string0 in subtitleFileUrisContainer {
                if let string0 = string0 {
                    subtitleFileUrisDecoded0?.append(string0)
                }
            }
        }
        subtitleFileUris = subtitleFileUrisDecoded0
    }
}

extension TranscribeClientTypes.SubtitlesOutput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "SubtitlesOutput(formats: \(Swift.String(describing: formats)), subtitleFileUris: \(Swift.String(describing: subtitleFileUris)))"}
}

extension TranscribeClientTypes {
    /// Specify the output format for your subtitle file.
    public struct SubtitlesOutput: Swift.Equatable {
        /// Specify the output format for your subtitle file; if you select both SRT and VTT formats, two output files are genereated.
        public var formats: [TranscribeClientTypes.SubtitleFormat]?
        /// Choose the output location for your subtitle file. This location must be an S3 bucket.
        public var subtitleFileUris: [Swift.String]?

        public init (
            formats: [TranscribeClientTypes.SubtitleFormat]? = nil,
            subtitleFileUris: [Swift.String]? = nil
        )
        {
            self.formats = formats
            self.subtitleFileUris = subtitleFileUris
        }
    }

}

extension TranscribeClientTypes.Tag: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case key = "Key"
        case value = "Value"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let value = value {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let valueDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .value)
        value = valueDecoded
    }
}

extension TranscribeClientTypes.Tag: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Tag(key: \(Swift.String(describing: key)), value: \(Swift.String(describing: value)))"}
}

extension TranscribeClientTypes {
    /// A key:value pair that adds metadata to a resource used by Amazon Transcribe. For example, a tag with the key:value pair ‘Department’:’Sales’ might be added to a resource to indicate its use by your organization's sales department.
    public struct Tag: Swift.Equatable {
        /// The first part of a key:value pair that forms a tag associated with a given resource. For example, in the tag ‘Department’:’Sales’, the key is 'Department'.
        /// This member is required.
        public var key: Swift.String?
        /// The second part of a key:value pair that forms a tag associated with a given resource. For example, in the tag ‘Department’:’Sales’, the value is 'Sales'.
        /// This member is required.
        public var value: Swift.String?

        public init (
            key: Swift.String? = nil,
            value: Swift.String? = nil
        )
        {
            self.key = key
            self.value = value
        }
    }

}

public struct TagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

extension TagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tags: \(Swift.String(describing: tags)))"}
}

extension TagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
    }
}

public struct TagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<TagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<TagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: TagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = TagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "TagResourceInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: TagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<TagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = TagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<TagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<TagResourceOutputError>
}

public struct TagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Amazon Transcribe resource you want to tag. ARNs have the format arn:partition:service:region:account-id:resource-type/resource-id (for example, arn:aws:transcribe:us-east-1:account-id:transcription-job/your-job-name). Valid values for resource-type are: transcription-job, medical-transcription-job, vocabulary, medical-vocabulary, vocabulary-filter, and language-model.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// The tags you are assigning to a given Amazon Transcribe resource.
    /// This member is required.
    public var tags: [TranscribeClientTypes.Tag]?

    public init (
        resourceArn: Swift.String? = nil,
        tags: [TranscribeClientTypes.Tag]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tags = tags
    }
}

struct TagResourceInputBody: Swift.Equatable {
    public let tags: [TranscribeClientTypes.Tag]?
}

extension TagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tags = "Tags"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TranscribeClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TranscribeClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
    }
}

extension TagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension TagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum TagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension TagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TagResourceOutputResponse()"}
}

extension TagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct TagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct TagResourceOutputResponseBody: Swift.Equatable {
}

extension TagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension TranscribeClientTypes.Transcript: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case redactedTranscriptFileUri = "RedactedTranscriptFileUri"
        case transcriptFileUri = "TranscriptFileUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let redactedTranscriptFileUri = redactedTranscriptFileUri {
            try encodeContainer.encode(redactedTranscriptFileUri, forKey: .redactedTranscriptFileUri)
        }
        if let transcriptFileUri = transcriptFileUri {
            try encodeContainer.encode(transcriptFileUri, forKey: .transcriptFileUri)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptFileUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transcriptFileUri)
        transcriptFileUri = transcriptFileUriDecoded
        let redactedTranscriptFileUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .redactedTranscriptFileUri)
        redactedTranscriptFileUri = redactedTranscriptFileUriDecoded
    }
}

extension TranscribeClientTypes.Transcript: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Transcript(redactedTranscriptFileUri: \(Swift.String(describing: redactedTranscriptFileUri)), transcriptFileUri: \(Swift.String(describing: transcriptFileUri)))"}
}

extension TranscribeClientTypes {
    /// Identifies the location of a transcription.
    public struct Transcript: Swift.Equatable {
        /// The S3 object location of the redacted transcript. Use this URI to access the redacted transcript. If you specified an S3 bucket in the OutputBucketName field when you created the job, this is the URI of that bucket. If you chose to store the transcript in Amazon Transcribe, this is a shareable URL that provides secure access to that location.
        public var redactedTranscriptFileUri: Swift.String?
        /// The S3 object location of the transcript. Use this URI to access the transcript. If you specified an S3 bucket in the OutputBucketName field when you created the job, this is the URI of that bucket. If you chose to store the transcript in Amazon Transcribe, this is a shareable URL that provides secure access to that location.
        public var transcriptFileUri: Swift.String?

        public init (
            redactedTranscriptFileUri: Swift.String? = nil,
            transcriptFileUri: Swift.String? = nil
        )
        {
            self.redactedTranscriptFileUri = redactedTranscriptFileUri
            self.transcriptFileUri = transcriptFileUri
        }
    }

}

extension TranscribeClientTypes.TranscriptFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case absoluteTimeRange = "AbsoluteTimeRange"
        case negate = "Negate"
        case participantRole = "ParticipantRole"
        case relativeTimeRange = "RelativeTimeRange"
        case targets = "Targets"
        case transcriptFilterType = "TranscriptFilterType"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let absoluteTimeRange = absoluteTimeRange {
            try encodeContainer.encode(absoluteTimeRange, forKey: .absoluteTimeRange)
        }
        if let negate = negate {
            try encodeContainer.encode(negate, forKey: .negate)
        }
        if let participantRole = participantRole {
            try encodeContainer.encode(participantRole.rawValue, forKey: .participantRole)
        }
        if let relativeTimeRange = relativeTimeRange {
            try encodeContainer.encode(relativeTimeRange, forKey: .relativeTimeRange)
        }
        if let targets = targets {
            var targetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .targets)
            for stringtargetlist0 in targets {
                try targetsContainer.encode(stringtargetlist0)
            }
        }
        if let transcriptFilterType = transcriptFilterType {
            try encodeContainer.encode(transcriptFilterType.rawValue, forKey: .transcriptFilterType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptFilterTypeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.TranscriptFilterType.self, forKey: .transcriptFilterType)
        transcriptFilterType = transcriptFilterTypeDecoded
        let absoluteTimeRangeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.AbsoluteTimeRange.self, forKey: .absoluteTimeRange)
        absoluteTimeRange = absoluteTimeRangeDecoded
        let relativeTimeRangeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.RelativeTimeRange.self, forKey: .relativeTimeRange)
        relativeTimeRange = relativeTimeRangeDecoded
        let participantRoleDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ParticipantRole.self, forKey: .participantRole)
        participantRole = participantRoleDecoded
        let negateDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .negate)
        negate = negateDecoded
        let targetsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .targets)
        var targetsDecoded0:[Swift.String]? = nil
        if let targetsContainer = targetsContainer {
            targetsDecoded0 = [Swift.String]()
            for string0 in targetsContainer {
                if let string0 = string0 {
                    targetsDecoded0?.append(string0)
                }
            }
        }
        targets = targetsDecoded0
    }
}

extension TranscribeClientTypes.TranscriptFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TranscriptFilter(absoluteTimeRange: \(Swift.String(describing: absoluteTimeRange)), negate: \(Swift.String(describing: negate)), participantRole: \(Swift.String(describing: participantRole)), relativeTimeRange: \(Swift.String(describing: relativeTimeRange)), targets: \(Swift.String(describing: targets)), transcriptFilterType: \(Swift.String(describing: transcriptFilterType)))"}
}

extension TranscribeClientTypes {
    /// Matches the output of the transcription to either the specific phrases that you specify, or the intent of the phrases that you specify.
    public struct TranscriptFilter: Swift.Equatable {
        /// A time range, set in seconds, between two points in the call.
        public var absoluteTimeRange: TranscribeClientTypes.AbsoluteTimeRange?
        /// If TRUE, the rule that you specify is applied to everything except for the phrases that you specify.
        public var negate: Swift.Bool?
        /// Determines whether the customer or the agent is speaking the phrases that you've specified.
        public var participantRole: TranscribeClientTypes.ParticipantRole?
        /// An object that allows percentages to specify the proportion of the call where you would like to apply a filter. For example, you can specify the first half of the call. You can also specify the period of time between halfway through to three-quarters of the way through the call. Because the length of conversation can vary between calls, you can apply relative time ranges across all calls.
        public var relativeTimeRange: TranscribeClientTypes.RelativeTimeRange?
        /// The phrases that you're specifying for the transcript filter to match.
        /// This member is required.
        public var targets: [Swift.String]?
        /// Matches the phrase to the transcription output in a word for word fashion. For example, if you specify the phrase "I want to speak to the manager." Amazon Transcribe attempts to match that specific phrase to the transcription.
        /// This member is required.
        public var transcriptFilterType: TranscribeClientTypes.TranscriptFilterType?

        public init (
            absoluteTimeRange: TranscribeClientTypes.AbsoluteTimeRange? = nil,
            negate: Swift.Bool? = nil,
            participantRole: TranscribeClientTypes.ParticipantRole? = nil,
            relativeTimeRange: TranscribeClientTypes.RelativeTimeRange? = nil,
            targets: [Swift.String]? = nil,
            transcriptFilterType: TranscribeClientTypes.TranscriptFilterType? = nil
        )
        {
            self.absoluteTimeRange = absoluteTimeRange
            self.negate = negate
            self.participantRole = participantRole
            self.relativeTimeRange = relativeTimeRange
            self.targets = targets
            self.transcriptFilterType = transcriptFilterType
        }
    }

}

extension TranscribeClientTypes {
    public enum TranscriptFilterType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case exact
        case sdkUnknown(Swift.String)

        public static var allCases: [TranscriptFilterType] {
            return [
                .exact,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .exact: return "EXACT"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TranscriptFilterType(rawValue: rawValue) ?? TranscriptFilterType.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes.TranscriptionJob: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime = "CompletionTime"
        case contentRedaction = "ContentRedaction"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case identifiedLanguageScore = "IdentifiedLanguageScore"
        case identifyLanguage = "IdentifyLanguage"
        case jobExecutionSettings = "JobExecutionSettings"
        case languageCode = "LanguageCode"
        case languageIdSettings = "LanguageIdSettings"
        case languageOptions = "LanguageOptions"
        case media = "Media"
        case mediaFormat = "MediaFormat"
        case mediaSampleRateHertz = "MediaSampleRateHertz"
        case modelSettings = "ModelSettings"
        case settings = "Settings"
        case startTime = "StartTime"
        case subtitles = "Subtitles"
        case tags = "Tags"
        case transcript = "Transcript"
        case transcriptionJobName = "TranscriptionJobName"
        case transcriptionJobStatus = "TranscriptionJobStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let contentRedaction = contentRedaction {
            try encodeContainer.encode(contentRedaction, forKey: .contentRedaction)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let identifiedLanguageScore = identifiedLanguageScore {
            try encodeContainer.encode(identifiedLanguageScore, forKey: .identifiedLanguageScore)
        }
        if let identifyLanguage = identifyLanguage {
            try encodeContainer.encode(identifyLanguage, forKey: .identifyLanguage)
        }
        if let jobExecutionSettings = jobExecutionSettings {
            try encodeContainer.encode(jobExecutionSettings, forKey: .jobExecutionSettings)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let languageIdSettings = languageIdSettings {
            var languageIdSettingsContainer = encodeContainer.nestedContainer(keyedBy: ClientRuntime.Key.self, forKey: .languageIdSettings)
            for (dictKey0, languageidsettingsmap0) in languageIdSettings {
                try languageIdSettingsContainer.encode(languageidsettingsmap0, forKey: ClientRuntime.Key(stringValue: dictKey0))
            }
        }
        if let languageOptions = languageOptions {
            var languageOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .languageOptions)
            for languageoptions0 in languageOptions {
                try languageOptionsContainer.encode(languageoptions0.rawValue)
            }
        }
        if let media = media {
            try encodeContainer.encode(media, forKey: .media)
        }
        if let mediaFormat = mediaFormat {
            try encodeContainer.encode(mediaFormat.rawValue, forKey: .mediaFormat)
        }
        if let mediaSampleRateHertz = mediaSampleRateHertz {
            try encodeContainer.encode(mediaSampleRateHertz, forKey: .mediaSampleRateHertz)
        }
        if let modelSettings = modelSettings {
            try encodeContainer.encode(modelSettings, forKey: .modelSettings)
        }
        if let settings = settings {
            try encodeContainer.encode(settings, forKey: .settings)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let subtitles = subtitles {
            try encodeContainer.encode(subtitles, forKey: .subtitles)
        }
        if let tags = tags {
            var tagsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tags)
            for taglist0 in tags {
                try tagsContainer.encode(taglist0)
            }
        }
        if let transcript = transcript {
            try encodeContainer.encode(transcript, forKey: .transcript)
        }
        if let transcriptionJobName = transcriptionJobName {
            try encodeContainer.encode(transcriptionJobName, forKey: .transcriptionJobName)
        }
        if let transcriptionJobStatus = transcriptionJobStatus {
            try encodeContainer.encode(transcriptionJobStatus.rawValue, forKey: .transcriptionJobStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptionJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transcriptionJobName)
        transcriptionJobName = transcriptionJobNameDecoded
        let transcriptionJobStatusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.TranscriptionJobStatus.self, forKey: .transcriptionJobStatus)
        transcriptionJobStatus = transcriptionJobStatusDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let mediaSampleRateHertzDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .mediaSampleRateHertz)
        mediaSampleRateHertz = mediaSampleRateHertzDecoded
        let mediaFormatDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.MediaFormat.self, forKey: .mediaFormat)
        mediaFormat = mediaFormatDecoded
        let mediaDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Media.self, forKey: .media)
        media = mediaDecoded
        let transcriptDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Transcript.self, forKey: .transcript)
        transcript = transcriptDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let settingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.Settings.self, forKey: .settings)
        settings = settingsDecoded
        let modelSettingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ModelSettings.self, forKey: .modelSettings)
        modelSettings = modelSettingsDecoded
        let jobExecutionSettingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.JobExecutionSettings.self, forKey: .jobExecutionSettings)
        jobExecutionSettings = jobExecutionSettingsDecoded
        let contentRedactionDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ContentRedaction.self, forKey: .contentRedaction)
        contentRedaction = contentRedactionDecoded
        let identifyLanguageDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .identifyLanguage)
        identifyLanguage = identifyLanguageDecoded
        let languageOptionsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.LanguageCode?].self, forKey: .languageOptions)
        var languageOptionsDecoded0:[TranscribeClientTypes.LanguageCode]? = nil
        if let languageOptionsContainer = languageOptionsContainer {
            languageOptionsDecoded0 = [TranscribeClientTypes.LanguageCode]()
            for string0 in languageOptionsContainer {
                if let string0 = string0 {
                    languageOptionsDecoded0?.append(string0)
                }
            }
        }
        languageOptions = languageOptionsDecoded0
        let identifiedLanguageScoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .identifiedLanguageScore)
        identifiedLanguageScore = identifiedLanguageScoreDecoded
        let tagsContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Tag?].self, forKey: .tags)
        var tagsDecoded0:[TranscribeClientTypes.Tag]? = nil
        if let tagsContainer = tagsContainer {
            tagsDecoded0 = [TranscribeClientTypes.Tag]()
            for structure0 in tagsContainer {
                if let structure0 = structure0 {
                    tagsDecoded0?.append(structure0)
                }
            }
        }
        tags = tagsDecoded0
        let subtitlesDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.SubtitlesOutput.self, forKey: .subtitles)
        subtitles = subtitlesDecoded
        let languageIdSettingsContainer = try containerValues.decodeIfPresent([Swift.String: TranscribeClientTypes.LanguageIdSettings?].self, forKey: .languageIdSettings)
        var languageIdSettingsDecoded0: [Swift.String:TranscribeClientTypes.LanguageIdSettings]? = nil
        if let languageIdSettingsContainer = languageIdSettingsContainer {
            languageIdSettingsDecoded0 = [Swift.String:TranscribeClientTypes.LanguageIdSettings]()
            for (key0, languageidsettings0) in languageIdSettingsContainer {
                if let languageidsettings0 = languageidsettings0 {
                    languageIdSettingsDecoded0?[key0] = languageidsettings0
                }
            }
        }
        languageIdSettings = languageIdSettingsDecoded0
    }
}

extension TranscribeClientTypes.TranscriptionJob: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TranscriptionJob(completionTime: \(Swift.String(describing: completionTime)), contentRedaction: \(Swift.String(describing: contentRedaction)), creationTime: \(Swift.String(describing: creationTime)), failureReason: \(Swift.String(describing: failureReason)), identifiedLanguageScore: \(Swift.String(describing: identifiedLanguageScore)), identifyLanguage: \(Swift.String(describing: identifyLanguage)), jobExecutionSettings: \(Swift.String(describing: jobExecutionSettings)), languageCode: \(Swift.String(describing: languageCode)), languageIdSettings: \(Swift.String(describing: languageIdSettings)), languageOptions: \(Swift.String(describing: languageOptions)), media: \(Swift.String(describing: media)), mediaFormat: \(Swift.String(describing: mediaFormat)), mediaSampleRateHertz: \(Swift.String(describing: mediaSampleRateHertz)), modelSettings: \(Swift.String(describing: modelSettings)), settings: \(Swift.String(describing: settings)), startTime: \(Swift.String(describing: startTime)), subtitles: \(Swift.String(describing: subtitles)), tags: \(Swift.String(describing: tags)), transcript: \(Swift.String(describing: transcript)), transcriptionJobName: \(Swift.String(describing: transcriptionJobName)), transcriptionJobStatus: \(Swift.String(describing: transcriptionJobStatus)))"}
}

extension TranscribeClientTypes {
    /// Describes an asynchronous transcription job that was created with the StartTranscriptionJob operation.
    public struct TranscriptionJob: Swift.Equatable {
        /// A timestamp that shows when the job completed.
        public var completionTime: ClientRuntime.Date?
        /// An object that describes content redaction settings for the transcription job.
        public var contentRedaction: TranscribeClientTypes.ContentRedaction?
        /// A timestamp that shows when the job was created.
        public var creationTime: ClientRuntime.Date?
        /// If the TranscriptionJobStatus field is FAILED, this field contains information about why the job failed. The FailureReason field can contain one of the following values:
        ///
        /// * Unsupported media format - The media format specified in the MediaFormat field of the request isn't valid. See the description of the MediaFormat field for a list of valid values.
        ///
        /// * The media format provided does not match the detected media format - The media format of the audio file doesn't match the format specified in the MediaFormat field in the request. Check the media format of your media file and make sure that the two values match.
        ///
        /// * Invalid sample rate for audio file - The sample rate specified in the MediaSampleRateHertz of the request isn't valid. The sample rate must be between 8,000 and 48,000 Hertz.
        ///
        /// * The sample rate provided does not match the detected sample rate - The sample rate in the audio file doesn't match the sample rate specified in the MediaSampleRateHertz field in the request. Check the sample rate of your media file and make sure that the two values match.
        ///
        /// * Invalid file size: file size too large - The size of your audio file is larger than Amazon Transcribe can process. For more information, see [Limits](https://docs.aws.amazon.com/transcribe/latest/dg/limits-guidelines.html#limits) in the Amazon Transcribe Developer Guide.
        ///
        /// * Invalid number of channels: number of channels too large - Your audio contains more channels than Amazon Transcribe is configured to process. To request additional channels, see [Amazon Transcribe Limits](https://docs.aws.amazon.com/general/latest/gr/aws_service_limits.html#limits-amazon-transcribe) in the Amazon Web Services General Reference.
        public var failureReason: Swift.String?
        /// A value between zero and one that Amazon Transcribe assigned to the language that it identified in the source audio. Larger values indicate that Amazon Transcribe has higher confidence in the language it identified.
        public var identifiedLanguageScore: Swift.Float?
        /// A value that shows if automatic language identification was enabled for a transcription job.
        public var identifyLanguage: Swift.Bool?
        /// Provides information about how a transcription job is executed.
        public var jobExecutionSettings: TranscribeClientTypes.JobExecutionSettings?
        /// The language code for the input speech.
        public var languageCode: TranscribeClientTypes.LanguageCode?
        /// Language-specific settings that can be specified when language identification is enabled for your transcription job. These settings include VocabularyName, VocabularyFilterName, and LanguageModelNameLanguageModelName.
        public var languageIdSettings: [Swift.String:TranscribeClientTypes.LanguageIdSettings]?
        /// An object that shows the optional array of languages inputted for transcription jobs with automatic language identification enabled.
        public var languageOptions: [TranscribeClientTypes.LanguageCode]?
        /// An object that describes the input media for the transcription job.
        public var media: TranscribeClientTypes.Media?
        /// The format of the input media file.
        public var mediaFormat: TranscribeClientTypes.MediaFormat?
        /// The sample rate, in Hertz, of the audio track in the input media file.
        public var mediaSampleRateHertz: Swift.Int?
        /// An object containing the details of your custom language model.
        public var modelSettings: TranscribeClientTypes.ModelSettings?
        /// Optional settings for the transcription job. Use these settings to turn on speaker recognition, to set the maximum number of speakers that should be identified and to specify a custom vocabulary to use when processing the transcription job.
        public var settings: TranscribeClientTypes.Settings?
        /// A timestamp that shows when the job started processing.
        public var startTime: ClientRuntime.Date?
        /// Generate subtitles for your batch transcription job.
        public var subtitles: TranscribeClientTypes.SubtitlesOutput?
        /// A key:value pair assigned to a given transcription job.
        public var tags: [TranscribeClientTypes.Tag]?
        /// An object that describes the output of the transcription job.
        public var transcript: TranscribeClientTypes.Transcript?
        /// The name of the transcription job.
        public var transcriptionJobName: Swift.String?
        /// The status of the transcription job.
        public var transcriptionJobStatus: TranscribeClientTypes.TranscriptionJobStatus?

        public init (
            completionTime: ClientRuntime.Date? = nil,
            contentRedaction: TranscribeClientTypes.ContentRedaction? = nil,
            creationTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            identifiedLanguageScore: Swift.Float? = nil,
            identifyLanguage: Swift.Bool? = nil,
            jobExecutionSettings: TranscribeClientTypes.JobExecutionSettings? = nil,
            languageCode: TranscribeClientTypes.LanguageCode? = nil,
            languageIdSettings: [Swift.String:TranscribeClientTypes.LanguageIdSettings]? = nil,
            languageOptions: [TranscribeClientTypes.LanguageCode]? = nil,
            media: TranscribeClientTypes.Media? = nil,
            mediaFormat: TranscribeClientTypes.MediaFormat? = nil,
            mediaSampleRateHertz: Swift.Int? = nil,
            modelSettings: TranscribeClientTypes.ModelSettings? = nil,
            settings: TranscribeClientTypes.Settings? = nil,
            startTime: ClientRuntime.Date? = nil,
            subtitles: TranscribeClientTypes.SubtitlesOutput? = nil,
            tags: [TranscribeClientTypes.Tag]? = nil,
            transcript: TranscribeClientTypes.Transcript? = nil,
            transcriptionJobName: Swift.String? = nil,
            transcriptionJobStatus: TranscribeClientTypes.TranscriptionJobStatus? = nil
        )
        {
            self.completionTime = completionTime
            self.contentRedaction = contentRedaction
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.identifiedLanguageScore = identifiedLanguageScore
            self.identifyLanguage = identifyLanguage
            self.jobExecutionSettings = jobExecutionSettings
            self.languageCode = languageCode
            self.languageIdSettings = languageIdSettings
            self.languageOptions = languageOptions
            self.media = media
            self.mediaFormat = mediaFormat
            self.mediaSampleRateHertz = mediaSampleRateHertz
            self.modelSettings = modelSettings
            self.settings = settings
            self.startTime = startTime
            self.subtitles = subtitles
            self.tags = tags
            self.transcript = transcript
            self.transcriptionJobName = transcriptionJobName
            self.transcriptionJobStatus = transcriptionJobStatus
        }
    }

}

extension TranscribeClientTypes {
    public enum TranscriptionJobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case completed
        case failed
        case inProgress
        case queued
        case sdkUnknown(Swift.String)

        public static var allCases: [TranscriptionJobStatus] {
            return [
                .completed,
                .failed,
                .inProgress,
                .queued,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .completed: return "COMPLETED"
            case .failed: return "FAILED"
            case .inProgress: return "IN_PROGRESS"
            case .queued: return "QUEUED"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = TranscriptionJobStatus(rawValue: rawValue) ?? TranscriptionJobStatus.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes.TranscriptionJobSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case completionTime = "CompletionTime"
        case contentRedaction = "ContentRedaction"
        case creationTime = "CreationTime"
        case failureReason = "FailureReason"
        case identifiedLanguageScore = "IdentifiedLanguageScore"
        case identifyLanguage = "IdentifyLanguage"
        case languageCode = "LanguageCode"
        case modelSettings = "ModelSettings"
        case outputLocationType = "OutputLocationType"
        case startTime = "StartTime"
        case transcriptionJobName = "TranscriptionJobName"
        case transcriptionJobStatus = "TranscriptionJobStatus"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let completionTime = completionTime {
            try encodeContainer.encode(completionTime.timeIntervalSince1970, forKey: .completionTime)
        }
        if let contentRedaction = contentRedaction {
            try encodeContainer.encode(contentRedaction, forKey: .contentRedaction)
        }
        if let creationTime = creationTime {
            try encodeContainer.encode(creationTime.timeIntervalSince1970, forKey: .creationTime)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let identifiedLanguageScore = identifiedLanguageScore {
            try encodeContainer.encode(identifiedLanguageScore, forKey: .identifiedLanguageScore)
        }
        if let identifyLanguage = identifyLanguage {
            try encodeContainer.encode(identifyLanguage, forKey: .identifyLanguage)
        }
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let modelSettings = modelSettings {
            try encodeContainer.encode(modelSettings, forKey: .modelSettings)
        }
        if let outputLocationType = outputLocationType {
            try encodeContainer.encode(outputLocationType.rawValue, forKey: .outputLocationType)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let transcriptionJobName = transcriptionJobName {
            try encodeContainer.encode(transcriptionJobName, forKey: .transcriptionJobName)
        }
        if let transcriptionJobStatus = transcriptionJobStatus {
            try encodeContainer.encode(transcriptionJobStatus.rawValue, forKey: .transcriptionJobStatus)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let transcriptionJobNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .transcriptionJobName)
        transcriptionJobName = transcriptionJobNameDecoded
        let creationTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTime)
        creationTime = creationTimeDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let completionTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .completionTime)
        completionTime = completionTimeDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let transcriptionJobStatusDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.TranscriptionJobStatus.self, forKey: .transcriptionJobStatus)
        transcriptionJobStatus = transcriptionJobStatusDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
        let outputLocationTypeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.OutputLocationType.self, forKey: .outputLocationType)
        outputLocationType = outputLocationTypeDecoded
        let contentRedactionDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ContentRedaction.self, forKey: .contentRedaction)
        contentRedaction = contentRedactionDecoded
        let modelSettingsDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.ModelSettings.self, forKey: .modelSettings)
        modelSettings = modelSettingsDecoded
        let identifyLanguageDecoded = try containerValues.decodeIfPresent(Swift.Bool.self, forKey: .identifyLanguage)
        identifyLanguage = identifyLanguageDecoded
        let identifiedLanguageScoreDecoded = try containerValues.decodeIfPresent(Swift.Float.self, forKey: .identifiedLanguageScore)
        identifiedLanguageScore = identifiedLanguageScoreDecoded
    }
}

extension TranscribeClientTypes.TranscriptionJobSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "TranscriptionJobSummary(completionTime: \(Swift.String(describing: completionTime)), contentRedaction: \(Swift.String(describing: contentRedaction)), creationTime: \(Swift.String(describing: creationTime)), failureReason: \(Swift.String(describing: failureReason)), identifiedLanguageScore: \(Swift.String(describing: identifiedLanguageScore)), identifyLanguage: \(Swift.String(describing: identifyLanguage)), languageCode: \(Swift.String(describing: languageCode)), modelSettings: \(Swift.String(describing: modelSettings)), outputLocationType: \(Swift.String(describing: outputLocationType)), startTime: \(Swift.String(describing: startTime)), transcriptionJobName: \(Swift.String(describing: transcriptionJobName)), transcriptionJobStatus: \(Swift.String(describing: transcriptionJobStatus)))"}
}

extension TranscribeClientTypes {
    /// Provides a summary of information about a transcription job.
    public struct TranscriptionJobSummary: Swift.Equatable {
        /// A timestamp that shows when the job was completed.
        public var completionTime: ClientRuntime.Date?
        /// The content redaction settings of the transcription job.
        public var contentRedaction: TranscribeClientTypes.ContentRedaction?
        /// A timestamp that shows when the job was created.
        public var creationTime: ClientRuntime.Date?
        /// If the TranscriptionJobStatus field is FAILED, a description of the error.
        public var failureReason: Swift.String?
        /// A value between zero and one that Amazon Transcribe assigned to the language it identified in the source audio. A higher score indicates that Amazon Transcribe is more confident in the language it identified.
        public var identifiedLanguageScore: Swift.Float?
        /// Whether automatic language identification was enabled for a transcription job.
        public var identifyLanguage: Swift.Bool?
        /// The language code for the input speech.
        public var languageCode: TranscribeClientTypes.LanguageCode?
        /// The object used to call your custom language model to your transcription job.
        public var modelSettings: TranscribeClientTypes.ModelSettings?
        /// Indicates the location of the output of the transcription job. If the value is CUSTOMER_BUCKET then the location is the S3 bucket specified in the outputBucketName field when the transcription job was started with the StartTranscriptionJob operation. If the value is SERVICE_BUCKET then the output is stored by Amazon Transcribe and can be retrieved using the URI in the GetTranscriptionJob response's TranscriptFileUri field.
        public var outputLocationType: TranscribeClientTypes.OutputLocationType?
        /// A timestamp that shows when the job started processing.
        public var startTime: ClientRuntime.Date?
        /// The name of the transcription job.
        public var transcriptionJobName: Swift.String?
        /// The status of the transcription job. When the status is COMPLETED, use the GetTranscriptionJob operation to get the results of the transcription.
        public var transcriptionJobStatus: TranscribeClientTypes.TranscriptionJobStatus?

        public init (
            completionTime: ClientRuntime.Date? = nil,
            contentRedaction: TranscribeClientTypes.ContentRedaction? = nil,
            creationTime: ClientRuntime.Date? = nil,
            failureReason: Swift.String? = nil,
            identifiedLanguageScore: Swift.Float? = nil,
            identifyLanguage: Swift.Bool? = nil,
            languageCode: TranscribeClientTypes.LanguageCode? = nil,
            modelSettings: TranscribeClientTypes.ModelSettings? = nil,
            outputLocationType: TranscribeClientTypes.OutputLocationType? = nil,
            startTime: ClientRuntime.Date? = nil,
            transcriptionJobName: Swift.String? = nil,
            transcriptionJobStatus: TranscribeClientTypes.TranscriptionJobStatus? = nil
        )
        {
            self.completionTime = completionTime
            self.contentRedaction = contentRedaction
            self.creationTime = creationTime
            self.failureReason = failureReason
            self.identifiedLanguageScore = identifiedLanguageScore
            self.identifyLanguage = identifyLanguage
            self.languageCode = languageCode
            self.modelSettings = modelSettings
            self.outputLocationType = outputLocationType
            self.startTime = startTime
            self.transcriptionJobName = transcriptionJobName
            self.transcriptionJobStatus = transcriptionJobStatus
        }
    }

}

extension TranscribeClientTypes {
    public enum ModelType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case conversation
        case dictation
        case sdkUnknown(Swift.String)

        public static var allCases: [ModelType] {
            return [
                .conversation,
                .dictation,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .conversation: return "CONVERSATION"
            case .dictation: return "DICTATION"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ModelType(rawValue: rawValue) ?? ModelType.sdkUnknown(rawValue)
        }
    }
}

public struct UntagResourceInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

extension UntagResourceInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceInput(resourceArn: \(Swift.String(describing: resourceArn)), tagKeys: \(Swift.String(describing: tagKeys)))"}
}

extension UntagResourceInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagKeys = "TagKeys"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let tagKeys = tagKeys {
            var tagKeysContainer = encodeContainer.nestedUnkeyedContainer(forKey: .tagKeys)
            for tagkeylist0 in tagKeys {
                try tagKeysContainer.encode(tagkeylist0)
            }
        }
    }
}

public struct UntagResourceInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UntagResourceInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UntagResourceInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UntagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UntagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UntagResourceInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UntagResourceInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UntagResourceOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UntagResourceInput
    public typealias MOutput = ClientRuntime.OperationOutput<UntagResourceOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UntagResourceOutputError>
}

public struct UntagResourceInput: Swift.Equatable {
    /// The Amazon Resource Name (ARN) of the Amazon Transcribe resource you want to remove tags from. ARNs have the format arn:partition:service:region:account-id:resource-type/resource-id (for example, arn:aws:transcribe:us-east-1:account-id:transcription-job/your-job-name). Valid values for resource-type are: transcription-job, medical-transcription-job, vocabulary, medical-vocabulary, vocabulary-filter, and language-model.
    /// This member is required.
    public var resourceArn: Swift.String?
    /// A list of tag keys you want to remove from a specified Amazon Transcribe resource.
    /// This member is required.
    public var tagKeys: [Swift.String]?

    public init (
        resourceArn: Swift.String? = nil,
        tagKeys: [Swift.String]? = nil
    )
    {
        self.resourceArn = resourceArn
        self.tagKeys = tagKeys
    }
}

struct UntagResourceInputBody: Swift.Equatable {
    public let tagKeys: [Swift.String]?
}

extension UntagResourceInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case tagKeys = "TagKeys"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tagKeysContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .tagKeys)
        var tagKeysDecoded0:[Swift.String]? = nil
        if let tagKeysContainer = tagKeysContainer {
            tagKeysDecoded0 = [Swift.String]()
            for string0 in tagKeysContainer {
                if let string0 = string0 {
                    tagKeysDecoded0?.append(string0)
                }
            }
        }
        tagKeys = tagKeysDecoded0
    }
}

extension UntagResourceOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UntagResourceOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UntagResourceOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UntagResourceOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UntagResourceOutputResponse()"}
}

extension UntagResourceOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
    }
}

public struct UntagResourceOutputResponse: Swift.Equatable {

    public init() {}
}

struct UntagResourceOutputResponseBody: Swift.Equatable {
}

extension UntagResourceOutputResponseBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

public struct UpdateCallAnalyticsCategoryInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCallAnalyticsCategoryInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCallAnalyticsCategoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCallAnalyticsCategoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCallAnalyticsCategoryOutputError>
}

extension UpdateCallAnalyticsCategoryInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCallAnalyticsCategoryInput(categoryName: \(Swift.String(describing: categoryName)), rules: \(Swift.String(describing: rules)))"}
}

extension UpdateCallAnalyticsCategoryInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rules"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let rules = rules {
            var rulesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .rules)
            for rulelist0 in rules {
                try rulesContainer.encode(rulelist0)
            }
        }
    }
}

public struct UpdateCallAnalyticsCategoryInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCallAnalyticsCategoryInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCallAnalyticsCategoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCallAnalyticsCategoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCallAnalyticsCategoryOutputError>
}

public struct UpdateCallAnalyticsCategoryInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCallAnalyticsCategoryInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateCallAnalyticsCategoryInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateCallAnalyticsCategoryInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCallAnalyticsCategoryOutputError>
}

public struct UpdateCallAnalyticsCategoryInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCallAnalyticsCategoryInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UpdateCallAnalyticsCategoryInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateCallAnalyticsCategoryInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCallAnalyticsCategoryOutputError>
}

public struct UpdateCallAnalyticsCategoryInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateCallAnalyticsCategoryInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UpdateCallAnalyticsCategoryInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateCallAnalyticsCategoryOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateCallAnalyticsCategoryInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateCallAnalyticsCategoryOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateCallAnalyticsCategoryOutputError>
}

public struct UpdateCallAnalyticsCategoryInput: Swift.Equatable {
    /// The name of the analytics category to update. The name is case sensitive. If you try to update a call analytics category with the same name as a previous category you will receive a ConflictException error.
    /// This member is required.
    public var categoryName: Swift.String?
    /// The rules used for the updated analytics category. The rules that you provide in this field replace the ones that are currently being used.
    /// This member is required.
    public var rules: [TranscribeClientTypes.Rule]?

    public init (
        categoryName: Swift.String? = nil,
        rules: [TranscribeClientTypes.Rule]? = nil
    )
    {
        self.categoryName = categoryName
        self.rules = rules
    }
}

struct UpdateCallAnalyticsCategoryInputBody: Swift.Equatable {
    public let rules: [TranscribeClientTypes.Rule]?
}

extension UpdateCallAnalyticsCategoryInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case rules = "Rules"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rulesContainer = try containerValues.decodeIfPresent([TranscribeClientTypes.Rule?].self, forKey: .rules)
        var rulesDecoded0:[TranscribeClientTypes.Rule]? = nil
        if let rulesContainer = rulesContainer {
            rulesDecoded0 = [TranscribeClientTypes.Rule]()
            for union0 in rulesContainer {
                if let union0 = union0 {
                    rulesDecoded0?.append(union0)
                }
            }
        }
        rules = rulesDecoded0
    }
}

extension UpdateCallAnalyticsCategoryOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateCallAnalyticsCategoryOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateCallAnalyticsCategoryOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateCallAnalyticsCategoryOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateCallAnalyticsCategoryOutputResponse(categoryProperties: \(Swift.String(describing: categoryProperties)))"}
}

extension UpdateCallAnalyticsCategoryOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateCallAnalyticsCategoryOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.categoryProperties = output.categoryProperties
        } else {
            self.categoryProperties = nil
        }
    }
}

public struct UpdateCallAnalyticsCategoryOutputResponse: Swift.Equatable {
    /// The attributes describing the analytics category. You can see information such as the rules that you've used to update the category and when the category was originally created.
    public var categoryProperties: TranscribeClientTypes.CategoryProperties?

    public init (
        categoryProperties: TranscribeClientTypes.CategoryProperties? = nil
    )
    {
        self.categoryProperties = categoryProperties
    }
}

struct UpdateCallAnalyticsCategoryOutputResponseBody: Swift.Equatable {
    public let categoryProperties: TranscribeClientTypes.CategoryProperties?
}

extension UpdateCallAnalyticsCategoryOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case categoryProperties = "CategoryProperties"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let categoryPropertiesDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.CategoryProperties.self, forKey: .categoryProperties)
        categoryProperties = categoryPropertiesDecoded
    }
}

public struct UpdateMedicalVocabularyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMedicalVocabularyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMedicalVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMedicalVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMedicalVocabularyOutputError>
}

extension UpdateMedicalVocabularyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateMedicalVocabularyInput(languageCode: \(Swift.String(describing: languageCode)), vocabularyFileUri: \(Swift.String(describing: vocabularyFileUri)), vocabularyName: \(Swift.String(describing: vocabularyName)))"}
}

extension UpdateMedicalVocabularyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let vocabularyFileUri = vocabularyFileUri {
            try encodeContainer.encode(vocabularyFileUri, forKey: .vocabularyFileUri)
        }
    }
}

public struct UpdateMedicalVocabularyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMedicalVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMedicalVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMedicalVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMedicalVocabularyOutputError>
}

public struct UpdateMedicalVocabularyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMedicalVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateMedicalVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateMedicalVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMedicalVocabularyOutputError>
}

public struct UpdateMedicalVocabularyInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMedicalVocabularyInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UpdateMedicalVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateMedicalVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMedicalVocabularyOutputError>
}

public struct UpdateMedicalVocabularyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateMedicalVocabularyInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UpdateMedicalVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateMedicalVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateMedicalVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateMedicalVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateMedicalVocabularyOutputError>
}

public struct UpdateMedicalVocabularyInput: Swift.Equatable {
    /// The language code of the language used for the entries in the updated vocabulary. US English (en-US) is the only valid language code in Amazon Transcribe Medical.
    /// This member is required.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// The location in Amazon S3 of the text file that contains your custom vocabulary. The URI must be in the same Amazon Web Services Region as the resource that you are calling. The following is the format for a URI:  https://s3..amazonaws.com///  For example: https://s3.us-east-1.amazonaws.com/AWSDOC-EXAMPLE-BUCKET/vocab.txt For more information about Amazon S3 object names, see [Object Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys) in the Amazon S3 Developer Guide. For more information about custom vocabularies in Amazon Transcribe Medical, see [Medical Custom Vocabularies](https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works.html#how-vocabulary).
    public var vocabularyFileUri: Swift.String?
    /// The name of the vocabulary to update. The name is case sensitive. If you try to update a vocabulary with the same name as a vocabulary you've already made, you get a ConflictException error.
    /// This member is required.
    public var vocabularyName: Swift.String?

    public init (
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        vocabularyFileUri: Swift.String? = nil,
        vocabularyName: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.vocabularyFileUri = vocabularyFileUri
        self.vocabularyName = vocabularyName
    }
}

struct UpdateMedicalVocabularyInputBody: Swift.Equatable {
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let vocabularyFileUri: Swift.String?
}

extension UpdateMedicalVocabularyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let vocabularyFileUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyFileUri)
        vocabularyFileUri = vocabularyFileUriDecoded
    }
}

extension UpdateMedicalVocabularyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateMedicalVocabularyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateMedicalVocabularyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateMedicalVocabularyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateMedicalVocabularyOutputResponse(languageCode: \(Swift.String(describing: languageCode)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), vocabularyName: \(Swift.String(describing: vocabularyName)), vocabularyState: \(Swift.String(describing: vocabularyState)))"}
}

extension UpdateMedicalVocabularyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateMedicalVocabularyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyName = output.vocabularyName
            self.vocabularyState = output.vocabularyState
        } else {
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyName = nil
            self.vocabularyState = nil
        }
    }
}

public struct UpdateMedicalVocabularyOutputResponse: Swift.Equatable {
    /// The language code for the language of the text file used to update the custom vocabulary. US English (en-US) is the only language supported in Amazon Transcribe Medical.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// The date and time that the vocabulary was updated.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the updated vocabulary.
    public var vocabularyName: Swift.String?
    /// The processing state of the update to the vocabulary. When the VocabularyState field is READY, the vocabulary is ready to be used in a StartMedicalTranscriptionJob request.
    public var vocabularyState: TranscribeClientTypes.VocabularyState?

    public init (
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        vocabularyName: Swift.String? = nil,
        vocabularyState: TranscribeClientTypes.VocabularyState? = nil
    )
    {
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyName = vocabularyName
        self.vocabularyState = vocabularyState
    }
}

struct UpdateMedicalVocabularyOutputResponseBody: Swift.Equatable {
    public let vocabularyName: Swift.String?
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let lastModifiedTime: ClientRuntime.Date?
    public let vocabularyState: TranscribeClientTypes.VocabularyState?
}

extension UpdateMedicalVocabularyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyName = "VocabularyName"
        case vocabularyState = "VocabularyState"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let vocabularyStateDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.VocabularyState.self, forKey: .vocabularyState)
        vocabularyState = vocabularyStateDecoded
    }
}

public struct UpdateVocabularyFilterInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVocabularyFilterInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVocabularyFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVocabularyFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVocabularyFilterOutputError>
}

extension UpdateVocabularyFilterInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateVocabularyFilterInput(vocabularyFilterFileUri: \(Swift.String(describing: vocabularyFilterFileUri)), vocabularyFilterName: \(Swift.String(describing: vocabularyFilterName)), words: \(Swift.String(describing: words)))"}
}

extension UpdateVocabularyFilterInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vocabularyFilterFileUri = "VocabularyFilterFileUri"
        case words = "Words"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let vocabularyFilterFileUri = vocabularyFilterFileUri {
            try encodeContainer.encode(vocabularyFilterFileUri, forKey: .vocabularyFilterFileUri)
        }
        if let words = words {
            var wordsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .words)
            for words0 in words {
                try wordsContainer.encode(words0)
            }
        }
    }
}

public struct UpdateVocabularyFilterInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVocabularyFilterInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVocabularyFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVocabularyFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVocabularyFilterOutputError>
}

public struct UpdateVocabularyFilterInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVocabularyFilterInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVocabularyFilterInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVocabularyFilterInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVocabularyFilterOutputError>
}

public struct UpdateVocabularyFilterInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVocabularyFilterInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UpdateVocabularyFilterInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateVocabularyFilterInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVocabularyFilterOutputError>
}

public struct UpdateVocabularyFilterInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVocabularyFilterInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UpdateVocabularyFilterInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVocabularyFilterOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateVocabularyFilterInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVocabularyFilterOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVocabularyFilterOutputError>
}

public struct UpdateVocabularyFilterInput: Swift.Equatable {
    /// The Amazon S3 location of a text file used as input to create the vocabulary filter. Only use characters from the character set defined for custom vocabularies. For a list of character sets, see [Character Sets for Custom Vocabularies](https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets). The specified file must be less than 50 KB of UTF-8 characters. If you provide the location of a list of words in the VocabularyFilterFileUri parameter, you can't use the Words parameter.
    public var vocabularyFilterFileUri: Swift.String?
    /// The name of the vocabulary filter to update. If you try to update a vocabulary filter with the same name as another vocabulary filter, you get a ConflictException error.
    /// This member is required.
    public var vocabularyFilterName: Swift.String?
    /// The words to use in the vocabulary filter. Only use characters from the character set defined for custom vocabularies. For a list of character sets, see [Character Sets for Custom Vocabularies](https://docs.aws.amazon.com/transcribe/latest/dg/how-vocabulary.html#charsets). If you provide a list of words in the Words parameter, you can't use the VocabularyFilterFileUri parameter.
    public var words: [Swift.String]?

    public init (
        vocabularyFilterFileUri: Swift.String? = nil,
        vocabularyFilterName: Swift.String? = nil,
        words: [Swift.String]? = nil
    )
    {
        self.vocabularyFilterFileUri = vocabularyFilterFileUri
        self.vocabularyFilterName = vocabularyFilterName
        self.words = words
    }
}

struct UpdateVocabularyFilterInputBody: Swift.Equatable {
    public let words: [Swift.String]?
    public let vocabularyFilterFileUri: Swift.String?
}

extension UpdateVocabularyFilterInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case vocabularyFilterFileUri = "VocabularyFilterFileUri"
        case words = "Words"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let wordsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .words)
        var wordsDecoded0:[Swift.String]? = nil
        if let wordsContainer = wordsContainer {
            wordsDecoded0 = [Swift.String]()
            for string0 in wordsContainer {
                if let string0 = string0 {
                    wordsDecoded0?.append(string0)
                }
            }
        }
        words = wordsDecoded0
        let vocabularyFilterFileUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyFilterFileUri)
        vocabularyFilterFileUri = vocabularyFilterFileUriDecoded
    }
}

extension UpdateVocabularyFilterOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateVocabularyFilterOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateVocabularyFilterOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateVocabularyFilterOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateVocabularyFilterOutputResponse(languageCode: \(Swift.String(describing: languageCode)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), vocabularyFilterName: \(Swift.String(describing: vocabularyFilterName)))"}
}

extension UpdateVocabularyFilterOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateVocabularyFilterOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyFilterName = output.vocabularyFilterName
        } else {
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyFilterName = nil
        }
    }
}

public struct UpdateVocabularyFilterOutputResponse: Swift.Equatable {
    /// The language code of the words in the vocabulary filter.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// The date and time that the vocabulary filter was updated.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the updated vocabulary filter.
    public var vocabularyFilterName: Swift.String?

    public init (
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        vocabularyFilterName: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyFilterName = vocabularyFilterName
    }
}

struct UpdateVocabularyFilterOutputResponseBody: Swift.Equatable {
    public let vocabularyFilterName: Swift.String?
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let lastModifiedTime: ClientRuntime.Date?
}

extension UpdateVocabularyFilterOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyFilterName = "VocabularyFilterName"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyFilterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyFilterName)
        vocabularyFilterName = vocabularyFilterNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

public struct UpdateVocabularyInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVocabularyInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVocabularyOutputError>
}

extension UpdateVocabularyInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateVocabularyInput(languageCode: \(Swift.String(describing: languageCode)), phrases: \(Swift.String(describing: phrases)), vocabularyFileUri: \(Swift.String(describing: vocabularyFileUri)), vocabularyName: \(Swift.String(describing: vocabularyName)))"}
}

extension UpdateVocabularyInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case phrases = "Phrases"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let phrases = phrases {
            var phrasesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .phrases)
            for phrases0 in phrases {
                try phrasesContainer.encode(phrases0)
            }
        }
        if let vocabularyFileUri = vocabularyFileUri {
            try encodeContainer.encode(vocabularyFileUri, forKey: .vocabularyFileUri)
        }
    }
}

public struct UpdateVocabularyInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVocabularyInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVocabularyOutputError>
}

public struct UpdateVocabularyInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVocabularyInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateVocabularyInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateVocabularyInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVocabularyOutputError>
}

public struct UpdateVocabularyInputURLHostMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVocabularyInputURLHostMiddleware"

    let host: Swift.String?

    public init(host: Swift.String? = nil) {
        self.host = host
    }

    public func handle<H>(context: Context,
                  input: UpdateVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var copiedContext = context
        if let host = host {
            copiedContext.attributes.set(key: AttributeKey<String>(name: "Host"), value: host)
        }
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVocabularyOutputError>
}

public struct UpdateVocabularyInputURLPathMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateVocabularyInputURLPathMiddleware"

    let urlPrefix: Swift.String?

    public init(urlPrefix: Swift.String? = nil) {
        self.urlPrefix = urlPrefix
    }

    public func handle<H>(context: Context,
                  input: UpdateVocabularyInput,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateVocabularyOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        var urlPath = "/"
        if let urlPrefix = urlPrefix, !urlPrefix.isEmpty {
            urlPath = "\(urlPrefix)\(urlPath)"
        }
        var copiedContext = context
        copiedContext.attributes.set(key: AttributeKey<String>(name: "Path"), value: urlPath)
        return next.handle(context: copiedContext, input: input)
    }

    public typealias MInput = UpdateVocabularyInput
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateVocabularyOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateVocabularyOutputError>
}

public struct UpdateVocabularyInput: Swift.Equatable {
    /// The language code of the vocabulary entries. For a list of languages and their corresponding language codes, see [transcribe-whatis].
    /// This member is required.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// An array of strings containing the vocabulary entries.
    public var phrases: [Swift.String]?
    /// The S3 location of the text file that contains the definition of the custom vocabulary. The URI must be in the same region as the API endpoint that you are calling. The general form is For example: For more information about S3 object names, see [Object Keys](https://docs.aws.amazon.com/AmazonS3/latest/dev/UsingMetadata.html#object-keys) in the Amazon S3 Developer Guide. For more information about custom vocabularies, see [Custom Vocabularies](https://docs.aws.amazon.com/transcribe/latest/dg/how-it-works.html#how-vocabulary).
    public var vocabularyFileUri: Swift.String?
    /// The name of the vocabulary to update. The name is case sensitive. If you try to update a vocabulary with the same name as a previous vocabulary you will receive a ConflictException error.
    /// This member is required.
    public var vocabularyName: Swift.String?

    public init (
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        phrases: [Swift.String]? = nil,
        vocabularyFileUri: Swift.String? = nil,
        vocabularyName: Swift.String? = nil
    )
    {
        self.languageCode = languageCode
        self.phrases = phrases
        self.vocabularyFileUri = vocabularyFileUri
        self.vocabularyName = vocabularyName
    }
}

struct UpdateVocabularyInputBody: Swift.Equatable {
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let phrases: [Swift.String]?
    public let vocabularyFileUri: Swift.String?
}

extension UpdateVocabularyInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case phrases = "Phrases"
        case vocabularyFileUri = "VocabularyFileUri"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let phrasesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .phrases)
        var phrasesDecoded0:[Swift.String]? = nil
        if let phrasesContainer = phrasesContainer {
            phrasesDecoded0 = [Swift.String]()
            for string0 in phrasesContainer {
                if let string0 = string0 {
                    phrasesDecoded0?.append(string0)
                }
            }
        }
        phrases = phrasesDecoded0
        let vocabularyFileUriDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyFileUri)
        vocabularyFileUri = vocabularyFileUriDecoded
    }
}

extension UpdateVocabularyOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateVocabularyOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "BadRequestException" : self = .badRequestException(try BadRequestException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ConflictException" : self = .conflictException(try ConflictException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalFailureException" : self = .internalFailureException(try InternalFailureException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "NotFoundException" : self = .notFoundException(try NotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateVocabularyOutputError: Swift.Error, Swift.Equatable {
    case badRequestException(BadRequestException)
    case conflictException(ConflictException)
    case internalFailureException(InternalFailureException)
    case limitExceededException(LimitExceededException)
    case notFoundException(NotFoundException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateVocabularyOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateVocabularyOutputResponse(languageCode: \(Swift.String(describing: languageCode)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), vocabularyName: \(Swift.String(describing: vocabularyName)), vocabularyState: \(Swift.String(describing: vocabularyState)))"}
}

extension UpdateVocabularyOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateVocabularyOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.languageCode = output.languageCode
            self.lastModifiedTime = output.lastModifiedTime
            self.vocabularyName = output.vocabularyName
            self.vocabularyState = output.vocabularyState
        } else {
            self.languageCode = nil
            self.lastModifiedTime = nil
            self.vocabularyName = nil
            self.vocabularyState = nil
        }
    }
}

public struct UpdateVocabularyOutputResponse: Swift.Equatable {
    /// The language code of the vocabulary entries.
    public var languageCode: TranscribeClientTypes.LanguageCode?
    /// The date and time that the vocabulary was updated.
    public var lastModifiedTime: ClientRuntime.Date?
    /// The name of the vocabulary that was updated.
    public var vocabularyName: Swift.String?
    /// The processing state of the vocabulary. When the VocabularyState field contains READY the vocabulary is ready to be used in a StartTranscriptionJob request.
    public var vocabularyState: TranscribeClientTypes.VocabularyState?

    public init (
        languageCode: TranscribeClientTypes.LanguageCode? = nil,
        lastModifiedTime: ClientRuntime.Date? = nil,
        vocabularyName: Swift.String? = nil,
        vocabularyState: TranscribeClientTypes.VocabularyState? = nil
    )
    {
        self.languageCode = languageCode
        self.lastModifiedTime = lastModifiedTime
        self.vocabularyName = vocabularyName
        self.vocabularyState = vocabularyState
    }
}

struct UpdateVocabularyOutputResponseBody: Swift.Equatable {
    public let vocabularyName: Swift.String?
    public let languageCode: TranscribeClientTypes.LanguageCode?
    public let lastModifiedTime: ClientRuntime.Date?
    public let vocabularyState: TranscribeClientTypes.VocabularyState?
}

extension UpdateVocabularyOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyName = "VocabularyName"
        case vocabularyState = "VocabularyState"
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let vocabularyStateDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.VocabularyState.self, forKey: .vocabularyState)
        vocabularyState = vocabularyStateDecoded
    }
}

extension TranscribeClientTypes.VocabularyFilterInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyFilterName = "VocabularyFilterName"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let vocabularyFilterName = vocabularyFilterName {
            try encodeContainer.encode(vocabularyFilterName, forKey: .vocabularyFilterName)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyFilterNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyFilterName)
        vocabularyFilterName = vocabularyFilterNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
    }
}

extension TranscribeClientTypes.VocabularyFilterInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VocabularyFilterInfo(languageCode: \(Swift.String(describing: languageCode)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), vocabularyFilterName: \(Swift.String(describing: vocabularyFilterName)))"}
}

extension TranscribeClientTypes {
    /// Provides information about a vocabulary filter.
    public struct VocabularyFilterInfo: Swift.Equatable {
        /// The language code of the words in the vocabulary filter.
        public var languageCode: TranscribeClientTypes.LanguageCode?
        /// The date and time that the vocabulary was last updated.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The name of the vocabulary filter. The name must be unique in the account that holds the filter.
        public var vocabularyFilterName: Swift.String?

        public init (
            languageCode: TranscribeClientTypes.LanguageCode? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            vocabularyFilterName: Swift.String? = nil
        )
        {
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyFilterName = vocabularyFilterName
        }
    }

}

extension TranscribeClientTypes {
    public enum VocabularyFilterMethod: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case mask
        case remove
        case tag
        case sdkUnknown(Swift.String)

        public static var allCases: [VocabularyFilterMethod] {
            return [
                .mask,
                .remove,
                .tag,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .mask: return "mask"
            case .remove: return "remove"
            case .tag: return "tag"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VocabularyFilterMethod(rawValue: rawValue) ?? VocabularyFilterMethod.sdkUnknown(rawValue)
        }
    }
}

extension TranscribeClientTypes.VocabularyInfo: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case languageCode = "LanguageCode"
        case lastModifiedTime = "LastModifiedTime"
        case vocabularyName = "VocabularyName"
        case vocabularyState = "VocabularyState"
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let languageCode = languageCode {
            try encodeContainer.encode(languageCode.rawValue, forKey: .languageCode)
        }
        if let lastModifiedTime = lastModifiedTime {
            try encodeContainer.encode(lastModifiedTime.timeIntervalSince1970, forKey: .lastModifiedTime)
        }
        if let vocabularyName = vocabularyName {
            try encodeContainer.encode(vocabularyName, forKey: .vocabularyName)
        }
        if let vocabularyState = vocabularyState {
            try encodeContainer.encode(vocabularyState.rawValue, forKey: .vocabularyState)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let vocabularyNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .vocabularyName)
        vocabularyName = vocabularyNameDecoded
        let languageCodeDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.LanguageCode.self, forKey: .languageCode)
        languageCode = languageCodeDecoded
        let lastModifiedTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastModifiedTime)
        lastModifiedTime = lastModifiedTimeDecoded
        let vocabularyStateDecoded = try containerValues.decodeIfPresent(TranscribeClientTypes.VocabularyState.self, forKey: .vocabularyState)
        vocabularyState = vocabularyStateDecoded
    }
}

extension TranscribeClientTypes.VocabularyInfo: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VocabularyInfo(languageCode: \(Swift.String(describing: languageCode)), lastModifiedTime: \(Swift.String(describing: lastModifiedTime)), vocabularyName: \(Swift.String(describing: vocabularyName)), vocabularyState: \(Swift.String(describing: vocabularyState)))"}
}

extension TranscribeClientTypes {
    /// Provides information about a custom vocabulary.
    public struct VocabularyInfo: Swift.Equatable {
        /// The language code of the vocabulary entries.
        public var languageCode: TranscribeClientTypes.LanguageCode?
        /// The date and time that the vocabulary was last modified.
        public var lastModifiedTime: ClientRuntime.Date?
        /// The name of the vocabulary.
        public var vocabularyName: Swift.String?
        /// The processing state of the vocabulary. If the state is READY you can use the vocabulary in a StartTranscriptionJob request.
        public var vocabularyState: TranscribeClientTypes.VocabularyState?

        public init (
            languageCode: TranscribeClientTypes.LanguageCode? = nil,
            lastModifiedTime: ClientRuntime.Date? = nil,
            vocabularyName: Swift.String? = nil,
            vocabularyState: TranscribeClientTypes.VocabularyState? = nil
        )
        {
            self.languageCode = languageCode
            self.lastModifiedTime = lastModifiedTime
            self.vocabularyName = vocabularyName
            self.vocabularyState = vocabularyState
        }
    }

}

extension TranscribeClientTypes {
    public enum VocabularyState: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case failed
        case pending
        case ready
        case sdkUnknown(Swift.String)

        public static var allCases: [VocabularyState] {
            return [
                .failed,
                .pending,
                .ready,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .failed: return "FAILED"
            case .pending: return "PENDING"
            case .ready: return "READY"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = VocabularyState(rawValue: rawValue) ?? VocabularyState.sdkUnknown(rawValue)
        }
    }
}
