// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct GetSecretValueInputHeadersMiddleware: Middleware {
    public let id: String = "GetSecretValueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetSecretValueInput>,
                  next: H) -> Swift.Result<OperationOutput<GetSecretValueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetSecretValueInput>
    public typealias MOutput = OperationOutput<GetSecretValueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetSecretValueOutputError>
}

public struct GetSecretValueInputQueryItemMiddleware: Middleware {
    public let id: String = "GetSecretValueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetSecretValueInput>,
                  next: H) -> Swift.Result<OperationOutput<GetSecretValueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetSecretValueInput>
    public typealias MOutput = OperationOutput<GetSecretValueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetSecretValueOutputError>
}

public struct GetSecretValueInputBodyMiddleware: Middleware {
    public let id: String = "GetSecretValueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<GetSecretValueInput>,
                  next: H) -> Swift.Result<OperationOutput<GetSecretValueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<GetSecretValueInput>
    public typealias MOutput = OperationOutput<GetSecretValueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<GetSecretValueOutputError>
}

extension GetSecretValueInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case secretId = "SecretId"
        case versionId = "VersionId"
        case versionStage = "VersionStage"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let secretId = secretId {
            try encodeContainer.encode(secretId, forKey: .secretId)
        }
        if let versionId = versionId {
            try encodeContainer.encode(versionId, forKey: .versionId)
        }
        if let versionStage = versionStage {
            try encodeContainer.encode(versionStage, forKey: .versionStage)
        }
    }
}
