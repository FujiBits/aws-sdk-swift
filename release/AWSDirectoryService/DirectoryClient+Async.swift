// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension DirectoryClient {
    /// Accepts a directory sharing request that was sent from the directory owner account.
    func acceptSharedDirectory(input: AcceptSharedDirectoryInput) async throws -> AcceptSharedDirectoryOutputResponse
    {
        typealias acceptSharedDirectoryContinuation = CheckedContinuation<AcceptSharedDirectoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: acceptSharedDirectoryContinuation) in
            acceptSharedDirectory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// If the DNS server for your self-managed domain uses a publicly addressable IP address,
    ///          you must add a CIDR address block to correctly route traffic to and from your Microsoft AD
    ///          on Amazon Web Services. AddIpRoutes adds this address block. You can
    ///          also use AddIpRoutes to facilitate routing traffic that uses public IP
    ///          ranges from your Microsoft AD on Amazon Web Services to a peer VPC.
    ///          Before you call AddIpRoutes, ensure that all of the required
    ///          permissions have been explicitly granted through a policy. For details about what
    ///          permissions are required to run the AddIpRoutes operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">Directory Service API Permissions: Actions, Resources, and Conditions Reference.
    func addIpRoutes(input: AddIpRoutesInput) async throws -> AddIpRoutesOutputResponse
    {
        typealias addIpRoutesContinuation = CheckedContinuation<AddIpRoutesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addIpRoutesContinuation) in
            addIpRoutes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds two domain controllers in the specified Region for the specified directory.
    func addRegion(input: AddRegionInput) async throws -> AddRegionOutputResponse
    {
        typealias addRegionContinuation = CheckedContinuation<AddRegionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addRegionContinuation) in
            addRegion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds or overwrites one or more tags for the specified directory. Each directory can
    ///       have a maximum of 50 tags. Each tag consists of a key and optional value. Tag keys must be
    ///       unique to each resource.
    func addTagsToResource(input: AddTagsToResourceInput) async throws -> AddTagsToResourceOutputResponse
    {
        typealias addTagsToResourceContinuation = CheckedContinuation<AddTagsToResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: addTagsToResourceContinuation) in
            addTagsToResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Cancels an in-progress schema extension to a Microsoft AD directory. Once a schema
    ///       extension has started replicating to all domain controllers, the task can no longer be
    ///       canceled. A schema extension can be canceled during any of the following states;
    ///         Initializing, CreatingSnapshot, and
    ///       UpdatingSchema.
    func cancelSchemaExtension(input: CancelSchemaExtensionInput) async throws -> CancelSchemaExtensionOutputResponse
    {
        typealias cancelSchemaExtensionContinuation = CheckedContinuation<CancelSchemaExtensionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelSchemaExtensionContinuation) in
            cancelSchemaExtension(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an AD Connector to connect to a self-managed directory.
    ///          Before you call ConnectDirectory, ensure that all of the required permissions
    ///       have been explicitly granted through a policy. For details about what permissions are required
    ///       to run the ConnectDirectory operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">Directory Service API Permissions: Actions, Resources, and Conditions
    ///       Reference.
    func connectDirectory(input: ConnectDirectoryInput) async throws -> ConnectDirectoryOutputResponse
    {
        typealias connectDirectoryContinuation = CheckedContinuation<ConnectDirectoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: connectDirectoryContinuation) in
            connectDirectory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an alias for a directory and assigns the alias to the directory. The alias is used
    ///          to construct the access URL for the directory, such as
    ///             http://<alias>.awsapps.com.
    ///
    ///             After an alias has been created, it cannot be deleted or reused, so this operation should only be used when absolutely necessary.
    ///
    func createAlias(input: CreateAliasInput) async throws -> CreateAliasOutputResponse
    {
        typealias createAliasContinuation = CheckedContinuation<CreateAliasOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createAliasContinuation) in
            createAlias(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an Active Directory computer object in the specified directory.
    func createComputer(input: CreateComputerInput) async throws -> CreateComputerOutputResponse
    {
        typealias createComputerContinuation = CheckedContinuation<CreateComputerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createComputerContinuation) in
            createComputer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a conditional forwarder associated with your Amazon Web Services directory. Conditional
    ///       forwarders are required in order to set up a trust relationship with another domain. The
    ///       conditional forwarder points to the trusted domain.
    func createConditionalForwarder(input: CreateConditionalForwarderInput) async throws -> CreateConditionalForwarderOutputResponse
    {
        typealias createConditionalForwarderContinuation = CheckedContinuation<CreateConditionalForwarderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createConditionalForwarderContinuation) in
            createConditionalForwarder(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a Simple AD directory. For more information, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_simple_ad.html">Simple Active Directory in the Directory Service Admin
    ///         Guide.
    ///          Before you call CreateDirectory, ensure that all of the required permissions
    ///       have been explicitly granted through a policy. For details about what permissions are required
    ///       to run the CreateDirectory operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">Directory Service API Permissions: Actions, Resources, and Conditions
    ///       Reference.
    func createDirectory(input: CreateDirectoryInput) async throws -> CreateDirectoryOutputResponse
    {
        typealias createDirectoryContinuation = CheckedContinuation<CreateDirectoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDirectoryContinuation) in
            createDirectory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a subscription to forward real-time Directory Service domain controller security
    ///       logs to the specified Amazon CloudWatch log group in your Amazon Web Services account.
    func createLogSubscription(input: CreateLogSubscriptionInput) async throws -> CreateLogSubscriptionOutputResponse
    {
        typealias createLogSubscriptionContinuation = CheckedContinuation<CreateLogSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createLogSubscriptionContinuation) in
            createLogSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a Microsoft AD directory in the Amazon Web Services Cloud. For more information, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/directory_microsoft_ad.html">Managed Microsoft AD in the Directory Service Admin Guide.
    ///          Before you call CreateMicrosoftAD, ensure that all of the required
    ///       permissions have been explicitly granted through a policy. For details about what permissions
    ///       are required to run the CreateMicrosoftAD operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">Directory Service API Permissions: Actions, Resources, and Conditions Reference.
    func createMicrosoftAD(input: CreateMicrosoftADInput) async throws -> CreateMicrosoftADOutputResponse
    {
        typealias createMicrosoftADContinuation = CheckedContinuation<CreateMicrosoftADOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createMicrosoftADContinuation) in
            createMicrosoftAD(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a snapshot of a Simple AD or Microsoft AD directory in the Amazon Web Services cloud.
    ///
    ///             You cannot take snapshots of AD Connector directories.
    ///
    func createSnapshot(input: CreateSnapshotInput) async throws -> CreateSnapshotOutputResponse
    {
        typealias createSnapshotContinuation = CheckedContinuation<CreateSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createSnapshotContinuation) in
            createSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Directory Service for Microsoft Active Directory allows you to configure trust relationships. For
    ///       example, you can establish a trust between your Managed Microsoft AD directory, and your existing
    ///       self-managed Microsoft Active Directory. This would allow you to provide users and groups
    ///       access to resources in either domain, with a single set of credentials.
    ///          This action initiates the creation of the Amazon Web Services side of a trust relationship between an
    ///       Managed Microsoft AD directory and an external domain. You can create either a forest trust or an
    ///       external trust.
    func createTrust(input: CreateTrustInput) async throws -> CreateTrustOutputResponse
    {
        typealias createTrustContinuation = CheckedContinuation<CreateTrustOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createTrustContinuation) in
            createTrust(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a conditional forwarder that has been set up for your Amazon Web Services
    ///       directory.
    func deleteConditionalForwarder(input: DeleteConditionalForwarderInput) async throws -> DeleteConditionalForwarderOutputResponse
    {
        typealias deleteConditionalForwarderContinuation = CheckedContinuation<DeleteConditionalForwarderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteConditionalForwarderContinuation) in
            deleteConditionalForwarder(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an Directory Service directory.
    ///          Before you call DeleteDirectory, ensure that all of the required permissions
    ///       have been explicitly granted through a policy. For details about what permissions are required
    ///       to run the DeleteDirectory operation, see <a href="http://docs.aws.amazon.com/directoryservice/latest/admin-guide/UsingWithDS_IAM_ResourcePermissions.html">Directory Service API Permissions: Actions, Resources, and Conditions
    ///       Reference.
    func deleteDirectory(input: DeleteDirectoryInput) async throws -> DeleteDirectoryOutputResponse
    {
        typealias deleteDirectoryContinuation = CheckedContinuation<DeleteDirectoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDirectoryContinuation) in
            deleteDirectory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes the specified log subscription.
    func deleteLogSubscription(input: DeleteLogSubscriptionInput) async throws -> DeleteLogSubscriptionOutputResponse
    {
        typealias deleteLogSubscriptionContinuation = CheckedContinuation<DeleteLogSubscriptionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteLogSubscriptionContinuation) in
            deleteLogSubscription(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a directory snapshot.
    func deleteSnapshot(input: DeleteSnapshotInput) async throws -> DeleteSnapshotOutputResponse
    {
        typealias deleteSnapshotContinuation = CheckedContinuation<DeleteSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteSnapshotContinuation) in
            deleteSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an existing trust relationship between your Managed Microsoft AD directory and an external
    ///       domain.
    func deleteTrust(input: DeleteTrustInput) async throws -> DeleteTrustOutputResponse
    {
        typealias deleteTrustContinuation = CheckedContinuation<DeleteTrustOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteTrustContinuation) in
            deleteTrust(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes from the system the certificate that was registered for secure LDAP or client certificate authentication.
    func deregisterCertificate(input: DeregisterCertificateInput) async throws -> DeregisterCertificateOutputResponse
    {
        typealias deregisterCertificateContinuation = CheckedContinuation<DeregisterCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterCertificateContinuation) in
            deregisterCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes the specified directory as a publisher to the specified Amazon SNS topic.
    func deregisterEventTopic(input: DeregisterEventTopicInput) async throws -> DeregisterEventTopicOutputResponse
    {
        typealias deregisterEventTopicContinuation = CheckedContinuation<DeregisterEventTopicOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deregisterEventTopicContinuation) in
            deregisterEventTopic(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Displays information about the certificate registered for secure LDAP or client certificate authentication.
    func describeCertificate(input: DescribeCertificateInput) async throws -> DescribeCertificateOutputResponse
    {
        typealias describeCertificateContinuation = CheckedContinuation<DescribeCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeCertificateContinuation) in
            describeCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Retrieves information about the type of client authentication for the specified directory, if the type is specified. If no type is specified, information about all client authentication types that are supported for the specified directory is retrieved. Currently, only SmartCard is supported.
    ///
    func describeClientAuthenticationSettings(input: DescribeClientAuthenticationSettingsInput) async throws -> DescribeClientAuthenticationSettingsOutputResponse
    {
        typealias describeClientAuthenticationSettingsContinuation = CheckedContinuation<DescribeClientAuthenticationSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeClientAuthenticationSettingsContinuation) in
            describeClientAuthenticationSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Obtains information about the conditional forwarders for this account.
    ///          If no input parameters are provided for RemoteDomainNames, this request describes all
    ///       conditional forwarders for the specified directory ID.
    func describeConditionalForwarders(input: DescribeConditionalForwardersInput) async throws -> DescribeConditionalForwardersOutputResponse
    {
        typealias describeConditionalForwardersContinuation = CheckedContinuation<DescribeConditionalForwardersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeConditionalForwardersContinuation) in
            describeConditionalForwarders(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Obtains information about the directories that belong to this account.
    ///          You can retrieve information about specific directories by passing the directory
    ///       identifiers in the DirectoryIds parameter. Otherwise, all directories that belong
    ///       to the current account are returned.
    ///          This operation supports pagination with the use of the NextToken request and
    ///       response parameters. If more results are available, the
    ///         DescribeDirectoriesResult.NextToken member contains a token that you pass in
    ///       the next call to DescribeDirectories to retrieve the next set of
    ///       items.
    ///          You can also specify a maximum number of return results with the Limit
    ///       parameter.
    func describeDirectories(input: DescribeDirectoriesInput) async throws -> DescribeDirectoriesOutputResponse
    {
        typealias describeDirectoriesContinuation = CheckedContinuation<DescribeDirectoriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDirectoriesContinuation) in
            describeDirectories(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides information about any domain controllers in your directory.
    func describeDomainControllers(input: DescribeDomainControllersInput) async throws -> DescribeDomainControllersOutputResponse
    {
        typealias describeDomainControllersContinuation = CheckedContinuation<DescribeDomainControllersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDomainControllersContinuation) in
            describeDomainControllers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Obtains information about which Amazon SNS topics receive status messages from the specified
    ///       directory.
    ///          If no input parameters are provided, such as DirectoryId or TopicName, this request
    ///       describes all of the associations in the account.
    func describeEventTopics(input: DescribeEventTopicsInput) async throws -> DescribeEventTopicsOutputResponse
    {
        typealias describeEventTopicsContinuation = CheckedContinuation<DescribeEventTopicsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEventTopicsContinuation) in
            describeEventTopics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Describes the status of LDAP security for the specified directory.
    func describeLDAPSSettings(input: DescribeLDAPSSettingsInput) async throws -> DescribeLDAPSSettingsOutputResponse
    {
        typealias describeLDAPSSettingsContinuation = CheckedContinuation<DescribeLDAPSSettingsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeLDAPSSettingsContinuation) in
            describeLDAPSSettings(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides information about the Regions that are configured for multi-Region
    ///       replication.
    func describeRegions(input: DescribeRegionsInput) async throws -> DescribeRegionsOutputResponse
    {
        typealias describeRegionsContinuation = CheckedContinuation<DescribeRegionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRegionsContinuation) in
            describeRegions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the shared directories in your account.
    func describeSharedDirectories(input: DescribeSharedDirectoriesInput) async throws -> DescribeSharedDirectoriesOutputResponse
    {
        typealias describeSharedDirectoriesContinuation = CheckedContinuation<DescribeSharedDirectoriesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSharedDirectoriesContinuation) in
            describeSharedDirectories(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Obtains information about the directory snapshots that belong to this account.
    ///          This operation supports pagination with the use of the NextToken request and
    ///          response parameters. If more results are available, the DescribeSnapshots.NextToken
    ///          member contains a token that you pass in the next call to DescribeSnapshots to
    ///          retrieve the next set of items.
    ///          You can also specify a maximum number of return results with the Limit
    ///          parameter.
    func describeSnapshots(input: DescribeSnapshotsInput) async throws -> DescribeSnapshotsOutputResponse
    {
        typealias describeSnapshotsContinuation = CheckedContinuation<DescribeSnapshotsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSnapshotsContinuation) in
            describeSnapshots(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Obtains information about the trust relationships for this account.
    ///          If no input parameters are provided, such as DirectoryId or TrustIds, this request
    ///       describes all the trust relationships belonging to the account.
    func describeTrusts(input: DescribeTrustsInput) async throws -> DescribeTrustsOutputResponse
    {
        typealias describeTrustsContinuation = CheckedContinuation<DescribeTrustsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeTrustsContinuation) in
            describeTrusts(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables alternative client authentication methods for the specified directory.
    func disableClientAuthentication(input: DisableClientAuthenticationInput) async throws -> DisableClientAuthenticationOutputResponse
    {
        typealias disableClientAuthenticationContinuation = CheckedContinuation<DisableClientAuthenticationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableClientAuthenticationContinuation) in
            disableClientAuthentication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deactivates LDAP secure calls for the specified directory.
    func disableLDAPS(input: DisableLDAPSInput) async throws -> DisableLDAPSOutputResponse
    {
        typealias disableLDAPSContinuation = CheckedContinuation<DisableLDAPSOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableLDAPSContinuation) in
            disableLDAPS(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables multi-factor authentication (MFA) with the Remote Authentication Dial In
    ///          User Service (RADIUS) server for an AD Connector or Microsoft AD directory.
    func disableRadius(input: DisableRadiusInput) async throws -> DisableRadiusOutputResponse
    {
        typealias disableRadiusContinuation = CheckedContinuation<DisableRadiusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableRadiusContinuation) in
            disableRadius(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Disables single-sign on for a directory.
    func disableSso(input: DisableSsoInput) async throws -> DisableSsoOutputResponse
    {
        typealias disableSsoContinuation = CheckedContinuation<DisableSsoOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: disableSsoContinuation) in
            disableSso(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables alternative client authentication methods for the specified directory.
    func enableClientAuthentication(input: EnableClientAuthenticationInput) async throws -> EnableClientAuthenticationOutputResponse
    {
        typealias enableClientAuthenticationContinuation = CheckedContinuation<EnableClientAuthenticationOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableClientAuthenticationContinuation) in
            enableClientAuthentication(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Activates the switch for the specific directory to always use LDAP secure calls.
    func enableLDAPS(input: EnableLDAPSInput) async throws -> EnableLDAPSOutputResponse
    {
        typealias enableLDAPSContinuation = CheckedContinuation<EnableLDAPSOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableLDAPSContinuation) in
            enableLDAPS(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables multi-factor authentication (MFA) with the Remote Authentication Dial In User
    ///          Service (RADIUS) server for an AD Connector or Microsoft AD directory.
    func enableRadius(input: EnableRadiusInput) async throws -> EnableRadiusOutputResponse
    {
        typealias enableRadiusContinuation = CheckedContinuation<EnableRadiusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableRadiusContinuation) in
            enableRadius(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Enables single sign-on for a directory. Single sign-on allows users in your directory to
    ///       access certain Amazon Web Services services from a computer joined to the directory without having to enter
    ///       their credentials separately.
    func enableSso(input: EnableSsoInput) async throws -> EnableSsoOutputResponse
    {
        typealias enableSsoContinuation = CheckedContinuation<EnableSsoOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: enableSsoContinuation) in
            enableSso(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Obtains directory limit information for the current Region.
    func getDirectoryLimits(input: GetDirectoryLimitsInput) async throws -> GetDirectoryLimitsOutputResponse
    {
        typealias getDirectoryLimitsContinuation = CheckedContinuation<GetDirectoryLimitsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getDirectoryLimitsContinuation) in
            getDirectoryLimits(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Obtains the manual snapshot limits for a directory.
    func getSnapshotLimits(input: GetSnapshotLimitsInput) async throws -> GetSnapshotLimitsOutputResponse
    {
        typealias getSnapshotLimitsContinuation = CheckedContinuation<GetSnapshotLimitsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getSnapshotLimitsContinuation) in
            getSnapshotLimits(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// For the specified directory, lists all the certificates registered for a secure LDAP or client certificate authentication.
    func listCertificates(input: ListCertificatesInput) async throws -> ListCertificatesOutputResponse
    {
        typealias listCertificatesContinuation = CheckedContinuation<ListCertificatesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listCertificatesContinuation) in
            listCertificates(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the address blocks that you have added to a directory.
    func listIpRoutes(input: ListIpRoutesInput) async throws -> ListIpRoutesOutputResponse
    {
        typealias listIpRoutesContinuation = CheckedContinuation<ListIpRoutesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listIpRoutesContinuation) in
            listIpRoutes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists the active log subscriptions for the Amazon Web Services account.
    func listLogSubscriptions(input: ListLogSubscriptionsInput) async throws -> ListLogSubscriptionsOutputResponse
    {
        typealias listLogSubscriptionsContinuation = CheckedContinuation<ListLogSubscriptionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listLogSubscriptionsContinuation) in
            listLogSubscriptions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all schema extensions applied to a Microsoft AD Directory.
    func listSchemaExtensions(input: ListSchemaExtensionsInput) async throws -> ListSchemaExtensionsOutputResponse
    {
        typealias listSchemaExtensionsContinuation = CheckedContinuation<ListSchemaExtensionsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSchemaExtensionsContinuation) in
            listSchemaExtensions(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all tags on a directory.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Registers a certificate for a secure LDAP or client certificate authentication.
    func registerCertificate(input: RegisterCertificateInput) async throws -> RegisterCertificateOutputResponse
    {
        typealias registerCertificateContinuation = CheckedContinuation<RegisterCertificateOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerCertificateContinuation) in
            registerCertificate(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a directory with an Amazon SNS topic. This establishes the directory as a
    ///       publisher to the specified Amazon SNS topic. You can then receive email or text (SMS) messages when
    ///       the status of your directory changes. You get notified if your directory goes from an Active
    ///       status to an Impaired or Inoperable status. You also receive a notification when the directory
    ///       returns to an Active status.
    func registerEventTopic(input: RegisterEventTopicInput) async throws -> RegisterEventTopicOutputResponse
    {
        typealias registerEventTopicContinuation = CheckedContinuation<RegisterEventTopicOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: registerEventTopicContinuation) in
            registerEventTopic(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Rejects a directory sharing request that was sent from the directory owner account.
    func rejectSharedDirectory(input: RejectSharedDirectoryInput) async throws -> RejectSharedDirectoryOutputResponse
    {
        typealias rejectSharedDirectoryContinuation = CheckedContinuation<RejectSharedDirectoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: rejectSharedDirectoryContinuation) in
            rejectSharedDirectory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes IP address blocks from a directory.
    func removeIpRoutes(input: RemoveIpRoutesInput) async throws -> RemoveIpRoutesOutputResponse
    {
        typealias removeIpRoutesContinuation = CheckedContinuation<RemoveIpRoutesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeIpRoutesContinuation) in
            removeIpRoutes(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops all replication and removes the domain controllers from the specified Region. You
    ///       cannot remove the primary Region with this operation. Instead, use the
    ///         DeleteDirectory API.
    func removeRegion(input: RemoveRegionInput) async throws -> RemoveRegionOutputResponse
    {
        typealias removeRegionContinuation = CheckedContinuation<RemoveRegionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeRegionContinuation) in
            removeRegion(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes tags from a directory.
    func removeTagsFromResource(input: RemoveTagsFromResourceInput) async throws -> RemoveTagsFromResourceOutputResponse
    {
        typealias removeTagsFromResourceContinuation = CheckedContinuation<RemoveTagsFromResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: removeTagsFromResourceContinuation) in
            removeTagsFromResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Resets the password for any user in your Managed Microsoft AD or Simple AD
    ///       directory.
    ///          You can reset the password for any user in your directory with the following
    ///       exceptions:
    ///
    ///
    ///                For Simple AD, you cannot reset the password for any user that is a member of either
    ///           the Domain Admins or Enterprise
    ///             Admins group except for the administrator user.
    ///
    ///
    ///                For Managed Microsoft AD, you can only reset the password for a user that is in an
    ///           OU based off of the NetBIOS name that you typed when you created your directory. For
    ///           example, you cannot reset the password for a user in the Amazon Web Services
    ///             Reserved OU. For more information about the OU structure for an Managed Microsoft AD directory, see <a href="https://docs.aws.amazon.com/directoryservice/latest/admin-guide/ms_ad_getting_started_what_gets_created.html">What Gets Created in the Directory Service Administration
    ///             Guide.
    ///
    ///
    func resetUserPassword(input: ResetUserPasswordInput) async throws -> ResetUserPasswordOutputResponse
    {
        typealias resetUserPasswordContinuation = CheckedContinuation<ResetUserPasswordOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: resetUserPasswordContinuation) in
            resetUserPassword(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Restores a directory using an existing directory snapshot.
    ///          When you restore a directory from a snapshot, any changes made to the directory after the snapshot date are overwritten.
    ///          This action returns as soon as the restore operation is initiated. You can monitor the
    ///          progress of the restore operation by calling the DescribeDirectories operation with
    ///          the directory identifier. When the DirectoryDescription.Stage value changes to
    ///             Active, the restore operation is complete.
    func restoreFromSnapshot(input: RestoreFromSnapshotInput) async throws -> RestoreFromSnapshotOutputResponse
    {
        typealias restoreFromSnapshotContinuation = CheckedContinuation<RestoreFromSnapshotOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: restoreFromSnapshotContinuation) in
            restoreFromSnapshot(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Shares a specified directory (DirectoryId) in your Amazon Web Services account (directory
    ///       owner) with another Amazon Web Services account (directory consumer). With this operation you can use your
    ///       directory from any Amazon Web Services account and from any Amazon VPC within an Amazon Web Services Region.
    ///          When you share your Managed Microsoft AD directory, Directory Service creates a
    ///       shared directory in the directory consumer account. This shared directory contains the
    ///       metadata to provide access to the directory within the directory owner account. The shared
    ///       directory is visible in all VPCs in the directory consumer account.
    ///          The ShareMethod parameter determines whether the specified directory can be
    ///       shared between Amazon Web Services accounts inside the same Amazon Web Services organization (ORGANIZATIONS). It
    ///       also determines whether you can share the directory with any other Amazon Web Services account either inside
    ///       or outside of the organization (HANDSHAKE).
    ///          The ShareNotes parameter is only used when HANDSHAKE is called,
    ///       which sends a directory sharing request to the directory consumer.
    func shareDirectory(input: ShareDirectoryInput) async throws -> ShareDirectoryOutputResponse
    {
        typealias shareDirectoryContinuation = CheckedContinuation<ShareDirectoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: shareDirectoryContinuation) in
            shareDirectory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Applies a schema extension to a Microsoft AD directory.
    func startSchemaExtension(input: StartSchemaExtensionInput) async throws -> StartSchemaExtensionOutputResponse
    {
        typealias startSchemaExtensionContinuation = CheckedContinuation<StartSchemaExtensionOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startSchemaExtensionContinuation) in
            startSchemaExtension(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops the directory sharing between the directory owner and consumer accounts.
    func unshareDirectory(input: UnshareDirectoryInput) async throws -> UnshareDirectoryOutputResponse
    {
        typealias unshareDirectoryContinuation = CheckedContinuation<UnshareDirectoryOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: unshareDirectoryContinuation) in
            unshareDirectory(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates a conditional forwarder that has been set up for your Amazon Web Services
    ///       directory.
    func updateConditionalForwarder(input: UpdateConditionalForwarderInput) async throws -> UpdateConditionalForwarderOutputResponse
    {
        typealias updateConditionalForwarderContinuation = CheckedContinuation<UpdateConditionalForwarderOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateConditionalForwarderContinuation) in
            updateConditionalForwarder(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Adds or removes domain controllers to or from the directory. Based on the difference
    ///       between current value and new value (provided through this API call), domain controllers will
    ///       be added or removed. It may take up to 45 minutes for any new domain controllers to become
    ///       fully active once the requested number of domain controllers is updated. During this time, you
    ///       cannot make another update request.
    func updateNumberOfDomainControllers(input: UpdateNumberOfDomainControllersInput) async throws -> UpdateNumberOfDomainControllersOutputResponse
    {
        typealias updateNumberOfDomainControllersContinuation = CheckedContinuation<UpdateNumberOfDomainControllersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateNumberOfDomainControllersContinuation) in
            updateNumberOfDomainControllers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the Remote Authentication Dial In User Service (RADIUS) server information
    ///          for an AD Connector or Microsoft AD directory.
    func updateRadius(input: UpdateRadiusInput) async throws -> UpdateRadiusOutputResponse
    {
        typealias updateRadiusContinuation = CheckedContinuation<UpdateRadiusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateRadiusContinuation) in
            updateRadius(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates the trust that has been set up between your Managed Microsoft AD directory and an
    ///       self-managed Active Directory.
    func updateTrust(input: UpdateTrustInput) async throws -> UpdateTrustOutputResponse
    {
        typealias updateTrustContinuation = CheckedContinuation<UpdateTrustOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateTrustContinuation) in
            updateTrust(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Directory Service for Microsoft Active Directory allows you to configure and verify trust
    ///       relationships.
    ///          This action verifies a trust relationship between your Managed Microsoft AD directory and an
    ///       external domain.
    func verifyTrust(input: VerifyTrustInput) async throws -> VerifyTrustOutputResponse
    {
        typealias verifyTrustContinuation = CheckedContinuation<VerifyTrustOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: verifyTrustContinuation) in
            verifyTrust(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
