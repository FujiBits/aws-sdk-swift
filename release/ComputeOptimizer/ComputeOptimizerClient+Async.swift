// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ComputeOptimizerClient {
    /// <p>Describes recommendation export jobs created in the last seven days.</p>
    ///
    ///         <p>Use the <code>ExportAutoScalingGroupRecommendations</code> or
    ///                 <code>ExportEC2InstanceRecommendations</code> actions to request an export of your
    ///             recommendations. Then use the <code>DescribeRecommendationExportJobs</code> action to
    ///             view your export jobs.</p>
    func describeRecommendationExportJobs(input: DescribeRecommendationExportJobsInput) async throws -> DescribeRecommendationExportJobsOutputResponse
    {
        typealias describeRecommendationExportJobsContinuation = CheckedContinuation<DescribeRecommendationExportJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeRecommendationExportJobsContinuation) in
            describeRecommendationExportJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Exports optimization recommendations for Auto Scaling groups.</p>
    ///
    ///         <p>Recommendations are exported in a comma-separated values (.csv) file, and its metadata
    ///             in a JavaScript Object Notation (.json) file, to an existing Amazon Simple Storage Service (Amazon S3) bucket that
    ///             you specify. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html">Exporting
    ///                 Recommendations</a> in the <i>Compute Optimizer User Guide</i>.</p>
    ///
    ///         <p>You can have only one Auto Scaling group export job in progress per AWS
    ///             Region.</p>
    func exportAutoScalingGroupRecommendations(input: ExportAutoScalingGroupRecommendationsInput) async throws -> ExportAutoScalingGroupRecommendationsOutputResponse
    {
        typealias exportAutoScalingGroupRecommendationsContinuation = CheckedContinuation<ExportAutoScalingGroupRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportAutoScalingGroupRecommendationsContinuation) in
            exportAutoScalingGroupRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Exports optimization recommendations for Amazon EBS volumes.</p>
    ///
    ///         <p>Recommendations are exported in a comma-separated values (.csv) file, and its metadata
    ///             in a JavaScript Object Notation (.json) file, to an existing Amazon Simple Storage Service (Amazon S3) bucket that
    ///             you specify. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html">Exporting
    ///                 Recommendations</a> in the <i>Compute Optimizer User Guide</i>.</p>
    ///
    ///         <p>You can have only one Amazon EBS volume export job in progress per AWS
    ///             Region.</p>
    func exportEBSVolumeRecommendations(input: ExportEBSVolumeRecommendationsInput) async throws -> ExportEBSVolumeRecommendationsOutputResponse
    {
        typealias exportEBSVolumeRecommendationsContinuation = CheckedContinuation<ExportEBSVolumeRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportEBSVolumeRecommendationsContinuation) in
            exportEBSVolumeRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Exports optimization recommendations for Amazon EC2 instances.</p>
    ///
    ///         <p>Recommendations are exported in a comma-separated values (.csv) file, and its metadata
    ///             in a JavaScript Object Notation (.json) file, to an existing Amazon Simple Storage Service (Amazon S3) bucket that
    ///             you specify. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html">Exporting
    ///                 Recommendations</a> in the <i>Compute Optimizer User Guide</i>.</p>
    ///
    ///         <p>You can have only one Amazon EC2 instance export job in progress per AWS
    ///             Region.</p>
    func exportEC2InstanceRecommendations(input: ExportEC2InstanceRecommendationsInput) async throws -> ExportEC2InstanceRecommendationsOutputResponse
    {
        typealias exportEC2InstanceRecommendationsContinuation = CheckedContinuation<ExportEC2InstanceRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportEC2InstanceRecommendationsContinuation) in
            exportEC2InstanceRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Exports optimization recommendations for AWS Lambda functions.</p>
    ///
    ///
    ///
    ///         <p>Recommendations are exported in a comma-separated values (.csv) file, and its metadata
    ///             in a JavaScript Object Notation (.json) file, to an existing Amazon Simple Storage Service (Amazon S3) bucket that
    ///             you specify. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html">Exporting
    ///                 Recommendations</a> in the <i>Compute Optimizer User Guide</i>.</p>
    ///
    ///         <p>You can have only one Lambda function export job in progress per AWS
    ///             Region.</p>
    func exportLambdaFunctionRecommendations(input: ExportLambdaFunctionRecommendationsInput) async throws -> ExportLambdaFunctionRecommendationsOutputResponse
    {
        typealias exportLambdaFunctionRecommendationsContinuation = CheckedContinuation<ExportLambdaFunctionRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: exportLambdaFunctionRecommendationsContinuation) in
            exportLambdaFunctionRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns Auto Scaling group recommendations.</p>
    ///
    ///         <p>AWS Compute Optimizer generates recommendations for Amazon EC2 Auto Scaling groups that meet a specific
    ///             set of requirements. For more information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported resources and
    ///                 requirements</a> in the <i>AWS Compute Optimizer User Guide</i>.</p>
    func getAutoScalingGroupRecommendations(input: GetAutoScalingGroupRecommendationsInput) async throws -> GetAutoScalingGroupRecommendationsOutputResponse
    {
        typealias getAutoScalingGroupRecommendationsContinuation = CheckedContinuation<GetAutoScalingGroupRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getAutoScalingGroupRecommendationsContinuation) in
            getAutoScalingGroupRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns Amazon Elastic Block Store (Amazon EBS) volume recommendations.</p>
    ///
    ///         <p>AWS Compute Optimizer generates recommendations for Amazon EBS volumes that meet a specific
    ///             set of requirements. For more information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported resources and
    ///                 requirements</a> in the <i>AWS Compute Optimizer User Guide</i>.</p>
    func getEBSVolumeRecommendations(input: GetEBSVolumeRecommendationsInput) async throws -> GetEBSVolumeRecommendationsOutputResponse
    {
        typealias getEBSVolumeRecommendationsContinuation = CheckedContinuation<GetEBSVolumeRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEBSVolumeRecommendationsContinuation) in
            getEBSVolumeRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns Amazon EC2 instance recommendations.</p>
    ///
    ///         <p>AWS Compute Optimizer generates recommendations for Amazon Elastic Compute Cloud (Amazon EC2) instances that meet
    ///             a specific set of requirements. For more information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported
    ///                 resources and requirements</a> in the <i>AWS Compute Optimizer User
    ///             Guide</i>.</p>
    func getEC2InstanceRecommendations(input: GetEC2InstanceRecommendationsInput) async throws -> GetEC2InstanceRecommendationsOutputResponse
    {
        typealias getEC2InstanceRecommendationsContinuation = CheckedContinuation<GetEC2InstanceRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEC2InstanceRecommendationsContinuation) in
            getEC2InstanceRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the projected utilization metrics of Amazon EC2 instance recommendations.</p>
    ///
    ///         <note>
    ///             <p>The <code>Cpu</code> and <code>Memory</code> metrics are the only projected
    ///                 utilization metrics returned when you run this action. Additionally, the
    ///                     <code>Memory</code> metric is returned only for resources that have the unified
    ///                 CloudWatch agent installed on them. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent">Enabling Memory
    ///                     Utilization with the CloudWatch Agent</a>.</p>
    ///         </note>
    func getEC2RecommendationProjectedMetrics(input: GetEC2RecommendationProjectedMetricsInput) async throws -> GetEC2RecommendationProjectedMetricsOutputResponse
    {
        typealias getEC2RecommendationProjectedMetricsContinuation = CheckedContinuation<GetEC2RecommendationProjectedMetricsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEC2RecommendationProjectedMetricsContinuation) in
            getEC2RecommendationProjectedMetrics(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the enrollment (opt in) status of an account to the AWS Compute Optimizer
    ///             service.</p>
    ///
    ///
    ///
    ///         <p>If the account is the management account of an organization, this action also confirms
    ///             the enrollment status of member accounts within the organization.</p>
    func getEnrollmentStatus(input: GetEnrollmentStatusInput) async throws -> GetEnrollmentStatusOutputResponse
    {
        typealias getEnrollmentStatusContinuation = CheckedContinuation<GetEnrollmentStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getEnrollmentStatusContinuation) in
            getEnrollmentStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns AWS Lambda function recommendations.</p>
    ///
    ///
    ///
    ///         <p>AWS Compute Optimizer generates recommendations for functions that meet a specific set of
    ///             requirements. For more information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported resources and
    ///                 requirements</a> in the <i>AWS Compute Optimizer User Guide</i>.</p>
    func getLambdaFunctionRecommendations(input: GetLambdaFunctionRecommendationsInput) async throws -> GetLambdaFunctionRecommendationsOutputResponse
    {
        typealias getLambdaFunctionRecommendationsContinuation = CheckedContinuation<GetLambdaFunctionRecommendationsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getLambdaFunctionRecommendationsContinuation) in
            getLambdaFunctionRecommendations(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Returns the optimization findings for an account.</p>
    ///         <p>It returns the number of:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>Amazon EC2 instances in an account that are <code>Underprovisioned</code>,
    ///                         <code>Overprovisioned</code>, or <code>Optimized</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Auto Scaling groups in an account that are <code>NotOptimized</code>, or
    ///                         <code>Optimized</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Amazon EBS volumes in an account that are <code>NotOptimized</code>, or
    ///                         <code>Optimized</code>.</p>
    ///             </li>
    ///             <li>
    ///                 <p>Lambda functions in an account that are <code>NotOptimized</code>, or
    ///                         <code>Optimized</code>.</p>
    ///             </li>
    ///          </ul>
    func getRecommendationSummaries(input: GetRecommendationSummariesInput) async throws -> GetRecommendationSummariesOutputResponse
    {
        typealias getRecommendationSummariesContinuation = CheckedContinuation<GetRecommendationSummariesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: getRecommendationSummariesContinuation) in
            getRecommendationSummaries(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// <p>Updates the enrollment (opt in and opt out) status of an account to the
    ///             AWS Compute Optimizer service.</p>
    ///
    ///
    ///
    ///         <p>If the account is a management account of an organization, this action can also be used
    ///             to enroll member accounts within the organization.</p>
    ///
    ///         <p>You must have the appropriate permissions to opt in to Compute Optimizer, to view its
    ///             recommendations, and to opt out. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html">Controlling access with AWS
    ///                 Identity and Access Management</a> in the <i>AWS Compute Optimizer User
    ///                 Guide</i>.</p>
    ///
    ///
    ///
    ///         <p>When you opt in, Compute Optimizer automatically creates a Service-Linked Role in your
    ///             account to access its data. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/using-service-linked-roles.html">Using
    ///                 Service-Linked Roles for AWS Compute Optimizer</a> in the <i>AWS Compute Optimizer User
    ///                 Guide</i>.</p>
    func updateEnrollmentStatus(input: UpdateEnrollmentStatusInput) async throws -> UpdateEnrollmentStatusOutputResponse
    {
        typealias updateEnrollmentStatusContinuation = CheckedContinuation<UpdateEnrollmentStatusOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEnrollmentStatusContinuation) in
            updateEnrollmentStatus(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
