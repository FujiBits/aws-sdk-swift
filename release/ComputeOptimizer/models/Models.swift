// Code generated by smithy-swift-codegen. DO NOT EDIT!
import AWSClientRuntime
import ClientRuntime

extension AccessDeniedException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AccessDeniedException(message: \(Swift.String(describing: message)))"}
}

extension AccessDeniedException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: AccessDeniedExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>You do not have sufficient access to perform this action.</p>
public struct AccessDeniedException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct AccessDeniedExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension AccessDeniedExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComputeOptimizerClientTypes.AutoScalingGroupConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case desiredCapacity
        case instanceType
        case maxSize
        case minSize
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if desiredCapacity != 0 {
            try encodeContainer.encode(desiredCapacity, forKey: .desiredCapacity)
        }
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if maxSize != 0 {
            try encodeContainer.encode(maxSize, forKey: .maxSize)
        }
        if minSize != 0 {
            try encodeContainer.encode(minSize, forKey: .minSize)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let desiredCapacityDecoded = try containerValues.decode(Swift.Int.self, forKey: .desiredCapacity)
        desiredCapacity = desiredCapacityDecoded
        let minSizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .minSize)
        minSize = minSizeDecoded
        let maxSizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .maxSize)
        maxSize = maxSizeDecoded
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
    }
}

extension ComputeOptimizerClientTypes.AutoScalingGroupConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoScalingGroupConfiguration(desiredCapacity: \(Swift.String(describing: desiredCapacity)), instanceType: \(Swift.String(describing: instanceType)), maxSize: \(Swift.String(describing: maxSize)), minSize: \(Swift.String(describing: minSize)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes the configuration of an Auto Scaling group.</p>
    public struct AutoScalingGroupConfiguration: Swift.Equatable {
        /// <p>The desired capacity, or number of instances, for the Auto Scaling group.</p>
        public let desiredCapacity: Swift.Int
        /// <p>The instance type for the Auto Scaling group.</p>
        public let instanceType: Swift.String?
        /// <p>The maximum size, or maximum number of instances, for the Auto Scaling group.</p>
        public let maxSize: Swift.Int
        /// <p>The minimum size, or minimum number of instances, for the Auto Scaling group.</p>
        public let minSize: Swift.Int

        public init (
            desiredCapacity: Swift.Int = 0,
            instanceType: Swift.String? = nil,
            maxSize: Swift.Int = 0,
            minSize: Swift.Int = 0
        )
        {
            self.desiredCapacity = desiredCapacity
            self.instanceType = instanceType
            self.maxSize = maxSize
            self.minSize = minSize
        }
    }

}

extension ComputeOptimizerClientTypes.AutoScalingGroupRecommendation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case autoScalingGroupArn
        case autoScalingGroupName
        case currentConfiguration
        case finding
        case lastRefreshTimestamp
        case lookBackPeriodInDays
        case recommendationOptions
        case utilizationMetrics
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let autoScalingGroupArn = autoScalingGroupArn {
            try encodeContainer.encode(autoScalingGroupArn, forKey: .autoScalingGroupArn)
        }
        if let autoScalingGroupName = autoScalingGroupName {
            try encodeContainer.encode(autoScalingGroupName, forKey: .autoScalingGroupName)
        }
        if let currentConfiguration = currentConfiguration {
            try encodeContainer.encode(currentConfiguration, forKey: .currentConfiguration)
        }
        if let finding = finding {
            try encodeContainer.encode(finding.rawValue, forKey: .finding)
        }
        if let lastRefreshTimestamp = lastRefreshTimestamp {
            try encodeContainer.encode(lastRefreshTimestamp.timeIntervalSince1970, forKey: .lastRefreshTimestamp)
        }
        if lookBackPeriodInDays != 0.0 {
            try encodeContainer.encode(lookBackPeriodInDays, forKey: .lookBackPeriodInDays)
        }
        if let recommendationOptions = recommendationOptions {
            var recommendationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendationOptions)
            for autoscalinggrouprecommendationoptions0 in recommendationOptions {
                try recommendationOptionsContainer.encode(autoscalinggrouprecommendationoptions0)
            }
        }
        if let utilizationMetrics = utilizationMetrics {
            var utilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .utilizationMetrics)
            for utilizationmetrics0 in utilizationMetrics {
                try utilizationMetricsContainer.encode(utilizationmetrics0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let autoScalingGroupArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupArn)
        autoScalingGroupArn = autoScalingGroupArnDecoded
        let autoScalingGroupNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .autoScalingGroupName)
        autoScalingGroupName = autoScalingGroupNameDecoded
        let findingDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Finding.self, forKey: .finding)
        finding = findingDecoded
        let utilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.UtilizationMetric?].self, forKey: .utilizationMetrics)
        var utilizationMetricsDecoded0:[ComputeOptimizerClientTypes.UtilizationMetric]? = nil
        if let utilizationMetricsContainer = utilizationMetricsContainer {
            utilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.UtilizationMetric]()
            for structure0 in utilizationMetricsContainer {
                if let structure0 = structure0 {
                    utilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        utilizationMetrics = utilizationMetricsDecoded0
        let lookBackPeriodInDaysDecoded = try containerValues.decode(Swift.Double.self, forKey: .lookBackPeriodInDays)
        lookBackPeriodInDays = lookBackPeriodInDaysDecoded
        let currentConfigurationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.AutoScalingGroupConfiguration.self, forKey: .currentConfiguration)
        currentConfiguration = currentConfigurationDecoded
        let recommendationOptionsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption?].self, forKey: .recommendationOptions)
        var recommendationOptionsDecoded0:[ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption]? = nil
        if let recommendationOptionsContainer = recommendationOptionsContainer {
            recommendationOptionsDecoded0 = [ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption]()
            for structure0 in recommendationOptionsContainer {
                if let structure0 = structure0 {
                    recommendationOptionsDecoded0?.append(structure0)
                }
            }
        }
        recommendationOptions = recommendationOptionsDecoded0
        let lastRefreshTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastRefreshTimestamp)
        lastRefreshTimestamp = lastRefreshTimestampDecoded
    }
}

extension ComputeOptimizerClientTypes.AutoScalingGroupRecommendation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoScalingGroupRecommendation(accountId: \(Swift.String(describing: accountId)), autoScalingGroupArn: \(Swift.String(describing: autoScalingGroupArn)), autoScalingGroupName: \(Swift.String(describing: autoScalingGroupName)), currentConfiguration: \(Swift.String(describing: currentConfiguration)), finding: \(Swift.String(describing: finding)), lastRefreshTimestamp: \(Swift.String(describing: lastRefreshTimestamp)), lookBackPeriodInDays: \(Swift.String(describing: lookBackPeriodInDays)), recommendationOptions: \(Swift.String(describing: recommendationOptions)), utilizationMetrics: \(Swift.String(describing: utilizationMetrics)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes an Auto Scaling group recommendation.</p>
    public struct AutoScalingGroupRecommendation: Swift.Equatable {
        /// <p>The AWS account ID of the Auto Scaling group.</p>
        public let accountId: Swift.String?
        /// <p>The Amazon Resource Name (ARN) of the Auto Scaling group.</p>
        public let autoScalingGroupArn: Swift.String?
        /// <p>The name of the Auto Scaling group.</p>
        public let autoScalingGroupName: Swift.String?
        /// <p>An array of objects that describe the current configuration of the Auto Scaling group.</p>
        public let currentConfiguration: ComputeOptimizerClientTypes.AutoScalingGroupConfiguration?
        /// <p>The finding classification of the Auto Scaling group.</p>
        ///         <p>Findings for Auto Scaling groups include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>NotOptimized</code>
        ///                   </b>—An Auto Scaling
        ///                     group is considered not optimized when AWS Compute Optimizer identifies a recommendation that
        ///                     can provide better performance for your workload.</p>
        ///
        ///
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>Optimized</code>
        ///                   </b>—An Auto Scaling group is
        ///                     considered optimized when Compute Optimizer determines that the group is correctly
        ///                     provisioned to run your workload based on the chosen instance type. For
        ///                     optimized resources, Compute Optimizer might recommend a new generation instance type.</p>
        ///             </li>
        ///          </ul>
        public let finding: ComputeOptimizerClientTypes.Finding?
        /// <p>The time stamp of when the Auto Scaling group recommendation was last refreshed.</p>
        public let lastRefreshTimestamp: ClientRuntime.Date?
        /// <p>The number of days for which utilization metrics were analyzed for the Auto Scaling
        ///             group.</p>
        public let lookBackPeriodInDays: Swift.Double
        /// <p>An array of objects that describe the recommendation options for the Auto Scaling
        ///             group.</p>
        public let recommendationOptions: [ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption]?
        /// <p>An array of objects that describe the utilization metrics of the Auto Scaling group.</p>
        public let utilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]?

        public init (
            accountId: Swift.String? = nil,
            autoScalingGroupArn: Swift.String? = nil,
            autoScalingGroupName: Swift.String? = nil,
            currentConfiguration: ComputeOptimizerClientTypes.AutoScalingGroupConfiguration? = nil,
            finding: ComputeOptimizerClientTypes.Finding? = nil,
            lastRefreshTimestamp: ClientRuntime.Date? = nil,
            lookBackPeriodInDays: Swift.Double = 0.0,
            recommendationOptions: [ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption]? = nil,
            utilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]? = nil
        )
        {
            self.accountId = accountId
            self.autoScalingGroupArn = autoScalingGroupArn
            self.autoScalingGroupName = autoScalingGroupName
            self.currentConfiguration = currentConfiguration
            self.finding = finding
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookBackPeriodInDays = lookBackPeriodInDays
            self.recommendationOptions = recommendationOptions
            self.utilizationMetrics = utilizationMetrics
        }
    }

}

extension ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration
        case performanceRisk
        case projectedUtilizationMetrics
        case rank
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if performanceRisk != 0.0 {
            try encodeContainer.encode(performanceRisk, forKey: .performanceRisk)
        }
        if let projectedUtilizationMetrics = projectedUtilizationMetrics {
            var projectedUtilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .projectedUtilizationMetrics)
            for projectedutilizationmetrics0 in projectedUtilizationMetrics {
                try projectedUtilizationMetricsContainer.encode(projectedutilizationmetrics0)
            }
        }
        if rank != 0 {
            try encodeContainer.encode(rank, forKey: .rank)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.AutoScalingGroupConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let projectedUtilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.UtilizationMetric?].self, forKey: .projectedUtilizationMetrics)
        var projectedUtilizationMetricsDecoded0:[ComputeOptimizerClientTypes.UtilizationMetric]? = nil
        if let projectedUtilizationMetricsContainer = projectedUtilizationMetricsContainer {
            projectedUtilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.UtilizationMetric]()
            for structure0 in projectedUtilizationMetricsContainer {
                if let structure0 = structure0 {
                    projectedUtilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        projectedUtilizationMetrics = projectedUtilizationMetricsDecoded0
        let performanceRiskDecoded = try containerValues.decode(Swift.Double.self, forKey: .performanceRisk)
        performanceRisk = performanceRiskDecoded
        let rankDecoded = try containerValues.decode(Swift.Int.self, forKey: .rank)
        rank = rankDecoded
    }
}

extension ComputeOptimizerClientTypes.AutoScalingGroupRecommendationOption: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "AutoScalingGroupRecommendationOption(configuration: \(Swift.String(describing: configuration)), performanceRisk: \(Swift.String(describing: performanceRisk)), projectedUtilizationMetrics: \(Swift.String(describing: projectedUtilizationMetrics)), rank: \(Swift.String(describing: rank)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a recommendation option for an Auto Scaling group.</p>
    public struct AutoScalingGroupRecommendationOption: Swift.Equatable {
        /// <p>An array of objects that describe an Auto Scaling group configuration.</p>
        public let configuration: ComputeOptimizerClientTypes.AutoScalingGroupConfiguration?
        /// <p>The performance risk of the Auto Scaling group configuration recommendation.</p>
        ///         <p>Performance risk indicates the likelihood of the recommended instance type not meeting
        ///             the resource needs of your workload. Compute Optimizer calculates an individual performance risk
        ///             score for each specification of the recommended instance, including CPU, memory, EBS
        ///             throughput, EBS IOPS, disk throughput, disk IOPS, network throughput, and network PPS.
        ///             The performance
        ///             risk of the recommended instance is calculated as the maximum performance risk score
        ///             across the analyzed resource specifications.</p>
        ///         <p>The value ranges from 0 to 5, with 0 meaning that the recommended resource is
        ///             predicted to always provide enough hardware capability. The higher the performance risk
        ///             is, the more likely you should validate whether the recommended resource meets the
        ///             performance requirements of your workload before migrating your resource.</p>
        public let performanceRisk: Swift.Double
        /// <p>An array of objects that describe the projected utilization metrics of the Auto Scaling group
        ///             recommendation option.</p>
        ///
        ///         <note>
        ///             <p>The <code>Cpu</code> and <code>Memory</code> metrics are the only projected
        ///                 utilization metrics returned. Additionally, the <code>Memory</code> metric is
        ///                 returned only for resources that have the unified CloudWatch agent installed on them. For
        ///                 more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent">Enabling Memory
        ///                     Utilization with the CloudWatch Agent</a>.</p>
        ///         </note>
        public let projectedUtilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]?
        /// <p>The rank of the Auto Scaling group recommendation option.</p>
        ///         <p>The top recommendation option is ranked as <code>1</code>.</p>
        public let rank: Swift.Int

        public init (
            configuration: ComputeOptimizerClientTypes.AutoScalingGroupConfiguration? = nil,
            performanceRisk: Swift.Double = 0.0,
            projectedUtilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]? = nil,
            rank: Swift.Int = 0
        )
        {
            self.configuration = configuration
            self.performanceRisk = performanceRisk
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.rank = rank
        }
    }

}

public struct DescribeRecommendationExportJobsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRecommendationExportJobsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRecommendationExportJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRecommendationExportJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRecommendationExportJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRecommendationExportJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRecommendationExportJobsOutputError>
}

extension DescribeRecommendationExportJobsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRecommendationExportJobsInput(filters: \(Swift.String(describing: filters)), jobIds: \(Swift.String(describing: jobIds)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension DescribeRecommendationExportJobsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters
        case jobIds
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for jobfilters0 in filters {
                try filtersContainer.encode(jobfilters0)
            }
        }
        if let jobIds = jobIds {
            var jobIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .jobIds)
            for jobids0 in jobIds {
                try jobIdsContainer.encode(jobids0)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct DescribeRecommendationExportJobsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRecommendationExportJobsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRecommendationExportJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRecommendationExportJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRecommendationExportJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRecommendationExportJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRecommendationExportJobsOutputError>
}

public struct DescribeRecommendationExportJobsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "DescribeRecommendationExportJobsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<DescribeRecommendationExportJobsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<DescribeRecommendationExportJobsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<DescribeRecommendationExportJobsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<DescribeRecommendationExportJobsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<DescribeRecommendationExportJobsOutputError>
}

public struct DescribeRecommendationExportJobsInput: Swift.Equatable {
    /// <p>An array of objects that describe a filter to return a more specific list of export
    ///             jobs.</p>
    public let filters: [ComputeOptimizerClientTypes.JobFilter]?
    /// <p>The identification numbers of the export jobs to return.</p>
    ///
    ///         <p>An export job ID is returned when you create an export using the
    ///                 <code>ExportAutoScalingGroupRecommendations</code> or
    ///                 <code>ExportEC2InstanceRecommendations</code> actions.</p>
    ///
    ///         <p>All export jobs created in the last seven days are returned if this parameter is
    ///             omitted.</p>
    public let jobIds: [Swift.String]?
    /// <p>The maximum number of export jobs to return with a single request.</p>
    ///         <p>To retrieve the remaining results, make another request with the returned
    ///                 <code>NextToken</code> value.</p>
    public let maxResults: Swift.Int?
    /// <p>The token to advance to the next page of export jobs.</p>
    public let nextToken: Swift.String?

    public init (
        filters: [ComputeOptimizerClientTypes.JobFilter]? = nil,
        jobIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.filters = filters
        self.jobIds = jobIds
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct DescribeRecommendationExportJobsInputBody: Swift.Equatable {
    public let jobIds: [Swift.String]?
    public let filters: [ComputeOptimizerClientTypes.JobFilter]?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
}

extension DescribeRecommendationExportJobsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case filters
        case jobIds
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .jobIds)
        var jobIdsDecoded0:[Swift.String]? = nil
        if let jobIdsContainer = jobIdsContainer {
            jobIdsDecoded0 = [Swift.String]()
            for string0 in jobIdsContainer {
                if let string0 = string0 {
                    jobIdsDecoded0?.append(string0)
                }
            }
        }
        jobIds = jobIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.JobFilter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.JobFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.JobFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension DescribeRecommendationExportJobsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension DescribeRecommendationExportJobsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum DescribeRecommendationExportJobsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension DescribeRecommendationExportJobsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "DescribeRecommendationExportJobsOutputResponse(nextToken: \(Swift.String(describing: nextToken)), recommendationExportJobs: \(Swift.String(describing: recommendationExportJobs)))"}
}

extension DescribeRecommendationExportJobsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: DescribeRecommendationExportJobsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.recommendationExportJobs = output.recommendationExportJobs
        } else {
            self.nextToken = nil
            self.recommendationExportJobs = nil
        }
    }
}

public struct DescribeRecommendationExportJobsOutputResponse: Swift.Equatable {
    /// <p>The token to use to advance to the next page of export jobs.</p>
    ///         <p>This value is null when there are no more pages of export jobs to return.</p>
    public let nextToken: Swift.String?
    /// <p>An array of objects that describe recommendation export jobs.</p>
    public let recommendationExportJobs: [ComputeOptimizerClientTypes.RecommendationExportJob]?

    public init (
        nextToken: Swift.String? = nil,
        recommendationExportJobs: [ComputeOptimizerClientTypes.RecommendationExportJob]? = nil
    )
    {
        self.nextToken = nextToken
        self.recommendationExportJobs = recommendationExportJobs
    }
}

struct DescribeRecommendationExportJobsOutputResponseBody: Swift.Equatable {
    public let recommendationExportJobs: [ComputeOptimizerClientTypes.RecommendationExportJob]?
    public let nextToken: Swift.String?
}

extension DescribeRecommendationExportJobsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case recommendationExportJobs
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationExportJobsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.RecommendationExportJob?].self, forKey: .recommendationExportJobs)
        var recommendationExportJobsDecoded0:[ComputeOptimizerClientTypes.RecommendationExportJob]? = nil
        if let recommendationExportJobsContainer = recommendationExportJobsContainer {
            recommendationExportJobsDecoded0 = [ComputeOptimizerClientTypes.RecommendationExportJob]()
            for structure0 in recommendationExportJobsContainer {
                if let structure0 = structure0 {
                    recommendationExportJobsDecoded0?.append(structure0)
                }
            }
        }
        recommendationExportJobs = recommendationExportJobsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}

extension ComputeOptimizerClientTypes.EBSFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filtervalues0 in values {
                try valuesContainer.encode(filtervalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EBSFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ComputeOptimizerClientTypes.EBSFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EBSFilter(name: \(Swift.String(describing: name)), values: \(Swift.String(describing: values)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a filter that returns a more specific list of Amazon Elastic Block Store (Amazon EBS) volume
    ///             recommendations. Use this filter with the <code>GetEBSVolumeRecommendations</code>
    ///             action.</p>
    ///
    ///         <p>You can use <code>LambdaFunctionRecommendationFilter</code> with the
    ///                 <code>GetLambdaFunctionRecommendations</code> action, <code>JobFilter</code> with
    ///             the <code>DescribeRecommendationExportJobs</code> action, and <code>Filter</code> with
    ///             the <code>GetAutoScalingGroupRecommendations</code> and
    ///                 <code>GetEC2InstanceRecommendations</code> actions.</p>
    public struct EBSFilter: Swift.Equatable {
        /// <p>The name of the filter.</p>
        ///
        ///         <p>Specify <code>Finding</code> to return recommendations with a specific finding
        ///             classification (e.g., <code>NotOptimized</code>).</p>
        public let name: ComputeOptimizerClientTypes.EBSFilterName?
        /// <p>The value of the filter.</p>
        ///
        ///         <p>The valid values are <code>Optimized</code>, or <code>NotOptimized</code>.</p>
        public let values: [Swift.String]?

        public init (
            name: ComputeOptimizerClientTypes.EBSFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum EBSFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case finding
        case sdkUnknown(Swift.String)

        public static var allCases: [EBSFilterName] {
            return [
                .finding,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .finding: return "Finding"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EBSFilterName(rawValue: rawValue) ?? EBSFilterName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum EBSFinding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case notOptimized
        case optimized
        case sdkUnknown(Swift.String)

        public static var allCases: [EBSFinding] {
            return [
                .notOptimized,
                .optimized,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .notOptimized: return "NotOptimized"
            case .optimized: return "Optimized"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EBSFinding(rawValue: rawValue) ?? EBSFinding.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum EBSMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case volumeReadBytesPerSecond
        case volumeReadOpsPerSecond
        case volumeWriteBytesPerSecond
        case volumeWriteOpsPerSecond
        case sdkUnknown(Swift.String)

        public static var allCases: [EBSMetricName] {
            return [
                .volumeReadBytesPerSecond,
                .volumeReadOpsPerSecond,
                .volumeWriteBytesPerSecond,
                .volumeWriteOpsPerSecond,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .volumeReadBytesPerSecond: return "VolumeReadBytesPerSecond"
            case .volumeReadOpsPerSecond: return "VolumeReadOpsPerSecond"
            case .volumeWriteBytesPerSecond: return "VolumeWriteBytesPerSecond"
            case .volumeWriteOpsPerSecond: return "VolumeWriteOpsPerSecond"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = EBSMetricName(rawValue: rawValue) ?? EBSMetricName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.EBSUtilizationMetric: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case statistic
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let statistic = statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EBSMetricName.self, forKey: .name)
        name = nameDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let valueDecoded = try containerValues.decode(Swift.Double.self, forKey: .value)
        value = valueDecoded
    }
}

extension ComputeOptimizerClientTypes.EBSUtilizationMetric: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "EBSUtilizationMetric(name: \(Swift.String(describing: name)), statistic: \(Swift.String(describing: statistic)), value: \(Swift.String(describing: value)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a utilization metric of an Amazon Elastic Block Store (Amazon EBS) volume.</p>
    ///
    ///         <p>Compare the utilization metric data of your resource against its projected utilization
    ///             metric data to determine the performance difference between your current resource and
    ///             the recommended option.</p>
    public struct EBSUtilizationMetric: Swift.Equatable {
        /// <p>The name of the utilization metric.</p>
        ///         <p>The following utilization metrics are available:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>VolumeReadOpsPerSecond</code> - The completed read operations per second
        ///                     from the volume in a specified period of time.</p>
        ///                 <p>Unit: Count</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>VolumeWriteOpsPerSecond</code> - The completed write operations per
        ///                     second to the volume in a specified period of time.</p>
        ///                 <p>Unit: Count</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>VolumeReadBytesPerSecond</code> - The bytes read per second from the
        ///                     volume in a specified period of time.</p>
        ///                 <p>Unit: Bytes</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>VolumeWriteBytesPerSecond</code> - The bytes written to the volume in a
        ///                     specified period of time.</p>
        ///                 <p>Unit: Bytes</p>
        ///             </li>
        ///          </ul>
        public let name: ComputeOptimizerClientTypes.EBSMetricName?
        /// <p>The statistic of the utilization metric.</p>
        ///
        ///         <p>The Compute Optimizer API, AWS Command Line Interface (AWS CLI), and SDKs return utilization metrics using
        ///             only the <code>Maximum</code> statistic, which is the highest value observed during the
        ///             specified period.</p>
        ///
        ///
        ///
        ///         <p>The Compute Optimizer console displays graphs for some utilization metrics using the
        ///                 <code>Average</code> statistic, which is the value of <code>Sum</code> /
        ///                 <code>SampleCount</code> during the specified period. For more information, see
        ///                 <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html">Viewing resource
        ///                 recommendations</a> in the <i>AWS Compute Optimizer User Guide</i>. You can
        ///             also get averaged utilization metric data for your resources using Amazon CloudWatch. For more
        ///             information, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html">Amazon CloudWatch User
        ///                 Guide</a>.</p>
        public let statistic: ComputeOptimizerClientTypes.MetricStatistic?
        /// <p>The value of the utilization metric.</p>
        public let value: Swift.Double

        public init (
            name: ComputeOptimizerClientTypes.EBSMetricName? = nil,
            statistic: ComputeOptimizerClientTypes.MetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }

}

public struct ExportAutoScalingGroupRecommendationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportAutoScalingGroupRecommendationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportAutoScalingGroupRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportAutoScalingGroupRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportAutoScalingGroupRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportAutoScalingGroupRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportAutoScalingGroupRecommendationsOutputError>
}

extension ExportAutoScalingGroupRecommendationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportAutoScalingGroupRecommendationsInput(accountIds: \(Swift.String(describing: accountIds)), fieldsToExport: \(Swift.String(describing: fieldsToExport)), fileFormat: \(Swift.String(describing: fileFormat)), filters: \(Swift.String(describing: filters)), includeMemberAccounts: \(Swift.String(describing: includeMemberAccounts)), s3DestinationConfig: \(Swift.String(describing: s3DestinationConfig)))"}
}

extension ExportAutoScalingGroupRecommendationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountids0 in accountIds {
                try accountIdsContainer.encode(accountids0)
            }
        }
        if let fieldsToExport = fieldsToExport {
            var fieldsToExportContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldsToExport)
            for exportableautoscalinggroupfields0 in fieldsToExport {
                try fieldsToExportContainer.encode(exportableautoscalinggroupfields0.rawValue)
            }
        }
        if let fileFormat = fileFormat {
            try encodeContainer.encode(fileFormat.rawValue, forKey: .fileFormat)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filters0 in filters {
                try filtersContainer.encode(filters0)
            }
        }
        if includeMemberAccounts != false {
            try encodeContainer.encode(includeMemberAccounts, forKey: .includeMemberAccounts)
        }
        if let s3DestinationConfig = s3DestinationConfig {
            try encodeContainer.encode(s3DestinationConfig, forKey: .s3DestinationConfig)
        }
    }
}

public struct ExportAutoScalingGroupRecommendationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportAutoScalingGroupRecommendationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportAutoScalingGroupRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportAutoScalingGroupRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportAutoScalingGroupRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportAutoScalingGroupRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportAutoScalingGroupRecommendationsOutputError>
}

public struct ExportAutoScalingGroupRecommendationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportAutoScalingGroupRecommendationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportAutoScalingGroupRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportAutoScalingGroupRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportAutoScalingGroupRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportAutoScalingGroupRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportAutoScalingGroupRecommendationsOutputError>
}

public struct ExportAutoScalingGroupRecommendationsInput: Swift.Equatable {
    /// <p>The IDs of the AWS accounts for which to export Auto Scaling group
    ///             recommendations.</p>
    ///
    ///
    ///
    ///         <p>If your account is the management account of an organization, use this parameter to
    ///             specify the member account for which you want to export recommendations.</p>
    ///         <p>This parameter cannot be specified together with the include member accounts
    ///             parameter. The parameters are mutually exclusive.</p>
    ///         <p>Recommendations for member accounts are not included in the export if this parameter,
    ///             or the include member accounts parameter, is omitted.</p>
    ///         <p>You can specify multiple account IDs per request.</p>
    public let accountIds: [Swift.String]?
    /// <p>The recommendations data to include in the export file. For more information about the
    ///             fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User Guide</i>.</p>
    public let fieldsToExport: [ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]?
    /// <p>The format of the export file.</p>
    ///         <p>The only export file format currently supported is <code>Csv</code>.</p>
    public let fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// <p>An array of objects that describe a filter to export a more specific set of Auto Scaling group
    ///             recommendations.</p>
    public let filters: [ComputeOptimizerClientTypes.Filter]?
    /// <p>Indicates whether to include recommendations for resources in all member accounts of
    ///             the organization if your account is the management account of an organization.</p>
    ///
    ///         <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
    ///             Compute Optimizer must be enabled in the organization account. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and
    ///                 AWS Organizations trusted access</a> in the <i>AWS Compute Optimizer User
    ///                 Guide</i>.</p>
    ///
    ///
    ///
    ///         <p>Recommendations for member accounts of the organization are not included in the export
    ///             file if this parameter is omitted.</p>
    ///         <p>This parameter cannot be specified together with the account IDs parameter. The
    ///             parameters are mutually exclusive.</p>
    ///         <p>Recommendations for member accounts are not included in the export if this parameter,
    ///             or the account IDs parameter, is omitted.</p>
    public let includeMemberAccounts: Swift.Bool
    /// <p>An object to specify the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for
    ///             the export job.</p>
    ///         <p>You must create the destination Amazon S3 bucket for your recommendations export before you
    ///             create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the
    ///             S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the
    ///             export file to it. If you plan to specify an object prefix when you create the export
    ///             job, you must include the object prefix in the policy that you add to the S3 bucket. For
    ///             more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the <i>Compute Optimizer user
    ///             guide</i>.</p>
    public let s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init (
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.Filter]? = nil,
        includeMemberAccounts: Swift.Bool = false,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.s3DestinationConfig = s3DestinationConfig
    }
}

struct ExportAutoScalingGroupRecommendationsInputBody: Swift.Equatable {
    public let accountIds: [Swift.String]?
    public let filters: [ComputeOptimizerClientTypes.Filter]?
    public let fieldsToExport: [ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]?
    public let s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?
    public let fileFormat: ComputeOptimizerClientTypes.FileFormat?
    public let includeMemberAccounts: Swift.Bool
}

extension ExportAutoScalingGroupRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let fieldsToExportContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ExportableAutoScalingGroupField?].self, forKey: .fieldsToExport)
        var fieldsToExportDecoded0:[ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]? = nil
        if let fieldsToExportContainer = fieldsToExportContainer {
            fieldsToExportDecoded0 = [ComputeOptimizerClientTypes.ExportableAutoScalingGroupField]()
            for string0 in fieldsToExportContainer {
                if let string0 = string0 {
                    fieldsToExportDecoded0?.append(string0)
                }
            }
        }
        fieldsToExport = fieldsToExportDecoded0
        let s3DestinationConfigDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3DestinationConfig.self, forKey: .s3DestinationConfig)
        s3DestinationConfig = s3DestinationConfigDecoded
        let fileFormatDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.FileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let includeMemberAccountsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .includeMemberAccounts)
        includeMemberAccounts = includeMemberAccountsDecoded
    }
}

extension ExportAutoScalingGroupRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExportAutoScalingGroupRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ExportAutoScalingGroupRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExportAutoScalingGroupRecommendationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportAutoScalingGroupRecommendationsOutputResponse(jobId: \(Swift.String(describing: jobId)), s3Destination: \(Swift.String(describing: s3Destination)))"}
}

extension ExportAutoScalingGroupRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ExportAutoScalingGroupRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.s3Destination = output.s3Destination
        } else {
            self.jobId = nil
            self.s3Destination = nil
        }
    }
}

public struct ExportAutoScalingGroupRecommendationsOutputResponse: Swift.Equatable {
    /// <p>The identification number of the export job.</p>
    ///         <p>Use the <code>DescribeRecommendationExportJobs</code> action, and specify the job ID
    ///             to view the status of an export job.</p>
    public let jobId: Swift.String?
    /// <p>An object that describes the destination Amazon S3 bucket of a recommendations export
    ///             file.</p>
    public let s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init (
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

struct ExportAutoScalingGroupRecommendationsOutputResponseBody: Swift.Equatable {
    public let jobId: Swift.String?
    public let s3Destination: ComputeOptimizerClientTypes.S3Destination?
}

extension ExportAutoScalingGroupRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case s3Destination
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let s3DestinationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3Destination.self, forKey: .s3Destination)
        s3Destination = s3DestinationDecoded
    }
}

extension ComputeOptimizerClientTypes.ExportDestination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case s3
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3 = s3 {
            try encodeContainer.encode(s3, forKey: .s3)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let s3Decoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3Destination.self, forKey: .s3)
        s3 = s3Decoded
    }
}

extension ComputeOptimizerClientTypes.ExportDestination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportDestination(s3: \(Swift.String(describing: s3)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes the destination of the recommendations export and metadata files.</p>
    public struct ExportDestination: Swift.Equatable {
        /// <p>An object that describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys
        ///             of a recommendations export file, and its associated metadata file.</p>
        public let s3: ComputeOptimizerClientTypes.S3Destination?

        public init (
            s3: ComputeOptimizerClientTypes.S3Destination? = nil
        )
        {
            self.s3 = s3
        }
    }

}

public struct ExportEBSVolumeRecommendationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportEBSVolumeRecommendationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportEBSVolumeRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportEBSVolumeRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportEBSVolumeRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportEBSVolumeRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportEBSVolumeRecommendationsOutputError>
}

extension ExportEBSVolumeRecommendationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportEBSVolumeRecommendationsInput(accountIds: \(Swift.String(describing: accountIds)), fieldsToExport: \(Swift.String(describing: fieldsToExport)), fileFormat: \(Swift.String(describing: fileFormat)), filters: \(Swift.String(describing: filters)), includeMemberAccounts: \(Swift.String(describing: includeMemberAccounts)), s3DestinationConfig: \(Swift.String(describing: s3DestinationConfig)))"}
}

extension ExportEBSVolumeRecommendationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountids0 in accountIds {
                try accountIdsContainer.encode(accountids0)
            }
        }
        if let fieldsToExport = fieldsToExport {
            var fieldsToExportContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldsToExport)
            for exportablevolumefields0 in fieldsToExport {
                try fieldsToExportContainer.encode(exportablevolumefields0.rawValue)
            }
        }
        if let fileFormat = fileFormat {
            try encodeContainer.encode(fileFormat.rawValue, forKey: .fileFormat)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for ebsfilters0 in filters {
                try filtersContainer.encode(ebsfilters0)
            }
        }
        if includeMemberAccounts != false {
            try encodeContainer.encode(includeMemberAccounts, forKey: .includeMemberAccounts)
        }
        if let s3DestinationConfig = s3DestinationConfig {
            try encodeContainer.encode(s3DestinationConfig, forKey: .s3DestinationConfig)
        }
    }
}

public struct ExportEBSVolumeRecommendationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportEBSVolumeRecommendationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportEBSVolumeRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportEBSVolumeRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportEBSVolumeRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportEBSVolumeRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportEBSVolumeRecommendationsOutputError>
}

public struct ExportEBSVolumeRecommendationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportEBSVolumeRecommendationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportEBSVolumeRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportEBSVolumeRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportEBSVolumeRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportEBSVolumeRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportEBSVolumeRecommendationsOutputError>
}

public struct ExportEBSVolumeRecommendationsInput: Swift.Equatable {
    /// <p>The IDs of the AWS accounts for which to export Amazon EBS volume
    ///             recommendations.</p>
    ///
    ///
    ///
    ///         <p>If your account is the management account of an organization, use this parameter to
    ///             specify the member account for which you want to export recommendations.</p>
    ///         <p>This parameter cannot be specified together with the include member accounts
    ///             parameter. The parameters are mutually exclusive.</p>
    ///         <p>Recommendations for member accounts are not included in the export if this parameter,
    ///             or the include member accounts parameter, is omitted.</p>
    ///         <p>You can specify multiple account IDs per request.</p>
    public let accountIds: [Swift.String]?
    /// <p>The recommendations data to include in the export file. For more information about the
    ///             fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User Guide</i>.</p>
    public let fieldsToExport: [ComputeOptimizerClientTypes.ExportableVolumeField]?
    /// <p>The format of the export file.</p>
    ///         <p>The only export file format currently supported is <code>Csv</code>.</p>
    public let fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// <p>An array of objects that describe a filter to export a more specific set of Amazon EBS
    ///             volume recommendations.</p>
    public let filters: [ComputeOptimizerClientTypes.EBSFilter]?
    /// <p>Indicates whether to include recommendations for resources in all member accounts of
    ///             the organization if your account is the management account of an organization.</p>
    ///
    ///         <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
    ///             Compute Optimizer must be enabled in the organization account. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and
    ///                 AWS Organizations trusted access</a> in the <i>AWS Compute Optimizer User
    ///                 Guide</i>.</p>
    ///
    ///
    ///
    ///         <p>Recommendations for member accounts of the organization are not included in the export
    ///             file if this parameter is omitted.</p>
    ///         <p>This parameter cannot be specified together with the account IDs parameter. The
    ///             parameters are mutually exclusive.</p>
    ///         <p>Recommendations for member accounts are not included in the export if this parameter,
    ///             or the account IDs parameter, is omitted.</p>
    public let includeMemberAccounts: Swift.Bool
    /// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a
    ///             recommendations export job.</p>
    ///         <p>You must create the destination Amazon S3 bucket for your recommendations export before you
    ///             create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the
    ///             S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the
    ///             export file to it. If you plan to specify an object prefix when you create the export
    ///             job, you must include the object prefix in the policy that you add to the S3 bucket. For
    ///             more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the <i>Compute Optimizer user
    ///             guide</i>.</p>
    public let s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init (
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableVolumeField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.EBSFilter]? = nil,
        includeMemberAccounts: Swift.Bool = false,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.s3DestinationConfig = s3DestinationConfig
    }
}

struct ExportEBSVolumeRecommendationsInputBody: Swift.Equatable {
    public let accountIds: [Swift.String]?
    public let filters: [ComputeOptimizerClientTypes.EBSFilter]?
    public let fieldsToExport: [ComputeOptimizerClientTypes.ExportableVolumeField]?
    public let s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?
    public let fileFormat: ComputeOptimizerClientTypes.FileFormat?
    public let includeMemberAccounts: Swift.Bool
}

extension ExportEBSVolumeRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.EBSFilter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.EBSFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.EBSFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let fieldsToExportContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ExportableVolumeField?].self, forKey: .fieldsToExport)
        var fieldsToExportDecoded0:[ComputeOptimizerClientTypes.ExportableVolumeField]? = nil
        if let fieldsToExportContainer = fieldsToExportContainer {
            fieldsToExportDecoded0 = [ComputeOptimizerClientTypes.ExportableVolumeField]()
            for string0 in fieldsToExportContainer {
                if let string0 = string0 {
                    fieldsToExportDecoded0?.append(string0)
                }
            }
        }
        fieldsToExport = fieldsToExportDecoded0
        let s3DestinationConfigDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3DestinationConfig.self, forKey: .s3DestinationConfig)
        s3DestinationConfig = s3DestinationConfigDecoded
        let fileFormatDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.FileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let includeMemberAccountsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .includeMemberAccounts)
        includeMemberAccounts = includeMemberAccountsDecoded
    }
}

extension ExportEBSVolumeRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExportEBSVolumeRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ExportEBSVolumeRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExportEBSVolumeRecommendationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportEBSVolumeRecommendationsOutputResponse(jobId: \(Swift.String(describing: jobId)), s3Destination: \(Swift.String(describing: s3Destination)))"}
}

extension ExportEBSVolumeRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ExportEBSVolumeRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.s3Destination = output.s3Destination
        } else {
            self.jobId = nil
            self.s3Destination = nil
        }
    }
}

public struct ExportEBSVolumeRecommendationsOutputResponse: Swift.Equatable {
    /// <p>The identification number of the export job.</p>
    ///         <p>Use the <code>DescribeRecommendationExportJobs</code> action, and specify the job ID
    ///             to view the status of an export job.</p>
    public let jobId: Swift.String?
    /// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a
    ///             recommendations export file, and its associated metadata file.</p>
    public let s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init (
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

struct ExportEBSVolumeRecommendationsOutputResponseBody: Swift.Equatable {
    public let jobId: Swift.String?
    public let s3Destination: ComputeOptimizerClientTypes.S3Destination?
}

extension ExportEBSVolumeRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case s3Destination
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let s3DestinationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3Destination.self, forKey: .s3Destination)
        s3Destination = s3DestinationDecoded
    }
}

public struct ExportEC2InstanceRecommendationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportEC2InstanceRecommendationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportEC2InstanceRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportEC2InstanceRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportEC2InstanceRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportEC2InstanceRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportEC2InstanceRecommendationsOutputError>
}

extension ExportEC2InstanceRecommendationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportEC2InstanceRecommendationsInput(accountIds: \(Swift.String(describing: accountIds)), fieldsToExport: \(Swift.String(describing: fieldsToExport)), fileFormat: \(Swift.String(describing: fileFormat)), filters: \(Swift.String(describing: filters)), includeMemberAccounts: \(Swift.String(describing: includeMemberAccounts)), s3DestinationConfig: \(Swift.String(describing: s3DestinationConfig)))"}
}

extension ExportEC2InstanceRecommendationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountids0 in accountIds {
                try accountIdsContainer.encode(accountids0)
            }
        }
        if let fieldsToExport = fieldsToExport {
            var fieldsToExportContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldsToExport)
            for exportableinstancefields0 in fieldsToExport {
                try fieldsToExportContainer.encode(exportableinstancefields0.rawValue)
            }
        }
        if let fileFormat = fileFormat {
            try encodeContainer.encode(fileFormat.rawValue, forKey: .fileFormat)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filters0 in filters {
                try filtersContainer.encode(filters0)
            }
        }
        if includeMemberAccounts != false {
            try encodeContainer.encode(includeMemberAccounts, forKey: .includeMemberAccounts)
        }
        if let s3DestinationConfig = s3DestinationConfig {
            try encodeContainer.encode(s3DestinationConfig, forKey: .s3DestinationConfig)
        }
    }
}

public struct ExportEC2InstanceRecommendationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportEC2InstanceRecommendationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportEC2InstanceRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportEC2InstanceRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportEC2InstanceRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportEC2InstanceRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportEC2InstanceRecommendationsOutputError>
}

public struct ExportEC2InstanceRecommendationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportEC2InstanceRecommendationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportEC2InstanceRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportEC2InstanceRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportEC2InstanceRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportEC2InstanceRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportEC2InstanceRecommendationsOutputError>
}

public struct ExportEC2InstanceRecommendationsInput: Swift.Equatable {
    /// <p>The IDs of the AWS accounts for which to export instance
    ///             recommendations.</p>
    ///
    ///
    ///
    ///         <p>If your account is the management account of an organization, use this parameter to
    ///             specify the member account for which you want to export recommendations.</p>
    ///         <p>This parameter cannot be specified together with the include member accounts
    ///             parameter. The parameters are mutually exclusive.</p>
    ///         <p>Recommendations for member accounts are not included in the export if this parameter,
    ///             or the include member accounts parameter, is omitted.</p>
    ///         <p>You can specify multiple account IDs per request.</p>
    public let accountIds: [Swift.String]?
    /// <p>The recommendations data to include in the export file. For more information about the
    ///             fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User Guide</i>.</p>
    public let fieldsToExport: [ComputeOptimizerClientTypes.ExportableInstanceField]?
    /// <p>The format of the export file.</p>
    ///         <p>The only export file format currently supported is <code>Csv</code>.</p>
    public let fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// <p>An array of objects that describe a filter to export a more specific set of instance
    ///             recommendations.</p>
    public let filters: [ComputeOptimizerClientTypes.Filter]?
    /// <p>Indicates whether to include recommendations for resources in all member accounts of
    ///             the organization if your account is the management account of an organization.</p>
    ///
    ///         <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
    ///             Compute Optimizer must be enabled in the organization account. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and
    ///                 AWS Organizations trusted access</a> in the <i>AWS Compute Optimizer User
    ///                 Guide</i>.</p>
    ///
    ///
    ///
    ///         <p>Recommendations for member accounts of the organization are not included in the export
    ///             file if this parameter is omitted.</p>
    ///         <p>Recommendations for member accounts are not included in the export if this parameter,
    ///             or the account IDs parameter, is omitted.</p>
    public let includeMemberAccounts: Swift.Bool
    /// <p>An object to specify the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for
    ///             the export job.</p>
    ///         <p>You must create the destination Amazon S3 bucket for your recommendations export before you
    ///             create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the
    ///             S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the
    ///             export file to it. If you plan to specify an object prefix when you create the export
    ///             job, you must include the object prefix in the policy that you add to the S3 bucket. For
    ///             more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the <i>Compute Optimizer user
    ///             guide</i>.</p>
    public let s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init (
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableInstanceField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.Filter]? = nil,
        includeMemberAccounts: Swift.Bool = false,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.s3DestinationConfig = s3DestinationConfig
    }
}

struct ExportEC2InstanceRecommendationsInputBody: Swift.Equatable {
    public let accountIds: [Swift.String]?
    public let filters: [ComputeOptimizerClientTypes.Filter]?
    public let fieldsToExport: [ComputeOptimizerClientTypes.ExportableInstanceField]?
    public let s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?
    public let fileFormat: ComputeOptimizerClientTypes.FileFormat?
    public let includeMemberAccounts: Swift.Bool
}

extension ExportEC2InstanceRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let fieldsToExportContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ExportableInstanceField?].self, forKey: .fieldsToExport)
        var fieldsToExportDecoded0:[ComputeOptimizerClientTypes.ExportableInstanceField]? = nil
        if let fieldsToExportContainer = fieldsToExportContainer {
            fieldsToExportDecoded0 = [ComputeOptimizerClientTypes.ExportableInstanceField]()
            for string0 in fieldsToExportContainer {
                if let string0 = string0 {
                    fieldsToExportDecoded0?.append(string0)
                }
            }
        }
        fieldsToExport = fieldsToExportDecoded0
        let s3DestinationConfigDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3DestinationConfig.self, forKey: .s3DestinationConfig)
        s3DestinationConfig = s3DestinationConfigDecoded
        let fileFormatDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.FileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let includeMemberAccountsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .includeMemberAccounts)
        includeMemberAccounts = includeMemberAccountsDecoded
    }
}

extension ExportEC2InstanceRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExportEC2InstanceRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ExportEC2InstanceRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExportEC2InstanceRecommendationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportEC2InstanceRecommendationsOutputResponse(jobId: \(Swift.String(describing: jobId)), s3Destination: \(Swift.String(describing: s3Destination)))"}
}

extension ExportEC2InstanceRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ExportEC2InstanceRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.s3Destination = output.s3Destination
        } else {
            self.jobId = nil
            self.s3Destination = nil
        }
    }
}

public struct ExportEC2InstanceRecommendationsOutputResponse: Swift.Equatable {
    /// <p>The identification number of the export job.</p>
    ///         <p>Use the <code>DescribeRecommendationExportJobs</code> action, and specify the job ID
    ///             to view the status of an export job.</p>
    public let jobId: Swift.String?
    /// <p>An object that describes the destination Amazon S3 bucket of a recommendations export
    ///             file.</p>
    public let s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init (
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

struct ExportEC2InstanceRecommendationsOutputResponseBody: Swift.Equatable {
    public let jobId: Swift.String?
    public let s3Destination: ComputeOptimizerClientTypes.S3Destination?
}

extension ExportEC2InstanceRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case s3Destination
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let s3DestinationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3Destination.self, forKey: .s3Destination)
        s3Destination = s3DestinationDecoded
    }
}

public struct ExportLambdaFunctionRecommendationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportLambdaFunctionRecommendationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportLambdaFunctionRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportLambdaFunctionRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportLambdaFunctionRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportLambdaFunctionRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportLambdaFunctionRecommendationsOutputError>
}

extension ExportLambdaFunctionRecommendationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportLambdaFunctionRecommendationsInput(accountIds: \(Swift.String(describing: accountIds)), fieldsToExport: \(Swift.String(describing: fieldsToExport)), fileFormat: \(Swift.String(describing: fileFormat)), filters: \(Swift.String(describing: filters)), includeMemberAccounts: \(Swift.String(describing: includeMemberAccounts)), s3DestinationConfig: \(Swift.String(describing: s3DestinationConfig)))"}
}

extension ExportLambdaFunctionRecommendationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountids0 in accountIds {
                try accountIdsContainer.encode(accountids0)
            }
        }
        if let fieldsToExport = fieldsToExport {
            var fieldsToExportContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldsToExport)
            for exportablelambdafunctionfields0 in fieldsToExport {
                try fieldsToExportContainer.encode(exportablelambdafunctionfields0.rawValue)
            }
        }
        if let fileFormat = fileFormat {
            try encodeContainer.encode(fileFormat.rawValue, forKey: .fileFormat)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for lambdafunctionrecommendationfilters0 in filters {
                try filtersContainer.encode(lambdafunctionrecommendationfilters0)
            }
        }
        if includeMemberAccounts != false {
            try encodeContainer.encode(includeMemberAccounts, forKey: .includeMemberAccounts)
        }
        if let s3DestinationConfig = s3DestinationConfig {
            try encodeContainer.encode(s3DestinationConfig, forKey: .s3DestinationConfig)
        }
    }
}

public struct ExportLambdaFunctionRecommendationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportLambdaFunctionRecommendationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportLambdaFunctionRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportLambdaFunctionRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportLambdaFunctionRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportLambdaFunctionRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportLambdaFunctionRecommendationsOutputError>
}

public struct ExportLambdaFunctionRecommendationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "ExportLambdaFunctionRecommendationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<ExportLambdaFunctionRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<ExportLambdaFunctionRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<ExportLambdaFunctionRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<ExportLambdaFunctionRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<ExportLambdaFunctionRecommendationsOutputError>
}

public struct ExportLambdaFunctionRecommendationsInput: Swift.Equatable {
    /// <p>The IDs of the AWS accounts for which to export Lambda function
    ///             recommendations.</p>
    ///
    ///
    ///
    ///         <p>If your account is the management account of an organization, use this parameter to
    ///             specify the member account for which you want to export recommendations.</p>
    ///         <p>This parameter cannot be specified together with the include member accounts
    ///             parameter. The parameters are mutually exclusive.</p>
    ///         <p>Recommendations for member accounts are not included in the export if this parameter,
    ///             or the include member accounts parameter, is omitted.</p>
    ///         <p>You can specify multiple account IDs per request.</p>
    public let accountIds: [Swift.String]?
    /// <p>The recommendations data to include in the export file. For more information about the
    ///             fields that can be exported, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/exporting-recommendations.html#exported-files">Exported files</a> in the <i>Compute Optimizer User Guide</i>.</p>
    public let fieldsToExport: [ComputeOptimizerClientTypes.ExportableLambdaFunctionField]?
    /// <p>The format of the export file.</p>
    ///         <p>The only export file format currently supported is <code>Csv</code>.</p>
    public let fileFormat: ComputeOptimizerClientTypes.FileFormat?
    /// <p>An array of objects that describe a filter to export a more specific set of Lambda
    ///             function recommendations.</p>
    public let filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]?
    /// <p>Indicates whether to include recommendations for resources in all member accounts of
    ///             the organization if your account is the management account of an organization.</p>
    ///
    ///         <p>The member accounts must also be opted in to Compute Optimizer, and trusted access for
    ///             Compute Optimizer must be enabled in the organization account. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/security-iam.html#trusted-service-access">Compute Optimizer and
    ///                 AWS Organizations trusted access</a> in the <i>AWS Compute Optimizer User
    ///                 Guide</i>.</p>
    ///
    ///
    ///
    ///         <p>Recommendations for member accounts of the organization are not included in the export
    ///             file if this parameter is omitted.</p>
    ///         <p>This parameter cannot be specified together with the account IDs parameter. The
    ///             parameters are mutually exclusive.</p>
    ///         <p>Recommendations for member accounts are not included in the export if this parameter,
    ///             or the account IDs parameter, is omitted.</p>
    public let includeMemberAccounts: Swift.Bool
    /// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a
    ///             recommendations export job.</p>
    ///         <p>You must create the destination Amazon S3 bucket for your recommendations export before you
    ///             create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the
    ///             S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the
    ///             export file to it. If you plan to specify an object prefix when you create the export
    ///             job, you must include the object prefix in the policy that you add to the S3 bucket. For
    ///             more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the <i>Compute Optimizer user
    ///             guide</i>.</p>
    public let s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?

    public init (
        accountIds: [Swift.String]? = nil,
        fieldsToExport: [ComputeOptimizerClientTypes.ExportableLambdaFunctionField]? = nil,
        fileFormat: ComputeOptimizerClientTypes.FileFormat? = nil,
        filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]? = nil,
        includeMemberAccounts: Swift.Bool = false,
        s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig? = nil
    )
    {
        self.accountIds = accountIds
        self.fieldsToExport = fieldsToExport
        self.fileFormat = fileFormat
        self.filters = filters
        self.includeMemberAccounts = includeMemberAccounts
        self.s3DestinationConfig = s3DestinationConfig
    }
}

struct ExportLambdaFunctionRecommendationsInputBody: Swift.Equatable {
    public let accountIds: [Swift.String]?
    public let filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]?
    public let fieldsToExport: [ComputeOptimizerClientTypes.ExportableLambdaFunctionField]?
    public let s3DestinationConfig: ComputeOptimizerClientTypes.S3DestinationConfig?
    public let fileFormat: ComputeOptimizerClientTypes.FileFormat?
    public let includeMemberAccounts: Swift.Bool
}

extension ExportLambdaFunctionRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let fieldsToExportContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ExportableLambdaFunctionField?].self, forKey: .fieldsToExport)
        var fieldsToExportDecoded0:[ComputeOptimizerClientTypes.ExportableLambdaFunctionField]? = nil
        if let fieldsToExportContainer = fieldsToExportContainer {
            fieldsToExportDecoded0 = [ComputeOptimizerClientTypes.ExportableLambdaFunctionField]()
            for string0 in fieldsToExportContainer {
                if let string0 = string0 {
                    fieldsToExportDecoded0?.append(string0)
                }
            }
        }
        fieldsToExport = fieldsToExportDecoded0
        let s3DestinationConfigDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3DestinationConfig.self, forKey: .s3DestinationConfig)
        s3DestinationConfig = s3DestinationConfigDecoded
        let fileFormatDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.FileFormat.self, forKey: .fileFormat)
        fileFormat = fileFormatDecoded
        let includeMemberAccountsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .includeMemberAccounts)
        includeMemberAccounts = includeMemberAccountsDecoded
    }
}

extension ExportLambdaFunctionRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension ExportLambdaFunctionRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum ExportLambdaFunctionRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension ExportLambdaFunctionRecommendationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ExportLambdaFunctionRecommendationsOutputResponse(jobId: \(Swift.String(describing: jobId)), s3Destination: \(Swift.String(describing: s3Destination)))"}
}

extension ExportLambdaFunctionRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ExportLambdaFunctionRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.jobId = output.jobId
            self.s3Destination = output.s3Destination
        } else {
            self.jobId = nil
            self.s3Destination = nil
        }
    }
}

public struct ExportLambdaFunctionRecommendationsOutputResponse: Swift.Equatable {
    /// <p>The identification number of the export job.</p>
    ///         <p>Use the <code>DescribeRecommendationExportJobs</code> action, and specify the job ID
    ///             to view the status of an export job.</p>
    public let jobId: Swift.String?
    /// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a
    ///             recommendations export file, and its associated metadata file.</p>
    public let s3Destination: ComputeOptimizerClientTypes.S3Destination?

    public init (
        jobId: Swift.String? = nil,
        s3Destination: ComputeOptimizerClientTypes.S3Destination? = nil
    )
    {
        self.jobId = jobId
        self.s3Destination = s3Destination
    }
}

struct ExportLambdaFunctionRecommendationsOutputResponseBody: Swift.Equatable {
    public let jobId: Swift.String?
    public let s3Destination: ComputeOptimizerClientTypes.S3Destination?
}

extension ExportLambdaFunctionRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case jobId
        case s3Destination
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let s3DestinationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.S3Destination.self, forKey: .s3Destination)
        s3Destination = s3DestinationDecoded
    }
}

extension ComputeOptimizerClientTypes {
    public enum ExportableAutoScalingGroupField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountId
        case autoScalingGroupArn
        case autoScalingGroupName
        case currentConfigurationDesiredCapacity
        case currentConfigurationInstanceType
        case currentConfigurationMaxSize
        case currentConfigurationMinSize
        case currentMemory
        case currentNetwork
        case currentOnDemandPrice
        case currentStandardOneYearNoUpfrontReservedPrice
        case currentStandardThreeYearNoUpfrontReservedPrice
        case currentStorage
        case currentVcpus
        case finding
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case recommendationOptionsConfigurationDesiredCapacity
        case recommendationOptionsConfigurationInstanceType
        case recommendationOptionsConfigurationMaxSize
        case recommendationOptionsConfigurationMinSize
        case recommendationOptionsMemory
        case recommendationOptionsNetwork
        case recommendationOptionsOnDemandPrice
        case recommendationOptionsPerformanceRisk
        case recommendationOptionsProjectedUtilizationMetricsCpuMaximum
        case recommendationOptionsProjectedUtilizationMetricsMemoryMaximum
        case recommendationOptionsStandardOneYearNoUpfrontReservedPrice
        case recommendationOptionsStandardThreeYearNoUpfrontReservedPrice
        case recommendationOptionsStorage
        case recommendationOptionsVcpus
        case utilizationMetricsCpuMaximum
        case utilizationMetricsDiskReadBytesPerSecondMaximum
        case utilizationMetricsDiskReadOpsPerSecondMaximum
        case utilizationMetricsDiskWriteBytesPerSecondMaximum
        case utilizationMetricsDiskWriteOpsPerSecondMaximum
        case utilizationMetricsEbsReadBytesPerSecondMaximum
        case utilizationMetricsEbsReadOpsPerSecondMaximum
        case utilizationMetricsEbsWriteBytesPerSecondMaximum
        case utilizationMetricsEbsWriteOpsPerSecondMaximum
        case utilizationMetricsMemoryMaximum
        case utilizationMetricsNetworkInBytesPerSecondMaximum
        case utilizationMetricsNetworkOutBytesPerSecondMaximum
        case utilizationMetricsNetworkPacketsInPerSecondMaximum
        case utilizationMetricsNetworkPacketsOutPerSecondMaximum
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableAutoScalingGroupField] {
            return [
                .accountId,
                .autoScalingGroupArn,
                .autoScalingGroupName,
                .currentConfigurationDesiredCapacity,
                .currentConfigurationInstanceType,
                .currentConfigurationMaxSize,
                .currentConfigurationMinSize,
                .currentMemory,
                .currentNetwork,
                .currentOnDemandPrice,
                .currentStandardOneYearNoUpfrontReservedPrice,
                .currentStandardThreeYearNoUpfrontReservedPrice,
                .currentStorage,
                .currentVcpus,
                .finding,
                .lastRefreshTimestamp,
                .lookbackPeriodInDays,
                .recommendationOptionsConfigurationDesiredCapacity,
                .recommendationOptionsConfigurationInstanceType,
                .recommendationOptionsConfigurationMaxSize,
                .recommendationOptionsConfigurationMinSize,
                .recommendationOptionsMemory,
                .recommendationOptionsNetwork,
                .recommendationOptionsOnDemandPrice,
                .recommendationOptionsPerformanceRisk,
                .recommendationOptionsProjectedUtilizationMetricsCpuMaximum,
                .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum,
                .recommendationOptionsStandardOneYearNoUpfrontReservedPrice,
                .recommendationOptionsStandardThreeYearNoUpfrontReservedPrice,
                .recommendationOptionsStorage,
                .recommendationOptionsVcpus,
                .utilizationMetricsCpuMaximum,
                .utilizationMetricsDiskReadBytesPerSecondMaximum,
                .utilizationMetricsDiskReadOpsPerSecondMaximum,
                .utilizationMetricsDiskWriteBytesPerSecondMaximum,
                .utilizationMetricsDiskWriteOpsPerSecondMaximum,
                .utilizationMetricsEbsReadBytesPerSecondMaximum,
                .utilizationMetricsEbsReadOpsPerSecondMaximum,
                .utilizationMetricsEbsWriteBytesPerSecondMaximum,
                .utilizationMetricsEbsWriteOpsPerSecondMaximum,
                .utilizationMetricsMemoryMaximum,
                .utilizationMetricsNetworkInBytesPerSecondMaximum,
                .utilizationMetricsNetworkOutBytesPerSecondMaximum,
                .utilizationMetricsNetworkPacketsInPerSecondMaximum,
                .utilizationMetricsNetworkPacketsOutPerSecondMaximum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .autoScalingGroupArn: return "AutoScalingGroupArn"
            case .autoScalingGroupName: return "AutoScalingGroupName"
            case .currentConfigurationDesiredCapacity: return "CurrentConfigurationDesiredCapacity"
            case .currentConfigurationInstanceType: return "CurrentConfigurationInstanceType"
            case .currentConfigurationMaxSize: return "CurrentConfigurationMaxSize"
            case .currentConfigurationMinSize: return "CurrentConfigurationMinSize"
            case .currentMemory: return "CurrentMemory"
            case .currentNetwork: return "CurrentNetwork"
            case .currentOnDemandPrice: return "CurrentOnDemandPrice"
            case .currentStandardOneYearNoUpfrontReservedPrice: return "CurrentStandardOneYearNoUpfrontReservedPrice"
            case .currentStandardThreeYearNoUpfrontReservedPrice: return "CurrentStandardThreeYearNoUpfrontReservedPrice"
            case .currentStorage: return "CurrentStorage"
            case .currentVcpus: return "CurrentVCpus"
            case .finding: return "Finding"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .recommendationOptionsConfigurationDesiredCapacity: return "RecommendationOptionsConfigurationDesiredCapacity"
            case .recommendationOptionsConfigurationInstanceType: return "RecommendationOptionsConfigurationInstanceType"
            case .recommendationOptionsConfigurationMaxSize: return "RecommendationOptionsConfigurationMaxSize"
            case .recommendationOptionsConfigurationMinSize: return "RecommendationOptionsConfigurationMinSize"
            case .recommendationOptionsMemory: return "RecommendationOptionsMemory"
            case .recommendationOptionsNetwork: return "RecommendationOptionsNetwork"
            case .recommendationOptionsOnDemandPrice: return "RecommendationOptionsOnDemandPrice"
            case .recommendationOptionsPerformanceRisk: return "RecommendationOptionsPerformanceRisk"
            case .recommendationOptionsProjectedUtilizationMetricsCpuMaximum: return "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum"
            case .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum: return "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum"
            case .recommendationOptionsStandardOneYearNoUpfrontReservedPrice: return "RecommendationOptionsStandardOneYearNoUpfrontReservedPrice"
            case .recommendationOptionsStandardThreeYearNoUpfrontReservedPrice: return "RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice"
            case .recommendationOptionsStorage: return "RecommendationOptionsStorage"
            case .recommendationOptionsVcpus: return "RecommendationOptionsVcpus"
            case .utilizationMetricsCpuMaximum: return "UtilizationMetricsCpuMaximum"
            case .utilizationMetricsDiskReadBytesPerSecondMaximum: return "UtilizationMetricsDiskReadBytesPerSecondMaximum"
            case .utilizationMetricsDiskReadOpsPerSecondMaximum: return "UtilizationMetricsDiskReadOpsPerSecondMaximum"
            case .utilizationMetricsDiskWriteBytesPerSecondMaximum: return "UtilizationMetricsDiskWriteBytesPerSecondMaximum"
            case .utilizationMetricsDiskWriteOpsPerSecondMaximum: return "UtilizationMetricsDiskWriteOpsPerSecondMaximum"
            case .utilizationMetricsEbsReadBytesPerSecondMaximum: return "UtilizationMetricsEbsReadBytesPerSecondMaximum"
            case .utilizationMetricsEbsReadOpsPerSecondMaximum: return "UtilizationMetricsEbsReadOpsPerSecondMaximum"
            case .utilizationMetricsEbsWriteBytesPerSecondMaximum: return "UtilizationMetricsEbsWriteBytesPerSecondMaximum"
            case .utilizationMetricsEbsWriteOpsPerSecondMaximum: return "UtilizationMetricsEbsWriteOpsPerSecondMaximum"
            case .utilizationMetricsMemoryMaximum: return "UtilizationMetricsMemoryMaximum"
            case .utilizationMetricsNetworkInBytesPerSecondMaximum: return "UtilizationMetricsNetworkInBytesPerSecondMaximum"
            case .utilizationMetricsNetworkOutBytesPerSecondMaximum: return "UtilizationMetricsNetworkOutBytesPerSecondMaximum"
            case .utilizationMetricsNetworkPacketsInPerSecondMaximum: return "UtilizationMetricsNetworkPacketsInPerSecondMaximum"
            case .utilizationMetricsNetworkPacketsOutPerSecondMaximum: return "UtilizationMetricsNetworkPacketsOutPerSecondMaximum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportableAutoScalingGroupField(rawValue: rawValue) ?? ExportableAutoScalingGroupField.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum ExportableInstanceField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountId
        case currentInstanceType
        case currentMemory
        case currentNetwork
        case currentOnDemandPrice
        case currentStandardOneYearNoUpfrontReservedPrice
        case currentStandardThreeYearNoUpfrontReservedPrice
        case currentStorage
        case currentVcpus
        case finding
        case findingReasonCodes
        case instanceArn
        case instanceName
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case recommendationsSourcesRecommendationSourceArn
        case recommendationsSourcesRecommendationSourceType
        case recommendationOptionsInstanceType
        case recommendationOptionsMemory
        case recommendationOptionsNetwork
        case recommendationOptionsOnDemandPrice
        case recommendationOptionsPerformanceRisk
        case recommendationOptionsPlatformDifferences
        case recommendationOptionsProjectedUtilizationMetricsCpuMaximum
        case recommendationOptionsProjectedUtilizationMetricsMemoryMaximum
        case recommendationOptionsStandardOneYearNoUpfrontReservedPrice
        case recommendationOptionsStandardThreeYearNoUpfrontReservedPrice
        case recommendationOptionsStorage
        case recommendationOptionsVcpus
        case utilizationMetricsCpuMaximum
        case utilizationMetricsDiskReadBytesPerSecondMaximum
        case utilizationMetricsDiskReadOpsPerSecondMaximum
        case utilizationMetricsDiskWriteBytesPerSecondMaximum
        case utilizationMetricsDiskWriteOpsPerSecondMaximum
        case utilizationMetricsEbsReadBytesPerSecondMaximum
        case utilizationMetricsEbsReadOpsPerSecondMaximum
        case utilizationMetricsEbsWriteBytesPerSecondMaximum
        case utilizationMetricsEbsWriteOpsPerSecondMaximum
        case utilizationMetricsMemoryMaximum
        case utilizationMetricsNetworkInBytesPerSecondMaximum
        case utilizationMetricsNetworkOutBytesPerSecondMaximum
        case utilizationMetricsNetworkPacketsInPerSecondMaximum
        case utilizationMetricsNetworkPacketsOutPerSecondMaximum
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableInstanceField] {
            return [
                .accountId,
                .currentInstanceType,
                .currentMemory,
                .currentNetwork,
                .currentOnDemandPrice,
                .currentStandardOneYearNoUpfrontReservedPrice,
                .currentStandardThreeYearNoUpfrontReservedPrice,
                .currentStorage,
                .currentVcpus,
                .finding,
                .findingReasonCodes,
                .instanceArn,
                .instanceName,
                .lastRefreshTimestamp,
                .lookbackPeriodInDays,
                .recommendationsSourcesRecommendationSourceArn,
                .recommendationsSourcesRecommendationSourceType,
                .recommendationOptionsInstanceType,
                .recommendationOptionsMemory,
                .recommendationOptionsNetwork,
                .recommendationOptionsOnDemandPrice,
                .recommendationOptionsPerformanceRisk,
                .recommendationOptionsPlatformDifferences,
                .recommendationOptionsProjectedUtilizationMetricsCpuMaximum,
                .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum,
                .recommendationOptionsStandardOneYearNoUpfrontReservedPrice,
                .recommendationOptionsStandardThreeYearNoUpfrontReservedPrice,
                .recommendationOptionsStorage,
                .recommendationOptionsVcpus,
                .utilizationMetricsCpuMaximum,
                .utilizationMetricsDiskReadBytesPerSecondMaximum,
                .utilizationMetricsDiskReadOpsPerSecondMaximum,
                .utilizationMetricsDiskWriteBytesPerSecondMaximum,
                .utilizationMetricsDiskWriteOpsPerSecondMaximum,
                .utilizationMetricsEbsReadBytesPerSecondMaximum,
                .utilizationMetricsEbsReadOpsPerSecondMaximum,
                .utilizationMetricsEbsWriteBytesPerSecondMaximum,
                .utilizationMetricsEbsWriteOpsPerSecondMaximum,
                .utilizationMetricsMemoryMaximum,
                .utilizationMetricsNetworkInBytesPerSecondMaximum,
                .utilizationMetricsNetworkOutBytesPerSecondMaximum,
                .utilizationMetricsNetworkPacketsInPerSecondMaximum,
                .utilizationMetricsNetworkPacketsOutPerSecondMaximum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .currentInstanceType: return "CurrentInstanceType"
            case .currentMemory: return "CurrentMemory"
            case .currentNetwork: return "CurrentNetwork"
            case .currentOnDemandPrice: return "CurrentOnDemandPrice"
            case .currentStandardOneYearNoUpfrontReservedPrice: return "CurrentStandardOneYearNoUpfrontReservedPrice"
            case .currentStandardThreeYearNoUpfrontReservedPrice: return "CurrentStandardThreeYearNoUpfrontReservedPrice"
            case .currentStorage: return "CurrentStorage"
            case .currentVcpus: return "CurrentVCpus"
            case .finding: return "Finding"
            case .findingReasonCodes: return "FindingReasonCodes"
            case .instanceArn: return "InstanceArn"
            case .instanceName: return "InstanceName"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .recommendationsSourcesRecommendationSourceArn: return "RecommendationsSourcesRecommendationSourceArn"
            case .recommendationsSourcesRecommendationSourceType: return "RecommendationsSourcesRecommendationSourceType"
            case .recommendationOptionsInstanceType: return "RecommendationOptionsInstanceType"
            case .recommendationOptionsMemory: return "RecommendationOptionsMemory"
            case .recommendationOptionsNetwork: return "RecommendationOptionsNetwork"
            case .recommendationOptionsOnDemandPrice: return "RecommendationOptionsOnDemandPrice"
            case .recommendationOptionsPerformanceRisk: return "RecommendationOptionsPerformanceRisk"
            case .recommendationOptionsPlatformDifferences: return "RecommendationOptionsPlatformDifferences"
            case .recommendationOptionsProjectedUtilizationMetricsCpuMaximum: return "RecommendationOptionsProjectedUtilizationMetricsCpuMaximum"
            case .recommendationOptionsProjectedUtilizationMetricsMemoryMaximum: return "RecommendationOptionsProjectedUtilizationMetricsMemoryMaximum"
            case .recommendationOptionsStandardOneYearNoUpfrontReservedPrice: return "RecommendationOptionsStandardOneYearNoUpfrontReservedPrice"
            case .recommendationOptionsStandardThreeYearNoUpfrontReservedPrice: return "RecommendationOptionsStandardThreeYearNoUpfrontReservedPrice"
            case .recommendationOptionsStorage: return "RecommendationOptionsStorage"
            case .recommendationOptionsVcpus: return "RecommendationOptionsVcpus"
            case .utilizationMetricsCpuMaximum: return "UtilizationMetricsCpuMaximum"
            case .utilizationMetricsDiskReadBytesPerSecondMaximum: return "UtilizationMetricsDiskReadBytesPerSecondMaximum"
            case .utilizationMetricsDiskReadOpsPerSecondMaximum: return "UtilizationMetricsDiskReadOpsPerSecondMaximum"
            case .utilizationMetricsDiskWriteBytesPerSecondMaximum: return "UtilizationMetricsDiskWriteBytesPerSecondMaximum"
            case .utilizationMetricsDiskWriteOpsPerSecondMaximum: return "UtilizationMetricsDiskWriteOpsPerSecondMaximum"
            case .utilizationMetricsEbsReadBytesPerSecondMaximum: return "UtilizationMetricsEbsReadBytesPerSecondMaximum"
            case .utilizationMetricsEbsReadOpsPerSecondMaximum: return "UtilizationMetricsEbsReadOpsPerSecondMaximum"
            case .utilizationMetricsEbsWriteBytesPerSecondMaximum: return "UtilizationMetricsEbsWriteBytesPerSecondMaximum"
            case .utilizationMetricsEbsWriteOpsPerSecondMaximum: return "UtilizationMetricsEbsWriteOpsPerSecondMaximum"
            case .utilizationMetricsMemoryMaximum: return "UtilizationMetricsMemoryMaximum"
            case .utilizationMetricsNetworkInBytesPerSecondMaximum: return "UtilizationMetricsNetworkInBytesPerSecondMaximum"
            case .utilizationMetricsNetworkOutBytesPerSecondMaximum: return "UtilizationMetricsNetworkOutBytesPerSecondMaximum"
            case .utilizationMetricsNetworkPacketsInPerSecondMaximum: return "UtilizationMetricsNetworkPacketsInPerSecondMaximum"
            case .utilizationMetricsNetworkPacketsOutPerSecondMaximum: return "UtilizationMetricsNetworkPacketsOutPerSecondMaximum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportableInstanceField(rawValue: rawValue) ?? ExportableInstanceField.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum ExportableLambdaFunctionField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountId
        case currentConfigurationMemorySize
        case currentConfigurationTimeout
        case currentCostAverage
        case currentCostTotal
        case finding
        case findingReasonCodes
        case functionArn
        case functionVersion
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case numberOfInvocations
        case recommendationOptionsConfigurationMemorySize
        case recommendationOptionsCostHigh
        case recommendationOptionsCostLow
        case recommendationOptionsProjectedUtilizationMetricsDurationExpected
        case recommendationOptionsProjectedUtilizationMetricsDurationLowerBound
        case recommendationOptionsProjectedUtilizationMetricsDurationUpperBound
        case utilizationMetricsDurationAverage
        case utilizationMetricsDurationMaximum
        case utilizationMetricsMemoryAverage
        case utilizationMetricsMemoryMaximum
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableLambdaFunctionField] {
            return [
                .accountId,
                .currentConfigurationMemorySize,
                .currentConfigurationTimeout,
                .currentCostAverage,
                .currentCostTotal,
                .finding,
                .findingReasonCodes,
                .functionArn,
                .functionVersion,
                .lastRefreshTimestamp,
                .lookbackPeriodInDays,
                .numberOfInvocations,
                .recommendationOptionsConfigurationMemorySize,
                .recommendationOptionsCostHigh,
                .recommendationOptionsCostLow,
                .recommendationOptionsProjectedUtilizationMetricsDurationExpected,
                .recommendationOptionsProjectedUtilizationMetricsDurationLowerBound,
                .recommendationOptionsProjectedUtilizationMetricsDurationUpperBound,
                .utilizationMetricsDurationAverage,
                .utilizationMetricsDurationMaximum,
                .utilizationMetricsMemoryAverage,
                .utilizationMetricsMemoryMaximum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .currentConfigurationMemorySize: return "CurrentConfigurationMemorySize"
            case .currentConfigurationTimeout: return "CurrentConfigurationTimeout"
            case .currentCostAverage: return "CurrentCostAverage"
            case .currentCostTotal: return "CurrentCostTotal"
            case .finding: return "Finding"
            case .findingReasonCodes: return "FindingReasonCodes"
            case .functionArn: return "FunctionArn"
            case .functionVersion: return "FunctionVersion"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .numberOfInvocations: return "NumberOfInvocations"
            case .recommendationOptionsConfigurationMemorySize: return "RecommendationOptionsConfigurationMemorySize"
            case .recommendationOptionsCostHigh: return "RecommendationOptionsCostHigh"
            case .recommendationOptionsCostLow: return "RecommendationOptionsCostLow"
            case .recommendationOptionsProjectedUtilizationMetricsDurationExpected: return "RecommendationOptionsProjectedUtilizationMetricsDurationExpected"
            case .recommendationOptionsProjectedUtilizationMetricsDurationLowerBound: return "RecommendationOptionsProjectedUtilizationMetricsDurationLowerBound"
            case .recommendationOptionsProjectedUtilizationMetricsDurationUpperBound: return "RecommendationOptionsProjectedUtilizationMetricsDurationUpperBound"
            case .utilizationMetricsDurationAverage: return "UtilizationMetricsDurationAverage"
            case .utilizationMetricsDurationMaximum: return "UtilizationMetricsDurationMaximum"
            case .utilizationMetricsMemoryAverage: return "UtilizationMetricsMemoryAverage"
            case .utilizationMetricsMemoryMaximum: return "UtilizationMetricsMemoryMaximum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportableLambdaFunctionField(rawValue: rawValue) ?? ExportableLambdaFunctionField.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum ExportableVolumeField: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case accountId
        case currentConfigurationVolumeBaselineIops
        case currentConfigurationVolumeBaselineThroughput
        case currentConfigurationVolumeBurstIops
        case currentConfigurationVolumeBurstThroughput
        case currentConfigurationVolumeSize
        case currentConfigurationVolumeType
        case currentMonthlyPrice
        case finding
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case recommendationOptionsConfigurationVolumeBaselineIops
        case recommendationOptionsConfigurationVolumeBaselineThroughput
        case recommendationOptionsConfigurationVolumeBurstIops
        case recommendationOptionsConfigurationVolumeBurstThroughput
        case recommendationOptionsConfigurationVolumeSize
        case recommendationOptionsConfigurationVolumeType
        case recommendationOptionsMonthlyPrice
        case recommendationOptionsPerformanceRisk
        case utilizationMetricsVolumeReadBytesPerSecondMaximum
        case utilizationMetricsVolumeReadOpsPerSecondMaximum
        case utilizationMetricsVolumeWriteBytesPerSecondMaximum
        case utilizationMetricsVolumeWriteOpsPerSecondMaximum
        case volumeArn
        case sdkUnknown(Swift.String)

        public static var allCases: [ExportableVolumeField] {
            return [
                .accountId,
                .currentConfigurationVolumeBaselineIops,
                .currentConfigurationVolumeBaselineThroughput,
                .currentConfigurationVolumeBurstIops,
                .currentConfigurationVolumeBurstThroughput,
                .currentConfigurationVolumeSize,
                .currentConfigurationVolumeType,
                .currentMonthlyPrice,
                .finding,
                .lastRefreshTimestamp,
                .lookbackPeriodInDays,
                .recommendationOptionsConfigurationVolumeBaselineIops,
                .recommendationOptionsConfigurationVolumeBaselineThroughput,
                .recommendationOptionsConfigurationVolumeBurstIops,
                .recommendationOptionsConfigurationVolumeBurstThroughput,
                .recommendationOptionsConfigurationVolumeSize,
                .recommendationOptionsConfigurationVolumeType,
                .recommendationOptionsMonthlyPrice,
                .recommendationOptionsPerformanceRisk,
                .utilizationMetricsVolumeReadBytesPerSecondMaximum,
                .utilizationMetricsVolumeReadOpsPerSecondMaximum,
                .utilizationMetricsVolumeWriteBytesPerSecondMaximum,
                .utilizationMetricsVolumeWriteOpsPerSecondMaximum,
                .volumeArn,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .accountId: return "AccountId"
            case .currentConfigurationVolumeBaselineIops: return "CurrentConfigurationVolumeBaselineIOPS"
            case .currentConfigurationVolumeBaselineThroughput: return "CurrentConfigurationVolumeBaselineThroughput"
            case .currentConfigurationVolumeBurstIops: return "CurrentConfigurationVolumeBurstIOPS"
            case .currentConfigurationVolumeBurstThroughput: return "CurrentConfigurationVolumeBurstThroughput"
            case .currentConfigurationVolumeSize: return "CurrentConfigurationVolumeSize"
            case .currentConfigurationVolumeType: return "CurrentConfigurationVolumeType"
            case .currentMonthlyPrice: return "CurrentMonthlyPrice"
            case .finding: return "Finding"
            case .lastRefreshTimestamp: return "LastRefreshTimestamp"
            case .lookbackPeriodInDays: return "LookbackPeriodInDays"
            case .recommendationOptionsConfigurationVolumeBaselineIops: return "RecommendationOptionsConfigurationVolumeBaselineIOPS"
            case .recommendationOptionsConfigurationVolumeBaselineThroughput: return "RecommendationOptionsConfigurationVolumeBaselineThroughput"
            case .recommendationOptionsConfigurationVolumeBurstIops: return "RecommendationOptionsConfigurationVolumeBurstIOPS"
            case .recommendationOptionsConfigurationVolumeBurstThroughput: return "RecommendationOptionsConfigurationVolumeBurstThroughput"
            case .recommendationOptionsConfigurationVolumeSize: return "RecommendationOptionsConfigurationVolumeSize"
            case .recommendationOptionsConfigurationVolumeType: return "RecommendationOptionsConfigurationVolumeType"
            case .recommendationOptionsMonthlyPrice: return "RecommendationOptionsMonthlyPrice"
            case .recommendationOptionsPerformanceRisk: return "RecommendationOptionsPerformanceRisk"
            case .utilizationMetricsVolumeReadBytesPerSecondMaximum: return "UtilizationMetricsVolumeReadBytesPerSecondMaximum"
            case .utilizationMetricsVolumeReadOpsPerSecondMaximum: return "UtilizationMetricsVolumeReadOpsPerSecondMaximum"
            case .utilizationMetricsVolumeWriteBytesPerSecondMaximum: return "UtilizationMetricsVolumeWriteBytesPerSecondMaximum"
            case .utilizationMetricsVolumeWriteOpsPerSecondMaximum: return "UtilizationMetricsVolumeWriteOpsPerSecondMaximum"
            case .volumeArn: return "VolumeArn"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ExportableVolumeField(rawValue: rawValue) ?? ExportableVolumeField.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum FileFormat: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case csv
        case sdkUnknown(Swift.String)

        public static var allCases: [FileFormat] {
            return [
                .csv,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .csv: return "Csv"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FileFormat(rawValue: rawValue) ?? FileFormat.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.Filter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filtervalues0 in values {
                try valuesContainer.encode(filtervalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.FilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ComputeOptimizerClientTypes.Filter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Filter(name: \(Swift.String(describing: name)), values: \(Swift.String(describing: values)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a filter that returns a more specific list of recommendations. Use this
    ///             filter with the <code>GetAutoScalingGroupRecommendations</code> and
    ///                 <code>GetEC2InstanceRecommendations</code> actions.</p>
    ///
    ///         <p>You can use <code>EBSFilter</code> with the <code>GetEBSVolumeRecommendations</code>
    ///             action, <code>LambdaFunctionRecommendationFilter</code> with the
    ///                 <code>GetLambdaFunctionRecommendations</code> action, and <code>JobFilter</code>
    ///             with the <code>DescribeRecommendationExportJobs</code> action.</p>
    public struct Filter: Swift.Equatable {
        /// <p>The name of the filter.</p>
        ///
        ///         <p>Specify <code>Finding</code> to return recommendations with a specific finding
        ///             classification (e.g., <code>Underprovisioned</code>).</p>
        ///
        ///         <p>Specify <code>RecommendationSourceType</code> to return recommendations of a specific
        ///             resource type (e.g., <code>Ec2Instance</code>).</p>
        ///
        ///         <p>Specify <code>FindingReasonCodes</code> to return recommendations with a specific
        ///             finding reason code (e.g., <code>CPUUnderprovisioned</code>).</p>
        public let name: ComputeOptimizerClientTypes.FilterName?
        /// <p>The value of the filter.</p>
        ///
        ///         <p>The valid values for this parameter are as follows, depending on what you specify for
        ///             the <code>name</code> parameter and the resource type that you wish to filter results
        ///             for:</p>
        ///
        ///         <ul>
        ///             <li>
        ///                 <p>Specify <code>Optimized</code> or <code>NotOptimized</code> if you specify the
        ///                         <code>name</code> parameter as <code>Finding</code> and you want to filter
        ///                     results for Auto Scaling groups.</p>
        ///             </li>
        ///             <li>
        ///                 <p>Specify <code>Underprovisioned</code>, <code>Overprovisioned</code>, or
        ///                         <code>Optimized</code> if you specify the <code>name</code> parameter as
        ///                         <code>Finding</code> and you want to filter results for EC2
        ///                     instances.</p>
        ///             </li>
        ///             <li>
        ///                 <p>Specify <code>Ec2Instance</code> or <code>AutoScalingGroup</code> if you
        ///                     specify the <code>name</code> parameter as
        ///                     <code>RecommendationSourceType</code>.</p>
        ///             </li>
        ///             <li>
        ///                 <p>Specify one of the following options if you specify the <code>name</code>
        ///                     parameter as <code>FindingReasonCodes</code>:</p>
        ///
        ///                 <ul>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>CPUOverprovisioned</code>
        ///                         </b> — The
        ///                             instance’s CPU configuration can be sized down while still meeting the
        ///                             performance requirements of your workload.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>CPUUnderprovisioned</code>
        ///                         </b> —
        ///                             The instance’s CPU configuration doesn't meet the performance
        ///                             requirements of your workload and there is an alternative instance type
        ///                             that provides better CPU performance.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>MemoryOverprovisioned</code>
        ///                         </b> —
        ///                             The instance’s memory configuration can be sized down while still
        ///                             meeting the performance requirements of your workload.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>MemoryUnderprovisioned</code>
        ///                         </b> —
        ///                             The instance’s memory configuration doesn't meet the performance
        ///                             requirements of your workload and there is an alternative instance type
        ///                             that provides better memory performance.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>EBSThroughputOverprovisioned</code>
        ///                         </b> — The
        ///                             instance’s EBS throughput configuration can be sized down while still
        ///                             meeting the performance requirements of your workload.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>EBSThroughputUnderprovisioned</code>
        ///                         </b> — The
        ///                             instance’s EBS throughput configuration doesn't meet the performance
        ///                             requirements of your workload and there is an alternative instance type
        ///                             that provides better EBS throughput performance.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>EBSIOPSOverprovisioned</code>
        ///                         </b> —
        ///                             The instance’s EBS IOPS configuration can be sized down while still
        ///                             meeting the performance requirements of your workload.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>EBSIOPSUnderprovisioned</code>
        ///                         </b>
        ///                             — The instance’s EBS IOPS configuration doesn't meet the performance
        ///                             requirements of your workload and there is an alternative instance type
        ///                             that provides better EBS IOPS performance.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>NetworkBandwidthOverprovisioned</code>
        ///                         </b> — The
        ///                             instance’s network bandwidth configuration can be sized down while still
        ///                             meeting the performance requirements of your workload.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>NetworkBandwidthUnderprovisioned</code>
        ///                         </b> — The
        ///                             instance’s network bandwidth configuration doesn't meet the performance
        ///                             requirements of your workload and there is an alternative instance type
        ///                             that provides better network bandwidth performance. This finding reason
        ///                             happens when the <code>NetworkIn</code> or <code>NetworkOut</code>
        ///                             performance of an instance is impacted.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>NetworkPPSOverprovisioned</code>
        ///                         </b> — The instance’s
        ///                             network PPS (packets per second) configuration can be sized down while
        ///                             still meeting the performance requirements of your workload.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>NetworkPPSUnderprovisioned</code>
        ///                         </b> — The instance’s
        ///                             network PPS (packets per second) configuration doesn't meet the
        ///                             performance requirements of your workload and there is an alternative
        ///                             instance type that provides better network PPS performance.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>DiskIOPSOverprovisioned</code>
        ///                         </b>
        ///                             — The instance’s disk IOPS configuration can be sized down while still
        ///                             meeting the performance requirements of your workload.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>DiskIOPSUnderprovisioned</code>
        ///                         </b>
        ///                             — The instance’s disk IOPS configuration doesn't meet the performance
        ///                             requirements of your workload and there is an alternative instance type
        ///                             that provides better disk IOPS performance.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>DiskThroughputOverprovisioned</code>
        ///                         </b> — The
        ///                             instance’s disk throughput configuration can be sized down while still
        ///                             meeting the performance requirements of your workload.</p>
        ///                     </li>
        ///                   <li>
        ///                         <p>
        ///                         <b>
        ///                            <code>DiskThroughputUnderprovisioned</code>
        ///                         </b> — The
        ///                             instance’s disk throughput configuration doesn't meet the performance
        ///                             requirements of your workload and there is an alternative instance type
        ///                             that provides better disk throughput performance.</p>
        ///                     </li>
        ///                </ul>
        ///             </li>
        ///          </ul>
        public let values: [Swift.String]?

        public init (
            name: ComputeOptimizerClientTypes.FilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum FilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case finding
        case findingReasonCodes
        case recommendationSourceType
        case sdkUnknown(Swift.String)

        public static var allCases: [FilterName] {
            return [
                .finding,
                .findingReasonCodes,
                .recommendationSourceType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .finding: return "Finding"
            case .findingReasonCodes: return "FindingReasonCodes"
            case .recommendationSourceType: return "RecommendationSourceType"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FilterName(rawValue: rawValue) ?? FilterName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum Finding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case notOptimized
        case optimized
        case overProvisioned
        case underProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [Finding] {
            return [
                .notOptimized,
                .optimized,
                .overProvisioned,
                .underProvisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .notOptimized: return "NotOptimized"
            case .optimized: return "Optimized"
            case .overProvisioned: return "Overprovisioned"
            case .underProvisioned: return "Underprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Finding(rawValue: rawValue) ?? Finding.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum FindingReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case memoryOverProvisioned
        case memoryUnderProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [FindingReasonCode] {
            return [
                .memoryOverProvisioned,
                .memoryUnderProvisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .memoryOverProvisioned: return "MemoryOverprovisioned"
            case .memoryUnderProvisioned: return "MemoryUnderprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = FindingReasonCode(rawValue: rawValue) ?? FindingReasonCode.sdkUnknown(rawValue)
        }
    }
}

public struct GetAutoScalingGroupRecommendationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAutoScalingGroupRecommendationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAutoScalingGroupRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAutoScalingGroupRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAutoScalingGroupRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAutoScalingGroupRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAutoScalingGroupRecommendationsOutputError>
}

extension GetAutoScalingGroupRecommendationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAutoScalingGroupRecommendationsInput(accountIds: \(Swift.String(describing: accountIds)), autoScalingGroupArns: \(Swift.String(describing: autoScalingGroupArns)), filters: \(Swift.String(describing: filters)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetAutoScalingGroupRecommendationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case autoScalingGroupArns
        case filters
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountids0 in accountIds {
                try accountIdsContainer.encode(accountids0)
            }
        }
        if let autoScalingGroupArns = autoScalingGroupArns {
            var autoScalingGroupArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .autoScalingGroupArns)
            for autoscalinggrouparns0 in autoScalingGroupArns {
                try autoScalingGroupArnsContainer.encode(autoscalinggrouparns0)
            }
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filters0 in filters {
                try filtersContainer.encode(filters0)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct GetAutoScalingGroupRecommendationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAutoScalingGroupRecommendationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAutoScalingGroupRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAutoScalingGroupRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAutoScalingGroupRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAutoScalingGroupRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAutoScalingGroupRecommendationsOutputError>
}

public struct GetAutoScalingGroupRecommendationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetAutoScalingGroupRecommendationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetAutoScalingGroupRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetAutoScalingGroupRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetAutoScalingGroupRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetAutoScalingGroupRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetAutoScalingGroupRecommendationsOutputError>
}

public struct GetAutoScalingGroupRecommendationsInput: Swift.Equatable {
    /// <p>The ID of the AWS account for which to return Auto Scaling group
    ///             recommendations.</p>
    ///
    ///
    ///
    ///         <p>If your account is the management account of an organization, use this parameter to
    ///             specify the member account for which you want to return Auto Scaling group
    ///             recommendations.</p>
    ///         <p>Only one account ID can be specified per request.</p>
    public let accountIds: [Swift.String]?
    /// <p>The Amazon Resource Name (ARN) of the Auto Scaling groups for which to return
    ///             recommendations.</p>
    public let autoScalingGroupArns: [Swift.String]?
    /// <p>An array of objects that describe a filter that returns a more specific list of Auto Scaling
    ///             group recommendations.</p>
    public let filters: [ComputeOptimizerClientTypes.Filter]?
    /// <p>The maximum number of Auto Scaling group recommendations to return with a single
    ///             request.</p>
    ///         <p>To retrieve the remaining results, make another request with the returned
    ///                 <code>NextToken</code> value.</p>
    public let maxResults: Swift.Int?
    /// <p>The token to advance to the next page of Auto Scaling group recommendations.</p>
    public let nextToken: Swift.String?

    public init (
        accountIds: [Swift.String]? = nil,
        autoScalingGroupArns: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.Filter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.autoScalingGroupArns = autoScalingGroupArns
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetAutoScalingGroupRecommendationsInputBody: Swift.Equatable {
    public let accountIds: [Swift.String]?
    public let autoScalingGroupArns: [Swift.String]?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
    public let filters: [ComputeOptimizerClientTypes.Filter]?
}

extension GetAutoScalingGroupRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case autoScalingGroupArns
        case filters
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let autoScalingGroupArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .autoScalingGroupArns)
        var autoScalingGroupArnsDecoded0:[Swift.String]? = nil
        if let autoScalingGroupArnsContainer = autoScalingGroupArnsContainer {
            autoScalingGroupArnsDecoded0 = [Swift.String]()
            for string0 in autoScalingGroupArnsContainer {
                if let string0 = string0 {
                    autoScalingGroupArnsDecoded0?.append(string0)
                }
            }
        }
        autoScalingGroupArns = autoScalingGroupArnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
    }
}

extension GetAutoScalingGroupRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetAutoScalingGroupRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetAutoScalingGroupRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetAutoScalingGroupRecommendationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetAutoScalingGroupRecommendationsOutputResponse(autoScalingGroupRecommendations: \(Swift.String(describing: autoScalingGroupRecommendations)), errors: \(Swift.String(describing: errors)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetAutoScalingGroupRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetAutoScalingGroupRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.autoScalingGroupRecommendations = output.autoScalingGroupRecommendations
            self.errors = output.errors
            self.nextToken = output.nextToken
        } else {
            self.autoScalingGroupRecommendations = nil
            self.errors = nil
            self.nextToken = nil
        }
    }
}

public struct GetAutoScalingGroupRecommendationsOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe Auto Scaling group recommendations.</p>
    public let autoScalingGroupRecommendations: [ComputeOptimizerClientTypes.AutoScalingGroupRecommendation]?
    /// <p>An array of objects that describe errors of the request.</p>
    ///         <p>For example, an error is returned if you request recommendations for an unsupported
    ///             Auto Scaling group.</p>
    public let errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
    /// <p>The token to use to advance to the next page of Auto Scaling group recommendations.</p>
    ///         <p>This value is null when there are no more pages of Auto Scaling group recommendations to
    ///             return.</p>
    public let nextToken: Swift.String?

    public init (
        autoScalingGroupRecommendations: [ComputeOptimizerClientTypes.AutoScalingGroupRecommendation]? = nil,
        errors: [ComputeOptimizerClientTypes.GetRecommendationError]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.autoScalingGroupRecommendations = autoScalingGroupRecommendations
        self.errors = errors
        self.nextToken = nextToken
    }
}

struct GetAutoScalingGroupRecommendationsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let autoScalingGroupRecommendations: [ComputeOptimizerClientTypes.AutoScalingGroupRecommendation]?
    public let errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
}

extension GetAutoScalingGroupRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case autoScalingGroupRecommendations
        case errors
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let autoScalingGroupRecommendationsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.AutoScalingGroupRecommendation?].self, forKey: .autoScalingGroupRecommendations)
        var autoScalingGroupRecommendationsDecoded0:[ComputeOptimizerClientTypes.AutoScalingGroupRecommendation]? = nil
        if let autoScalingGroupRecommendationsContainer = autoScalingGroupRecommendationsContainer {
            autoScalingGroupRecommendationsDecoded0 = [ComputeOptimizerClientTypes.AutoScalingGroupRecommendation]()
            for structure0 in autoScalingGroupRecommendationsContainer {
                if let structure0 = structure0 {
                    autoScalingGroupRecommendationsDecoded0?.append(structure0)
                }
            }
        }
        autoScalingGroupRecommendations = autoScalingGroupRecommendationsDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.GetRecommendationError?].self, forKey: .errors)
        var errorsDecoded0:[ComputeOptimizerClientTypes.GetRecommendationError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [ComputeOptimizerClientTypes.GetRecommendationError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

public struct GetEBSVolumeRecommendationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEBSVolumeRecommendationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEBSVolumeRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEBSVolumeRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEBSVolumeRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEBSVolumeRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEBSVolumeRecommendationsOutputError>
}

extension GetEBSVolumeRecommendationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEBSVolumeRecommendationsInput(accountIds: \(Swift.String(describing: accountIds)), filters: \(Swift.String(describing: filters)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)), volumeArns: \(Swift.String(describing: volumeArns)))"}
}

extension GetEBSVolumeRecommendationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case maxResults
        case nextToken
        case volumeArns
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountids0 in accountIds {
                try accountIdsContainer.encode(accountids0)
            }
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for ebsfilters0 in filters {
                try filtersContainer.encode(ebsfilters0)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
        if let volumeArns = volumeArns {
            var volumeArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumeArns)
            for volumearns0 in volumeArns {
                try volumeArnsContainer.encode(volumearns0)
            }
        }
    }
}

public struct GetEBSVolumeRecommendationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEBSVolumeRecommendationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEBSVolumeRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEBSVolumeRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEBSVolumeRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEBSVolumeRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEBSVolumeRecommendationsOutputError>
}

public struct GetEBSVolumeRecommendationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEBSVolumeRecommendationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEBSVolumeRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEBSVolumeRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEBSVolumeRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEBSVolumeRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEBSVolumeRecommendationsOutputError>
}

public struct GetEBSVolumeRecommendationsInput: Swift.Equatable {
    /// <p>The ID of the AWS account for which to return volume
    ///             recommendations.</p>
    ///
    ///
    ///
    ///         <p>If your account is the management account of an organization, use this parameter to
    ///             specify the member account for which you want to return volume recommendations.</p>
    ///         <p>Only one account ID can be specified per request.</p>
    public let accountIds: [Swift.String]?
    /// <p>An array of objects that describe a filter that returns a more specific list of volume
    ///             recommendations.</p>
    public let filters: [ComputeOptimizerClientTypes.EBSFilter]?
    /// <p>The maximum number of volume recommendations to return with a single request.</p>
    ///         <p>To retrieve the remaining results, make another request with the returned
    ///                 <code>NextToken</code> value.</p>
    public let maxResults: Swift.Int?
    /// <p>The token to advance to the next page of volume recommendations.</p>
    public let nextToken: Swift.String?
    /// <p>The Amazon Resource Name (ARN) of the volumes for which to return
    ///             recommendations.</p>
    public let volumeArns: [Swift.String]?

    public init (
        accountIds: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.EBSFilter]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil,
        volumeArns: [Swift.String]? = nil
    )
    {
        self.accountIds = accountIds
        self.filters = filters
        self.maxResults = maxResults
        self.nextToken = nextToken
        self.volumeArns = volumeArns
    }
}

struct GetEBSVolumeRecommendationsInputBody: Swift.Equatable {
    public let volumeArns: [Swift.String]?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
    public let filters: [ComputeOptimizerClientTypes.EBSFilter]?
    public let accountIds: [Swift.String]?
}

extension GetEBSVolumeRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case maxResults
        case nextToken
        case volumeArns
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .volumeArns)
        var volumeArnsDecoded0:[Swift.String]? = nil
        if let volumeArnsContainer = volumeArnsContainer {
            volumeArnsDecoded0 = [Swift.String]()
            for string0 in volumeArnsContainer {
                if let string0 = string0 {
                    volumeArnsDecoded0?.append(string0)
                }
            }
        }
        volumeArns = volumeArnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.EBSFilter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.EBSFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.EBSFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
    }
}

extension GetEBSVolumeRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEBSVolumeRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetEBSVolumeRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEBSVolumeRecommendationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEBSVolumeRecommendationsOutputResponse(errors: \(Swift.String(describing: errors)), nextToken: \(Swift.String(describing: nextToken)), volumeRecommendations: \(Swift.String(describing: volumeRecommendations)))"}
}

extension GetEBSVolumeRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetEBSVolumeRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
            self.nextToken = output.nextToken
            self.volumeRecommendations = output.volumeRecommendations
        } else {
            self.errors = nil
            self.nextToken = nil
            self.volumeRecommendations = nil
        }
    }
}

public struct GetEBSVolumeRecommendationsOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe errors of the request.</p>
    ///         <p>For example, an error is returned if you request recommendations for an unsupported
    ///             volume.</p>
    public let errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
    /// <p>The token to use to advance to the next page of volume recommendations.</p>
    ///         <p>This value is null when there are no more pages of volume recommendations to
    ///             return.</p>
    public let nextToken: Swift.String?
    /// <p>An array of objects that describe volume recommendations.</p>
    public let volumeRecommendations: [ComputeOptimizerClientTypes.VolumeRecommendation]?

    public init (
        errors: [ComputeOptimizerClientTypes.GetRecommendationError]? = nil,
        nextToken: Swift.String? = nil,
        volumeRecommendations: [ComputeOptimizerClientTypes.VolumeRecommendation]? = nil
    )
    {
        self.errors = errors
        self.nextToken = nextToken
        self.volumeRecommendations = volumeRecommendations
    }
}

struct GetEBSVolumeRecommendationsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let volumeRecommendations: [ComputeOptimizerClientTypes.VolumeRecommendation]?
    public let errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
}

extension GetEBSVolumeRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors
        case nextToken
        case volumeRecommendations
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let volumeRecommendationsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.VolumeRecommendation?].self, forKey: .volumeRecommendations)
        var volumeRecommendationsDecoded0:[ComputeOptimizerClientTypes.VolumeRecommendation]? = nil
        if let volumeRecommendationsContainer = volumeRecommendationsContainer {
            volumeRecommendationsDecoded0 = [ComputeOptimizerClientTypes.VolumeRecommendation]()
            for structure0 in volumeRecommendationsContainer {
                if let structure0 = structure0 {
                    volumeRecommendationsDecoded0?.append(structure0)
                }
            }
        }
        volumeRecommendations = volumeRecommendationsDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.GetRecommendationError?].self, forKey: .errors)
        var errorsDecoded0:[ComputeOptimizerClientTypes.GetRecommendationError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [ComputeOptimizerClientTypes.GetRecommendationError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

public struct GetEC2InstanceRecommendationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEC2InstanceRecommendationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEC2InstanceRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEC2InstanceRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEC2InstanceRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEC2InstanceRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEC2InstanceRecommendationsOutputError>
}

extension GetEC2InstanceRecommendationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEC2InstanceRecommendationsInput(accountIds: \(Swift.String(describing: accountIds)), filters: \(Swift.String(describing: filters)), instanceArns: \(Swift.String(describing: instanceArns)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetEC2InstanceRecommendationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case instanceArns
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountids0 in accountIds {
                try accountIdsContainer.encode(accountids0)
            }
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filters0 in filters {
                try filtersContainer.encode(filters0)
            }
        }
        if let instanceArns = instanceArns {
            var instanceArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .instanceArns)
            for instancearns0 in instanceArns {
                try instanceArnsContainer.encode(instancearns0)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct GetEC2InstanceRecommendationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEC2InstanceRecommendationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEC2InstanceRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEC2InstanceRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEC2InstanceRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEC2InstanceRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEC2InstanceRecommendationsOutputError>
}

public struct GetEC2InstanceRecommendationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEC2InstanceRecommendationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEC2InstanceRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEC2InstanceRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEC2InstanceRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEC2InstanceRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEC2InstanceRecommendationsOutputError>
}

public struct GetEC2InstanceRecommendationsInput: Swift.Equatable {
    /// <p>The ID of the AWS account for which to return instance
    ///             recommendations.</p>
    ///
    ///
    ///
    ///         <p>If your account is the management account of an organization, use this parameter to
    ///             specify the member account for which you want to return instance recommendations.</p>
    ///         <p>Only one account ID can be specified per request.</p>
    public let accountIds: [Swift.String]?
    /// <p>An array of objects that describe a filter that returns a more specific list of
    ///             instance recommendations.</p>
    public let filters: [ComputeOptimizerClientTypes.Filter]?
    /// <p>The Amazon Resource Name (ARN) of the instances for which to return
    ///             recommendations.</p>
    public let instanceArns: [Swift.String]?
    /// <p>The maximum number of instance recommendations to return with a single request.</p>
    ///         <p>To retrieve the remaining results, make another request with the returned
    ///                 <code>NextToken</code> value.</p>
    public let maxResults: Swift.Int?
    /// <p>The token to advance to the next page of instance recommendations.</p>
    public let nextToken: Swift.String?

    public init (
        accountIds: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.Filter]? = nil,
        instanceArns: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.filters = filters
        self.instanceArns = instanceArns
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetEC2InstanceRecommendationsInputBody: Swift.Equatable {
    public let instanceArns: [Swift.String]?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
    public let filters: [ComputeOptimizerClientTypes.Filter]?
    public let accountIds: [Swift.String]?
}

extension GetEC2InstanceRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case instanceArns
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .instanceArns)
        var instanceArnsDecoded0:[Swift.String]? = nil
        if let instanceArnsContainer = instanceArnsContainer {
            instanceArnsDecoded0 = [Swift.String]()
            for string0 in instanceArnsContainer {
                if let string0 = string0 {
                    instanceArnsDecoded0?.append(string0)
                }
            }
        }
        instanceArns = instanceArnsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.Filter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.Filter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.Filter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
    }
}

extension GetEC2InstanceRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEC2InstanceRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetEC2InstanceRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEC2InstanceRecommendationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEC2InstanceRecommendationsOutputResponse(errors: \(Swift.String(describing: errors)), instanceRecommendations: \(Swift.String(describing: instanceRecommendations)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetEC2InstanceRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetEC2InstanceRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.errors = output.errors
            self.instanceRecommendations = output.instanceRecommendations
            self.nextToken = output.nextToken
        } else {
            self.errors = nil
            self.instanceRecommendations = nil
            self.nextToken = nil
        }
    }
}

public struct GetEC2InstanceRecommendationsOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe errors of the request.</p>
    ///         <p>For example, an error is returned if you request recommendations for an instance of an
    ///             unsupported instance family.</p>
    public let errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
    /// <p>An array of objects that describe instance recommendations.</p>
    public let instanceRecommendations: [ComputeOptimizerClientTypes.InstanceRecommendation]?
    /// <p>The token to use to advance to the next page of instance recommendations.</p>
    ///         <p>This value is null when there are no more pages of instance recommendations to
    ///             return.</p>
    public let nextToken: Swift.String?

    public init (
        errors: [ComputeOptimizerClientTypes.GetRecommendationError]? = nil,
        instanceRecommendations: [ComputeOptimizerClientTypes.InstanceRecommendation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.errors = errors
        self.instanceRecommendations = instanceRecommendations
        self.nextToken = nextToken
    }
}

struct GetEC2InstanceRecommendationsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let instanceRecommendations: [ComputeOptimizerClientTypes.InstanceRecommendation]?
    public let errors: [ComputeOptimizerClientTypes.GetRecommendationError]?
}

extension GetEC2InstanceRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case errors
        case instanceRecommendations
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let instanceRecommendationsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.InstanceRecommendation?].self, forKey: .instanceRecommendations)
        var instanceRecommendationsDecoded0:[ComputeOptimizerClientTypes.InstanceRecommendation]? = nil
        if let instanceRecommendationsContainer = instanceRecommendationsContainer {
            instanceRecommendationsDecoded0 = [ComputeOptimizerClientTypes.InstanceRecommendation]()
            for structure0 in instanceRecommendationsContainer {
                if let structure0 = structure0 {
                    instanceRecommendationsDecoded0?.append(structure0)
                }
            }
        }
        instanceRecommendations = instanceRecommendationsDecoded0
        let errorsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.GetRecommendationError?].self, forKey: .errors)
        var errorsDecoded0:[ComputeOptimizerClientTypes.GetRecommendationError]? = nil
        if let errorsContainer = errorsContainer {
            errorsDecoded0 = [ComputeOptimizerClientTypes.GetRecommendationError]()
            for structure0 in errorsContainer {
                if let structure0 = structure0 {
                    errorsDecoded0?.append(structure0)
                }
            }
        }
        errors = errorsDecoded0
    }
}

public struct GetEC2RecommendationProjectedMetricsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEC2RecommendationProjectedMetricsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEC2RecommendationProjectedMetricsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEC2RecommendationProjectedMetricsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEC2RecommendationProjectedMetricsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEC2RecommendationProjectedMetricsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEC2RecommendationProjectedMetricsOutputError>
}

extension GetEC2RecommendationProjectedMetricsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEC2RecommendationProjectedMetricsInput(endTime: \(Swift.String(describing: endTime)), instanceArn: \(Swift.String(describing: instanceArn)), period: \(Swift.String(describing: period)), startTime: \(Swift.String(describing: startTime)), stat: \(Swift.String(describing: stat)))"}
}

extension GetEC2RecommendationProjectedMetricsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case instanceArn
        case period
        case startTime
        case stat
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let endTime = endTime {
            try encodeContainer.encode(endTime.timeIntervalSince1970, forKey: .endTime)
        }
        if let instanceArn = instanceArn {
            try encodeContainer.encode(instanceArn, forKey: .instanceArn)
        }
        if period != 0 {
            try encodeContainer.encode(period, forKey: .period)
        }
        if let startTime = startTime {
            try encodeContainer.encode(startTime.timeIntervalSince1970, forKey: .startTime)
        }
        if let stat = stat {
            try encodeContainer.encode(stat.rawValue, forKey: .stat)
        }
    }
}

public struct GetEC2RecommendationProjectedMetricsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEC2RecommendationProjectedMetricsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEC2RecommendationProjectedMetricsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEC2RecommendationProjectedMetricsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEC2RecommendationProjectedMetricsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEC2RecommendationProjectedMetricsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEC2RecommendationProjectedMetricsOutputError>
}

public struct GetEC2RecommendationProjectedMetricsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEC2RecommendationProjectedMetricsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEC2RecommendationProjectedMetricsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEC2RecommendationProjectedMetricsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEC2RecommendationProjectedMetricsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEC2RecommendationProjectedMetricsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEC2RecommendationProjectedMetricsOutputError>
}

public struct GetEC2RecommendationProjectedMetricsInput: Swift.Equatable {
    /// <p>The time stamp of the last projected metrics data point to return.</p>
    public let endTime: ClientRuntime.Date?
    /// <p>The Amazon Resource Name (ARN) of the instances for which to return recommendation
    ///             projected metrics.</p>
    public let instanceArn: Swift.String?
    /// <p>The granularity, in seconds, of the projected metrics data points.</p>
    public let period: Swift.Int
    /// <p>The time stamp of the first projected metrics data point to return.</p>
    public let startTime: ClientRuntime.Date?
    /// <p>The statistic of the projected metrics.</p>
    public let stat: ComputeOptimizerClientTypes.MetricStatistic?

    public init (
        endTime: ClientRuntime.Date? = nil,
        instanceArn: Swift.String? = nil,
        period: Swift.Int = 0,
        startTime: ClientRuntime.Date? = nil,
        stat: ComputeOptimizerClientTypes.MetricStatistic? = nil
    )
    {
        self.endTime = endTime
        self.instanceArn = instanceArn
        self.period = period
        self.startTime = startTime
        self.stat = stat
    }
}

struct GetEC2RecommendationProjectedMetricsInputBody: Swift.Equatable {
    public let instanceArn: Swift.String?
    public let stat: ComputeOptimizerClientTypes.MetricStatistic?
    public let period: Swift.Int
    public let startTime: ClientRuntime.Date?
    public let endTime: ClientRuntime.Date?
}

extension GetEC2RecommendationProjectedMetricsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case endTime
        case instanceArn
        case period
        case startTime
        case stat
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceArn)
        instanceArn = instanceArnDecoded
        let statDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MetricStatistic.self, forKey: .stat)
        stat = statDecoded
        let periodDecoded = try containerValues.decode(Swift.Int.self, forKey: .period)
        period = periodDecoded
        let startTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .startTime)
        startTime = startTimeDecoded
        let endTimeDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .endTime)
        endTime = endTimeDecoded
    }
}

extension GetEC2RecommendationProjectedMetricsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEC2RecommendationProjectedMetricsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ResourceNotFoundException" : self = .resourceNotFoundException(try ResourceNotFoundException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetEC2RecommendationProjectedMetricsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case resourceNotFoundException(ResourceNotFoundException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEC2RecommendationProjectedMetricsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEC2RecommendationProjectedMetricsOutputResponse(recommendedOptionProjectedMetrics: \(Swift.String(describing: recommendedOptionProjectedMetrics)))"}
}

extension GetEC2RecommendationProjectedMetricsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetEC2RecommendationProjectedMetricsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.recommendedOptionProjectedMetrics = output.recommendedOptionProjectedMetrics
        } else {
            self.recommendedOptionProjectedMetrics = nil
        }
    }
}

public struct GetEC2RecommendationProjectedMetricsOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe a projected metrics.</p>
    public let recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric]?

    public init (
        recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric]? = nil
    )
    {
        self.recommendedOptionProjectedMetrics = recommendedOptionProjectedMetrics
    }
}

struct GetEC2RecommendationProjectedMetricsOutputResponseBody: Swift.Equatable {
    public let recommendedOptionProjectedMetrics: [ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric]?
}

extension GetEC2RecommendationProjectedMetricsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recommendedOptionProjectedMetrics
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendedOptionProjectedMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric?].self, forKey: .recommendedOptionProjectedMetrics)
        var recommendedOptionProjectedMetricsDecoded0:[ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric]? = nil
        if let recommendedOptionProjectedMetricsContainer = recommendedOptionProjectedMetricsContainer {
            recommendedOptionProjectedMetricsDecoded0 = [ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric]()
            for structure0 in recommendedOptionProjectedMetricsContainer {
                if let structure0 = structure0 {
                    recommendedOptionProjectedMetricsDecoded0?.append(structure0)
                }
            }
        }
        recommendedOptionProjectedMetrics = recommendedOptionProjectedMetricsDecoded0
    }
}

extension GetEnrollmentStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEnrollmentStatusInput()"}
}

extension GetEnrollmentStatusInput: Swift.Encodable, ClientRuntime.Reflection {

    public func encode(to encoder: Swift.Encoder) throws {
    }
}

public struct GetEnrollmentStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEnrollmentStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEnrollmentStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEnrollmentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEnrollmentStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEnrollmentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEnrollmentStatusOutputError>
}

public struct GetEnrollmentStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetEnrollmentStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetEnrollmentStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetEnrollmentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetEnrollmentStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetEnrollmentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetEnrollmentStatusOutputError>
}

public struct GetEnrollmentStatusInput: Swift.Equatable {

    public init() {}
}

struct GetEnrollmentStatusInputBody: Swift.Equatable {
}

extension GetEnrollmentStatusInputBody: Swift.Decodable {

    public init (from decoder: Swift.Decoder) throws {
    }
}

extension GetEnrollmentStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetEnrollmentStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetEnrollmentStatusOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetEnrollmentStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetEnrollmentStatusOutputResponse(memberAccountsEnrolled: \(Swift.String(describing: memberAccountsEnrolled)), status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)))"}
}

extension GetEnrollmentStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetEnrollmentStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.memberAccountsEnrolled = output.memberAccountsEnrolled
            self.status = output.status
            self.statusReason = output.statusReason
        } else {
            self.memberAccountsEnrolled = false
            self.status = nil
            self.statusReason = nil
        }
    }
}

public struct GetEnrollmentStatusOutputResponse: Swift.Equatable {
    /// <p>Confirms the enrollment status of member accounts within the organization, if the
    ///             account is a management account of an organization.</p>
    public let memberAccountsEnrolled: Swift.Bool
    /// <p>The enrollment status of the account.</p>
    public let status: ComputeOptimizerClientTypes.Status?
    /// <p>The reason for the enrollment status of the account.</p>
    ///         <p>For example, an account might show a status of <code>Pending</code> because member
    ///             accounts of an organization require more time to be enrolled in the service.</p>
    public let statusReason: Swift.String?

    public init (
        memberAccountsEnrolled: Swift.Bool = false,
        status: ComputeOptimizerClientTypes.Status? = nil,
        statusReason: Swift.String? = nil
    )
    {
        self.memberAccountsEnrolled = memberAccountsEnrolled
        self.status = status
        self.statusReason = statusReason
    }
}

struct GetEnrollmentStatusOutputResponseBody: Swift.Equatable {
    public let status: ComputeOptimizerClientTypes.Status?
    public let statusReason: Swift.String?
    public let memberAccountsEnrolled: Swift.Bool
}

extension GetEnrollmentStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case memberAccountsEnrolled
        case status
        case statusReason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
        let memberAccountsEnrolledDecoded = try containerValues.decode(Swift.Bool.self, forKey: .memberAccountsEnrolled)
        memberAccountsEnrolled = memberAccountsEnrolledDecoded
    }
}

public struct GetLambdaFunctionRecommendationsInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLambdaFunctionRecommendationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLambdaFunctionRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLambdaFunctionRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLambdaFunctionRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLambdaFunctionRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLambdaFunctionRecommendationsOutputError>
}

extension GetLambdaFunctionRecommendationsInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLambdaFunctionRecommendationsInput(accountIds: \(Swift.String(describing: accountIds)), filters: \(Swift.String(describing: filters)), functionArns: \(Swift.String(describing: functionArns)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetLambdaFunctionRecommendationsInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case functionArns
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountids0 in accountIds {
                try accountIdsContainer.encode(accountids0)
            }
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for lambdafunctionrecommendationfilters0 in filters {
                try filtersContainer.encode(lambdafunctionrecommendationfilters0)
            }
        }
        if let functionArns = functionArns {
            var functionArnsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .functionArns)
            for functionarns0 in functionArns {
                try functionArnsContainer.encode(functionarns0)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct GetLambdaFunctionRecommendationsInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLambdaFunctionRecommendationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLambdaFunctionRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLambdaFunctionRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLambdaFunctionRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLambdaFunctionRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLambdaFunctionRecommendationsOutputError>
}

public struct GetLambdaFunctionRecommendationsInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetLambdaFunctionRecommendationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetLambdaFunctionRecommendationsInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetLambdaFunctionRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetLambdaFunctionRecommendationsInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetLambdaFunctionRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetLambdaFunctionRecommendationsOutputError>
}

public struct GetLambdaFunctionRecommendationsInput: Swift.Equatable {
    /// <p>The ID of the AWS account for which to return function
    ///             recommendations.</p>
    ///
    ///
    ///
    ///         <p>If your account is the management account of an organization, use this parameter to
    ///             specify the member account for which you want to return function recommendations.</p>
    ///
    ///         <p>Only one account ID can be specified per request.</p>
    public let accountIds: [Swift.String]?
    /// <p>An array of objects that describe a filter that returns a more specific list of
    ///             function recommendations.</p>
    public let filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]?
    /// <p>The Amazon Resource Name (ARN) of the functions for which to return
    ///             recommendations.</p>
    ///
    ///         <p>You can specify a qualified or unqualified ARN. If you specify an
    ///             unqualified ARN without a function version suffix, Compute Optimizer will return recommendations for
    ///             the latest (<code>$LATEST</code>) version of the function. If you specify a qualified
    ///             ARN with a version suffix, Compute Optimizer will return recommendations for the specified function
    ///             version. For more information about using function versions, see <a href="https://docs.aws.amazon.com/lambda/latest/dg/configuration-versions.html#versioning-versions-using">Using
    ///                 versions</a> in the <i>AWS Lambda Developer Guide</i>.</p>
    public let functionArns: [Swift.String]?
    /// <p>The maximum number of function recommendations to return with a single request.</p>
    ///
    ///         <p>To retrieve the remaining results, make another request with the returned
    ///                 <code>NextToken</code> value.</p>
    public let maxResults: Swift.Int?
    /// <p>The token to advance to the next page of function recommendations.</p>
    public let nextToken: Swift.String?

    public init (
        accountIds: [Swift.String]? = nil,
        filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]? = nil,
        functionArns: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.filters = filters
        self.functionArns = functionArns
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetLambdaFunctionRecommendationsInputBody: Swift.Equatable {
    public let functionArns: [Swift.String]?
    public let accountIds: [Swift.String]?
    public let filters: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
}

extension GetLambdaFunctionRecommendationsInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case filters
        case functionArns
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionArnsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .functionArns)
        var functionArnsDecoded0:[Swift.String]? = nil
        if let functionArnsContainer = functionArnsContainer {
            functionArnsDecoded0 = [Swift.String]()
            for string0 in functionArnsContainer {
                if let string0 = string0 {
                    functionArnsDecoded0?.append(string0)
                }
            }
        }
        functionArns = functionArnsDecoded0
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let filtersContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter?].self, forKey: .filters)
        var filtersDecoded0:[ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]? = nil
        if let filtersContainer = filtersContainer {
            filtersDecoded0 = [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter]()
            for structure0 in filtersContainer {
                if let structure0 = structure0 {
                    filtersDecoded0?.append(structure0)
                }
            }
        }
        filters = filtersDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetLambdaFunctionRecommendationsOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetLambdaFunctionRecommendationsOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "LimitExceededException" : self = .limitExceededException(try LimitExceededException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetLambdaFunctionRecommendationsOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case limitExceededException(LimitExceededException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetLambdaFunctionRecommendationsOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetLambdaFunctionRecommendationsOutputResponse(lambdaFunctionRecommendations: \(Swift.String(describing: lambdaFunctionRecommendations)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetLambdaFunctionRecommendationsOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetLambdaFunctionRecommendationsOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.lambdaFunctionRecommendations = output.lambdaFunctionRecommendations
            self.nextToken = output.nextToken
        } else {
            self.lambdaFunctionRecommendations = nil
            self.nextToken = nil
        }
    }
}

public struct GetLambdaFunctionRecommendationsOutputResponse: Swift.Equatable {
    /// <p>An array of objects that describe function recommendations.</p>
    public let lambdaFunctionRecommendations: [ComputeOptimizerClientTypes.LambdaFunctionRecommendation]?
    /// <p>The token to use to advance to the next page of function recommendations.</p>
    ///
    ///         <p>This value is null when there are no more pages of function recommendations to
    ///             return.</p>
    public let nextToken: Swift.String?

    public init (
        lambdaFunctionRecommendations: [ComputeOptimizerClientTypes.LambdaFunctionRecommendation]? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.lambdaFunctionRecommendations = lambdaFunctionRecommendations
        self.nextToken = nextToken
    }
}

struct GetLambdaFunctionRecommendationsOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let lambdaFunctionRecommendations: [ComputeOptimizerClientTypes.LambdaFunctionRecommendation]?
}

extension GetLambdaFunctionRecommendationsOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case lambdaFunctionRecommendations
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let lambdaFunctionRecommendationsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.LambdaFunctionRecommendation?].self, forKey: .lambdaFunctionRecommendations)
        var lambdaFunctionRecommendationsDecoded0:[ComputeOptimizerClientTypes.LambdaFunctionRecommendation]? = nil
        if let lambdaFunctionRecommendationsContainer = lambdaFunctionRecommendationsContainer {
            lambdaFunctionRecommendationsDecoded0 = [ComputeOptimizerClientTypes.LambdaFunctionRecommendation]()
            for structure0 in lambdaFunctionRecommendationsContainer {
                if let structure0 = structure0 {
                    lambdaFunctionRecommendationsDecoded0?.append(structure0)
                }
            }
        }
        lambdaFunctionRecommendations = lambdaFunctionRecommendationsDecoded0
    }
}

extension ComputeOptimizerClientTypes.GetRecommendationError: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case code
        case identifier
        case message
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let code = code {
            try encodeContainer.encode(code, forKey: .code)
        }
        if let identifier = identifier {
            try encodeContainer.encode(identifier, forKey: .identifier)
        }
        if let message = message {
            try encodeContainer.encode(message, forKey: .message)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let identifierDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .identifier)
        identifier = identifierDecoded
        let codeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .code)
        code = codeDecoded
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComputeOptimizerClientTypes.GetRecommendationError: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRecommendationError(code: \(Swift.String(describing: code)), identifier: \(Swift.String(describing: identifier)), message: \(Swift.String(describing: message)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes an error experienced when getting recommendations.</p>
    ///         <p>For example, an error is returned if you request recommendations for an unsupported
    ///             Auto Scaling group, or if you request recommendations for an instance of an unsupported instance
    ///             family.</p>
    public struct GetRecommendationError: Swift.Equatable {
        /// <p>The error code.</p>
        public let code: Swift.String?
        /// <p>The ID of the error.</p>
        public let identifier: Swift.String?
        /// <p>The message, or reason, for the error.</p>
        public let message: Swift.String?

        public init (
            code: Swift.String? = nil,
            identifier: Swift.String? = nil,
            message: Swift.String? = nil
        )
        {
            self.code = code
            self.identifier = identifier
            self.message = message
        }
    }

}

public struct GetRecommendationSummariesInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRecommendationSummariesInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRecommendationSummariesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRecommendationSummariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRecommendationSummariesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRecommendationSummariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRecommendationSummariesOutputError>
}

extension GetRecommendationSummariesInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRecommendationSummariesInput(accountIds: \(Swift.String(describing: accountIds)), maxResults: \(Swift.String(describing: maxResults)), nextToken: \(Swift.String(describing: nextToken)))"}
}

extension GetRecommendationSummariesInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case maxResults
        case nextToken
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountids0 in accountIds {
                try accountIdsContainer.encode(accountids0)
            }
        }
        if let maxResults = maxResults {
            try encodeContainer.encode(maxResults, forKey: .maxResults)
        }
        if let nextToken = nextToken {
            try encodeContainer.encode(nextToken, forKey: .nextToken)
        }
    }
}

public struct GetRecommendationSummariesInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRecommendationSummariesInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRecommendationSummariesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRecommendationSummariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRecommendationSummariesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRecommendationSummariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRecommendationSummariesOutputError>
}

public struct GetRecommendationSummariesInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "GetRecommendationSummariesInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<GetRecommendationSummariesInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<GetRecommendationSummariesOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<GetRecommendationSummariesInput>
    public typealias MOutput = ClientRuntime.OperationOutput<GetRecommendationSummariesOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<GetRecommendationSummariesOutputError>
}

public struct GetRecommendationSummariesInput: Swift.Equatable {
    /// <p>The ID of the AWS account for which to return recommendation
    ///             summaries.</p>
    ///
    ///
    ///
    ///         <p>If your account is the management account of an organization, use this parameter to
    ///             specify the member account for which you want to return recommendation summaries.</p>
    ///         <p>Only one account ID can be specified per request.</p>
    public let accountIds: [Swift.String]?
    /// <p>The maximum number of recommendation summaries to return with a single request.</p>
    ///         <p>To retrieve the remaining results, make another request with the returned
    ///                 <code>NextToken</code> value.</p>
    public let maxResults: Swift.Int?
    /// <p>The token to advance to the next page of recommendation summaries.</p>
    public let nextToken: Swift.String?

    public init (
        accountIds: [Swift.String]? = nil,
        maxResults: Swift.Int? = nil,
        nextToken: Swift.String? = nil
    )
    {
        self.accountIds = accountIds
        self.maxResults = maxResults
        self.nextToken = nextToken
    }
}

struct GetRecommendationSummariesInputBody: Swift.Equatable {
    public let accountIds: [Swift.String]?
    public let nextToken: Swift.String?
    public let maxResults: Swift.Int?
}

extension GetRecommendationSummariesInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountIds
        case maxResults
        case nextToken
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let accountIdsContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .accountIds)
        var accountIdsDecoded0:[Swift.String]? = nil
        if let accountIdsContainer = accountIdsContainer {
            accountIdsDecoded0 = [Swift.String]()
            for string0 in accountIdsContainer {
                if let string0 = string0 {
                    accountIdsDecoded0?.append(string0)
                }
            }
        }
        accountIds = accountIdsDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let maxResultsDecoded = try containerValues.decodeIfPresent(Swift.Int.self, forKey: .maxResults)
        maxResults = maxResultsDecoded
    }
}

extension GetRecommendationSummariesOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension GetRecommendationSummariesOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "OptInRequiredException" : self = .optInRequiredException(try OptInRequiredException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum GetRecommendationSummariesOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case optInRequiredException(OptInRequiredException)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension GetRecommendationSummariesOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "GetRecommendationSummariesOutputResponse(nextToken: \(Swift.String(describing: nextToken)), recommendationSummaries: \(Swift.String(describing: recommendationSummaries)))"}
}

extension GetRecommendationSummariesOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: GetRecommendationSummariesOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.nextToken = output.nextToken
            self.recommendationSummaries = output.recommendationSummaries
        } else {
            self.nextToken = nil
            self.recommendationSummaries = nil
        }
    }
}

public struct GetRecommendationSummariesOutputResponse: Swift.Equatable {
    /// <p>The token to use to advance to the next page of recommendation summaries.</p>
    ///         <p>This value is null when there are no more pages of recommendation summaries to
    ///             return.</p>
    public let nextToken: Swift.String?
    /// <p>An array of objects that summarize a recommendation.</p>
    public let recommendationSummaries: [ComputeOptimizerClientTypes.RecommendationSummary]?

    public init (
        nextToken: Swift.String? = nil,
        recommendationSummaries: [ComputeOptimizerClientTypes.RecommendationSummary]? = nil
    )
    {
        self.nextToken = nextToken
        self.recommendationSummaries = recommendationSummaries
    }
}

struct GetRecommendationSummariesOutputResponseBody: Swift.Equatable {
    public let nextToken: Swift.String?
    public let recommendationSummaries: [ComputeOptimizerClientTypes.RecommendationSummary]?
}

extension GetRecommendationSummariesOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case nextToken
        case recommendationSummaries
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nextTokenDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
        let recommendationSummariesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.RecommendationSummary?].self, forKey: .recommendationSummaries)
        var recommendationSummariesDecoded0:[ComputeOptimizerClientTypes.RecommendationSummary]? = nil
        if let recommendationSummariesContainer = recommendationSummariesContainer {
            recommendationSummariesDecoded0 = [ComputeOptimizerClientTypes.RecommendationSummary]()
            for structure0 in recommendationSummariesContainer {
                if let structure0 = structure0 {
                    recommendationSummariesDecoded0?.append(structure0)
                }
            }
        }
        recommendationSummaries = recommendationSummariesDecoded0
    }
}

extension ComputeOptimizerClientTypes.InstanceRecommendation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case currentInstanceType
        case finding
        case findingReasonCodes
        case instanceArn
        case instanceName
        case lastRefreshTimestamp
        case lookBackPeriodInDays
        case recommendationOptions
        case recommendationSources
        case utilizationMetrics
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let currentInstanceType = currentInstanceType {
            try encodeContainer.encode(currentInstanceType, forKey: .currentInstanceType)
        }
        if let finding = finding {
            try encodeContainer.encode(finding.rawValue, forKey: .finding)
        }
        if let findingReasonCodes = findingReasonCodes {
            var findingReasonCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingReasonCodes)
            for instancerecommendationfindingreasoncodes0 in findingReasonCodes {
                try findingReasonCodesContainer.encode(instancerecommendationfindingreasoncodes0.rawValue)
            }
        }
        if let instanceArn = instanceArn {
            try encodeContainer.encode(instanceArn, forKey: .instanceArn)
        }
        if let instanceName = instanceName {
            try encodeContainer.encode(instanceName, forKey: .instanceName)
        }
        if let lastRefreshTimestamp = lastRefreshTimestamp {
            try encodeContainer.encode(lastRefreshTimestamp.timeIntervalSince1970, forKey: .lastRefreshTimestamp)
        }
        if lookBackPeriodInDays != 0.0 {
            try encodeContainer.encode(lookBackPeriodInDays, forKey: .lookBackPeriodInDays)
        }
        if let recommendationOptions = recommendationOptions {
            var recommendationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendationOptions)
            for recommendationoptions0 in recommendationOptions {
                try recommendationOptionsContainer.encode(recommendationoptions0)
            }
        }
        if let recommendationSources = recommendationSources {
            var recommendationSourcesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .recommendationSources)
            for recommendationsources0 in recommendationSources {
                try recommendationSourcesContainer.encode(recommendationsources0)
            }
        }
        if let utilizationMetrics = utilizationMetrics {
            var utilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .utilizationMetrics)
            for utilizationmetrics0 in utilizationMetrics {
                try utilizationMetricsContainer.encode(utilizationmetrics0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceArn)
        instanceArn = instanceArnDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let instanceNameDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceName)
        instanceName = instanceNameDecoded
        let currentInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .currentInstanceType)
        currentInstanceType = currentInstanceTypeDecoded
        let findingDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Finding.self, forKey: .finding)
        finding = findingDecoded
        let findingReasonCodesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.InstanceRecommendationFindingReasonCode?].self, forKey: .findingReasonCodes)
        var findingReasonCodesDecoded0:[ComputeOptimizerClientTypes.InstanceRecommendationFindingReasonCode]? = nil
        if let findingReasonCodesContainer = findingReasonCodesContainer {
            findingReasonCodesDecoded0 = [ComputeOptimizerClientTypes.InstanceRecommendationFindingReasonCode]()
            for string0 in findingReasonCodesContainer {
                if let string0 = string0 {
                    findingReasonCodesDecoded0?.append(string0)
                }
            }
        }
        findingReasonCodes = findingReasonCodesDecoded0
        let utilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.UtilizationMetric?].self, forKey: .utilizationMetrics)
        var utilizationMetricsDecoded0:[ComputeOptimizerClientTypes.UtilizationMetric]? = nil
        if let utilizationMetricsContainer = utilizationMetricsContainer {
            utilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.UtilizationMetric]()
            for structure0 in utilizationMetricsContainer {
                if let structure0 = structure0 {
                    utilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        utilizationMetrics = utilizationMetricsDecoded0
        let lookBackPeriodInDaysDecoded = try containerValues.decode(Swift.Double.self, forKey: .lookBackPeriodInDays)
        lookBackPeriodInDays = lookBackPeriodInDaysDecoded
        let recommendationOptionsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.InstanceRecommendationOption?].self, forKey: .recommendationOptions)
        var recommendationOptionsDecoded0:[ComputeOptimizerClientTypes.InstanceRecommendationOption]? = nil
        if let recommendationOptionsContainer = recommendationOptionsContainer {
            recommendationOptionsDecoded0 = [ComputeOptimizerClientTypes.InstanceRecommendationOption]()
            for structure0 in recommendationOptionsContainer {
                if let structure0 = structure0 {
                    recommendationOptionsDecoded0?.append(structure0)
                }
            }
        }
        recommendationOptions = recommendationOptionsDecoded0
        let recommendationSourcesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.RecommendationSource?].self, forKey: .recommendationSources)
        var recommendationSourcesDecoded0:[ComputeOptimizerClientTypes.RecommendationSource]? = nil
        if let recommendationSourcesContainer = recommendationSourcesContainer {
            recommendationSourcesDecoded0 = [ComputeOptimizerClientTypes.RecommendationSource]()
            for structure0 in recommendationSourcesContainer {
                if let structure0 = structure0 {
                    recommendationSourcesDecoded0?.append(structure0)
                }
            }
        }
        recommendationSources = recommendationSourcesDecoded0
        let lastRefreshTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastRefreshTimestamp)
        lastRefreshTimestamp = lastRefreshTimestampDecoded
    }
}

extension ComputeOptimizerClientTypes.InstanceRecommendation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceRecommendation(accountId: \(Swift.String(describing: accountId)), currentInstanceType: \(Swift.String(describing: currentInstanceType)), finding: \(Swift.String(describing: finding)), findingReasonCodes: \(Swift.String(describing: findingReasonCodes)), instanceArn: \(Swift.String(describing: instanceArn)), instanceName: \(Swift.String(describing: instanceName)), lastRefreshTimestamp: \(Swift.String(describing: lastRefreshTimestamp)), lookBackPeriodInDays: \(Swift.String(describing: lookBackPeriodInDays)), recommendationOptions: \(Swift.String(describing: recommendationOptions)), recommendationSources: \(Swift.String(describing: recommendationSources)), utilizationMetrics: \(Swift.String(describing: utilizationMetrics)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes an Amazon EC2 instance recommendation.</p>
    public struct InstanceRecommendation: Swift.Equatable {
        /// <p>The AWS account ID of the instance.</p>
        public let accountId: Swift.String?
        /// <p>The instance type of the current instance.</p>
        public let currentInstanceType: Swift.String?
        /// <p>The finding classification of the instance.</p>
        ///         <p>Findings for instances include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>Underprovisioned</code>
        ///                   </b>—An instance is
        ///                     considered under-provisioned when at least one specification of your instance,
        ///                     such as CPU, memory, or network, does not meet the performance requirements of
        ///                     your workload. Under-provisioned instances may lead to poor application
        ///                     performance.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>Overprovisioned</code>
        ///                   </b>—An instance is
        ///                     considered over-provisioned when at least one specification of your instance,
        ///                     such as CPU, memory, or network, can be sized down while still meeting the
        ///                     performance requirements of your workload, and no specification is
        ///                     under-provisioned. Over-provisioned instances may lead to unnecessary
        ///                     infrastructure cost.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>Optimized</code>
        ///                   </b>—An instance
        ///                     is considered optimized when all specifications of your instance, such as CPU,
        ///                     memory, and network, meet the performance requirements of your workload and is
        ///                     not over provisioned. For optimized resources, AWS Compute Optimizer might recommend a new
        ///                     generation instance type.</p>
        ///
        ///
        ///             </li>
        ///          </ul>
        public let finding: ComputeOptimizerClientTypes.Finding?
        /// <p>The reason for the finding classification of the instance.</p>
        ///         <p>Finding reason codes for instances include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>CPUOverprovisioned</code>
        ///                   </b> — The
        ///                     instance’s CPU configuration can be sized down while still meeting the
        ///                     performance requirements of your workload. This is identified by analyzing the
        ///                         <code>CPUUtilization</code> metric of the current instance during the
        ///                     look-back period.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>CPUUnderprovisioned</code>
        ///                   </b> — The
        ///                     instance’s CPU configuration doesn't meet the performance requirements of your
        ///                     workload and there is an alternative instance type that provides better CPU
        ///                     performance. This is identified by analyzing the <code>CPUUtilization</code>
        ///                     metric of the current instance during the look-back period.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>MemoryOverprovisioned</code>
        ///                   </b> — The
        ///                     instance’s memory configuration can be sized down while still meeting the
        ///                     performance requirements of your workload. This is identified by analyzing the
        ///                     memory utilization metric of the current instance during the look-back
        ///                     period.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>MemoryUnderprovisioned</code>
        ///                   </b> — The
        ///                     instance’s memory configuration doesn't meet the performance requirements of
        ///                     your workload and there is an alternative instance type that provides better
        ///                     memory performance. This is identified by analyzing the memory utilization
        ///                     metric of the current instance during the look-back period.</p>
        ///                 <note>
        ///                     <p>Memory utilization is analyzed only for resources that have the
        ///                         unified CloudWatch agent installed on them. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent">Enabling memory
        ///                             utilization with the Amazon CloudWatch Agent</a> in the <i>AWS Compute Optimizer
        ///                             User Guide</i>. On Linux instances, Compute Optimizer analyses the
        ///                             <code>mem_used_percent</code> metric in the <code>CWAgent</code>
        ///                         namespace, or the legacy <code>MemoryUtilization</code> metric in the
        ///                             <code>System/Linux</code> namespace. On Windows instances, Compute Optimizer analyses
        ///                         the <code>Memory % Committed Bytes In Use</code> metric in the
        ///                             <code>CWAgent</code> namespace.</p>
        ///
        ///
        ///                 </note>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>EBSThroughputOverprovisioned</code>
        ///                   </b> —
        ///                     The instance’s EBS throughput configuration can be sized down while still
        ///                     meeting the performance requirements of your workload. This is identified by
        ///                     analyzing the <code>VolumeReadOps</code> and <code>VolumeWriteOps</code> metrics
        ///                     of EBS volumes attached to the current instance during the look-back
        ///                     period.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>EBSThroughputUnderprovisioned</code>
        ///                   </b> —
        ///                     The instance’s EBS throughput configuration doesn't meet the performance
        ///                     requirements of your workload and there is an alternative instance type that
        ///                     provides better EBS throughput performance. This is identified by analyzing the
        ///                         <code>VolumeReadOps</code> and <code>VolumeWriteOps</code> metrics of EBS
        ///                     volumes attached to the current instance during the look-back period.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>EBSIOPSOverprovisioned</code>
        ///                   </b> — The
        ///                     instance’s EBS IOPS configuration can be sized down while still meeting the
        ///                     performance requirements of your workload. This is identified by analyzing the
        ///                         <code>VolumeReadBytes</code> and <code>VolumeWriteBytes</code> metric of EBS
        ///                     volumes attached to the current instance during the look-back period.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>EBSIOPSUnderprovisioned</code>
        ///                   </b> — The
        ///                     instance’s EBS IOPS configuration doesn't meet the performance requirements of
        ///                     your workload and there is an alternative instance type that provides better EBS
        ///                     IOPS performance. This is identified by analyzing the
        ///                         <code>VolumeReadBytes</code> and <code>VolumeWriteBytes</code> metric of EBS
        ///                     volumes attached to the current instance during the look-back period.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>NetworkBandwidthOverprovisioned</code>
        ///                   </b>
        ///                     — The instance’s network bandwidth configuration can be sized down while still
        ///                     meeting the performance requirements of your workload. This is identified by
        ///                     analyzing the <code>NetworkIn</code> and <code>NetworkOut</code> metrics of the
        ///                     current instance during the look-back period.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>NetworkBandwidthUnderprovisioned</code>
        ///                   </b>
        ///                     — The instance’s network bandwidth configuration doesn't meet the performance
        ///                     requirements of your workload and there is an alternative instance type that
        ///                     provides better network bandwidth performance. This is identified by analyzing
        ///                     the <code>NetworkIn</code> and <code>NetworkOut</code> metrics of the current
        ///                     instance during the look-back period. This finding reason happens when the
        ///                         <code>NetworkIn</code> or <code>NetworkOut</code> performance of an instance
        ///                     is impacted.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>NetworkPPSOverprovisioned</code>
        ///                   </b> — The
        ///                     instance’s network PPS (packets per second) configuration can be sized down
        ///                     while still meeting the performance requirements of your workload. This is
        ///                     identified by analyzing the <code>NetworkPacketsIn</code> and
        ///                         <code>NetworkPacketsIn</code> metrics of the current instance during the
        ///                     look-back period.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>NetworkPPSUnderprovisioned</code>
        ///                   </b> — The
        ///                     instance’s network PPS (packets per second) configuration doesn't meet the
        ///                     performance requirements of your workload and there is an alternative instance
        ///                     type that provides better network PPS performance. This is identified by
        ///                     analyzing the <code>NetworkPacketsIn</code> and <code>NetworkPacketsIn</code>
        ///                     metrics of the current instance during the look-back period.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>DiskIOPSOverprovisioned</code>
        ///                   </b> — The
        ///                     instance’s disk IOPS configuration can be sized down while still meeting the
        ///                     performance requirements of your workload. This is identified by analyzing the
        ///                         <code>DiskReadOps</code> and <code>DiskWriteOps</code> metrics of the
        ///                     current instance during the look-back period.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>DiskIOPSUnderprovisioned</code>
        ///                   </b> — The
        ///                     instance’s disk IOPS configuration doesn't meet the performance requirements of
        ///                     your workload and there is an alternative instance type that provides better
        ///                     disk IOPS performance. This is identified by analyzing the
        ///                         <code>DiskReadOps</code> and <code>DiskWriteOps</code> metrics of the
        ///                     current instance during the look-back period.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>DiskThroughputOverprovisioned</code>
        ///                   </b> —
        ///                     The instance’s disk throughput configuration can be sized down while still
        ///                     meeting the performance requirements of your workload. This is identified by
        ///                     analyzing the <code>DiskReadBytes</code> and <code>DiskWriteBytes</code> metrics
        ///                     of the current instance during the look-back period.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>DiskThroughputUnderprovisioned</code>
        ///                   </b> —
        ///                     The instance’s disk throughput configuration doesn't meet the performance
        ///                     requirements of your workload and there is an alternative instance type that
        ///                     provides better disk throughput performance. This is identified by analyzing the
        ///                         <code>DiskReadBytes</code> and <code>DiskWriteBytes</code> metrics of the
        ///                     current instance during the look-back period.</p>
        ///             </li>
        ///          </ul>
        ///         <note>
        ///             <p>For more information about instance metrics, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/viewing_metrics_with_cloudwatch.html">List the
        ///                     available CloudWatch metrics for your instances</a> in the <i>Amazon Elastic Compute Cloud
        ///                     User Guide</i>. For more information about EBS volume metrics, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/using_cloudwatch_ebs.html">Amazon CloudWatch metrics for Amazon EBS</a> in the <i>Amazon Elastic Compute Cloud User
        ///                     Guide</i>.</p>
        ///         </note>
        public let findingReasonCodes: [ComputeOptimizerClientTypes.InstanceRecommendationFindingReasonCode]?
        /// <p>The Amazon Resource Name (ARN) of the current instance.</p>
        public let instanceArn: Swift.String?
        /// <p>The name of the current instance.</p>
        public let instanceName: Swift.String?
        /// <p>The time stamp of when the instance recommendation was last refreshed.</p>
        public let lastRefreshTimestamp: ClientRuntime.Date?
        /// <p>The number of days for which utilization metrics were analyzed for the
        ///             instance.</p>
        public let lookBackPeriodInDays: Swift.Double
        /// <p>An array of objects that describe the recommendation options for the instance.</p>
        public let recommendationOptions: [ComputeOptimizerClientTypes.InstanceRecommendationOption]?
        /// <p>An array of objects that describe the source resource of the recommendation.</p>
        public let recommendationSources: [ComputeOptimizerClientTypes.RecommendationSource]?
        /// <p>An array of objects that describe the utilization metrics of the instance.</p>
        public let utilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]?

        public init (
            accountId: Swift.String? = nil,
            currentInstanceType: Swift.String? = nil,
            finding: ComputeOptimizerClientTypes.Finding? = nil,
            findingReasonCodes: [ComputeOptimizerClientTypes.InstanceRecommendationFindingReasonCode]? = nil,
            instanceArn: Swift.String? = nil,
            instanceName: Swift.String? = nil,
            lastRefreshTimestamp: ClientRuntime.Date? = nil,
            lookBackPeriodInDays: Swift.Double = 0.0,
            recommendationOptions: [ComputeOptimizerClientTypes.InstanceRecommendationOption]? = nil,
            recommendationSources: [ComputeOptimizerClientTypes.RecommendationSource]? = nil,
            utilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]? = nil
        )
        {
            self.accountId = accountId
            self.currentInstanceType = currentInstanceType
            self.finding = finding
            self.findingReasonCodes = findingReasonCodes
            self.instanceArn = instanceArn
            self.instanceName = instanceName
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookBackPeriodInDays = lookBackPeriodInDays
            self.recommendationOptions = recommendationOptions
            self.recommendationSources = recommendationSources
            self.utilizationMetrics = utilizationMetrics
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum InstanceRecommendationFindingReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cpuOverProvisioned
        case cpuUnderProvisioned
        case diskIopsOverProvisioned
        case diskIopsUnderProvisioned
        case diskThroughputOverProvisioned
        case diskThroughputUnderProvisioned
        case ebsIopsOverProvisioned
        case ebsIopsUnderProvisioned
        case ebsThroughputOverProvisioned
        case ebsThroughputUnderProvisioned
        case memoryOverProvisioned
        case memoryUnderProvisioned
        case networkBandwidthOverProvisioned
        case networkBandwidthUnderProvisioned
        case networkPpsOverProvisioned
        case networkPpsUnderProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [InstanceRecommendationFindingReasonCode] {
            return [
                .cpuOverProvisioned,
                .cpuUnderProvisioned,
                .diskIopsOverProvisioned,
                .diskIopsUnderProvisioned,
                .diskThroughputOverProvisioned,
                .diskThroughputUnderProvisioned,
                .ebsIopsOverProvisioned,
                .ebsIopsUnderProvisioned,
                .ebsThroughputOverProvisioned,
                .ebsThroughputUnderProvisioned,
                .memoryOverProvisioned,
                .memoryUnderProvisioned,
                .networkBandwidthOverProvisioned,
                .networkBandwidthUnderProvisioned,
                .networkPpsOverProvisioned,
                .networkPpsUnderProvisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cpuOverProvisioned: return "CPUOverprovisioned"
            case .cpuUnderProvisioned: return "CPUUnderprovisioned"
            case .diskIopsOverProvisioned: return "DiskIOPSOverprovisioned"
            case .diskIopsUnderProvisioned: return "DiskIOPSUnderprovisioned"
            case .diskThroughputOverProvisioned: return "DiskThroughputOverprovisioned"
            case .diskThroughputUnderProvisioned: return "DiskThroughputUnderprovisioned"
            case .ebsIopsOverProvisioned: return "EBSIOPSOverprovisioned"
            case .ebsIopsUnderProvisioned: return "EBSIOPSUnderprovisioned"
            case .ebsThroughputOverProvisioned: return "EBSThroughputOverprovisioned"
            case .ebsThroughputUnderProvisioned: return "EBSThroughputUnderprovisioned"
            case .memoryOverProvisioned: return "MemoryOverprovisioned"
            case .memoryUnderProvisioned: return "MemoryUnderprovisioned"
            case .networkBandwidthOverProvisioned: return "NetworkBandwidthOverprovisioned"
            case .networkBandwidthUnderProvisioned: return "NetworkBandwidthUnderprovisioned"
            case .networkPpsOverProvisioned: return "NetworkPPSOverprovisioned"
            case .networkPpsUnderProvisioned: return "NetworkPPSUnderprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = InstanceRecommendationFindingReasonCode(rawValue: rawValue) ?? InstanceRecommendationFindingReasonCode.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.InstanceRecommendationOption: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case instanceType
        case performanceRisk
        case platformDifferences
        case projectedUtilizationMetrics
        case rank
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let instanceType = instanceType {
            try encodeContainer.encode(instanceType, forKey: .instanceType)
        }
        if performanceRisk != 0.0 {
            try encodeContainer.encode(performanceRisk, forKey: .performanceRisk)
        }
        if let platformDifferences = platformDifferences {
            var platformDifferencesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .platformDifferences)
            for platformdifferences0 in platformDifferences {
                try platformDifferencesContainer.encode(platformdifferences0.rawValue)
            }
        }
        if let projectedUtilizationMetrics = projectedUtilizationMetrics {
            var projectedUtilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .projectedUtilizationMetrics)
            for projectedutilizationmetrics0 in projectedUtilizationMetrics {
                try projectedUtilizationMetricsContainer.encode(projectedutilizationmetrics0)
            }
        }
        if rank != 0 {
            try encodeContainer.encode(rank, forKey: .rank)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let instanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .instanceType)
        instanceType = instanceTypeDecoded
        let projectedUtilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.UtilizationMetric?].self, forKey: .projectedUtilizationMetrics)
        var projectedUtilizationMetricsDecoded0:[ComputeOptimizerClientTypes.UtilizationMetric]? = nil
        if let projectedUtilizationMetricsContainer = projectedUtilizationMetricsContainer {
            projectedUtilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.UtilizationMetric]()
            for structure0 in projectedUtilizationMetricsContainer {
                if let structure0 = structure0 {
                    projectedUtilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        projectedUtilizationMetrics = projectedUtilizationMetricsDecoded0
        let platformDifferencesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.PlatformDifference?].self, forKey: .platformDifferences)
        var platformDifferencesDecoded0:[ComputeOptimizerClientTypes.PlatformDifference]? = nil
        if let platformDifferencesContainer = platformDifferencesContainer {
            platformDifferencesDecoded0 = [ComputeOptimizerClientTypes.PlatformDifference]()
            for string0 in platformDifferencesContainer {
                if let string0 = string0 {
                    platformDifferencesDecoded0?.append(string0)
                }
            }
        }
        platformDifferences = platformDifferencesDecoded0
        let performanceRiskDecoded = try containerValues.decode(Swift.Double.self, forKey: .performanceRisk)
        performanceRisk = performanceRiskDecoded
        let rankDecoded = try containerValues.decode(Swift.Int.self, forKey: .rank)
        rank = rankDecoded
    }
}

extension ComputeOptimizerClientTypes.InstanceRecommendationOption: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InstanceRecommendationOption(instanceType: \(Swift.String(describing: instanceType)), performanceRisk: \(Swift.String(describing: performanceRisk)), platformDifferences: \(Swift.String(describing: platformDifferences)), projectedUtilizationMetrics: \(Swift.String(describing: projectedUtilizationMetrics)), rank: \(Swift.String(describing: rank)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a recommendation option for an Amazon EC2 instance.</p>
    public struct InstanceRecommendationOption: Swift.Equatable {
        /// <p>The instance type of the instance recommendation.</p>
        public let instanceType: Swift.String?
        /// <p>The performance risk of the instance recommendation option.</p>
        ///         <p>Performance risk indicates the likelihood of the recommended instance type not meeting
        ///             the resource needs of your workload. Compute Optimizer calculates an individual performance risk
        ///             score for each specification of the recommended instance, including CPU, memory, EBS
        ///             throughput, EBS IOPS, disk throughput, disk IOPS, network throughput, and network PPS.
        ///             The performance
        ///             risk of the recommended instance is calculated as the maximum performance risk score
        ///             across the analyzed resource specifications.</p>
        ///         <p>The value ranges from <code>0</code> to <code>5</code>, with <code>0</code> meaning
        ///             that the recommended resource is predicted to always provide enough hardware capability.
        ///             The higher the performance risk is, the more likely you should validate whether the
        ///             recommendation will meet the performance requirements of your workload before migrating
        ///             your resource.</p>
        public let performanceRisk: Swift.Double
        /// <p>Describes the configuration differences between the current instance and the
        ///             recommended instance type. You should consider the configuration differences before
        ///             migrating your workloads from the current instance to the recommended instance type. The
        ///                 <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/ec2-instance-resize.html">Change the instance type guide for Linux</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/ec2-instance-resize.html">Change the instance type
        ///                 guide for Windows</a> provide general guidance for getting started with an
        ///             instance migration.</p>
        ///
        ///         <p>Platform differences include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>Hypervisor</code>
        ///                   </b> — The
        ///                     hypervisor of the recommended instance type is different than that of the
        ///                     current instance. For example, the recommended instance type uses a Nitro
        ///                     hypervisor and the current instance uses a Xen hypervisor. The differences that
        ///                     you should consider between these hypervisors are covered in the <a href="http://aws.amazon.com/ec2/faqs/#Nitro_Hypervisor">Nitro Hypervisor</a>
        ///                     section of the Amazon EC2 frequently asked questions. For more information, see
        ///                         <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#ec2-nitro-instances">Instances built on the Nitro System</a> in the <i>Amazon EC2
        ///                         User Guide for Linux</i>, or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instance-types.html#ec2-nitro-instances">Instances built on the Nitro System</a> in the <i>Amazon EC2
        ///                         User Guide for Windows</i>.</p>
        ///
        ///
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>NetworkInterface</code>
        ///                   </b> — The network
        ///                     interface of the recommended instance type is different than that of the current
        ///                     instance. For example, the recommended instance type supports enhanced
        ///                     networking and the current instance might not. To enable enhanced networking for
        ///                     the recommended instance type, you will need to install the Elastic Network
        ///                     Adapter (ENA) driver or the Intel 82599 Virtual Function driver. For more
        ///                     information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#instance-networking-storage">Networking and storage features</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/enhanced-networking.html">Enhanced networking
        ///                         on Linux</a> in the <i>Amazon EC2 User Guide for
        ///                     Linux</i>, or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instance-types.html#instance-networking-storage">Networking and storage features</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/enhanced-networking.html">Enhanced
        ///                         networking on Windows</a> in the <i>Amazon EC2 User Guide for
        ///                         Windows</i>.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>StorageInterface</code>
        ///                   </b> — The storage
        ///                     interface of the recommended instance type is different than that of the current
        ///                     instance. For example, the recommended instance type uses an NVMe storage
        ///                     interface and the current instance does not. To access NVMe volumes for the
        ///                     recommended instance type, you will need to install or upgrade the NVMe driver.
        ///                     For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#instance-networking-storage">Networking and storage features</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/nvme-ebs-volumes.html">Amazon EBS and NVMe on
        ///                         Linux instances</a> in the <i>Amazon EC2 User Guide for
        ///                         Linux</i>, or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instance-types.html#instance-networking-storage">Networking and storage features</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/nvme-ebs-volumes.html">Amazon EBS and NVMe
        ///                         on Windows instances</a> in the <i>Amazon EC2 User Guide for
        ///                         Windows</i>.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>InstanceStoreAvailability</code>
        ///                   </b> — The recommended
        ///                     instance type does not support instance store volumes and the current instance
        ///                     does. Before migrating, you might need to back up the data on your instance
        ///                     store volumes if you want to preserve them. For more information, see <a href="https://aws.amazon.com/premiumsupport/knowledge-center/back-up-instance-store-ebs/">How do I back up an instance store volume on my Amazon EC2 instance to
        ///                         Amazon EBS?</a> in the <i>AWS Premium Support Knowledge
        ///                         Base</i>. For more information, see <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/instance-types.html#instance-networking-storage">Networking and storage features</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/InstanceStorage.html">Amazon EC2 instance
        ///                         store</a> in the <i>Amazon EC2 User Guide for Linux</i>, or see
        ///                         <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/instance-types.html#instance-networking-storage">Networking and storage features</a> and <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/InstanceStorage.html">Amazon EC2 instance
        ///                         store</a> in the <i>Amazon EC2 User Guide for
        ///                     Windows</i>.</p>
        ///
        ///
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>VirtualizationType</code>
        ///                   </b> — The
        ///                     recommended instance type uses the hardware virtual machine (HVM) virtualization
        ///                     type and the current instance uses the paravirtual (PV) virtualization type. For
        ///                     more information about the differences between these virtualization types, see
        ///                         <a href="https://docs.aws.amazon.com/AWSEC2/latest/UserGuide/virtualization_types.html">Linux AMI
        ///                         virtualization types</a> in the <i>Amazon EC2 User Guide for
        ///                         Linux</i>, or <a href="https://docs.aws.amazon.com/AWSEC2/latest/WindowsGuide/windows-ami-version-history.html#virtualization-types">Windows AMI virtualization types</a> in the <i>Amazon EC2 User
        ///                         Guide for Windows</i>.</p>
        ///             </li>
        ///          </ul>
        public let platformDifferences: [ComputeOptimizerClientTypes.PlatformDifference]?
        /// <p>An array of objects that describe the projected utilization metrics of the instance
        ///             recommendation option.</p>
        ///
        ///         <note>
        ///             <p>The <code>Cpu</code> and <code>Memory</code> metrics are the only projected
        ///                 utilization metrics returned. Additionally, the <code>Memory</code> metric is
        ///                 returned only for resources that have the unified CloudWatch agent installed on them. For
        ///                 more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent">Enabling Memory
        ///                     Utilization with the CloudWatch Agent</a>.</p>
        ///         </note>
        public let projectedUtilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]?
        /// <p>The rank of the instance recommendation option.</p>
        ///         <p>The top recommendation option is ranked as <code>1</code>.</p>
        public let rank: Swift.Int

        public init (
            instanceType: Swift.String? = nil,
            performanceRisk: Swift.Double = 0.0,
            platformDifferences: [ComputeOptimizerClientTypes.PlatformDifference]? = nil,
            projectedUtilizationMetrics: [ComputeOptimizerClientTypes.UtilizationMetric]? = nil,
            rank: Swift.Int = 0
        )
        {
            self.instanceType = instanceType
            self.performanceRisk = performanceRisk
            self.platformDifferences = platformDifferences
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.rank = rank
        }
    }

}

extension InternalServerException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InternalServerException(message: \(Swift.String(describing: message)))"}
}

extension InternalServerException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InternalServerExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An internal error has occurred. Try your call again.</p>
public struct InternalServerException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InternalServerExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InternalServerExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension InvalidParameterValueException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "InvalidParameterValueException(message: \(Swift.String(describing: message)))"}
}

extension InvalidParameterValueException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: InvalidParameterValueExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>An invalid or out-of-range value was supplied for the input parameter.</p>
public struct InvalidParameterValueException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct InvalidParameterValueExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension InvalidParameterValueExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComputeOptimizerClientTypes.JobFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filtervalues0 in values {
                try valuesContainer.encode(filtervalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.JobFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ComputeOptimizerClientTypes.JobFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "JobFilter(name: \(Swift.String(describing: name)), values: \(Swift.String(describing: values)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a filter that returns a more specific list of recommendation export jobs.
    ///             Use this filter with the <code>DescribeRecommendationExportJobs</code> action.</p>
    ///
    ///         <p>You can use <code>EBSFilter</code> with the <code>GetEBSVolumeRecommendations</code>
    ///             action, <code>LambdaFunctionRecommendationFilter</code> with the
    ///                 <code>GetLambdaFunctionRecommendations</code> action, and <code>Filter</code> with
    ///             the <code>GetAutoScalingGroupRecommendations</code> and
    ///                 <code>GetEC2InstanceRecommendations</code> actions.</p>
    public struct JobFilter: Swift.Equatable {
        /// <p>The name of the filter.</p>
        ///
        ///         <p>Specify <code>ResourceType</code> to return export jobs of a specific resource type
        ///             (e.g., <code>Ec2Instance</code>).</p>
        ///
        ///         <p>Specify <code>JobStatus</code> to return export jobs with a specific status (e.g,
        ///                 <code>Complete</code>).</p>
        public let name: ComputeOptimizerClientTypes.JobFilterName?
        /// <p>The value of the filter.</p>
        ///
        ///         <p>The valid values for this parameter are as follows, depending on what you specify for
        ///             the <code>name</code> parameter:</p>
        ///
        ///         <ul>
        ///             <li>
        ///                 <p>Specify <code>Ec2Instance</code> or <code>AutoScalingGroup</code> if you
        ///                     specify the <code>name</code> parameter as <code>ResourceType</code>. There is
        ///                     no filter for EBS volumes because volume recommendations cannot be exported at
        ///                     this time.</p>
        ///             </li>
        ///             <li>
        ///                 <p>Specify <code>Queued</code>, <code>InProgress</code>, <code>Complete</code>,
        ///                     or <code>Failed</code> if you specify the <code>name</code> parameter as
        ///                         <code>JobStatus</code>.</p>
        ///             </li>
        ///          </ul>
        public let values: [Swift.String]?

        public init (
            name: ComputeOptimizerClientTypes.JobFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum JobFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case jobStatus
        case resourceType
        case sdkUnknown(Swift.String)

        public static var allCases: [JobFilterName] {
            return [
                .jobStatus,
                .resourceType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .jobStatus: return "JobStatus"
            case .resourceType: return "ResourceType"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobFilterName(rawValue: rawValue) ?? JobFilterName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum JobStatus: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case complete
        case failed
        case inProgress
        case queued
        case sdkUnknown(Swift.String)

        public static var allCases: [JobStatus] {
            return [
                .complete,
                .failed,
                .inProgress,
                .queued,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .complete: return "Complete"
            case .failed: return "Failed"
            case .inProgress: return "InProgress"
            case .queued: return "Queued"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = JobStatus(rawValue: rawValue) ?? JobStatus.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum LambdaFunctionMemoryMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case duration
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionMemoryMetricName] {
            return [
                .duration,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .duration: return "Duration"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionMemoryMetricName(rawValue: rawValue) ?? LambdaFunctionMemoryMetricName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum LambdaFunctionMemoryMetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case expected
        case lowerBound
        case upperBound
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionMemoryMetricStatistic] {
            return [
                .expected,
                .lowerBound,
                .upperBound,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .expected: return "Expected"
            case .lowerBound: return "LowerBound"
            case .upperBound: return "UpperBound"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionMemoryMetricStatistic(rawValue: rawValue) ?? LambdaFunctionMemoryMetricStatistic.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case statistic
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let statistic = statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricName.self, forKey: .name)
        name = nameDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let valueDecoded = try containerValues.decode(Swift.Double.self, forKey: .value)
        value = valueDecoded
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LambdaFunctionMemoryProjectedMetric(name: \(Swift.String(describing: name)), statistic: \(Swift.String(describing: statistic)), value: \(Swift.String(describing: value)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a projected utilization metric of an AWS Lambda function
    ///             recommendation option.</p>
    public struct LambdaFunctionMemoryProjectedMetric: Swift.Equatable {
        /// <p>The name of the projected utilization metric.</p>
        public let name: ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricName?
        /// <p>The statistic of the projected utilization metric.</p>
        public let statistic: ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricStatistic?
        /// <p>The values of the projected utilization metrics.</p>
        public let value: Swift.Double

        public init (
            name: ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricName? = nil,
            statistic: ComputeOptimizerClientTypes.LambdaFunctionMemoryMetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }

}

extension ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case memorySize
        case projectedUtilizationMetrics
        case rank
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if memorySize != 0 {
            try encodeContainer.encode(memorySize, forKey: .memorySize)
        }
        if let projectedUtilizationMetrics = projectedUtilizationMetrics {
            var projectedUtilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .projectedUtilizationMetrics)
            for lambdafunctionmemoryprojectedmetrics0 in projectedUtilizationMetrics {
                try projectedUtilizationMetricsContainer.encode(lambdafunctionmemoryprojectedmetrics0)
            }
        }
        if rank != 0 {
            try encodeContainer.encode(rank, forKey: .rank)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let rankDecoded = try containerValues.decode(Swift.Int.self, forKey: .rank)
        rank = rankDecoded
        let memorySizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .memorySize)
        memorySize = memorySizeDecoded
        let projectedUtilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric?].self, forKey: .projectedUtilizationMetrics)
        var projectedUtilizationMetricsDecoded0:[ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric]? = nil
        if let projectedUtilizationMetricsContainer = projectedUtilizationMetricsContainer {
            projectedUtilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric]()
            for structure0 in projectedUtilizationMetricsContainer {
                if let structure0 = structure0 {
                    projectedUtilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        projectedUtilizationMetrics = projectedUtilizationMetricsDecoded0
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LambdaFunctionMemoryRecommendationOption(memorySize: \(Swift.String(describing: memorySize)), projectedUtilizationMetrics: \(Swift.String(describing: projectedUtilizationMetrics)), rank: \(Swift.String(describing: rank)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a recommendation option for an AWS Lambda function.</p>
    public struct LambdaFunctionMemoryRecommendationOption: Swift.Equatable {
        /// <p>The memory size, in MB, of the function recommendation option.</p>
        public let memorySize: Swift.Int
        /// <p>An array of objects that describe the projected utilization metrics of the function
        ///             recommendation option.</p>
        public let projectedUtilizationMetrics: [ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric]?
        /// <p>The rank of the function recommendation option.</p>
        ///
        ///         <p>The top recommendation option is ranked as <code>1</code>.</p>
        public let rank: Swift.Int

        public init (
            memorySize: Swift.Int = 0,
            projectedUtilizationMetrics: [ComputeOptimizerClientTypes.LambdaFunctionMemoryProjectedMetric]? = nil,
            rank: Swift.Int = 0
        )
        {
            self.memorySize = memorySize
            self.projectedUtilizationMetrics = projectedUtilizationMetrics
            self.rank = rank
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum LambdaFunctionMetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case duration
        case memory
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionMetricName] {
            return [
                .duration,
                .memory,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .duration: return "Duration"
            case .memory: return "Memory"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionMetricName(rawValue: rawValue) ?? LambdaFunctionMetricName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum LambdaFunctionMetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionMetricStatistic] {
            return [
                .average,
                .maximum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionMetricStatistic(rawValue: rawValue) ?? LambdaFunctionMetricStatistic.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionRecommendation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case currentMemorySize
        case finding
        case findingReasonCodes
        case functionArn
        case functionVersion
        case lastRefreshTimestamp
        case lookbackPeriodInDays
        case memorySizeRecommendationOptions
        case numberOfInvocations
        case utilizationMetrics
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if currentMemorySize != 0 {
            try encodeContainer.encode(currentMemorySize, forKey: .currentMemorySize)
        }
        if let finding = finding {
            try encodeContainer.encode(finding.rawValue, forKey: .finding)
        }
        if let findingReasonCodes = findingReasonCodes {
            var findingReasonCodesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .findingReasonCodes)
            for lambdafunctionrecommendationfindingreasoncodes0 in findingReasonCodes {
                try findingReasonCodesContainer.encode(lambdafunctionrecommendationfindingreasoncodes0.rawValue)
            }
        }
        if let functionArn = functionArn {
            try encodeContainer.encode(functionArn, forKey: .functionArn)
        }
        if let functionVersion = functionVersion {
            try encodeContainer.encode(functionVersion, forKey: .functionVersion)
        }
        if let lastRefreshTimestamp = lastRefreshTimestamp {
            try encodeContainer.encode(lastRefreshTimestamp.timeIntervalSince1970, forKey: .lastRefreshTimestamp)
        }
        if lookbackPeriodInDays != 0.0 {
            try encodeContainer.encode(lookbackPeriodInDays, forKey: .lookbackPeriodInDays)
        }
        if let memorySizeRecommendationOptions = memorySizeRecommendationOptions {
            var memorySizeRecommendationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .memorySizeRecommendationOptions)
            for lambdafunctionmemoryrecommendationoptions0 in memorySizeRecommendationOptions {
                try memorySizeRecommendationOptionsContainer.encode(lambdafunctionmemoryrecommendationoptions0)
            }
        }
        if numberOfInvocations != 0 {
            try encodeContainer.encode(numberOfInvocations, forKey: .numberOfInvocations)
        }
        if let utilizationMetrics = utilizationMetrics {
            var utilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .utilizationMetrics)
            for lambdafunctionutilizationmetrics0 in utilizationMetrics {
                try utilizationMetricsContainer.encode(lambdafunctionutilizationmetrics0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let functionArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionArn)
        functionArn = functionArnDecoded
        let functionVersionDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .functionVersion)
        functionVersion = functionVersionDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let currentMemorySizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .currentMemorySize)
        currentMemorySize = currentMemorySizeDecoded
        let numberOfInvocationsDecoded = try containerValues.decode(Swift.Int.self, forKey: .numberOfInvocations)
        numberOfInvocations = numberOfInvocationsDecoded
        let utilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric?].self, forKey: .utilizationMetrics)
        var utilizationMetricsDecoded0:[ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric]? = nil
        if let utilizationMetricsContainer = utilizationMetricsContainer {
            utilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric]()
            for structure0 in utilizationMetricsContainer {
                if let structure0 = structure0 {
                    utilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        utilizationMetrics = utilizationMetricsDecoded0
        let lookbackPeriodInDaysDecoded = try containerValues.decode(Swift.Double.self, forKey: .lookbackPeriodInDays)
        lookbackPeriodInDays = lookbackPeriodInDaysDecoded
        let lastRefreshTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastRefreshTimestamp)
        lastRefreshTimestamp = lastRefreshTimestampDecoded
        let findingDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.LambdaFunctionRecommendationFinding.self, forKey: .finding)
        finding = findingDecoded
        let findingReasonCodesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode?].self, forKey: .findingReasonCodes)
        var findingReasonCodesDecoded0:[ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode]? = nil
        if let findingReasonCodesContainer = findingReasonCodesContainer {
            findingReasonCodesDecoded0 = [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode]()
            for string0 in findingReasonCodesContainer {
                if let string0 = string0 {
                    findingReasonCodesDecoded0?.append(string0)
                }
            }
        }
        findingReasonCodes = findingReasonCodesDecoded0
        let memorySizeRecommendationOptionsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption?].self, forKey: .memorySizeRecommendationOptions)
        var memorySizeRecommendationOptionsDecoded0:[ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption]? = nil
        if let memorySizeRecommendationOptionsContainer = memorySizeRecommendationOptionsContainer {
            memorySizeRecommendationOptionsDecoded0 = [ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption]()
            for structure0 in memorySizeRecommendationOptionsContainer {
                if let structure0 = structure0 {
                    memorySizeRecommendationOptionsDecoded0?.append(structure0)
                }
            }
        }
        memorySizeRecommendationOptions = memorySizeRecommendationOptionsDecoded0
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionRecommendation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LambdaFunctionRecommendation(accountId: \(Swift.String(describing: accountId)), currentMemorySize: \(Swift.String(describing: currentMemorySize)), finding: \(Swift.String(describing: finding)), findingReasonCodes: \(Swift.String(describing: findingReasonCodes)), functionArn: \(Swift.String(describing: functionArn)), functionVersion: \(Swift.String(describing: functionVersion)), lastRefreshTimestamp: \(Swift.String(describing: lastRefreshTimestamp)), lookbackPeriodInDays: \(Swift.String(describing: lookbackPeriodInDays)), memorySizeRecommendationOptions: \(Swift.String(describing: memorySizeRecommendationOptions)), numberOfInvocations: \(Swift.String(describing: numberOfInvocations)), utilizationMetrics: \(Swift.String(describing: utilizationMetrics)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes an AWS Lambda function recommendation.</p>
    public struct LambdaFunctionRecommendation: Swift.Equatable {
        /// <p>The AWS account ID of the function.</p>
        public let accountId: Swift.String?
        /// <p>The amount of memory, in MB, that's allocated to the current function.</p>
        public let currentMemorySize: Swift.Int
        /// <p>The finding classification of the function.</p>
        ///         <p>Findings for functions include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>Optimized</code>
        ///                   </b> — The function is
        ///                     correctly provisioned to run your workload based on its current configuration
        ///                     and its utilization history. This finding classification does not include
        ///                     finding reason codes.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>NotOptimized</code>
        ///                   </b> — The function is
        ///                     performing at a higher level (over-provisioned) or at a lower level
        ///                     (under-provisioned) than required for your workload because its current
        ///                     configuration is not optimal. Over-provisioned resources might lead to
        ///                     unnecessary infrastructure cost, and under-provisioned resources might lead to
        ///                     poor application performance. This finding classification can include the
        ///                         <code>MemoryUnderprovisioned</code> and <code>MemoryUnderprovisioned</code>
        ///                     finding reason codes.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>Unavailable</code>
        ///                   </b> — Compute Optimizer was unable to
        ///                     generate a recommendation for the function. This could be because the function
        ///                     has not accumulated sufficient metric data, or the function does not qualify for
        ///                     a recommendation. This finding classification can include the
        ///                         <code>InsufficientData</code> and <code>Inconclusive</code> finding reason
        ///                     codes.</p>
        ///                 <note>
        ///                     <p>Functions with a finding of unavailable are not returned unless you
        ///                         specify the <code>filter</code> parameter with a value of
        ///                             <code>Unavailable</code> in your
        ///                             <code>GetLambdaFunctionRecommendations</code> request.</p>
        ///                 </note>
        ///             </li>
        ///          </ul>
        public let finding: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFinding?
        /// <p>The reason for the finding classification of the function.</p>
        ///         <note>
        ///             <p>Functions that have a finding classification of <code>Optimized</code> don't have
        ///                 a finding reason code.</p>
        ///         </note>
        ///         <p>Finding reason codes for functions include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>MemoryOverprovisioned</code>
        ///                   </b> — The
        ///                     function is over-provisioned when its memory configuration can be sized down
        ///                     while still meeting the performance requirements of your workload. An
        ///                     over-provisioned function might lead to unnecessary infrastructure cost. This
        ///                     finding reason code is part of the <code>NotOptimized</code> finding
        ///                     classification.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>MemoryUnderprovisioned</code>
        ///                   </b> — The
        ///                     function is under-provisioned when its memory configuration doesn't meet the
        ///                     performance requirements of the workload. An under-provisioned function might
        ///                     lead to poor application performance. This finding reason code is part of the
        ///                         <code>NotOptimized</code> finding classification.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>InsufficientData</code>
        ///                   </b> — The
        ///                     function does not have sufficient metric data for Compute Optimizer to generate a
        ///                     recommendation. For more information, see the <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/requirements.html">Supported resources and
        ///                         requirements</a> in the <i>AWS Compute Optimizer User Guide</i>. This
        ///                     finding reason code is part of the <code>Unavailable</code> finding
        ///                     classification.</p>
        ///
        ///
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>Inconclusive</code>
        ///                   </b> — The function does
        ///                     not qualify for a recommendation because Compute Optimizer cannot generate a recommendation
        ///                     with a high degree of confidence. This finding reason code is part of the
        ///                         <code>Unavailable</code> finding classification.</p>
        ///             </li>
        ///          </ul>
        public let findingReasonCodes: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode]?
        /// <p>The Amazon Resource Name (ARN) of the current function.</p>
        public let functionArn: Swift.String?
        /// <p>The version number of the current function.</p>
        public let functionVersion: Swift.String?
        /// <p>The time stamp of when the function recommendation was last refreshed.</p>
        public let lastRefreshTimestamp: ClientRuntime.Date?
        /// <p>The number of days for which utilization metrics were analyzed for the
        ///             function.</p>
        public let lookbackPeriodInDays: Swift.Double
        /// <p>An array of objects that describe the memory configuration recommendation options for
        ///             the function.</p>
        public let memorySizeRecommendationOptions: [ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption]?
        /// <p>The number of times your function code was executed during the look-back
        ///             period.</p>
        public let numberOfInvocations: Swift.Int
        /// <p>An array of objects that describe the utilization metrics of the function.</p>
        public let utilizationMetrics: [ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric]?

        public init (
            accountId: Swift.String? = nil,
            currentMemorySize: Swift.Int = 0,
            finding: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFinding? = nil,
            findingReasonCodes: [ComputeOptimizerClientTypes.LambdaFunctionRecommendationFindingReasonCode]? = nil,
            functionArn: Swift.String? = nil,
            functionVersion: Swift.String? = nil,
            lastRefreshTimestamp: ClientRuntime.Date? = nil,
            lookbackPeriodInDays: Swift.Double = 0.0,
            memorySizeRecommendationOptions: [ComputeOptimizerClientTypes.LambdaFunctionMemoryRecommendationOption]? = nil,
            numberOfInvocations: Swift.Int = 0,
            utilizationMetrics: [ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric]? = nil
        )
        {
            self.accountId = accountId
            self.currentMemorySize = currentMemorySize
            self.finding = finding
            self.findingReasonCodes = findingReasonCodes
            self.functionArn = functionArn
            self.functionVersion = functionVersion
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookbackPeriodInDays = lookbackPeriodInDays
            self.memorySizeRecommendationOptions = memorySizeRecommendationOptions
            self.numberOfInvocations = numberOfInvocations
            self.utilizationMetrics = utilizationMetrics
        }
    }

}

extension ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for filtervalues0 in values {
                try valuesContainer.encode(filtervalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilterName.self, forKey: .name)
        name = nameDecoded
        let valuesContainer = try containerValues.decodeIfPresent([Swift.String?].self, forKey: .values)
        var valuesDecoded0:[Swift.String]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.String]()
            for string0 in valuesContainer {
                if let string0 = string0 {
                    valuesDecoded0?.append(string0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilter: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LambdaFunctionRecommendationFilter(name: \(Swift.String(describing: name)), values: \(Swift.String(describing: values)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a filter that returns a more specific list of AWS Lambda function
    ///             recommendations. Use this filter with the <code>GetLambdaFunctionRecommendations</code>
    ///             action.</p>
    ///
    ///
    ///
    ///         <p>You can use <code>EBSFilter</code> with the <code>GetEBSVolumeRecommendations</code>
    ///             action, <code>JobFilter</code> with the <code>DescribeRecommendationExportJobs</code>
    ///             action, and <code>Filter</code> with the <code>GetAutoScalingGroupRecommendations</code>
    ///             and <code>GetEC2InstanceRecommendations</code> actions.</p>
    public struct LambdaFunctionRecommendationFilter: Swift.Equatable {
        /// <p>The name of the filter.</p>
        ///
        ///         <p>Specify <code>Finding</code> to return recommendations with a specific finding
        ///             classification (e.g., <code>NotOptimized</code>).</p>
        ///
        ///         <p>Specify <code>FindingReasonCode</code> to return recommendations with a specific
        ///             finding reason code (e.g., <code>MemoryUnderprovisioned</code>).</p>
        public let name: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilterName?
        /// <p>The value of the filter.</p>
        ///
        ///         <p>The valid values for this parameter are as follows, depending on what you specify for
        ///             the <code>name</code> parameter:</p>
        ///
        ///         <ul>
        ///             <li>
        ///                 <p>Specify <code>Optimized</code>, <code>NotOptimized</code>, or
        ///                         <code>Unavailable</code> if you specify the <code>name</code> parameter as
        ///                         <code>Finding</code>.</p>
        ///             </li>
        ///             <li>
        ///                 <p>Specify <code>MemoryOverprovisioned</code>,
        ///                         <code>MemoryUnderprovisioned</code>, <code>InsufficientData</code>, or
        ///                         <code>Inconclusive</code> if you specify the <code>name</code> parameter as
        ///                         <code>FindingReasonCode</code>.</p>
        ///             </li>
        ///          </ul>
        public let values: [Swift.String]?

        public init (
            name: ComputeOptimizerClientTypes.LambdaFunctionRecommendationFilterName? = nil,
            values: [Swift.String]? = nil
        )
        {
            self.name = name
            self.values = values
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum LambdaFunctionRecommendationFilterName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case finding
        case findingReasonCode
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionRecommendationFilterName] {
            return [
                .finding,
                .findingReasonCode,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .finding: return "Finding"
            case .findingReasonCode: return "FindingReasonCode"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionRecommendationFilterName(rawValue: rawValue) ?? LambdaFunctionRecommendationFilterName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum LambdaFunctionRecommendationFinding: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case notOptimized
        case optimized
        case unavailable
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionRecommendationFinding] {
            return [
                .notOptimized,
                .optimized,
                .unavailable,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .notOptimized: return "NotOptimized"
            case .optimized: return "Optimized"
            case .unavailable: return "Unavailable"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionRecommendationFinding(rawValue: rawValue) ?? LambdaFunctionRecommendationFinding.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum LambdaFunctionRecommendationFindingReasonCode: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case inconclusive
        case insufficientData
        case memoryOverProvisioned
        case memoryUnderProvisioned
        case sdkUnknown(Swift.String)

        public static var allCases: [LambdaFunctionRecommendationFindingReasonCode] {
            return [
                .inconclusive,
                .insufficientData,
                .memoryOverProvisioned,
                .memoryUnderProvisioned,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .inconclusive: return "Inconclusive"
            case .insufficientData: return "InsufficientData"
            case .memoryOverProvisioned: return "MemoryOverprovisioned"
            case .memoryUnderProvisioned: return "MemoryUnderprovisioned"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = LambdaFunctionRecommendationFindingReasonCode(rawValue: rawValue) ?? LambdaFunctionRecommendationFindingReasonCode.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case statistic
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let statistic = statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.LambdaFunctionMetricName.self, forKey: .name)
        name = nameDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.LambdaFunctionMetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let valueDecoded = try containerValues.decode(Swift.Double.self, forKey: .value)
        value = valueDecoded
    }
}

extension ComputeOptimizerClientTypes.LambdaFunctionUtilizationMetric: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LambdaFunctionUtilizationMetric(name: \(Swift.String(describing: name)), statistic: \(Swift.String(describing: statistic)), value: \(Swift.String(describing: value)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a utilization metric of an AWS Lambda function.</p>
    public struct LambdaFunctionUtilizationMetric: Swift.Equatable {
        /// <p>The name of the utilization metric.</p>
        ///         <p>The following utilization metrics are available:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>Duration</code> - The amount of time that your function code spends
        ///                     processing an event.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>Memory</code> - The amount of memory used per invocation.</p>
        ///             </li>
        ///          </ul>
        public let name: ComputeOptimizerClientTypes.LambdaFunctionMetricName?
        /// <p>The statistic of the utilization metric.</p>
        ///
        ///         <p>The Compute Optimizer API, AWS Command Line Interface (AWS CLI), and SDKs return utilization metrics using
        ///             only the <code>Maximum</code> statistic, which is the highest value observed during the
        ///             specified period.</p>
        ///
        ///
        ///
        ///         <p>The Compute Optimizer console displays graphs for some utilization metrics using the
        ///                 <code>Average</code> statistic, which is the value of <code>Sum</code> /
        ///                 <code>SampleCount</code> during the specified period. For more information, see
        ///                 <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html">Viewing resource
        ///                 recommendations</a> in the <i>AWS Compute Optimizer User Guide</i>. You can
        ///             also get averaged utilization metric data for your resources using Amazon CloudWatch. For more
        ///             information, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html">Amazon CloudWatch User
        ///                 Guide</a>.</p>
        public let statistic: ComputeOptimizerClientTypes.LambdaFunctionMetricStatistic?
        /// <p>The value of the utilization metric.</p>
        public let value: Swift.Double

        public init (
            name: ComputeOptimizerClientTypes.LambdaFunctionMetricName? = nil,
            statistic: ComputeOptimizerClientTypes.LambdaFunctionMetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }

}

extension LimitExceededException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "LimitExceededException(message: \(Swift.String(describing: message)))"}
}

extension LimitExceededException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: LimitExceededExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request exceeds a limit of the service.</p>
public struct LimitExceededException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct LimitExceededExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension LimitExceededExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComputeOptimizerClientTypes {
    public enum MetricName: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case cpu
        case diskReadBytesPerSecond
        case diskReadOpsPerSecond
        case diskWriteBytesPerSecond
        case diskWriteOpsPerSecond
        case ebsReadBytesPerSecond
        case ebsReadOpsPerSecond
        case ebsWriteBytesPerSecond
        case ebsWriteOpsPerSecond
        case memory
        case networkInBytesPerSecond
        case networkOutBytesPerSecond
        case networkPacketsInPerSecond
        case networkPacketsOutPerSecond
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricName] {
            return [
                .cpu,
                .diskReadBytesPerSecond,
                .diskReadOpsPerSecond,
                .diskWriteBytesPerSecond,
                .diskWriteOpsPerSecond,
                .ebsReadBytesPerSecond,
                .ebsReadOpsPerSecond,
                .ebsWriteBytesPerSecond,
                .ebsWriteOpsPerSecond,
                .memory,
                .networkInBytesPerSecond,
                .networkOutBytesPerSecond,
                .networkPacketsInPerSecond,
                .networkPacketsOutPerSecond,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .cpu: return "Cpu"
            case .diskReadBytesPerSecond: return "DISK_READ_BYTES_PER_SECOND"
            case .diskReadOpsPerSecond: return "DISK_READ_OPS_PER_SECOND"
            case .diskWriteBytesPerSecond: return "DISK_WRITE_BYTES_PER_SECOND"
            case .diskWriteOpsPerSecond: return "DISK_WRITE_OPS_PER_SECOND"
            case .ebsReadBytesPerSecond: return "EBS_READ_BYTES_PER_SECOND"
            case .ebsReadOpsPerSecond: return "EBS_READ_OPS_PER_SECOND"
            case .ebsWriteBytesPerSecond: return "EBS_WRITE_BYTES_PER_SECOND"
            case .ebsWriteOpsPerSecond: return "EBS_WRITE_OPS_PER_SECOND"
            case .memory: return "Memory"
            case .networkInBytesPerSecond: return "NETWORK_IN_BYTES_PER_SECOND"
            case .networkOutBytesPerSecond: return "NETWORK_OUT_BYTES_PER_SECOND"
            case .networkPacketsInPerSecond: return "NETWORK_PACKETS_IN_PER_SECOND"
            case .networkPacketsOutPerSecond: return "NETWORK_PACKETS_OUT_PER_SECOND"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricName(rawValue: rawValue) ?? MetricName.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes {
    public enum MetricStatistic: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case average
        case maximum
        case sdkUnknown(Swift.String)

        public static var allCases: [MetricStatistic] {
            return [
                .average,
                .maximum,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .average: return "Average"
            case .maximum: return "Maximum"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = MetricStatistic(rawValue: rawValue) ?? MetricStatistic.sdkUnknown(rawValue)
        }
    }
}

extension MissingAuthenticationToken: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "MissingAuthenticationToken(message: \(Swift.String(describing: message)))"}
}

extension MissingAuthenticationToken: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: MissingAuthenticationTokenBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request must contain either a valid (registered) AWS access key ID or
///             X.509 certificate.</p>
public struct MissingAuthenticationToken: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct MissingAuthenticationTokenBody: Swift.Equatable {
    public let message: Swift.String?
}

extension MissingAuthenticationTokenBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension OptInRequiredException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "OptInRequiredException(message: \(Swift.String(describing: message)))"}
}

extension OptInRequiredException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: OptInRequiredExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The account is not opted in to AWS Compute Optimizer.</p>
public struct OptInRequiredException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct OptInRequiredExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension OptInRequiredExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComputeOptimizerClientTypes {
    public enum PlatformDifference: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case hypervisor
        case instanceStoreAvailability
        case networkInterface
        case storageInterface
        case virtualizationType
        case sdkUnknown(Swift.String)

        public static var allCases: [PlatformDifference] {
            return [
                .hypervisor,
                .instanceStoreAvailability,
                .networkInterface,
                .storageInterface,
                .virtualizationType,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .hypervisor: return "Hypervisor"
            case .instanceStoreAvailability: return "InstanceStoreAvailability"
            case .networkInterface: return "NetworkInterface"
            case .storageInterface: return "StorageInterface"
            case .virtualizationType: return "VirtualizationType"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = PlatformDifference(rawValue: rawValue) ?? PlatformDifference.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.ProjectedMetric: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case timestamps
        case values
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let timestamps = timestamps {
            var timestampsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .timestamps)
            for timestamps0 in timestamps {
                try timestampsContainer.encode(timestamps0.timeIntervalSince1970)
            }
        }
        if let values = values {
            var valuesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .values)
            for metricvalues0 in values {
                try valuesContainer.encode(metricvalues0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MetricName.self, forKey: .name)
        name = nameDecoded
        let timestampsContainer = try containerValues.decodeIfPresent([ClientRuntime.Date?].self, forKey: .timestamps)
        var timestampsDecoded0:[ClientRuntime.Date]? = nil
        if let timestampsContainer = timestampsContainer {
            timestampsDecoded0 = [ClientRuntime.Date]()
            for timestamp0 in timestampsContainer {
                if let timestamp0 = timestamp0 {
                    timestampsDecoded0?.append(timestamp0)
                }
            }
        }
        timestamps = timestampsDecoded0
        let valuesContainer = try containerValues.decodeIfPresent([Swift.Double?].self, forKey: .values)
        var valuesDecoded0:[Swift.Double]? = nil
        if let valuesContainer = valuesContainer {
            valuesDecoded0 = [Swift.Double]()
            for double0 in valuesContainer {
                if let double0 = double0 {
                    valuesDecoded0?.append(double0)
                }
            }
        }
        values = valuesDecoded0
    }
}

extension ComputeOptimizerClientTypes.ProjectedMetric: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ProjectedMetric(name: \(Swift.String(describing: name)), timestamps: \(Swift.String(describing: timestamps)), values: \(Swift.String(describing: values)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a projected utilization metric of a recommendation option, such as an Amazon EC2
    ///             instance. This represents the projected utilization of a recommendation option had you
    ///             used that resource during the analyzed period.</p>
    ///
    ///         <p>Compare the utilization metric data of your resource against its projected utilization
    ///             metric data to determine the performance difference between your current resource and
    ///             the recommended option.</p>
    ///
    ///         <note>
    ///             <p>The <code>Cpu</code> and <code>Memory</code> metrics are the only projected
    ///                 utilization metrics returned when you run the
    ///                     <code>GetEC2RecommendationProjectedMetrics</code> action. Additionally, the
    ///                     <code>Memory</code> metric is returned only for resources that have the unified
    ///                 CloudWatch agent installed on them. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent">Enabling Memory
    ///                     Utilization with the CloudWatch Agent</a>.</p>
    ///         </note>
    public struct ProjectedMetric: Swift.Equatable {
        /// <p>The name of the projected utilization metric.</p>
        ///         <p>The following projected utilization metrics are returned:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>Cpu</code> - The projected percentage of allocated EC2 compute units
        ///                     that would be in use on the recommendation option had you used that resource
        ///                     during the analyzed period. This metric identifies the processing power required
        ///                     to run an application on the recommendation option.</p>
        ///                 <p>Depending on the instance type, tools in your operating system can show a
        ///                     lower percentage than CloudWatch when the instance is not allocated a full
        ///                     processor core.</p>
        ///                 <p>Units: Percent</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>Memory</code> - The percentage of memory that would be in use on the
        ///                     recommendation option had you used that resource during the analyzed period.
        ///                     This metric identifies the amount of memory required to run an application on
        ///                     the recommendation option.</p>
        ///                 <p>Units: Percent</p>
        ///                 <note>
        ///                     <p>The <code>Memory</code> metric is returned only for resources that have
        ///                         the unified CloudWatch agent installed on them. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent">Enabling Memory
        ///                             Utilization with the CloudWatch Agent</a>.</p>
        ///                 </note>
        ///             </li>
        ///          </ul>
        public let name: ComputeOptimizerClientTypes.MetricName?
        /// <p>The time stamps of the projected utilization metric.</p>
        public let timestamps: [ClientRuntime.Date]?
        /// <p>The values of the projected utilization metrics.</p>
        public let values: [Swift.Double]?

        public init (
            name: ComputeOptimizerClientTypes.MetricName? = nil,
            timestamps: [ClientRuntime.Date]? = nil,
            values: [Swift.Double]? = nil
        )
        {
            self.name = name
            self.timestamps = timestamps
            self.values = values
        }
    }

}

extension ComputeOptimizerClientTypes.ReasonCodeSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.FindingReasonCode.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decode(Swift.Double.self, forKey: .value)
        value = valueDecoded
    }
}

extension ComputeOptimizerClientTypes.ReasonCodeSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ReasonCodeSummary(name: \(Swift.String(describing: name)), value: \(Swift.String(describing: value)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>A summary of a finding reason code.</p>
    public struct ReasonCodeSummary: Swift.Equatable {
        /// <p>The name of the finding reason code.</p>
        public let name: ComputeOptimizerClientTypes.FindingReasonCode?
        /// <p>The value of the finding reason code summary.</p>
        public let value: Swift.Double

        public init (
            name: ComputeOptimizerClientTypes.FindingReasonCode? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.value = value
        }
    }

}

extension ComputeOptimizerClientTypes.RecommendationExportJob: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case creationTimestamp
        case destination
        case failureReason
        case jobId
        case lastUpdatedTimestamp
        case resourceType
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let creationTimestamp = creationTimestamp {
            try encodeContainer.encode(creationTimestamp.timeIntervalSince1970, forKey: .creationTimestamp)
        }
        if let destination = destination {
            try encodeContainer.encode(destination, forKey: .destination)
        }
        if let failureReason = failureReason {
            try encodeContainer.encode(failureReason, forKey: .failureReason)
        }
        if let jobId = jobId {
            try encodeContainer.encode(jobId, forKey: .jobId)
        }
        if let lastUpdatedTimestamp = lastUpdatedTimestamp {
            try encodeContainer.encode(lastUpdatedTimestamp.timeIntervalSince1970, forKey: .lastUpdatedTimestamp)
        }
        if let resourceType = resourceType {
            try encodeContainer.encode(resourceType.rawValue, forKey: .resourceType)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let jobIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .jobId)
        jobId = jobIdDecoded
        let destinationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ExportDestination.self, forKey: .destination)
        destination = destinationDecoded
        let resourceTypeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.ResourceType.self, forKey: .resourceType)
        resourceType = resourceTypeDecoded
        let statusDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.JobStatus.self, forKey: .status)
        status = statusDecoded
        let creationTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .creationTimestamp)
        creationTimestamp = creationTimestampDecoded
        let lastUpdatedTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastUpdatedTimestamp)
        lastUpdatedTimestamp = lastUpdatedTimestampDecoded
        let failureReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .failureReason)
        failureReason = failureReasonDecoded
    }
}

extension ComputeOptimizerClientTypes.RecommendationExportJob: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecommendationExportJob(creationTimestamp: \(Swift.String(describing: creationTimestamp)), destination: \(Swift.String(describing: destination)), failureReason: \(Swift.String(describing: failureReason)), jobId: \(Swift.String(describing: jobId)), lastUpdatedTimestamp: \(Swift.String(describing: lastUpdatedTimestamp)), resourceType: \(Swift.String(describing: resourceType)), status: \(Swift.String(describing: status)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a recommendation export job.</p>
    ///
    ///
    ///         <p>Use the <code>DescribeRecommendationExportJobs</code> action to view your
    ///             recommendation export jobs.</p>
    ///
    ///
    ///         <p>Use the <code>ExportAutoScalingGroupRecommendations</code> or
    ///                 <code>ExportEC2InstanceRecommendations</code> actions to request an export of your
    ///             recommendations.</p>
    public struct RecommendationExportJob: Swift.Equatable {
        /// <p>The timestamp of when the export job was created.</p>
        public let creationTimestamp: ClientRuntime.Date?
        /// <p>An object that describes the destination of the export file.</p>
        public let destination: ComputeOptimizerClientTypes.ExportDestination?
        /// <p>The reason for an export job failure.</p>
        public let failureReason: Swift.String?
        /// <p>The identification number of the export job.</p>
        public let jobId: Swift.String?
        /// <p>The timestamp of when the export job was last updated.</p>
        public let lastUpdatedTimestamp: ClientRuntime.Date?
        /// <p>The resource type of the exported recommendations.</p>
        public let resourceType: ComputeOptimizerClientTypes.ResourceType?
        /// <p>The status of the export job.</p>
        public let status: ComputeOptimizerClientTypes.JobStatus?

        public init (
            creationTimestamp: ClientRuntime.Date? = nil,
            destination: ComputeOptimizerClientTypes.ExportDestination? = nil,
            failureReason: Swift.String? = nil,
            jobId: Swift.String? = nil,
            lastUpdatedTimestamp: ClientRuntime.Date? = nil,
            resourceType: ComputeOptimizerClientTypes.ResourceType? = nil,
            status: ComputeOptimizerClientTypes.JobStatus? = nil
        )
        {
            self.creationTimestamp = creationTimestamp
            self.destination = destination
            self.failureReason = failureReason
            self.jobId = jobId
            self.lastUpdatedTimestamp = lastUpdatedTimestamp
            self.resourceType = resourceType
            self.status = status
        }
    }

}

extension ComputeOptimizerClientTypes.RecommendationSource: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case recommendationSourceArn
        case recommendationSourceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let recommendationSourceArn = recommendationSourceArn {
            try encodeContainer.encode(recommendationSourceArn, forKey: .recommendationSourceArn)
        }
        if let recommendationSourceType = recommendationSourceType {
            try encodeContainer.encode(recommendationSourceType.rawValue, forKey: .recommendationSourceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendationSourceArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendationSourceArn)
        recommendationSourceArn = recommendationSourceArnDecoded
        let recommendationSourceTypeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.RecommendationSourceType.self, forKey: .recommendationSourceType)
        recommendationSourceType = recommendationSourceTypeDecoded
    }
}

extension ComputeOptimizerClientTypes.RecommendationSource: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecommendationSource(recommendationSourceArn: \(Swift.String(describing: recommendationSourceArn)), recommendationSourceType: \(Swift.String(describing: recommendationSourceType)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes the source of a recommendation, such as an Amazon EC2 instance or Auto Scaling
    ///             group.</p>
    public struct RecommendationSource: Swift.Equatable {
        /// <p>The Amazon Resource Name (ARN) of the recommendation source.</p>
        public let recommendationSourceArn: Swift.String?
        /// <p>The resource type of the recommendation source.</p>
        public let recommendationSourceType: ComputeOptimizerClientTypes.RecommendationSourceType?

        public init (
            recommendationSourceArn: Swift.String? = nil,
            recommendationSourceType: ComputeOptimizerClientTypes.RecommendationSourceType? = nil
        )
        {
            self.recommendationSourceArn = recommendationSourceArn
            self.recommendationSourceType = recommendationSourceType
        }
    }

}

extension ComputeOptimizerClientTypes {
    public enum RecommendationSourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case autoScalingGroup
        case ebsVolume
        case ec2Instance
        case lambdaFunction
        case sdkUnknown(Swift.String)

        public static var allCases: [RecommendationSourceType] {
            return [
                .autoScalingGroup,
                .ebsVolume,
                .ec2Instance,
                .lambdaFunction,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .autoScalingGroup: return "AutoScalingGroup"
            case .ebsVolume: return "EbsVolume"
            case .ec2Instance: return "Ec2Instance"
            case .lambdaFunction: return "LambdaFunction"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = RecommendationSourceType(rawValue: rawValue) ?? RecommendationSourceType.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.RecommendationSummary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case recommendationResourceType
        case summaries
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let recommendationResourceType = recommendationResourceType {
            try encodeContainer.encode(recommendationResourceType.rawValue, forKey: .recommendationResourceType)
        }
        if let summaries = summaries {
            var summariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .summaries)
            for summaries0 in summaries {
                try summariesContainer.encode(summaries0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let summariesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.Summary?].self, forKey: .summaries)
        var summariesDecoded0:[ComputeOptimizerClientTypes.Summary]? = nil
        if let summariesContainer = summariesContainer {
            summariesDecoded0 = [ComputeOptimizerClientTypes.Summary]()
            for structure0 in summariesContainer {
                if let structure0 = structure0 {
                    summariesDecoded0?.append(structure0)
                }
            }
        }
        summaries = summariesDecoded0
        let recommendationResourceTypeDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.RecommendationSourceType.self, forKey: .recommendationResourceType)
        recommendationResourceType = recommendationResourceTypeDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
    }
}

extension ComputeOptimizerClientTypes.RecommendationSummary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecommendationSummary(accountId: \(Swift.String(describing: accountId)), recommendationResourceType: \(Swift.String(describing: recommendationResourceType)), summaries: \(Swift.String(describing: summaries)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>A summary of a recommendation.</p>
    public struct RecommendationSummary: Swift.Equatable {
        /// <p>The AWS account ID of the recommendation summary.</p>
        public let accountId: Swift.String?
        /// <p>The resource type of the recommendation.</p>
        public let recommendationResourceType: ComputeOptimizerClientTypes.RecommendationSourceType?
        /// <p>An array of objects that describe a recommendation summary.</p>
        public let summaries: [ComputeOptimizerClientTypes.Summary]?

        public init (
            accountId: Swift.String? = nil,
            recommendationResourceType: ComputeOptimizerClientTypes.RecommendationSourceType? = nil,
            summaries: [ComputeOptimizerClientTypes.Summary]? = nil
        )
        {
            self.accountId = accountId
            self.recommendationResourceType = recommendationResourceType
            self.summaries = summaries
        }
    }

}

extension ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case projectedMetrics
        case rank
        case recommendedInstanceType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let projectedMetrics = projectedMetrics {
            var projectedMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .projectedMetrics)
            for projectedmetrics0 in projectedMetrics {
                try projectedMetricsContainer.encode(projectedmetrics0)
            }
        }
        if rank != 0 {
            try encodeContainer.encode(rank, forKey: .rank)
        }
        if let recommendedInstanceType = recommendedInstanceType {
            try encodeContainer.encode(recommendedInstanceType, forKey: .recommendedInstanceType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let recommendedInstanceTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .recommendedInstanceType)
        recommendedInstanceType = recommendedInstanceTypeDecoded
        let rankDecoded = try containerValues.decode(Swift.Int.self, forKey: .rank)
        rank = rankDecoded
        let projectedMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ProjectedMetric?].self, forKey: .projectedMetrics)
        var projectedMetricsDecoded0:[ComputeOptimizerClientTypes.ProjectedMetric]? = nil
        if let projectedMetricsContainer = projectedMetricsContainer {
            projectedMetricsDecoded0 = [ComputeOptimizerClientTypes.ProjectedMetric]()
            for structure0 in projectedMetricsContainer {
                if let structure0 = structure0 {
                    projectedMetricsDecoded0?.append(structure0)
                }
            }
        }
        projectedMetrics = projectedMetricsDecoded0
    }
}

extension ComputeOptimizerClientTypes.RecommendedOptionProjectedMetric: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "RecommendedOptionProjectedMetric(projectedMetrics: \(Swift.String(describing: projectedMetrics)), rank: \(Swift.String(describing: rank)), recommendedInstanceType: \(Swift.String(describing: recommendedInstanceType)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a projected utilization metric of a recommendation option.</p>
    ///
    ///         <note>
    ///             <p>The <code>Cpu</code> and <code>Memory</code> metrics are the only projected
    ///                 utilization metrics returned when you run the
    ///                     <code>GetEC2RecommendationProjectedMetrics</code> action. Additionally, the
    ///                     <code>Memory</code> metric is returned only for resources that have the unified
    ///                 CloudWatch agent installed on them. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent">Enabling Memory
    ///                     Utilization with the CloudWatch Agent</a>.</p>
    ///         </note>
    public struct RecommendedOptionProjectedMetric: Swift.Equatable {
        /// <p>An array of objects that describe a projected utilization metric.</p>
        public let projectedMetrics: [ComputeOptimizerClientTypes.ProjectedMetric]?
        /// <p>The rank of the recommendation option projected metric.</p>
        ///         <p>The top recommendation option is ranked as <code>1</code>.</p>
        ///         <p>The projected metric rank correlates to the recommendation option rank. For example,
        ///             the projected metric ranked as <code>1</code> is related to the recommendation option
        ///             that is also ranked as <code>1</code> in the same response.</p>
        public let rank: Swift.Int
        /// <p>The recommended instance type.</p>
        public let recommendedInstanceType: Swift.String?

        public init (
            projectedMetrics: [ComputeOptimizerClientTypes.ProjectedMetric]? = nil,
            rank: Swift.Int = 0,
            recommendedInstanceType: Swift.String? = nil
        )
        {
            self.projectedMetrics = projectedMetrics
            self.rank = rank
            self.recommendedInstanceType = recommendedInstanceType
        }
    }

}

extension ResourceNotFoundException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ResourceNotFoundException(message: \(Swift.String(describing: message)))"}
}

extension ResourceNotFoundException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ResourceNotFoundExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>A resource that is required for the action doesn't exist.</p>
public struct ResourceNotFoundException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ResourceNotFoundExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ResourceNotFoundExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComputeOptimizerClientTypes {
    public enum ResourceType: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case autoScalingGroup
        case ebsVolume
        case ec2Instance
        case lambdaFunction
        case sdkUnknown(Swift.String)

        public static var allCases: [ResourceType] {
            return [
                .autoScalingGroup,
                .ebsVolume,
                .ec2Instance,
                .lambdaFunction,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .autoScalingGroup: return "AutoScalingGroup"
            case .ebsVolume: return "EbsVolume"
            case .ec2Instance: return "Ec2Instance"
            case .lambdaFunction: return "LambdaFunction"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = ResourceType(rawValue: rawValue) ?? ResourceType.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.S3Destination: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case key
        case metadataKey
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let key = key {
            try encodeContainer.encode(key, forKey: .key)
        }
        if let metadataKey = metadataKey {
            try encodeContainer.encode(metadataKey, forKey: .metadataKey)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .key)
        key = keyDecoded
        let metadataKeyDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .metadataKey)
        metadataKey = metadataKeyDecoded
    }
}

extension ComputeOptimizerClientTypes.S3Destination: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "S3Destination(bucket: \(Swift.String(describing: bucket)), key: \(Swift.String(describing: key)), metadataKey: \(Swift.String(describing: metadataKey)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and object keys of a
    ///             recommendations export file, and its associated metadata file.</p>
    public struct S3Destination: Swift.Equatable {
        /// <p>The name of the Amazon S3 bucket used as the destination of an export file.</p>
        public let bucket: Swift.String?
        /// <p>The Amazon S3 bucket key of an export file.</p>
        ///         <p>The key uniquely identifies the object, or export file, in the S3 bucket.</p>
        public let key: Swift.String?
        /// <p>The Amazon S3 bucket key of a metadata file.</p>
        ///         <p>The key uniquely identifies the object, or metadata file, in the S3 bucket.</p>
        public let metadataKey: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            key: Swift.String? = nil,
            metadataKey: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.key = key
            self.metadataKey = metadataKey
        }
    }

}

extension ComputeOptimizerClientTypes.S3DestinationConfig: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case bucket
        case keyPrefix
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let bucket = bucket {
            try encodeContainer.encode(bucket, forKey: .bucket)
        }
        if let keyPrefix = keyPrefix {
            try encodeContainer.encode(keyPrefix, forKey: .keyPrefix)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let bucketDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .bucket)
        bucket = bucketDecoded
        let keyPrefixDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .keyPrefix)
        keyPrefix = keyPrefixDecoded
    }
}

extension ComputeOptimizerClientTypes.S3DestinationConfig: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "S3DestinationConfig(bucket: \(Swift.String(describing: bucket)), keyPrefix: \(Swift.String(describing: keyPrefix)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes the destination Amazon Simple Storage Service (Amazon S3) bucket name and key prefix for a
    ///             recommendations export job.</p>
    ///         <p>You must create the destination Amazon S3 bucket for your recommendations export before you
    ///             create the export job. Compute Optimizer does not create the S3 bucket for you. After you create the
    ///             S3 bucket, ensure that it has the required permission policy to allow Compute Optimizer to write the
    ///             export file to it. If you plan to specify an object prefix when you create the export
    ///             job, you must include the object prefix in the policy that you add to the S3 bucket. For
    ///             more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/create-s3-bucket-policy-for-compute-optimizer.html">Amazon S3 Bucket Policy for Compute Optimizer</a> in the <i>Compute Optimizer user
    ///             guide</i>.</p>
    public struct S3DestinationConfig: Swift.Equatable {
        /// <p>The name of the Amazon S3 bucket to use as the destination for an export job.</p>
        public let bucket: Swift.String?
        /// <p>The Amazon S3 bucket prefix for an export job.</p>
        public let keyPrefix: Swift.String?

        public init (
            bucket: Swift.String? = nil,
            keyPrefix: Swift.String? = nil
        )
        {
            self.bucket = bucket
            self.keyPrefix = keyPrefix
        }
    }

}

extension ServiceUnavailableException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ServiceUnavailableException(message: \(Swift.String(describing: message)))"}
}

extension ServiceUnavailableException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ServiceUnavailableExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request has failed due to a temporary failure of the server.</p>
public struct ServiceUnavailableException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .server
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ServiceUnavailableExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ServiceUnavailableExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

extension ComputeOptimizerClientTypes {
    public enum Status: Swift.Equatable, Swift.RawRepresentable, Swift.CaseIterable, Swift.Codable, Swift.Hashable {
        case active
        case failed
        case inactive
        case pending
        case sdkUnknown(Swift.String)

        public static var allCases: [Status] {
            return [
                .active,
                .failed,
                .inactive,
                .pending,
                .sdkUnknown("")
            ]
        }
        public init?(rawValue: Swift.String) {
            let value = Self.allCases.first(where: { $0.rawValue == rawValue })
            self = value ?? Self.sdkUnknown(rawValue)
        }
        public var rawValue: Swift.String {
            switch self {
            case .active: return "Active"
            case .failed: return "Failed"
            case .inactive: return "Inactive"
            case .pending: return "Pending"
            case let .sdkUnknown(s): return s
            }
        }
        public init(from decoder: Swift.Decoder) throws {
            let container = try decoder.singleValueContainer()
            let rawValue = try container.decode(RawValue.self)
            self = Status(rawValue: rawValue) ?? Status.sdkUnknown(rawValue)
        }
    }
}

extension ComputeOptimizerClientTypes.Summary: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case reasonCodeSummaries
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let reasonCodeSummaries = reasonCodeSummaries {
            var reasonCodeSummariesContainer = encodeContainer.nestedUnkeyedContainer(forKey: .reasonCodeSummaries)
            for reasoncodesummaries0 in reasonCodeSummaries {
                try reasonCodeSummariesContainer.encode(reasoncodesummaries0)
            }
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Finding.self, forKey: .name)
        name = nameDecoded
        let valueDecoded = try containerValues.decode(Swift.Double.self, forKey: .value)
        value = valueDecoded
        let reasonCodeSummariesContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.ReasonCodeSummary?].self, forKey: .reasonCodeSummaries)
        var reasonCodeSummariesDecoded0:[ComputeOptimizerClientTypes.ReasonCodeSummary]? = nil
        if let reasonCodeSummariesContainer = reasonCodeSummariesContainer {
            reasonCodeSummariesDecoded0 = [ComputeOptimizerClientTypes.ReasonCodeSummary]()
            for structure0 in reasonCodeSummariesContainer {
                if let structure0 = structure0 {
                    reasonCodeSummariesDecoded0?.append(structure0)
                }
            }
        }
        reasonCodeSummaries = reasonCodeSummariesDecoded0
    }
}

extension ComputeOptimizerClientTypes.Summary: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "Summary(name: \(Swift.String(describing: name)), reasonCodeSummaries: \(Swift.String(describing: reasonCodeSummaries)), value: \(Swift.String(describing: value)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>The summary of a recommendation.</p>
    public struct Summary: Swift.Equatable {
        /// <p>The finding classification of the recommendation.</p>
        public let name: ComputeOptimizerClientTypes.Finding?
        /// <p>An array of objects that summarize a finding reason code.</p>
        public let reasonCodeSummaries: [ComputeOptimizerClientTypes.ReasonCodeSummary]?
        /// <p>The value of the recommendation summary.</p>
        public let value: Swift.Double

        public init (
            name: ComputeOptimizerClientTypes.Finding? = nil,
            reasonCodeSummaries: [ComputeOptimizerClientTypes.ReasonCodeSummary]? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.reasonCodeSummaries = reasonCodeSummaries
            self.value = value
        }
    }

}

extension ThrottlingException: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "ThrottlingException(message: \(Swift.String(describing: message)))"}
}

extension ThrottlingException: AWSClientRuntime.AWSHttpServiceError {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: ThrottlingExceptionBody = try responseDecoder.decode(responseBody: data)
            self.message = output.message
        } else {
            self.message = nil
        }
        self._headers = httpResponse.headers
        self._statusCode = httpResponse.statusCode
        self._requestID = requestID
        self._message = message
    }
}

/// <p>The request was denied due to request throttling.</p>
public struct ThrottlingException: ClientRuntime.ServiceError, Swift.Equatable {
    public var _headers: ClientRuntime.Headers?
    public var _statusCode: ClientRuntime.HttpStatusCode?
    public var _message: Swift.String?
    public var _requestID: Swift.String?
    public var _retryable: Swift.Bool = false
    public var _isThrottling: Swift.Bool = false
    public var _type: ClientRuntime.ErrorType = .client
    public var message: Swift.String?

    public init (
        message: Swift.String? = nil
    )
    {
        self.message = message
    }
}

struct ThrottlingExceptionBody: Swift.Equatable {
    public let message: Swift.String?
}

extension ThrottlingExceptionBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case message
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let messageDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .message)
        message = messageDecoded
    }
}

public struct UpdateEnrollmentStatusInputBodyMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEnrollmentStatusInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEnrollmentStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEnrollmentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = ClientRuntime.HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientRuntime.ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEnrollmentStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEnrollmentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEnrollmentStatusOutputError>
}

extension UpdateEnrollmentStatusInput: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEnrollmentStatusInput(includeMemberAccounts: \(Swift.String(describing: includeMemberAccounts)), status: \(Swift.String(describing: status)))"}
}

extension UpdateEnrollmentStatusInput: Swift.Encodable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeMemberAccounts
        case status
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if includeMemberAccounts != false {
            try encodeContainer.encode(includeMemberAccounts, forKey: .includeMemberAccounts)
        }
        if let status = status {
            try encodeContainer.encode(status.rawValue, forKey: .status)
        }
    }
}

public struct UpdateEnrollmentStatusInputHeadersMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEnrollmentStatusInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEnrollmentStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEnrollmentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEnrollmentStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEnrollmentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEnrollmentStatusOutputError>
}

public struct UpdateEnrollmentStatusInputQueryItemMiddleware: ClientRuntime.Middleware {
    public let id: Swift.String = "UpdateEnrollmentStatusInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: ClientRuntime.SerializeStepInput<UpdateEnrollmentStatusInput>,
                  next: H) -> Swift.Result<ClientRuntime.OperationOutput<UpdateEnrollmentStatusOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = ClientRuntime.SerializeStepInput<UpdateEnrollmentStatusInput>
    public typealias MOutput = ClientRuntime.OperationOutput<UpdateEnrollmentStatusOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = ClientRuntime.SdkError<UpdateEnrollmentStatusOutputError>
}

public struct UpdateEnrollmentStatusInput: Swift.Equatable {
    /// <p>Indicates whether to enroll member accounts of the organization if the account is the
    ///             management account of an organization.</p>
    public let includeMemberAccounts: Swift.Bool
    /// <p>The new enrollment status of the account.</p>
    ///         <p>The following status options are available:</p>
    ///         <ul>
    ///             <li>
    ///                 <p>
    ///                   <code>Active</code> - Opts in your account to the Compute Optimizer service. Compute Optimizer
    ///                     begins analyzing the configuration and utilization metrics of your AWS
    ///                     resources after you opt in. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html">Metrics
    ///                         analyzed by AWS Compute Optimizer</a> in the <i>AWS Compute Optimizer User
    ///                     Guide</i>.</p>
    ///
    ///
    ///             </li>
    ///             <li>
    ///                 <p>
    ///                   <code>Inactive</code> - Opts out your account from the Compute Optimizer service. Your
    ///                     account's recommendations and related metrics data will be deleted from Compute Optimizer
    ///                     after you opt out.</p>
    ///             </li>
    ///          </ul>
    ///         <note>
    ///             <p>The <code>Pending</code> and <code>Failed</code> options cannot be used to update
    ///                 the enrollment status of an account. They are returned in the response of a request
    ///                 to update the enrollment status of an account.</p>
    ///         </note>
    public let status: ComputeOptimizerClientTypes.Status?

    public init (
        includeMemberAccounts: Swift.Bool = false,
        status: ComputeOptimizerClientTypes.Status? = nil
    )
    {
        self.includeMemberAccounts = includeMemberAccounts
        self.status = status
    }
}

struct UpdateEnrollmentStatusInputBody: Swift.Equatable {
    public let status: ComputeOptimizerClientTypes.Status?
    public let includeMemberAccounts: Swift.Bool
}

extension UpdateEnrollmentStatusInputBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case includeMemberAccounts
        case status
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let includeMemberAccountsDecoded = try containerValues.decode(Swift.Bool.self, forKey: .includeMemberAccounts)
        includeMemberAccounts = includeMemberAccountsDecoded
    }
}

extension UpdateEnrollmentStatusOutputError: ClientRuntime.HttpResponseBinding {
    public init(httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        let errorDetails = try AWSClientRuntime.RestJSONError(httpResponse: httpResponse)
        let requestID = httpResponse.headers.value(for: X_AMZN_REQUEST_ID_HEADER)
        try self.init(errorType: errorDetails.errorType, httpResponse: httpResponse, decoder: decoder, message: errorDetails.errorMessage, requestID: requestID)
    }
}

extension UpdateEnrollmentStatusOutputError {
    public init(errorType: Swift.String?, httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil, message: Swift.String? = nil, requestID: Swift.String? = nil) throws {
        switch errorType {
        case "AccessDeniedException" : self = .accessDeniedException(try AccessDeniedException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InternalServerException" : self = .internalServerException(try InternalServerException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "InvalidParameterValueException" : self = .invalidParameterValueException(try InvalidParameterValueException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "MissingAuthenticationToken" : self = .missingAuthenticationToken(try MissingAuthenticationToken(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ServiceUnavailableException" : self = .serviceUnavailableException(try ServiceUnavailableException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        case "ThrottlingException" : self = .throttlingException(try ThrottlingException(httpResponse: httpResponse, decoder: decoder, message: message, requestID: requestID))
        default : self = .unknown(UnknownAWSHttpServiceError(httpResponse: httpResponse, message: message, requestID: requestID))
        }
    }
}

public enum UpdateEnrollmentStatusOutputError: Swift.Error, Swift.Equatable {
    case accessDeniedException(AccessDeniedException)
    case internalServerException(InternalServerException)
    case invalidParameterValueException(InvalidParameterValueException)
    case missingAuthenticationToken(MissingAuthenticationToken)
    case serviceUnavailableException(ServiceUnavailableException)
    case throttlingException(ThrottlingException)
    case unknown(UnknownAWSHttpServiceError)
}

extension UpdateEnrollmentStatusOutputResponse: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UpdateEnrollmentStatusOutputResponse(status: \(Swift.String(describing: status)), statusReason: \(Swift.String(describing: statusReason)))"}
}

extension UpdateEnrollmentStatusOutputResponse: ClientRuntime.HttpResponseBinding {
    public init (httpResponse: ClientRuntime.HttpResponse, decoder: ClientRuntime.ResponseDecoder? = nil) throws {
        if case .stream(let reader) = httpResponse.body,
            let responseDecoder = decoder {
            let data = reader.toBytes().toData()
            let output: UpdateEnrollmentStatusOutputResponseBody = try responseDecoder.decode(responseBody: data)
            self.status = output.status
            self.statusReason = output.statusReason
        } else {
            self.status = nil
            self.statusReason = nil
        }
    }
}

public struct UpdateEnrollmentStatusOutputResponse: Swift.Equatable {
    /// <p>The enrollment status of the account.</p>
    public let status: ComputeOptimizerClientTypes.Status?
    /// <p>The reason for the enrollment status of the account. For example, an account might
    ///             show a status of <code>Pending</code> because member accounts of an organization require
    ///             more time to be enrolled in the service.</p>
    public let statusReason: Swift.String?

    public init (
        status: ComputeOptimizerClientTypes.Status? = nil,
        statusReason: Swift.String? = nil
    )
    {
        self.status = status
        self.statusReason = statusReason
    }
}

struct UpdateEnrollmentStatusOutputResponseBody: Swift.Equatable {
    public let status: ComputeOptimizerClientTypes.Status?
    public let statusReason: Swift.String?
}

extension UpdateEnrollmentStatusOutputResponseBody: Swift.Decodable {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case status
        case statusReason
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.Status.self, forKey: .status)
        status = statusDecoded
        let statusReasonDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .statusReason)
        statusReason = statusReasonDecoded
    }
}

extension ComputeOptimizerClientTypes.UtilizationMetric: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case name
        case statistic
        case value
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let name = name {
            try encodeContainer.encode(name.rawValue, forKey: .name)
        }
        if let statistic = statistic {
            try encodeContainer.encode(statistic.rawValue, forKey: .statistic)
        }
        if value != 0.0 {
            try encodeContainer.encode(value, forKey: .value)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let nameDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MetricName.self, forKey: .name)
        name = nameDecoded
        let statisticDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.MetricStatistic.self, forKey: .statistic)
        statistic = statisticDecoded
        let valueDecoded = try containerValues.decode(Swift.Double.self, forKey: .value)
        value = valueDecoded
    }
}

extension ComputeOptimizerClientTypes.UtilizationMetric: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "UtilizationMetric(name: \(Swift.String(describing: name)), statistic: \(Swift.String(describing: statistic)), value: \(Swift.String(describing: value)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a utilization metric of a resource, such as an Amazon EC2 instance.</p>
    ///
    ///         <p>Compare the utilization metric data of your resource against its projected utilization
    ///             metric data to determine the performance difference between your current resource and
    ///             the recommended option.</p>
    public struct UtilizationMetric: Swift.Equatable {
        /// <p>The name of the utilization metric.</p>
        ///         <p>The following utilization metrics are available:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <code>Cpu</code> - The percentage of allocated EC2 compute units that are
        ///                     currently in use on the instance. This metric identifies the processing power
        ///                     required to run an application on the instance.</p>
        ///                 <p>Depending on the instance type, tools in your operating system can show a
        ///                     lower percentage than CloudWatch when the instance is not allocated a full
        ///                     processor core.</p>
        ///                 <p>Units: Percent</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>Memory</code> - The percentage of memory that is currently in use on the
        ///                     instance. This metric identifies the amount of memory required to run an
        ///                     application on the instance.</p>
        ///                 <p>Units: Percent</p>
        ///                 <note>
        ///                     <p>The <code>Memory</code> metric is returned only for resources that have
        ///                         the unified CloudWatch agent installed on them. For more information, see <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/metrics.html#cw-agent">Enabling Memory
        ///                             Utilization with the CloudWatch Agent</a>.</p>
        ///                 </note>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>EBS_READ_OPS_PER_SECOND</code> - The completed read operations from all
        ///                     EBS volumes attached to the instance in a specified period of time.</p>
        ///                 <p>Unit: Count</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>EBS_WRITE_OPS_PER_SECOND</code> - The completed write operations to all
        ///                     EBS volumes attached to the instance in a specified period of time.</p>
        ///                 <p>Unit: Count</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>EBS_READ_BYTES_PER_SECOND</code> - The bytes read from all EBS volumes
        ///                     attached to the instance in a specified period of time.</p>
        ///                 <p>Unit: Bytes</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>EBS_WRITE_BYTES_PER_SECOND</code> - The bytes written to all EBS volumes
        ///                     attached to the instance in a specified period of time.</p>
        ///                 <p>Unit: Bytes</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>DISK_READ_OPS_PER_SECOND</code> - The completed read operations from all
        ///                     instance store volumes available to the instance in a specified period of
        ///                     time.</p>
        ///                 <p>If there are no instance store volumes, either the value is <code>0</code> or
        ///                     the metric is not reported.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>DISK_WRITE_OPS_PER_SECOND</code> - The completed write operations from
        ///                     all instance store volumes available to the instance in a specified period of
        ///                     time.</p>
        ///                 <p>If there are no instance store volumes, either the value is <code>0</code> or
        ///                     the metric is not reported.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>DISK_READ_BYTES_PER_SECOND</code> - The bytes read from all instance
        ///                     store volumes available to the instance. This metric is used to determine the
        ///                     volume of the data the application reads from the disk of the instance. This can
        ///                     be used to determine the speed of the application.</p>
        ///                 <p>If there are no instance store volumes, either the value is <code>0</code> or
        ///                     the metric is not reported.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>DISK_WRITE_BYTES_PER_SECOND</code> - The bytes written to all instance
        ///                     store volumes available to the instance. This metric is used to determine the
        ///                     volume of the data the application writes onto the disk of the instance. This
        ///                     can be used to determine the speed of the application.</p>
        ///                 <p>If there are no instance store volumes, either the value is <code>0</code> or
        ///                     the metric is not reported.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>NETWORK_IN_BYTES_PER_SECOND</code> - The number of bytes received by the
        ///                     instance on all network interfaces. This metric identifies the volume of
        ///                     incoming network traffic to a single instance.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>NETWORK_OUT_BYTES_PER_SECOND</code> - The number of bytes sent out by
        ///                     the instance on all network interfaces. This metric identifies the volume of
        ///                     outgoing network traffic from a single instance.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>NETWORK_PACKETS_IN_PER_SECOND</code> - The number of packets received by
        ///                     the instance on all network interfaces. This metric identifies the volume of
        ///                     incoming traffic in terms of the number of packets on a single instance.</p>
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <code>NETWORK_PACKETS_OUT_PER_SECOND</code> - The number of packets sent out
        ///                     by the instance on all network interfaces. This metric identifies the volume of
        ///                     outgoing traffic in terms of the number of packets on a single instance.</p>
        ///             </li>
        ///          </ul>
        public let name: ComputeOptimizerClientTypes.MetricName?
        /// <p>The statistic of the utilization metric.</p>
        ///
        ///         <p>The Compute Optimizer API, AWS Command Line Interface (AWS CLI), and SDKs return utilization metrics using
        ///             only the <code>Maximum</code> statistic, which is the highest value observed during the
        ///             specified period.</p>
        ///
        ///
        ///
        ///         <p>The Compute Optimizer console displays graphs for some utilization metrics using the
        ///                 <code>Average</code> statistic, which is the value of <code>Sum</code> /
        ///                 <code>SampleCount</code> during the specified period. For more information, see
        ///                 <a href="https://docs.aws.amazon.com/compute-optimizer/latest/ug/viewing-recommendations.html">Viewing resource
        ///                 recommendations</a> in the <i>AWS Compute Optimizer User Guide</i>. You can
        ///             also get averaged utilization metric data for your resources using Amazon CloudWatch. For more
        ///             information, see the <a href="https://docs.aws.amazon.com/AmazonCloudWatch/latest/monitoring/WhatIsCloudWatch.html">Amazon CloudWatch User
        ///                 Guide</a>.</p>
        public let statistic: ComputeOptimizerClientTypes.MetricStatistic?
        /// <p>The value of the utilization metric.</p>
        public let value: Swift.Double

        public init (
            name: ComputeOptimizerClientTypes.MetricName? = nil,
            statistic: ComputeOptimizerClientTypes.MetricStatistic? = nil,
            value: Swift.Double = 0.0
        )
        {
            self.name = name
            self.statistic = statistic
            self.value = value
        }
    }

}

extension ComputeOptimizerClientTypes.VolumeConfiguration: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case volumeBaselineIOPS
        case volumeBaselineThroughput
        case volumeBurstIOPS
        case volumeBurstThroughput
        case volumeSize
        case volumeType
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if volumeBaselineIOPS != 0 {
            try encodeContainer.encode(volumeBaselineIOPS, forKey: .volumeBaselineIOPS)
        }
        if volumeBaselineThroughput != 0 {
            try encodeContainer.encode(volumeBaselineThroughput, forKey: .volumeBaselineThroughput)
        }
        if volumeBurstIOPS != 0 {
            try encodeContainer.encode(volumeBurstIOPS, forKey: .volumeBurstIOPS)
        }
        if volumeBurstThroughput != 0 {
            try encodeContainer.encode(volumeBurstThroughput, forKey: .volumeBurstThroughput)
        }
        if volumeSize != 0 {
            try encodeContainer.encode(volumeSize, forKey: .volumeSize)
        }
        if let volumeType = volumeType {
            try encodeContainer.encode(volumeType, forKey: .volumeType)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeTypeDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeType)
        volumeType = volumeTypeDecoded
        let volumeSizeDecoded = try containerValues.decode(Swift.Int.self, forKey: .volumeSize)
        volumeSize = volumeSizeDecoded
        let volumeBaselineIOPSDecoded = try containerValues.decode(Swift.Int.self, forKey: .volumeBaselineIOPS)
        volumeBaselineIOPS = volumeBaselineIOPSDecoded
        let volumeBurstIOPSDecoded = try containerValues.decode(Swift.Int.self, forKey: .volumeBurstIOPS)
        volumeBurstIOPS = volumeBurstIOPSDecoded
        let volumeBaselineThroughputDecoded = try containerValues.decode(Swift.Int.self, forKey: .volumeBaselineThroughput)
        volumeBaselineThroughput = volumeBaselineThroughputDecoded
        let volumeBurstThroughputDecoded = try containerValues.decode(Swift.Int.self, forKey: .volumeBurstThroughput)
        volumeBurstThroughput = volumeBurstThroughputDecoded
    }
}

extension ComputeOptimizerClientTypes.VolumeConfiguration: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VolumeConfiguration(volumeBaselineIOPS: \(Swift.String(describing: volumeBaselineIOPS)), volumeBaselineThroughput: \(Swift.String(describing: volumeBaselineThroughput)), volumeBurstIOPS: \(Swift.String(describing: volumeBurstIOPS)), volumeBurstThroughput: \(Swift.String(describing: volumeBurstThroughput)), volumeSize: \(Swift.String(describing: volumeSize)), volumeType: \(Swift.String(describing: volumeType)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes the configuration of an Amazon Elastic Block Store (Amazon EBS) volume.</p>
    public struct VolumeConfiguration: Swift.Equatable {
        /// <p>The baseline IOPS of the volume.</p>
        public let volumeBaselineIOPS: Swift.Int
        /// <p>The baseline throughput of the volume.</p>
        public let volumeBaselineThroughput: Swift.Int
        /// <p>The burst IOPS of the volume.</p>
        public let volumeBurstIOPS: Swift.Int
        /// <p>The burst throughput of the volume.</p>
        public let volumeBurstThroughput: Swift.Int
        /// <p>The size of the volume, in GiB.</p>
        public let volumeSize: Swift.Int
        /// <p>The volume type.</p>
        ///         <p>This can be <code>gp2</code> for General Purpose SSD, <code>io1</code> or
        ///                 <code>io2</code> for Provisioned IOPS SSD, <code>st1</code> for Throughput Optimized
        ///             HDD, <code>sc1</code> for Cold HDD, or <code>standard</code> for Magnetic
        ///             volumes.</p>
        public let volumeType: Swift.String?

        public init (
            volumeBaselineIOPS: Swift.Int = 0,
            volumeBaselineThroughput: Swift.Int = 0,
            volumeBurstIOPS: Swift.Int = 0,
            volumeBurstThroughput: Swift.Int = 0,
            volumeSize: Swift.Int = 0,
            volumeType: Swift.String? = nil
        )
        {
            self.volumeBaselineIOPS = volumeBaselineIOPS
            self.volumeBaselineThroughput = volumeBaselineThroughput
            self.volumeBurstIOPS = volumeBurstIOPS
            self.volumeBurstThroughput = volumeBurstThroughput
            self.volumeSize = volumeSize
            self.volumeType = volumeType
        }
    }

}

extension ComputeOptimizerClientTypes.VolumeRecommendation: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case accountId
        case currentConfiguration
        case finding
        case lastRefreshTimestamp
        case lookBackPeriodInDays
        case utilizationMetrics
        case volumeArn
        case volumeRecommendationOptions
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountId = accountId {
            try encodeContainer.encode(accountId, forKey: .accountId)
        }
        if let currentConfiguration = currentConfiguration {
            try encodeContainer.encode(currentConfiguration, forKey: .currentConfiguration)
        }
        if let finding = finding {
            try encodeContainer.encode(finding.rawValue, forKey: .finding)
        }
        if let lastRefreshTimestamp = lastRefreshTimestamp {
            try encodeContainer.encode(lastRefreshTimestamp.timeIntervalSince1970, forKey: .lastRefreshTimestamp)
        }
        if lookBackPeriodInDays != 0.0 {
            try encodeContainer.encode(lookBackPeriodInDays, forKey: .lookBackPeriodInDays)
        }
        if let utilizationMetrics = utilizationMetrics {
            var utilizationMetricsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .utilizationMetrics)
            for ebsutilizationmetrics0 in utilizationMetrics {
                try utilizationMetricsContainer.encode(ebsutilizationmetrics0)
            }
        }
        if let volumeArn = volumeArn {
            try encodeContainer.encode(volumeArn, forKey: .volumeArn)
        }
        if let volumeRecommendationOptions = volumeRecommendationOptions {
            var volumeRecommendationOptionsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .volumeRecommendationOptions)
            for volumerecommendationoptions0 in volumeRecommendationOptions {
                try volumeRecommendationOptionsContainer.encode(volumerecommendationoptions0)
            }
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let volumeArnDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .volumeArn)
        volumeArn = volumeArnDecoded
        let accountIdDecoded = try containerValues.decodeIfPresent(Swift.String.self, forKey: .accountId)
        accountId = accountIdDecoded
        let currentConfigurationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.VolumeConfiguration.self, forKey: .currentConfiguration)
        currentConfiguration = currentConfigurationDecoded
        let findingDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.EBSFinding.self, forKey: .finding)
        finding = findingDecoded
        let utilizationMetricsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.EBSUtilizationMetric?].self, forKey: .utilizationMetrics)
        var utilizationMetricsDecoded0:[ComputeOptimizerClientTypes.EBSUtilizationMetric]? = nil
        if let utilizationMetricsContainer = utilizationMetricsContainer {
            utilizationMetricsDecoded0 = [ComputeOptimizerClientTypes.EBSUtilizationMetric]()
            for structure0 in utilizationMetricsContainer {
                if let structure0 = structure0 {
                    utilizationMetricsDecoded0?.append(structure0)
                }
            }
        }
        utilizationMetrics = utilizationMetricsDecoded0
        let lookBackPeriodInDaysDecoded = try containerValues.decode(Swift.Double.self, forKey: .lookBackPeriodInDays)
        lookBackPeriodInDays = lookBackPeriodInDaysDecoded
        let volumeRecommendationOptionsContainer = try containerValues.decodeIfPresent([ComputeOptimizerClientTypes.VolumeRecommendationOption?].self, forKey: .volumeRecommendationOptions)
        var volumeRecommendationOptionsDecoded0:[ComputeOptimizerClientTypes.VolumeRecommendationOption]? = nil
        if let volumeRecommendationOptionsContainer = volumeRecommendationOptionsContainer {
            volumeRecommendationOptionsDecoded0 = [ComputeOptimizerClientTypes.VolumeRecommendationOption]()
            for structure0 in volumeRecommendationOptionsContainer {
                if let structure0 = structure0 {
                    volumeRecommendationOptionsDecoded0?.append(structure0)
                }
            }
        }
        volumeRecommendationOptions = volumeRecommendationOptionsDecoded0
        let lastRefreshTimestampDecoded = try containerValues.decodeIfPresent(ClientRuntime.Date.self, forKey: .lastRefreshTimestamp)
        lastRefreshTimestamp = lastRefreshTimestampDecoded
    }
}

extension ComputeOptimizerClientTypes.VolumeRecommendation: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VolumeRecommendation(accountId: \(Swift.String(describing: accountId)), currentConfiguration: \(Swift.String(describing: currentConfiguration)), finding: \(Swift.String(describing: finding)), lastRefreshTimestamp: \(Swift.String(describing: lastRefreshTimestamp)), lookBackPeriodInDays: \(Swift.String(describing: lookBackPeriodInDays)), utilizationMetrics: \(Swift.String(describing: utilizationMetrics)), volumeArn: \(Swift.String(describing: volumeArn)), volumeRecommendationOptions: \(Swift.String(describing: volumeRecommendationOptions)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes an Amazon Elastic Block Store (Amazon EBS) volume recommendation.</p>
    public struct VolumeRecommendation: Swift.Equatable {
        /// <p>The AWS account ID of the volume.</p>
        public let accountId: Swift.String?
        /// <p>An array of objects that describe the current configuration of the volume.</p>
        public let currentConfiguration: ComputeOptimizerClientTypes.VolumeConfiguration?
        /// <p>The finding classification of the volume.</p>
        ///         <p>Findings for volumes include:</p>
        ///         <ul>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>NotOptimized</code>
        ///                   </b>—A volume
        ///                     is considered not optimized when AWS Compute Optimizer identifies a recommendation that can
        ///                     provide better performance for your workload.</p>
        ///
        ///
        ///
        ///             </li>
        ///             <li>
        ///                 <p>
        ///                   <b>
        ///                      <code>Optimized</code>
        ///                   </b>—An volume is
        ///                     considered optimized when Compute Optimizer determines that the volume is correctly
        ///                     provisioned to run your workload based on the chosen volume type. For optimized
        ///                     resources, Compute Optimizer might recommend a new generation volume type.</p>
        ///
        ///             </li>
        ///          </ul>
        public let finding: ComputeOptimizerClientTypes.EBSFinding?
        /// <p>The time stamp of when the volume recommendation was last refreshed.</p>
        public let lastRefreshTimestamp: ClientRuntime.Date?
        /// <p>The number of days for which utilization metrics were analyzed for the volume.</p>
        public let lookBackPeriodInDays: Swift.Double
        /// <p>An array of objects that describe the utilization metrics of the volume.</p>
        public let utilizationMetrics: [ComputeOptimizerClientTypes.EBSUtilizationMetric]?
        /// <p>The Amazon Resource Name (ARN) of the current volume.</p>
        public let volumeArn: Swift.String?
        /// <p>An array of objects that describe the recommendation options for the volume.</p>
        public let volumeRecommendationOptions: [ComputeOptimizerClientTypes.VolumeRecommendationOption]?

        public init (
            accountId: Swift.String? = nil,
            currentConfiguration: ComputeOptimizerClientTypes.VolumeConfiguration? = nil,
            finding: ComputeOptimizerClientTypes.EBSFinding? = nil,
            lastRefreshTimestamp: ClientRuntime.Date? = nil,
            lookBackPeriodInDays: Swift.Double = 0.0,
            utilizationMetrics: [ComputeOptimizerClientTypes.EBSUtilizationMetric]? = nil,
            volumeArn: Swift.String? = nil,
            volumeRecommendationOptions: [ComputeOptimizerClientTypes.VolumeRecommendationOption]? = nil
        )
        {
            self.accountId = accountId
            self.currentConfiguration = currentConfiguration
            self.finding = finding
            self.lastRefreshTimestamp = lastRefreshTimestamp
            self.lookBackPeriodInDays = lookBackPeriodInDays
            self.utilizationMetrics = utilizationMetrics
            self.volumeArn = volumeArn
            self.volumeRecommendationOptions = volumeRecommendationOptions
        }
    }

}

extension ComputeOptimizerClientTypes.VolumeRecommendationOption: Swift.Codable, ClientRuntime.Reflection {
    enum CodingKeys: Swift.String, Swift.CodingKey {
        case configuration
        case performanceRisk
        case rank
    }

    public func encode(to encoder: Swift.Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let configuration = configuration {
            try encodeContainer.encode(configuration, forKey: .configuration)
        }
        if performanceRisk != 0.0 {
            try encodeContainer.encode(performanceRisk, forKey: .performanceRisk)
        }
        if rank != 0 {
            try encodeContainer.encode(rank, forKey: .rank)
        }
    }

    public init (from decoder: Swift.Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let configurationDecoded = try containerValues.decodeIfPresent(ComputeOptimizerClientTypes.VolumeConfiguration.self, forKey: .configuration)
        configuration = configurationDecoded
        let performanceRiskDecoded = try containerValues.decode(Swift.Double.self, forKey: .performanceRisk)
        performanceRisk = performanceRiskDecoded
        let rankDecoded = try containerValues.decode(Swift.Int.self, forKey: .rank)
        rank = rankDecoded
    }
}

extension ComputeOptimizerClientTypes.VolumeRecommendationOption: Swift.CustomDebugStringConvertible {
    public var debugDescription: Swift.String {
        "VolumeRecommendationOption(configuration: \(Swift.String(describing: configuration)), performanceRisk: \(Swift.String(describing: performanceRisk)), rank: \(Swift.String(describing: rank)))"}
}

extension ComputeOptimizerClientTypes {
    /// <p>Describes a recommendation option for an Amazon Elastic Block Store (Amazon EBS) instance.</p>
    public struct VolumeRecommendationOption: Swift.Equatable {
        /// <p>An array of objects that describe a volume configuration.</p>
        public let configuration: ComputeOptimizerClientTypes.VolumeConfiguration?
        /// <p>The performance risk of the volume recommendation option.</p>
        ///         <p>Performance risk is the likelihood of the recommended volume type meeting the
        ///             performance requirement of your workload.</p>
        ///         <p>The value ranges from <code>0</code> to <code>5</code>, with <code>0</code> meaning
        ///             that the recommended resource is predicted to always provide enough hardware capability.
        ///             The higher the performance risk is, the more likely you should validate whether the
        ///             recommendation will meet the performance requirements of your workload before migrating
        ///             your resource.</p>
        public let performanceRisk: Swift.Double
        /// <p>The rank of the volume recommendation option.</p>
        ///         <p>The top recommendation option is ranked as <code>1</code>.</p>
        public let rank: Swift.Int

        public init (
            configuration: ComputeOptimizerClientTypes.VolumeConfiguration? = nil,
            performanceRisk: Swift.Double = 0.0,
            rank: Swift.Int = 0
        )
        {
            self.configuration = configuration
            self.performanceRisk = performanceRisk
            self.rank = rank
        }
    }

}
