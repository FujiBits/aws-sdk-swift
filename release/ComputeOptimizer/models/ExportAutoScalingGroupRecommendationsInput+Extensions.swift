// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ExportAutoScalingGroupRecommendationsInputHeadersMiddleware: Middleware {
    public let id: String = "ExportAutoScalingGroupRecommendationsInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExportAutoScalingGroupRecommendationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ExportAutoScalingGroupRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExportAutoScalingGroupRecommendationsInput>
    public typealias MOutput = OperationOutput<ExportAutoScalingGroupRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExportAutoScalingGroupRecommendationsOutputError>
}

public struct ExportAutoScalingGroupRecommendationsInputQueryItemMiddleware: Middleware {
    public let id: String = "ExportAutoScalingGroupRecommendationsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExportAutoScalingGroupRecommendationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ExportAutoScalingGroupRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExportAutoScalingGroupRecommendationsInput>
    public typealias MOutput = OperationOutput<ExportAutoScalingGroupRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExportAutoScalingGroupRecommendationsOutputError>
}

public struct ExportAutoScalingGroupRecommendationsInputBodyMiddleware: Middleware {
    public let id: String = "ExportAutoScalingGroupRecommendationsInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ExportAutoScalingGroupRecommendationsInput>,
                  next: H) -> Swift.Result<OperationOutput<ExportAutoScalingGroupRecommendationsOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ExportAutoScalingGroupRecommendationsInput>
    public typealias MOutput = OperationOutput<ExportAutoScalingGroupRecommendationsOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ExportAutoScalingGroupRecommendationsOutputError>
}

extension ExportAutoScalingGroupRecommendationsInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case accountIds
        case fieldsToExport
        case fileFormat
        case filters
        case includeMemberAccounts
        case s3DestinationConfig
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let accountIds = accountIds {
            var accountIdsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .accountIds)
            for accountids0 in accountIds {
                try accountIdsContainer.encode(accountids0)
            }
        }
        if let fieldsToExport = fieldsToExport {
            var fieldsToExportContainer = encodeContainer.nestedUnkeyedContainer(forKey: .fieldsToExport)
            for exportableautoscalinggroupfields0 in fieldsToExport {
                try fieldsToExportContainer.encode(exportableautoscalinggroupfields0.rawValue)
            }
        }
        if let fileFormat = fileFormat {
            try encodeContainer.encode(fileFormat.rawValue, forKey: .fileFormat)
        }
        if let filters = filters {
            var filtersContainer = encodeContainer.nestedUnkeyedContainer(forKey: .filters)
            for filters0 in filters {
                try filtersContainer.encode(filters0)
            }
        }
        if includeMemberAccounts != false {
            try encodeContainer.encode(includeMemberAccounts, forKey: .includeMemberAccounts)
        }
        if let s3DestinationConfig = s3DestinationConfig {
            try encodeContainer.encode(s3DestinationConfig, forKey: .s3DestinationConfig)
        }
    }
}
