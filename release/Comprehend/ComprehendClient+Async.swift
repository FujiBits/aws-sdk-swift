// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension ComprehendClient {
    /// Determines the dominant language of the input text for a batch of documents. For a list
    ///       of languages that Amazon Comprehend can detect, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html">Amazon Comprehend Supported Languages.
    ///
    func batchDetectDominantLanguage(input: BatchDetectDominantLanguageInput) async throws -> BatchDetectDominantLanguageOutputResponse
    {
        typealias batchDetectDominantLanguageContinuation = CheckedContinuation<BatchDetectDominantLanguageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDetectDominantLanguageContinuation) in
            batchDetectDominantLanguage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Inspects the text of a batch of documents for named entities and returns information
    ///       about them. For more information about named entities, see how-entities
    ///
    func batchDetectEntities(input: BatchDetectEntitiesInput) async throws -> BatchDetectEntitiesOutputResponse
    {
        typealias batchDetectEntitiesContinuation = CheckedContinuation<BatchDetectEntitiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDetectEntitiesContinuation) in
            batchDetectEntities(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Detects the key noun phrases found in a batch of documents.
    func batchDetectKeyPhrases(input: BatchDetectKeyPhrasesInput) async throws -> BatchDetectKeyPhrasesOutputResponse
    {
        typealias batchDetectKeyPhrasesContinuation = CheckedContinuation<BatchDetectKeyPhrasesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDetectKeyPhrasesContinuation) in
            batchDetectKeyPhrases(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Inspects a batch of documents and returns an inference of the prevailing sentiment,
    ///         POSITIVE, NEUTRAL, MIXED, or NEGATIVE,
    ///       in each one.
    func batchDetectSentiment(input: BatchDetectSentimentInput) async throws -> BatchDetectSentimentOutputResponse
    {
        typealias batchDetectSentimentContinuation = CheckedContinuation<BatchDetectSentimentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDetectSentimentContinuation) in
            batchDetectSentiment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Inspects the text of a batch of documents for the syntax and part of speech of the words
    ///       in the document and returns information about them. For more information, see how-syntax.
    func batchDetectSyntax(input: BatchDetectSyntaxInput) async throws -> BatchDetectSyntaxOutputResponse
    {
        typealias batchDetectSyntaxContinuation = CheckedContinuation<BatchDetectSyntaxOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: batchDetectSyntaxContinuation) in
            batchDetectSyntax(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new document classification request to analyze a single document in real-time,
    ///       using a previously created and trained custom model and an endpoint.
    func classifyDocument(input: ClassifyDocumentInput) async throws -> ClassifyDocumentOutputResponse
    {
        typealias classifyDocumentContinuation = CheckedContinuation<ClassifyDocumentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: classifyDocumentContinuation) in
            classifyDocument(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Analyzes input text for the presence of personally identifiable information (PII) and
    ///       returns the labels of identified PII entity types such as name, address, bank account number,
    ///       or phone number.
    func containsPiiEntities(input: ContainsPiiEntitiesInput) async throws -> ContainsPiiEntitiesOutputResponse
    {
        typealias containsPiiEntitiesContinuation = CheckedContinuation<ContainsPiiEntitiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: containsPiiEntitiesContinuation) in
            containsPiiEntities(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a new document classifier that you can use to categorize documents. To create a
    ///       classifier, you provide a set of training documents that labeled with the categories that you
    ///       want to use. After the classifier is trained you can use it to categorize a set of labeled
    ///       documents into the categories. For more information, see how-document-classification.
    func createDocumentClassifier(input: CreateDocumentClassifierInput) async throws -> CreateDocumentClassifierOutputResponse
    {
        typealias createDocumentClassifierContinuation = CheckedContinuation<CreateDocumentClassifierOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createDocumentClassifierContinuation) in
            createDocumentClassifier(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates a model-specific endpoint for synchronous inference for a previously trained
    ///       custom model
    ///
    func createEndpoint(input: CreateEndpointInput) async throws -> CreateEndpointOutputResponse
    {
        typealias createEndpointContinuation = CheckedContinuation<CreateEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEndpointContinuation) in
            createEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Creates an entity recognizer using submitted files. After your
    ///         CreateEntityRecognizer request is submitted, you can check job status using the
    ///          API.
    func createEntityRecognizer(input: CreateEntityRecognizerInput) async throws -> CreateEntityRecognizerOutputResponse
    {
        typealias createEntityRecognizerContinuation = CheckedContinuation<CreateEntityRecognizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: createEntityRecognizerContinuation) in
            createEntityRecognizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a previously created document classifier
    ///          Only those classifiers that are in terminated states (IN_ERROR, TRAINED) will be deleted.
    ///       If an active inference job is using the model, a ResourceInUseException will be
    ///       returned.
    ///          This is an asynchronous action that puts the classifier into a DELETING state, and it is
    ///       then removed by a background job. Once removed, the classifier disappears from your account
    ///       and is no longer available for use.
    func deleteDocumentClassifier(input: DeleteDocumentClassifierInput) async throws -> DeleteDocumentClassifierOutputResponse
    {
        typealias deleteDocumentClassifierContinuation = CheckedContinuation<DeleteDocumentClassifierOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteDocumentClassifierContinuation) in
            deleteDocumentClassifier(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes a model-specific endpoint for a previously-trained custom model. All endpoints
    ///       must be deleted in order for the model to be deleted.
    func deleteEndpoint(input: DeleteEndpointInput) async throws -> DeleteEndpointOutputResponse
    {
        typealias deleteEndpointContinuation = CheckedContinuation<DeleteEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEndpointContinuation) in
            deleteEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Deletes an entity recognizer.
    ///          Only those recognizers that are in terminated states (IN_ERROR, TRAINED) will be deleted.
    ///       If an active inference job is using the model, a ResourceInUseException will be
    ///       returned.
    ///          This is an asynchronous action that puts the recognizer into a DELETING state, and it is
    ///       then removed by a background job. Once removed, the recognizer disappears from your account
    ///       and is no longer available for use.
    func deleteEntityRecognizer(input: DeleteEntityRecognizerInput) async throws -> DeleteEntityRecognizerOutputResponse
    {
        typealias deleteEntityRecognizerContinuation = CheckedContinuation<DeleteEntityRecognizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: deleteEntityRecognizerContinuation) in
            deleteEntityRecognizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the properties associated with a document classification job. Use this operation to
    ///       get the status of a classification job.
    func describeDocumentClassificationJob(input: DescribeDocumentClassificationJobInput) async throws -> DescribeDocumentClassificationJobOutputResponse
    {
        typealias describeDocumentClassificationJobContinuation = CheckedContinuation<DescribeDocumentClassificationJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDocumentClassificationJobContinuation) in
            describeDocumentClassificationJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the properties associated with a document classifier.
    func describeDocumentClassifier(input: DescribeDocumentClassifierInput) async throws -> DescribeDocumentClassifierOutputResponse
    {
        typealias describeDocumentClassifierContinuation = CheckedContinuation<DescribeDocumentClassifierOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDocumentClassifierContinuation) in
            describeDocumentClassifier(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the properties associated with a dominant language detection job. Use this operation
    ///       to get the status of a detection job.
    func describeDominantLanguageDetectionJob(input: DescribeDominantLanguageDetectionJobInput) async throws -> DescribeDominantLanguageDetectionJobOutputResponse
    {
        typealias describeDominantLanguageDetectionJobContinuation = CheckedContinuation<DescribeDominantLanguageDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeDominantLanguageDetectionJobContinuation) in
            describeDominantLanguageDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the properties associated with a specific endpoint. Use this operation to get the
    ///       status of an endpoint.
    func describeEndpoint(input: DescribeEndpointInput) async throws -> DescribeEndpointOutputResponse
    {
        typealias describeEndpointContinuation = CheckedContinuation<DescribeEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEndpointContinuation) in
            describeEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the properties associated with an entities detection job. Use this operation to get
    ///       the status of a detection job.
    func describeEntitiesDetectionJob(input: DescribeEntitiesDetectionJobInput) async throws -> DescribeEntitiesDetectionJobOutputResponse
    {
        typealias describeEntitiesDetectionJobContinuation = CheckedContinuation<DescribeEntitiesDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEntitiesDetectionJobContinuation) in
            describeEntitiesDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides details about an entity recognizer including status, S3 buckets containing
    ///       training data, recognizer metadata, metrics, and so on.
    func describeEntityRecognizer(input: DescribeEntityRecognizerInput) async throws -> DescribeEntityRecognizerOutputResponse
    {
        typealias describeEntityRecognizerContinuation = CheckedContinuation<DescribeEntityRecognizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEntityRecognizerContinuation) in
            describeEntityRecognizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the status and details of an events detection job.
    func describeEventsDetectionJob(input: DescribeEventsDetectionJobInput) async throws -> DescribeEventsDetectionJobOutputResponse
    {
        typealias describeEventsDetectionJobContinuation = CheckedContinuation<DescribeEventsDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEventsDetectionJobContinuation) in
            describeEventsDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the properties associated with a key phrases detection job. Use this operation to get
    ///       the status of a detection job.
    func describeKeyPhrasesDetectionJob(input: DescribeKeyPhrasesDetectionJobInput) async throws -> DescribeKeyPhrasesDetectionJobOutputResponse
    {
        typealias describeKeyPhrasesDetectionJobContinuation = CheckedContinuation<DescribeKeyPhrasesDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeKeyPhrasesDetectionJobContinuation) in
            describeKeyPhrasesDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the properties associated with a PII entities detection job. For example, you can use
    ///       this operation to get the job status.
    func describePiiEntitiesDetectionJob(input: DescribePiiEntitiesDetectionJobInput) async throws -> DescribePiiEntitiesDetectionJobOutputResponse
    {
        typealias describePiiEntitiesDetectionJobContinuation = CheckedContinuation<DescribePiiEntitiesDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describePiiEntitiesDetectionJobContinuation) in
            describePiiEntitiesDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the properties associated with a sentiment detection job. Use this operation to get
    ///       the status of a detection job.
    func describeSentimentDetectionJob(input: DescribeSentimentDetectionJobInput) async throws -> DescribeSentimentDetectionJobOutputResponse
    {
        typealias describeSentimentDetectionJobContinuation = CheckedContinuation<DescribeSentimentDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeSentimentDetectionJobContinuation) in
            describeSentimentDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets the properties associated with a topic detection job. Use this operation to get
    ///       the status of a detection job.
    func describeTopicsDetectionJob(input: DescribeTopicsDetectionJobInput) async throws -> DescribeTopicsDetectionJobOutputResponse
    {
        typealias describeTopicsDetectionJobContinuation = CheckedContinuation<DescribeTopicsDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeTopicsDetectionJobContinuation) in
            describeTopicsDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Determines the dominant language of the input text. For a list of languages that Amazon
    ///       Comprehend can detect, see <a href="https://docs.aws.amazon.com/comprehend/latest/dg/how-languages.html">Amazon Comprehend Supported Languages.
    func detectDominantLanguage(input: DetectDominantLanguageInput) async throws -> DetectDominantLanguageOutputResponse
    {
        typealias detectDominantLanguageContinuation = CheckedContinuation<DetectDominantLanguageOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detectDominantLanguageContinuation) in
            detectDominantLanguage(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Inspects text for named entities, and returns information about them. For more
    ///       information, about named entities, see how-entities.
    func detectEntities(input: DetectEntitiesInput) async throws -> DetectEntitiesOutputResponse
    {
        typealias detectEntitiesContinuation = CheckedContinuation<DetectEntitiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detectEntitiesContinuation) in
            detectEntities(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Detects the key noun phrases found in the text.
    func detectKeyPhrases(input: DetectKeyPhrasesInput) async throws -> DetectKeyPhrasesOutputResponse
    {
        typealias detectKeyPhrasesContinuation = CheckedContinuation<DetectKeyPhrasesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detectKeyPhrasesContinuation) in
            detectKeyPhrases(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Inspects the input text for entities that contain personally identifiable information
    ///       (PII) and returns information about them.
    func detectPiiEntities(input: DetectPiiEntitiesInput) async throws -> DetectPiiEntitiesOutputResponse
    {
        typealias detectPiiEntitiesContinuation = CheckedContinuation<DetectPiiEntitiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detectPiiEntitiesContinuation) in
            detectPiiEntities(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Inspects text and returns an inference of the prevailing sentiment
    ///         (POSITIVE, NEUTRAL, MIXED, or NEGATIVE).
    func detectSentiment(input: DetectSentimentInput) async throws -> DetectSentimentOutputResponse
    {
        typealias detectSentimentContinuation = CheckedContinuation<DetectSentimentOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detectSentimentContinuation) in
            detectSentiment(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Inspects text for syntax and the part of speech of words in the document. For more
    ///       information, how-syntax.
    func detectSyntax(input: DetectSyntaxInput) async throws -> DetectSyntaxOutputResponse
    {
        typealias detectSyntaxContinuation = CheckedContinuation<DetectSyntaxOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: detectSyntaxContinuation) in
            detectSyntax(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of the documentation classification jobs that you have submitted.
    func listDocumentClassificationJobs(input: ListDocumentClassificationJobsInput) async throws -> ListDocumentClassificationJobsOutputResponse
    {
        typealias listDocumentClassificationJobsContinuation = CheckedContinuation<ListDocumentClassificationJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDocumentClassificationJobsContinuation) in
            listDocumentClassificationJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of the document classifiers that you have created.
    func listDocumentClassifiers(input: ListDocumentClassifiersInput) async throws -> ListDocumentClassifiersOutputResponse
    {
        typealias listDocumentClassifiersContinuation = CheckedContinuation<ListDocumentClassifiersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDocumentClassifiersContinuation) in
            listDocumentClassifiers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of the dominant language detection jobs that you have submitted.
    func listDominantLanguageDetectionJobs(input: ListDominantLanguageDetectionJobsInput) async throws -> ListDominantLanguageDetectionJobsOutputResponse
    {
        typealias listDominantLanguageDetectionJobsContinuation = CheckedContinuation<ListDominantLanguageDetectionJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listDominantLanguageDetectionJobsContinuation) in
            listDominantLanguageDetectionJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of all existing endpoints that you've created.
    func listEndpoints(input: ListEndpointsInput) async throws -> ListEndpointsOutputResponse
    {
        typealias listEndpointsContinuation = CheckedContinuation<ListEndpointsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEndpointsContinuation) in
            listEndpoints(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of the entity detection jobs that you have submitted.
    func listEntitiesDetectionJobs(input: ListEntitiesDetectionJobsInput) async throws -> ListEntitiesDetectionJobsOutputResponse
    {
        typealias listEntitiesDetectionJobsContinuation = CheckedContinuation<ListEntitiesDetectionJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEntitiesDetectionJobsContinuation) in
            listEntitiesDetectionJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of the properties of all entity recognizers that you created, including
    ///       recognizers currently in training. Allows you to filter the list of recognizers based on
    ///       criteria such as status and submission time. This call returns up to 500 entity recognizers in
    ///       the list, with a default number of 100 recognizers in the list.
    ///          The results of this list are not in any particular order. Please get the list and sort
    ///       locally if needed.
    func listEntityRecognizers(input: ListEntityRecognizersInput) async throws -> ListEntityRecognizersOutputResponse
    {
        typealias listEntityRecognizersContinuation = CheckedContinuation<ListEntityRecognizersOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEntityRecognizersContinuation) in
            listEntityRecognizers(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of the events detection jobs that you have submitted.
    func listEventsDetectionJobs(input: ListEventsDetectionJobsInput) async throws -> ListEventsDetectionJobsOutputResponse
    {
        typealias listEventsDetectionJobsContinuation = CheckedContinuation<ListEventsDetectionJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEventsDetectionJobsContinuation) in
            listEventsDetectionJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Get a list of key phrase detection jobs that you have submitted.
    func listKeyPhrasesDetectionJobs(input: ListKeyPhrasesDetectionJobsInput) async throws -> ListKeyPhrasesDetectionJobsOutputResponse
    {
        typealias listKeyPhrasesDetectionJobsContinuation = CheckedContinuation<ListKeyPhrasesDetectionJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listKeyPhrasesDetectionJobsContinuation) in
            listKeyPhrasesDetectionJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of the PII entity detection jobs that you have submitted.
    func listPiiEntitiesDetectionJobs(input: ListPiiEntitiesDetectionJobsInput) async throws -> ListPiiEntitiesDetectionJobsOutputResponse
    {
        typealias listPiiEntitiesDetectionJobsContinuation = CheckedContinuation<ListPiiEntitiesDetectionJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listPiiEntitiesDetectionJobsContinuation) in
            listPiiEntitiesDetectionJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of sentiment detection jobs that you have submitted.
    func listSentimentDetectionJobs(input: ListSentimentDetectionJobsInput) async throws -> ListSentimentDetectionJobsOutputResponse
    {
        typealias listSentimentDetectionJobsContinuation = CheckedContinuation<ListSentimentDetectionJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listSentimentDetectionJobsContinuation) in
            listSentimentDetectionJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Lists all tags associated with a given Amazon Comprehend resource.
    func listTagsForResource(input: ListTagsForResourceInput) async throws -> ListTagsForResourceOutputResponse
    {
        typealias listTagsForResourceContinuation = CheckedContinuation<ListTagsForResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTagsForResourceContinuation) in
            listTagsForResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Gets a list of the topic detection jobs that you have submitted.
    func listTopicsDetectionJobs(input: ListTopicsDetectionJobsInput) async throws -> ListTopicsDetectionJobsOutputResponse
    {
        typealias listTopicsDetectionJobsContinuation = CheckedContinuation<ListTopicsDetectionJobsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listTopicsDetectionJobsContinuation) in
            listTopicsDetectionJobs(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an asynchronous document classification job. Use the  operation to track the progress of the
    ///       job.
    func startDocumentClassificationJob(input: StartDocumentClassificationJobInput) async throws -> StartDocumentClassificationJobOutputResponse
    {
        typealias startDocumentClassificationJobContinuation = CheckedContinuation<StartDocumentClassificationJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startDocumentClassificationJobContinuation) in
            startDocumentClassificationJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an asynchronous dominant language detection job for a collection of documents. Use
    ///       the  operation to track the status
    ///       of a job.
    func startDominantLanguageDetectionJob(input: StartDominantLanguageDetectionJobInput) async throws -> StartDominantLanguageDetectionJobOutputResponse
    {
        typealias startDominantLanguageDetectionJobContinuation = CheckedContinuation<StartDominantLanguageDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startDominantLanguageDetectionJobContinuation) in
            startDominantLanguageDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an asynchronous entity detection job for a collection of documents. Use the  operation to track the status of a job.
    ///          This API can be used for either standard entity detection or custom entity recognition. In
    ///       order to be used for custom entity recognition, the optional EntityRecognizerArn
    ///       must be used in order to provide access to the recognizer being used to detect the custom
    ///       entity.
    func startEntitiesDetectionJob(input: StartEntitiesDetectionJobInput) async throws -> StartEntitiesDetectionJobOutputResponse
    {
        typealias startEntitiesDetectionJobContinuation = CheckedContinuation<StartEntitiesDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startEntitiesDetectionJobContinuation) in
            startEntitiesDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an asynchronous event detection job for a collection of documents.
    func startEventsDetectionJob(input: StartEventsDetectionJobInput) async throws -> StartEventsDetectionJobOutputResponse
    {
        typealias startEventsDetectionJobContinuation = CheckedContinuation<StartEventsDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startEventsDetectionJobContinuation) in
            startEventsDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an asynchronous key phrase detection job for a collection of documents. Use the
    ///          operation to track the status of a
    ///       job.
    func startKeyPhrasesDetectionJob(input: StartKeyPhrasesDetectionJobInput) async throws -> StartKeyPhrasesDetectionJobOutputResponse
    {
        typealias startKeyPhrasesDetectionJobContinuation = CheckedContinuation<StartKeyPhrasesDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startKeyPhrasesDetectionJobContinuation) in
            startKeyPhrasesDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an asynchronous PII entity detection job for a collection of documents.
    func startPiiEntitiesDetectionJob(input: StartPiiEntitiesDetectionJobInput) async throws -> StartPiiEntitiesDetectionJobOutputResponse
    {
        typealias startPiiEntitiesDetectionJobContinuation = CheckedContinuation<StartPiiEntitiesDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startPiiEntitiesDetectionJobContinuation) in
            startPiiEntitiesDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an asynchronous sentiment detection job for a collection of documents. use the
    ///          operation to track the status of a
    ///       job.
    func startSentimentDetectionJob(input: StartSentimentDetectionJobInput) async throws -> StartSentimentDetectionJobOutputResponse
    {
        typealias startSentimentDetectionJobContinuation = CheckedContinuation<StartSentimentDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startSentimentDetectionJobContinuation) in
            startSentimentDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Starts an asynchronous topic detection job. Use the
    ///         DescribeTopicDetectionJob operation to track the status of a job.
    func startTopicsDetectionJob(input: StartTopicsDetectionJobInput) async throws -> StartTopicsDetectionJobOutputResponse
    {
        typealias startTopicsDetectionJobContinuation = CheckedContinuation<StartTopicsDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startTopicsDetectionJobContinuation) in
            startTopicsDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops a dominant language detection job in progress.
    ///          If the job state is IN_PROGRESS the job is marked for termination and put
    ///       into the STOP_REQUESTED state. If the job completes before it can be stopped, it
    ///       is put into the COMPLETED state; otherwise the job is stopped and put into the
    ///         STOPPED state.
    ///          If the job is in the COMPLETED or FAILED state when you call the
    ///         StopDominantLanguageDetectionJob operation, the operation returns a 400
    ///       Internal Request Exception.
    ///          When a job is stopped, any documents already processed are written to the output
    ///       location.
    func stopDominantLanguageDetectionJob(input: StopDominantLanguageDetectionJobInput) async throws -> StopDominantLanguageDetectionJobOutputResponse
    {
        typealias stopDominantLanguageDetectionJobContinuation = CheckedContinuation<StopDominantLanguageDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopDominantLanguageDetectionJobContinuation) in
            stopDominantLanguageDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops an entities detection job in progress.
    ///          If the job state is IN_PROGRESS the job is marked for termination and put
    ///       into the STOP_REQUESTED state. If the job completes before it can be stopped, it
    ///       is put into the COMPLETED state; otherwise the job is stopped and put into the
    ///         STOPPED state.
    ///          If the job is in the COMPLETED or FAILED state when you call the
    ///         StopDominantLanguageDetectionJob operation, the operation returns a 400
    ///       Internal Request Exception.
    ///          When a job is stopped, any documents already processed are written to the output
    ///       location.
    func stopEntitiesDetectionJob(input: StopEntitiesDetectionJobInput) async throws -> StopEntitiesDetectionJobOutputResponse
    {
        typealias stopEntitiesDetectionJobContinuation = CheckedContinuation<StopEntitiesDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopEntitiesDetectionJobContinuation) in
            stopEntitiesDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops an events detection job in progress.
    func stopEventsDetectionJob(input: StopEventsDetectionJobInput) async throws -> StopEventsDetectionJobOutputResponse
    {
        typealias stopEventsDetectionJobContinuation = CheckedContinuation<StopEventsDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopEventsDetectionJobContinuation) in
            stopEventsDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops a key phrases detection job in progress.
    ///          If the job state is IN_PROGRESS the job is marked for termination and put
    ///       into the STOP_REQUESTED state. If the job completes before it can be stopped, it
    ///       is put into the COMPLETED state; otherwise the job is stopped and put into the
    ///         STOPPED state.
    ///          If the job is in the COMPLETED or FAILED state when you call the
    ///         StopDominantLanguageDetectionJob operation, the operation returns a 400
    ///       Internal Request Exception.
    ///          When a job is stopped, any documents already processed are written to the output
    ///       location.
    func stopKeyPhrasesDetectionJob(input: StopKeyPhrasesDetectionJobInput) async throws -> StopKeyPhrasesDetectionJobOutputResponse
    {
        typealias stopKeyPhrasesDetectionJobContinuation = CheckedContinuation<StopKeyPhrasesDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopKeyPhrasesDetectionJobContinuation) in
            stopKeyPhrasesDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops a PII entities detection job in progress.
    func stopPiiEntitiesDetectionJob(input: StopPiiEntitiesDetectionJobInput) async throws -> StopPiiEntitiesDetectionJobOutputResponse
    {
        typealias stopPiiEntitiesDetectionJobContinuation = CheckedContinuation<StopPiiEntitiesDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopPiiEntitiesDetectionJobContinuation) in
            stopPiiEntitiesDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops a sentiment detection job in progress.
    ///          If the job state is IN_PROGRESS the job is marked for termination and put
    ///       into the STOP_REQUESTED state. If the job completes before it can be stopped, it
    ///       is put into the COMPLETED state; otherwise the job is be stopped and put into the
    ///         STOPPED state.
    ///          If the job is in the COMPLETED or FAILED state when you call the
    ///         StopDominantLanguageDetectionJob operation, the operation returns a 400
    ///       Internal Request Exception.
    ///          When a job is stopped, any documents already processed are written to the output
    ///       location.
    func stopSentimentDetectionJob(input: StopSentimentDetectionJobInput) async throws -> StopSentimentDetectionJobOutputResponse
    {
        typealias stopSentimentDetectionJobContinuation = CheckedContinuation<StopSentimentDetectionJobOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopSentimentDetectionJobContinuation) in
            stopSentimentDetectionJob(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops a document classifier training job while in progress.
    ///          If the training job state is TRAINING, the job is marked for termination and
    ///       put into the STOP_REQUESTED state. If the training job completes before it can be
    ///       stopped, it is put into the TRAINED; otherwise the training job is stopped and
    ///       put into the STOPPED state and the service sends back an HTTP 200 response with
    ///       an empty HTTP body.
    func stopTrainingDocumentClassifier(input: StopTrainingDocumentClassifierInput) async throws -> StopTrainingDocumentClassifierOutputResponse
    {
        typealias stopTrainingDocumentClassifierContinuation = CheckedContinuation<StopTrainingDocumentClassifierOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopTrainingDocumentClassifierContinuation) in
            stopTrainingDocumentClassifier(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Stops an entity recognizer training job while in progress.
    ///          If the training job state is TRAINING, the job is marked for termination and
    ///       put into the STOP_REQUESTED state. If the training job completes before it can be
    ///       stopped, it is put into the TRAINED; otherwise the training job is stopped and
    ///       putted into the STOPPED state and the service sends back an HTTP 200 response
    ///       with an empty HTTP body.
    func stopTrainingEntityRecognizer(input: StopTrainingEntityRecognizerInput) async throws -> StopTrainingEntityRecognizerOutputResponse
    {
        typealias stopTrainingEntityRecognizerContinuation = CheckedContinuation<StopTrainingEntityRecognizerOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: stopTrainingEntityRecognizerContinuation) in
            stopTrainingEntityRecognizer(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Associates a specific tag with an Amazon Comprehend resource. A tag is a key-value pair
    ///       that adds as a metadata to a resource used by Amazon Comprehend. For example, a tag with
    ///       "Sales" as the key might be added to a resource to indicate its use by the sales department.
    ///
    func tagResource(input: TagResourceInput) async throws -> TagResourceOutputResponse
    {
        typealias tagResourceContinuation = CheckedContinuation<TagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: tagResourceContinuation) in
            tagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Removes a specific tag associated with an Amazon Comprehend resource.
    func untagResource(input: UntagResourceInput) async throws -> UntagResourceOutputResponse
    {
        typealias untagResourceContinuation = CheckedContinuation<UntagResourceOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: untagResourceContinuation) in
            untagResource(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Updates information about the specified endpoint.
    func updateEndpoint(input: UpdateEndpointInput) async throws -> UpdateEndpointOutputResponse
    {
        typealias updateEndpointContinuation = CheckedContinuation<UpdateEndpointOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: updateEndpointContinuation) in
            updateEndpoint(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
