// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ImportInstallationMediaInputHeadersMiddleware: Middleware {
    public let id: String = "ImportInstallationMediaInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ImportInstallationMediaInput>,
                  next: H) -> Swift.Result<OperationOutput<ImportInstallationMediaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ImportInstallationMediaInput>
    public typealias MOutput = OperationOutput<ImportInstallationMediaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ImportInstallationMediaOutputError>
}

public struct ImportInstallationMediaInputQueryItemMiddleware: Middleware {
    public let id: String = "ImportInstallationMediaInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ImportInstallationMediaInput>,
                  next: H) -> Swift.Result<OperationOutput<ImportInstallationMediaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ImportInstallationMediaInput>
    public typealias MOutput = OperationOutput<ImportInstallationMediaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ImportInstallationMediaOutputError>
}

public struct ImportInstallationMediaInputBodyMiddleware: Middleware {
    public let id: String = "ImportInstallationMediaInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ImportInstallationMediaInput>,
                  next: H) -> Swift.Result<OperationOutput<ImportInstallationMediaOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ImportInstallationMediaInput>
    public typealias MOutput = OperationOutput<ImportInstallationMediaOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ImportInstallationMediaOutputError>
}

extension ImportInstallationMediaInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let customAvailabilityZoneId = customAvailabilityZoneId {
            try container.encode(customAvailabilityZoneId, forKey: Key("CustomAvailabilityZoneId"))
        }
        if let engine = engine {
            try container.encode(engine, forKey: Key("Engine"))
        }
        if let engineInstallationMediaPath = engineInstallationMediaPath {
            try container.encode(engineInstallationMediaPath, forKey: Key("EngineInstallationMediaPath"))
        }
        if let engineVersion = engineVersion {
            try container.encode(engineVersion, forKey: Key("EngineVersion"))
        }
        if let oSInstallationMediaPath = oSInstallationMediaPath {
            try container.encode(oSInstallationMediaPath, forKey: Key("OSInstallationMediaPath"))
        }
        try container.encode("ImportInstallationMedia", forKey:Key("Action"))
        try container.encode("2014-10-31", forKey:Key("Version"))
    }
}
