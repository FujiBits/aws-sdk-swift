// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct StartExportTaskInputHeadersMiddleware: Middleware {
    public let id: String = "StartExportTaskInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<StartExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartExportTaskInput>
    public typealias MOutput = OperationOutput<StartExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartExportTaskOutputError>
}

public struct StartExportTaskInputQueryItemMiddleware: Middleware {
    public let id: String = "StartExportTaskInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<StartExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartExportTaskInput>
    public typealias MOutput = OperationOutput<StartExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartExportTaskOutputError>
}

public struct StartExportTaskInputBodyMiddleware: Middleware {
    public let id: String = "StartExportTaskInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<StartExportTaskInput>,
                  next: H) -> Swift.Result<OperationOutput<StartExportTaskOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<StartExportTaskInput>
    public typealias MOutput = OperationOutput<StartExportTaskOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<StartExportTaskOutputError>
}

extension StartExportTaskInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let exportOnly = exportOnly {
            var exportOnlyContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("ExportOnly"))
            for (index0, string0) in exportOnly.enumerated() {
                try exportOnlyContainer.encode(string0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let exportTaskIdentifier = exportTaskIdentifier {
            try container.encode(exportTaskIdentifier, forKey: Key("ExportTaskIdentifier"))
        }
        if let iamRoleArn = iamRoleArn {
            try container.encode(iamRoleArn, forKey: Key("IamRoleArn"))
        }
        if let kmsKeyId = kmsKeyId {
            try container.encode(kmsKeyId, forKey: Key("KmsKeyId"))
        }
        if let s3BucketName = s3BucketName {
            try container.encode(s3BucketName, forKey: Key("S3BucketName"))
        }
        if let s3Prefix = s3Prefix {
            try container.encode(s3Prefix, forKey: Key("S3Prefix"))
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: Key("SourceArn"))
        }
        try container.encode("StartExportTask", forKey:Key("Action"))
        try container.encode("2014-10-31", forKey:Key("Version"))
    }
}
