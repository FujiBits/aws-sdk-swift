// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

struct ListAnomalyDetectorsOutputResponseBody: Equatable {
    public let anomalyDetectorSummaryList: [AnomalyDetectorSummary]?
    public let nextToken: String?
}

extension ListAnomalyDetectorsOutputResponseBody: Decodable {
    enum CodingKeys: String, CodingKey {
        case anomalyDetectorSummaryList = "AnomalyDetectorSummaryList"
        case nextToken = "NextToken"
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let anomalyDetectorSummaryListContainer = try containerValues.decodeIfPresent([AnomalyDetectorSummary?].self, forKey: .anomalyDetectorSummaryList)
        var anomalyDetectorSummaryListDecoded0:[AnomalyDetectorSummary]? = nil
        if let anomalyDetectorSummaryListContainer = anomalyDetectorSummaryListContainer {
            anomalyDetectorSummaryListDecoded0 = [AnomalyDetectorSummary]()
            for structure0 in anomalyDetectorSummaryListContainer {
                if let structure0 = structure0 {
                    anomalyDetectorSummaryListDecoded0?.append(structure0)
                }
            }
        }
        anomalyDetectorSummaryList = anomalyDetectorSummaryListDecoded0
        let nextTokenDecoded = try containerValues.decodeIfPresent(String.self, forKey: .nextToken)
        nextToken = nextTokenDecoded
    }
}
