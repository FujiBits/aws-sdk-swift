// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateGroupVersionInputHeadersMiddleware: Middleware {
    public let id: String = "CreateGroupVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGroupVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGroupVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let amznClientToken = input.operationInput.amznClientToken {
            input.builder.withHeader(name: "X-Amzn-Client-Token", value: String(amznClientToken))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGroupVersionInput>
    public typealias MOutput = OperationOutput<CreateGroupVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGroupVersionOutputError>
}

public struct CreateGroupVersionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateGroupVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGroupVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGroupVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGroupVersionInput>
    public typealias MOutput = OperationOutput<CreateGroupVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGroupVersionOutputError>
}

public struct CreateGroupVersionInputBodyMiddleware: Middleware {
    public let id: String = "CreateGroupVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateGroupVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateGroupVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateGroupVersionInput>
    public typealias MOutput = OperationOutput<CreateGroupVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateGroupVersionOutputError>
}

extension CreateGroupVersionInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case connectorDefinitionVersionArn = "ConnectorDefinitionVersionArn"
        case coreDefinitionVersionArn = "CoreDefinitionVersionArn"
        case deviceDefinitionVersionArn = "DeviceDefinitionVersionArn"
        case functionDefinitionVersionArn = "FunctionDefinitionVersionArn"
        case loggerDefinitionVersionArn = "LoggerDefinitionVersionArn"
        case resourceDefinitionVersionArn = "ResourceDefinitionVersionArn"
        case subscriptionDefinitionVersionArn = "SubscriptionDefinitionVersionArn"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let connectorDefinitionVersionArn = connectorDefinitionVersionArn {
            try encodeContainer.encode(connectorDefinitionVersionArn, forKey: .connectorDefinitionVersionArn)
        }
        if let coreDefinitionVersionArn = coreDefinitionVersionArn {
            try encodeContainer.encode(coreDefinitionVersionArn, forKey: .coreDefinitionVersionArn)
        }
        if let deviceDefinitionVersionArn = deviceDefinitionVersionArn {
            try encodeContainer.encode(deviceDefinitionVersionArn, forKey: .deviceDefinitionVersionArn)
        }
        if let functionDefinitionVersionArn = functionDefinitionVersionArn {
            try encodeContainer.encode(functionDefinitionVersionArn, forKey: .functionDefinitionVersionArn)
        }
        if let loggerDefinitionVersionArn = loggerDefinitionVersionArn {
            try encodeContainer.encode(loggerDefinitionVersionArn, forKey: .loggerDefinitionVersionArn)
        }
        if let resourceDefinitionVersionArn = resourceDefinitionVersionArn {
            try encodeContainer.encode(resourceDefinitionVersionArn, forKey: .resourceDefinitionVersionArn)
        }
        if let subscriptionDefinitionVersionArn = subscriptionDefinitionVersionArn {
            try encodeContainer.encode(subscriptionDefinitionVersionArn, forKey: .subscriptionDefinitionVersionArn)
        }
    }
}
