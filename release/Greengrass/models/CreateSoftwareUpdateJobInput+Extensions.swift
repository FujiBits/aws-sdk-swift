// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateSoftwareUpdateJobInputHeadersMiddleware: Middleware {
    public let id: String = "CreateSoftwareUpdateJobInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateSoftwareUpdateJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateSoftwareUpdateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        if let amznClientToken = input.operationInput.amznClientToken {
            input.builder.withHeader(name: "X-Amzn-Client-Token", value: String(amznClientToken))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateSoftwareUpdateJobInput>
    public typealias MOutput = OperationOutput<CreateSoftwareUpdateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateSoftwareUpdateJobOutputError>
}

public struct CreateSoftwareUpdateJobInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateSoftwareUpdateJobInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateSoftwareUpdateJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateSoftwareUpdateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateSoftwareUpdateJobInput>
    public typealias MOutput = OperationOutput<CreateSoftwareUpdateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateSoftwareUpdateJobOutputError>
}

public struct CreateSoftwareUpdateJobInputBodyMiddleware: Middleware {
    public let id: String = "CreateSoftwareUpdateJobInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateSoftwareUpdateJobInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateSoftwareUpdateJobOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            if try !input.operationInput.allPropertiesAreNull() {
                let encoder = context.getEncoder()
                let data = try encoder.encode(input.operationInput)
                let body = HttpBody.data(data)
                input.builder.withBody(body)
            }
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateSoftwareUpdateJobInput>
    public typealias MOutput = OperationOutput<CreateSoftwareUpdateJobOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateSoftwareUpdateJobOutputError>
}

extension CreateSoftwareUpdateJobInput: Encodable, Reflection {
    enum CodingKeys: String, CodingKey {
        case s3UrlSignerRole = "S3UrlSignerRole"
        case softwareToUpdate = "SoftwareToUpdate"
        case updateAgentLogLevel = "UpdateAgentLogLevel"
        case updateTargets = "UpdateTargets"
        case updateTargetsArchitecture = "UpdateTargetsArchitecture"
        case updateTargetsOperatingSystem = "UpdateTargetsOperatingSystem"
    }

    public func encode(to encoder: Encoder) throws {
        var encodeContainer = encoder.container(keyedBy: CodingKeys.self)
        if let s3UrlSignerRole = s3UrlSignerRole {
            try encodeContainer.encode(s3UrlSignerRole, forKey: .s3UrlSignerRole)
        }
        if let softwareToUpdate = softwareToUpdate {
            try encodeContainer.encode(softwareToUpdate.rawValue, forKey: .softwareToUpdate)
        }
        if let updateAgentLogLevel = updateAgentLogLevel {
            try encodeContainer.encode(updateAgentLogLevel.rawValue, forKey: .updateAgentLogLevel)
        }
        if let updateTargets = updateTargets {
            var updateTargetsContainer = encodeContainer.nestedUnkeyedContainer(forKey: .updateTargets)
            for updatetargets0 in updateTargets {
                try updateTargetsContainer.encode(updatetargets0)
            }
        }
        if let updateTargetsArchitecture = updateTargetsArchitecture {
            try encodeContainer.encode(updateTargetsArchitecture.rawValue, forKey: .updateTargetsArchitecture)
        }
        if let updateTargetsOperatingSystem = updateTargetsOperatingSystem {
            try encodeContainer.encode(updateTargetsOperatingSystem.rawValue, forKey: .updateTargetsOperatingSystem)
        }
    }
}
