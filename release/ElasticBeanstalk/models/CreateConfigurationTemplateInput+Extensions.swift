// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreateConfigurationTemplateInputHeadersMiddleware: Middleware {
    public let id: String = "CreateConfigurationTemplateInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateConfigurationTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateConfigurationTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateConfigurationTemplateInput>
    public typealias MOutput = OperationOutput<CreateConfigurationTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateConfigurationTemplateOutputError>
}

public struct CreateConfigurationTemplateInputQueryItemMiddleware: Middleware {
    public let id: String = "CreateConfigurationTemplateInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateConfigurationTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateConfigurationTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateConfigurationTemplateInput>
    public typealias MOutput = OperationOutput<CreateConfigurationTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateConfigurationTemplateOutputError>
}

public struct CreateConfigurationTemplateInputBodyMiddleware: Middleware {
    public let id: String = "CreateConfigurationTemplateInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreateConfigurationTemplateInput>,
                  next: H) -> Swift.Result<OperationOutput<CreateConfigurationTemplateOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreateConfigurationTemplateInput>
    public typealias MOutput = OperationOutput<CreateConfigurationTemplateOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreateConfigurationTemplateOutputError>
}

extension CreateConfigurationTemplateInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let applicationName = applicationName {
            try container.encode(applicationName, forKey: Key("ApplicationName"))
        }
        if let description = description {
            try container.encode(description, forKey: Key("Description"))
        }
        if let environmentId = environmentId {
            try container.encode(environmentId, forKey: Key("EnvironmentId"))
        }
        if let optionSettings = optionSettings {
            var optionSettingsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("OptionSettings"))
            for (index0, configurationoptionsetting0) in optionSettings.enumerated() {
                try optionSettingsContainer.encode(configurationoptionsetting0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let platformArn = platformArn {
            try container.encode(platformArn, forKey: Key("PlatformArn"))
        }
        if let solutionStackName = solutionStackName {
            try container.encode(solutionStackName, forKey: Key("SolutionStackName"))
        }
        if let sourceConfiguration = sourceConfiguration {
            try container.encode(sourceConfiguration, forKey: Key("SourceConfiguration"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let templateName = templateName {
            try container.encode(templateName, forKey: Key("TemplateName"))
        }
        try container.encode("CreateConfigurationTemplate", forKey:Key("Action"))
        try container.encode("2010-12-01", forKey:Key("Version"))
    }
}
