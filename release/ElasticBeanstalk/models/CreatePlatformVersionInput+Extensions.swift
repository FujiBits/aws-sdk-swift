// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct CreatePlatformVersionInputHeadersMiddleware: Middleware {
    public let id: String = "CreatePlatformVersionInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePlatformVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePlatformVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePlatformVersionInput>
    public typealias MOutput = OperationOutput<CreatePlatformVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePlatformVersionOutputError>
}

public struct CreatePlatformVersionInputQueryItemMiddleware: Middleware {
    public let id: String = "CreatePlatformVersionInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePlatformVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePlatformVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePlatformVersionInput>
    public typealias MOutput = OperationOutput<CreatePlatformVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePlatformVersionOutputError>
}

public struct CreatePlatformVersionInputBodyMiddleware: Middleware {
    public let id: String = "CreatePlatformVersionInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<CreatePlatformVersionInput>,
                  next: H) -> Swift.Result<OperationOutput<CreatePlatformVersionOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<CreatePlatformVersionInput>
    public typealias MOutput = OperationOutput<CreatePlatformVersionOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<CreatePlatformVersionOutputError>
}

extension CreatePlatformVersionInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let environmentName = environmentName {
            try container.encode(environmentName, forKey: Key("EnvironmentName"))
        }
        if let optionSettings = optionSettings {
            var optionSettingsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("OptionSettings"))
            for (index0, configurationoptionsetting0) in optionSettings.enumerated() {
                try optionSettingsContainer.encode(configurationoptionsetting0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        if let platformDefinitionBundle = platformDefinitionBundle {
            try container.encode(platformDefinitionBundle, forKey: Key("PlatformDefinitionBundle"))
        }
        if let platformName = platformName {
            try container.encode(platformName, forKey: Key("PlatformName"))
        }
        if let platformVersion = platformVersion {
            try container.encode(platformVersion, forKey: Key("PlatformVersion"))
        }
        if let tags = tags {
            var tagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tags"))
            for (index0, tag0) in tags.enumerated() {
                try tagsContainer.encode(tag0, forKey: Key("member.\(index0.advanced(by: 1))"))
            }
        }
        try container.encode("CreatePlatformVersion", forKey:Key("Action"))
        try container.encode("2010-12-01", forKey:Key("Version"))
    }
}
