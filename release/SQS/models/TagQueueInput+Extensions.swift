// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct TagQueueInputHeadersMiddleware: Middleware {
    public let id: String = "TagQueueInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<TagQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagQueueInput>
    public typealias MOutput = OperationOutput<TagQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagQueueOutputError>
}

public struct TagQueueInputQueryItemMiddleware: Middleware {
    public let id: String = "TagQueueInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<TagQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagQueueInput>
    public typealias MOutput = OperationOutput<TagQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagQueueOutputError>
}

public struct TagQueueInputBodyMiddleware: Middleware {
    public let id: String = "TagQueueInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<TagQueueInput>,
                  next: H) -> Swift.Result<OperationOutput<TagQueueOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<TagQueueInput>
    public typealias MOutput = OperationOutput<TagQueueOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<TagQueueOutputError>
}

extension TagQueueInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        if let tags = tags {
            if !tags.isEmpty {
                for (index0, element0) in tags.sorted(by: { $0.key < $1.key }).enumerated() {
                    let tagkeyKey0 = element0.key
                    let tagvalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("Tag.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Key"))
                    try keyContainer0.encode(tagkeyKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(tagvalueValue0, forKey: Key(""))
                }
            }
        }
        try container.encode("TagQueue", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}
