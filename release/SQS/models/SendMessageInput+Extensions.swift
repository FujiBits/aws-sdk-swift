// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct SendMessageInputHeadersMiddleware: Middleware {
    public let id: String = "SendMessageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<SendMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendMessageInput>
    public typealias MOutput = OperationOutput<SendMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendMessageOutputError>
}

public struct SendMessageInputQueryItemMiddleware: Middleware {
    public let id: String = "SendMessageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<SendMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendMessageInput>
    public typealias MOutput = OperationOutput<SendMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendMessageOutputError>
}

public struct SendMessageInputBodyMiddleware: Middleware {
    public let id: String = "SendMessageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<SendMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<SendMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<SendMessageInput>
    public typealias MOutput = OperationOutput<SendMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<SendMessageOutputError>
}

extension SendMessageInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if delaySeconds != 0 {
            try container.encode(delaySeconds, forKey: Key("DelaySeconds"))
        }
        if let messageAttributes = messageAttributes {
            if !messageAttributes.isEmpty {
                for (index0, element0) in messageAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let stringKey0 = element0.key
                    let messageattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("MessageAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Name"))
                    try keyContainer0.encode(stringKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(messageattributevalueValue0, forKey: Key(""))
                }
            }
        }
        if let messageBody = messageBody {
            try container.encode(messageBody, forKey: Key("MessageBody"))
        }
        if let messageDeduplicationId = messageDeduplicationId {
            try container.encode(messageDeduplicationId, forKey: Key("MessageDeduplicationId"))
        }
        if let messageGroupId = messageGroupId {
            try container.encode(messageGroupId, forKey: Key("MessageGroupId"))
        }
        if let messageSystemAttributes = messageSystemAttributes {
            if !messageSystemAttributes.isEmpty {
                for (index0, element0) in messageSystemAttributes.sorted(by: { $0.key < $1.key }).enumerated() {
                    let messagesystemattributenameforsendsKey0 = element0.key
                    let messagesystemattributevalueValue0 = element0.value
                    var nestedContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("MessageSystemAttribute.\(index0.advanced(by: 1))"))
                    var keyContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Name"))
                    try keyContainer0.encode(messagesystemattributenameforsendsKey0, forKey: Key(""))
                    var valueContainer0 = nestedContainer0.nestedContainer(keyedBy: Key.self, forKey: Key("Value"))
                    try valueContainer0.encode(messagesystemattributevalueValue0, forKey: Key(""))
                }
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        try container.encode("SendMessage", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}
