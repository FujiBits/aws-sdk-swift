// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

public struct ReceiveMessageInputHeadersMiddleware: Middleware {
    public let id: String = "ReceiveMessageInputHeadersMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReceiveMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<ReceiveMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReceiveMessageInput>
    public typealias MOutput = OperationOutput<ReceiveMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReceiveMessageOutputError>
}

public struct ReceiveMessageInputQueryItemMiddleware: Middleware {
    public let id: String = "ReceiveMessageInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReceiveMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<ReceiveMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReceiveMessageInput>
    public typealias MOutput = OperationOutput<ReceiveMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReceiveMessageOutputError>
}

public struct ReceiveMessageInputBodyMiddleware: Middleware {
    public let id: String = "ReceiveMessageInputBodyMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ReceiveMessageInput>,
                  next: H) -> Swift.Result<OperationOutput<ReceiveMessageOutputResponse>, MError>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context,
    Self.MError == H.MiddlewareError
    {
        do {
            let encoder = context.getEncoder()
            let data = try encoder.encode(input.operationInput)
            let body = HttpBody.data(data)
            input.builder.withBody(body)
        } catch let err {
            return .failure(.client(ClientError.serializationFailed(err.localizedDescription)))
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ReceiveMessageInput>
    public typealias MOutput = OperationOutput<ReceiveMessageOutputResponse>
    public typealias Context = ClientRuntime.HttpContext
    public typealias MError = SdkError<ReceiveMessageOutputError>
}

extension ReceiveMessageInput: Encodable, Reflection {
    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: Key.self)
        if let attributeNames = attributeNames {
            if !attributeNames.isEmpty {
                for (index0, queueattributename0) in attributeNames.enumerated() {
                    var attributeNamesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("AttributeName.\(index0.advanced(by: 1))"))
                    try attributeNamesContainer0.encode(queueattributename0, forKey: Key(""))
                }
            }
        }
        if maxNumberOfMessages != 0 {
            try container.encode(maxNumberOfMessages, forKey: Key("MaxNumberOfMessages"))
        }
        if let messageAttributeNames = messageAttributeNames {
            if !messageAttributeNames.isEmpty {
                for (index0, messageattributename0) in messageAttributeNames.enumerated() {
                    var messageAttributeNamesContainer0 = container.nestedContainer(keyedBy: Key.self, forKey: Key("MessageAttributeName.\(index0.advanced(by: 1))"))
                    try messageAttributeNamesContainer0.encode(messageattributename0, forKey: Key(""))
                }
            }
        }
        if let queueUrl = queueUrl {
            try container.encode(queueUrl, forKey: Key("QueueUrl"))
        }
        if let receiveRequestAttemptId = receiveRequestAttemptId {
            try container.encode(receiveRequestAttemptId, forKey: Key("ReceiveRequestAttemptId"))
        }
        if visibilityTimeout != 0 {
            try container.encode(visibilityTimeout, forKey: Key("VisibilityTimeout"))
        }
        if waitTimeSeconds != 0 {
            try container.encode(waitTimeSeconds, forKey: Key("WaitTimeSeconds"))
        }
        try container.encode("ReceiveMessage", forKey:Key("Action"))
        try container.encode("2012-11-05", forKey:Key("Version"))
    }
}
