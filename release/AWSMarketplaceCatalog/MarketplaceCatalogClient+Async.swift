// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime

#if swift(>=5.5) && canImport(_Concurrency)
@available(macOS 12.0, iOS 15.0, tvOS 15.0, watchOS 8.0, macCatalyst 15.0, *)
public extension MarketplaceCatalogClient {
    /// Used to cancel an open change request. Must be sent before the status of the request changes to APPLYING, the final stage of completing your change request. You can describe a change during the 60-day request history retention period for API calls.
    func cancelChangeSet(input: CancelChangeSetInput) async throws -> CancelChangeSetOutputResponse
    {
        typealias cancelChangeSetContinuation = CheckedContinuation<CancelChangeSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: cancelChangeSetContinuation) in
            cancelChangeSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides information about a given change set.
    func describeChangeSet(input: DescribeChangeSetInput) async throws -> DescribeChangeSetOutputResponse
    {
        typealias describeChangeSetContinuation = CheckedContinuation<DescribeChangeSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeChangeSetContinuation) in
            describeChangeSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the metadata and content of the entity.
    func describeEntity(input: DescribeEntityInput) async throws -> DescribeEntityOutputResponse
    {
        typealias describeEntityContinuation = CheckedContinuation<DescribeEntityOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: describeEntityContinuation) in
            describeEntity(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Returns the list of change sets owned by the account being used to make the call. You can filter this list by providing any combination of entityId, ChangeSetName, and status. If you provide more than one filter, the API operation applies a logical AND between the filters. You can describe a change during the 60-day request history retention period for API calls.
    func listChangeSets(input: ListChangeSetsInput) async throws -> ListChangeSetsOutputResponse
    {
        typealias listChangeSetsContinuation = CheckedContinuation<ListChangeSetsOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listChangeSetsContinuation) in
            listChangeSets(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// Provides the list of entities of a given type.
    func listEntities(input: ListEntitiesInput) async throws -> ListEntitiesOutputResponse
    {
        typealias listEntitiesContinuation = CheckedContinuation<ListEntitiesOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: listEntitiesContinuation) in
            listEntities(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

    /// This operation allows you to request changes for your entities. Within a single ChangeSet, you cannot start the same change type against the same entity multiple times. Additionally, when a ChangeSet is running, all the entities targeted by the different changes are locked until the ChangeSet has completed (either succeeded, cancelled, or failed). If you try to start a ChangeSet containing a change against an entity that is already locked, you will receive a ResourceInUseException. For example, you cannot start the ChangeSet described in the [example](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/API_StartChangeSet.html#API_StartChangeSet_Examples) later in this topic, because it contains two changes to execute the same change type (AddRevisions) against the same entity (entity-id@1). For more information about working with change sets, see [ Working with change sets](https://docs.aws.amazon.com/marketplace-catalog/latest/api-reference/welcome.html#working-with-change-sets).
    func startChangeSet(input: StartChangeSetInput) async throws -> StartChangeSetOutputResponse
    {
        typealias startChangeSetContinuation = CheckedContinuation<StartChangeSetOutputResponse, Swift.Error>
        return try await withCheckedThrowingContinuation { (continuation: startChangeSetContinuation) in
            startChangeSet(input: input) { result in
                switch result {
                    case .success(let output):
                        continuation.resume(returning: output)
                    case .failure(let error):
                        continuation.resume(throwing: error)
                }
            }
        }
    }

}
#endif
