// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

public struct ListEventSourceMappingsInputQueryItemMiddleware: Middleware {
    public let id: String = "ListEventSourceMappingsInputQueryItemMiddleware"

    public init() {}

    public func handle<H>(context: Context,
                  input: SerializeStepInput<ListEventSourceMappingsInput>,
                  next: H) -> Result<OperationOutput<ListEventSourceMappingsOutput, ListEventSourceMappingsError>, Error>
    where H: Handler,
    Self.MInput == H.Input,
    Self.MOutput == H.Output,
    Self.Context == H.Context
    {
        if let functionName = input.operationInput.functionName {
            let queryItem = URLQueryItem(name: "FunctionName", value: String(functionName))
            input.builder.withQueryItem(queryItem)
        }
        if let marker = input.operationInput.marker {
            let queryItem = URLQueryItem(name: "Marker", value: String(marker))
            input.builder.withQueryItem(queryItem)
        }
        if let maxItems = input.operationInput.maxItems {
            let queryItem = URLQueryItem(name: "MaxItems", value: String(maxItems))
            input.builder.withQueryItem(queryItem)
        }
        if let eventSourceArn = input.operationInput.eventSourceArn {
            let queryItem = URLQueryItem(name: "EventSourceArn", value: String(eventSourceArn))
            input.builder.withQueryItem(queryItem)
        }
        return next.handle(context: context, input: input)
    }

    public typealias MInput = SerializeStepInput<ListEventSourceMappingsInput>
    public typealias MOutput = OperationOutput<ListEventSourceMappingsOutput, ListEventSourceMappingsError>
    public typealias Context = HttpContext
}
