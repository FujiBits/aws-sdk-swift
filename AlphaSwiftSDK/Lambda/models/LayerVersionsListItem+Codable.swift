// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension LayerVersionsListItem: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case compatibleRuntimes = "CompatibleRuntimes"
        case createdDate = "CreatedDate"
        case description = "Description"
        case layerVersionArn = "LayerVersionArn"
        case licenseInfo = "LicenseInfo"
        case version = "Version"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let compatibleRuntimes = compatibleRuntimes {
            var compatibleRuntimesContainer = container.nestedUnkeyedContainer(forKey: .compatibleRuntimes)
            for compatibleruntimes0 in compatibleRuntimes {
                try compatibleRuntimesContainer.encode(compatibleruntimes0.rawValue)
            }
        }
        if let createdDate = createdDate {
            try container.encode(createdDate, forKey: .createdDate)
        }
        if let description = description {
            try container.encode(description, forKey: .description)
        }
        if let layerVersionArn = layerVersionArn {
            try container.encode(layerVersionArn, forKey: .layerVersionArn)
        }
        if let licenseInfo = licenseInfo {
            try container.encode(licenseInfo, forKey: .licenseInfo)
        }
        if version != 0 {
            try container.encode(version, forKey: .version)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let layerVersionArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .layerVersionArn)
        layerVersionArn = layerVersionArnDecoded
        let versionDecoded = try containerValues.decode(Int.self, forKey: .version)
        version = versionDecoded
        let descriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .description)
        description = descriptionDecoded
        let createdDateDecoded = try containerValues.decodeIfPresent(String.self, forKey: .createdDate)
        createdDate = createdDateDecoded
        let compatibleRuntimesContainer = try containerValues.decodeIfPresent([Runtime].self, forKey: .compatibleRuntimes)
        var compatibleRuntimesDecoded0:[Runtime]? = nil
        if let compatibleRuntimesContainer = compatibleRuntimesContainer {
            compatibleRuntimesDecoded0 = [Runtime]()
            for string0 in compatibleRuntimesContainer {
                compatibleRuntimesDecoded0?.append(string0)
            }
        }
        compatibleRuntimes = compatibleRuntimesDecoded0
        let licenseInfoDecoded = try containerValues.decodeIfPresent(String.self, forKey: .licenseInfo)
        licenseInfo = licenseInfoDecoded
    }
}
