// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension UpdateEventSourceMappingInput: Encodable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case batchSize = "BatchSize"
        case bisectBatchOnFunctionError = "BisectBatchOnFunctionError"
        case destinationConfig = "DestinationConfig"
        case enabled = "Enabled"
        case functionName = "FunctionName"
        case maximumBatchingWindowInSeconds = "MaximumBatchingWindowInSeconds"
        case maximumRecordAgeInSeconds = "MaximumRecordAgeInSeconds"
        case maximumRetryAttempts = "MaximumRetryAttempts"
        case parallelizationFactor = "ParallelizationFactor"
        case sourceAccessConfigurations = "SourceAccessConfigurations"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let batchSize = batchSize {
            try container.encode(batchSize, forKey: .batchSize)
        }
        if let bisectBatchOnFunctionError = bisectBatchOnFunctionError {
            try container.encode(bisectBatchOnFunctionError, forKey: .bisectBatchOnFunctionError)
        }
        if let destinationConfig = destinationConfig {
            try container.encode(destinationConfig, forKey: .destinationConfig)
        }
        if let enabled = enabled {
            try container.encode(enabled, forKey: .enabled)
        }
        if let functionName = functionName {
            try container.encode(functionName, forKey: .functionName)
        }
        if let maximumBatchingWindowInSeconds = maximumBatchingWindowInSeconds {
            try container.encode(maximumBatchingWindowInSeconds, forKey: .maximumBatchingWindowInSeconds)
        }
        if let maximumRecordAgeInSeconds = maximumRecordAgeInSeconds {
            try container.encode(maximumRecordAgeInSeconds, forKey: .maximumRecordAgeInSeconds)
        }
        if let maximumRetryAttempts = maximumRetryAttempts {
            try container.encode(maximumRetryAttempts, forKey: .maximumRetryAttempts)
        }
        if let parallelizationFactor = parallelizationFactor {
            try container.encode(parallelizationFactor, forKey: .parallelizationFactor)
        }
        if let sourceAccessConfigurations = sourceAccessConfigurations {
            var sourceAccessConfigurationsContainer = container.nestedUnkeyedContainer(forKey: .sourceAccessConfigurations)
            for sourceaccessconfigurations0 in sourceAccessConfigurations {
                try sourceAccessConfigurationsContainer.encode(sourceaccessconfigurations0)
            }
        }
    }
}
