// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension AddPermissionInput: Encodable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case action = "Action"
        case eventSourceToken = "EventSourceToken"
        case principal = "Principal"
        case revisionId = "RevisionId"
        case sourceAccount = "SourceAccount"
        case sourceArn = "SourceArn"
        case statementId = "StatementId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let action = action {
            try container.encode(action, forKey: .action)
        }
        if let eventSourceToken = eventSourceToken {
            try container.encode(eventSourceToken, forKey: .eventSourceToken)
        }
        if let principal = principal {
            try container.encode(principal, forKey: .principal)
        }
        if let revisionId = revisionId {
            try container.encode(revisionId, forKey: .revisionId)
        }
        if let sourceAccount = sourceAccount {
            try container.encode(sourceAccount, forKey: .sourceAccount)
        }
        if let sourceArn = sourceArn {
            try container.encode(sourceArn, forKey: .sourceArn)
        }
        if let statementId = statementId {
            try container.encode(statementId, forKey: .statementId)
        }
    }
}
