// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension AllowedPublishers: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case signingProfileVersionArns = "SigningProfileVersionArns"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let signingProfileVersionArns = signingProfileVersionArns {
            var signingProfileVersionArnsContainer = container.nestedUnkeyedContainer(forKey: .signingProfileVersionArns)
            for signingprofileversionarns0 in signingProfileVersionArns {
                try signingProfileVersionArnsContainer.encode(signingprofileversionarns0)
            }
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let signingProfileVersionArnsContainer = try containerValues.decodeIfPresent([String].self, forKey: .signingProfileVersionArns)
        var signingProfileVersionArnsDecoded0:[String]? = nil
        if let signingProfileVersionArnsContainer = signingProfileVersionArnsContainer {
            signingProfileVersionArnsDecoded0 = [String]()
            for string0 in signingProfileVersionArnsContainer {
                signingProfileVersionArnsDecoded0?.append(string0)
            }
        }
        signingProfileVersionArns = signingProfileVersionArnsDecoded0
    }
}
