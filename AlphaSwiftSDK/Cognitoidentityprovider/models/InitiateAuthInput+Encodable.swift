// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension InitiateAuthInput: Encodable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case analyticsMetadata = "AnalyticsMetadata"
        case authFlow = "AuthFlow"
        case authParameters = "AuthParameters"
        case clientId = "ClientId"
        case clientMetadata = "ClientMetadata"
        case userContextData = "UserContextData"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let analyticsMetadata = analyticsMetadata {
            try container.encode(analyticsMetadata, forKey: .analyticsMetadata)
        }
        if let authFlow = authFlow {
            try container.encode(authFlow.rawValue, forKey: .authFlow)
        }
        if let authParameters = authParameters {
            var authParametersContainer = container.nestedContainer(keyedBy: Key.self, forKey: .authParameters)
            for (dictKey0, authparameterstype0) in authParameters {
                try authParametersContainer.encode(authparameterstype0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let clientId = clientId {
            try container.encode(clientId, forKey: .clientId)
        }
        if let clientMetadata = clientMetadata {
            var clientMetadataContainer = container.nestedContainer(keyedBy: Key.self, forKey: .clientMetadata)
            for (dictKey0, clientmetadatatype0) in clientMetadata {
                try clientMetadataContainer.encode(clientmetadatatype0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let userContextData = userContextData {
            try container.encode(userContextData, forKey: .userContextData)
        }
    }
}
