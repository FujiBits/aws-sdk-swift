// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension UpdateUserPoolInput: Encodable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case accountRecoverySetting = "AccountRecoverySetting"
        case adminCreateUserConfig = "AdminCreateUserConfig"
        case autoVerifiedAttributes = "AutoVerifiedAttributes"
        case deviceConfiguration = "DeviceConfiguration"
        case emailConfiguration = "EmailConfiguration"
        case emailVerificationMessage = "EmailVerificationMessage"
        case emailVerificationSubject = "EmailVerificationSubject"
        case lambdaConfig = "LambdaConfig"
        case mfaConfiguration = "MfaConfiguration"
        case policies = "Policies"
        case smsAuthenticationMessage = "SmsAuthenticationMessage"
        case smsConfiguration = "SmsConfiguration"
        case smsVerificationMessage = "SmsVerificationMessage"
        case userPoolAddOns = "UserPoolAddOns"
        case userPoolId = "UserPoolId"
        case userPoolTags = "UserPoolTags"
        case verificationMessageTemplate = "VerificationMessageTemplate"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let accountRecoverySetting = accountRecoverySetting {
            try container.encode(accountRecoverySetting, forKey: .accountRecoverySetting)
        }
        if let adminCreateUserConfig = adminCreateUserConfig {
            try container.encode(adminCreateUserConfig, forKey: .adminCreateUserConfig)
        }
        if let autoVerifiedAttributes = autoVerifiedAttributes {
            var autoVerifiedAttributesContainer = container.nestedUnkeyedContainer(forKey: .autoVerifiedAttributes)
            for verifiedattributeslisttype0 in autoVerifiedAttributes {
                try autoVerifiedAttributesContainer.encode(verifiedattributeslisttype0.rawValue)
            }
        }
        if let deviceConfiguration = deviceConfiguration {
            try container.encode(deviceConfiguration, forKey: .deviceConfiguration)
        }
        if let emailConfiguration = emailConfiguration {
            try container.encode(emailConfiguration, forKey: .emailConfiguration)
        }
        if let emailVerificationMessage = emailVerificationMessage {
            try container.encode(emailVerificationMessage, forKey: .emailVerificationMessage)
        }
        if let emailVerificationSubject = emailVerificationSubject {
            try container.encode(emailVerificationSubject, forKey: .emailVerificationSubject)
        }
        if let lambdaConfig = lambdaConfig {
            try container.encode(lambdaConfig, forKey: .lambdaConfig)
        }
        if let mfaConfiguration = mfaConfiguration {
            try container.encode(mfaConfiguration.rawValue, forKey: .mfaConfiguration)
        }
        if let policies = policies {
            try container.encode(policies, forKey: .policies)
        }
        if let smsAuthenticationMessage = smsAuthenticationMessage {
            try container.encode(smsAuthenticationMessage, forKey: .smsAuthenticationMessage)
        }
        if let smsConfiguration = smsConfiguration {
            try container.encode(smsConfiguration, forKey: .smsConfiguration)
        }
        if let smsVerificationMessage = smsVerificationMessage {
            try container.encode(smsVerificationMessage, forKey: .smsVerificationMessage)
        }
        if let userPoolAddOns = userPoolAddOns {
            try container.encode(userPoolAddOns, forKey: .userPoolAddOns)
        }
        if let userPoolId = userPoolId {
            try container.encode(userPoolId, forKey: .userPoolId)
        }
        if let userPoolTags = userPoolTags {
            var userPoolTagsContainer = container.nestedContainer(keyedBy: Key.self, forKey: .userPoolTags)
            for (dictKey0, userpooltagstype0) in userPoolTags {
                try userPoolTagsContainer.encode(userpooltagstype0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let verificationMessageTemplate = verificationMessageTemplate {
            try container.encode(verificationMessageTemplate, forKey: .verificationMessageTemplate)
        }
    }
}
