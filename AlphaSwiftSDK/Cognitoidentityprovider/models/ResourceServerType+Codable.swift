// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension ResourceServerType: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case identifier = "Identifier"
        case name = "Name"
        case scopes = "Scopes"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let identifier = identifier {
            try container.encode(identifier, forKey: .identifier)
        }
        if let name = name {
            try container.encode(name, forKey: .name)
        }
        if let scopes = scopes {
            var scopesContainer = container.nestedUnkeyedContainer(forKey: .scopes)
            for resourceserverscopelisttype0 in scopes {
                try scopesContainer.encode(resourceserverscopelisttype0)
            }
        }
        if let userPoolId = userPoolId {
            try container.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let identifierDecoded = try containerValues.decodeIfPresent(String.self, forKey: .identifier)
        identifier = identifierDecoded
        let nameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .name)
        name = nameDecoded
        let scopesContainer = try containerValues.decodeIfPresent([ResourceServerScopeType].self, forKey: .scopes)
        var scopesDecoded0:[ResourceServerScopeType]? = nil
        if let scopesContainer = scopesContainer {
            scopesDecoded0 = [ResourceServerScopeType]()
            for structure0 in scopesContainer {
                scopesDecoded0?.append(structure0)
            }
        }
        scopes = scopesDecoded0
    }
}
