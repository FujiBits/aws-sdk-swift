// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension MessageTemplateType: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case emailMessage = "EmailMessage"
        case emailSubject = "EmailSubject"
        case sMSMessage = "SMSMessage"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let emailMessage = emailMessage {
            try container.encode(emailMessage, forKey: .emailMessage)
        }
        if let emailSubject = emailSubject {
            try container.encode(emailSubject, forKey: .emailSubject)
        }
        if let sMSMessage = sMSMessage {
            try container.encode(sMSMessage, forKey: .sMSMessage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let sMSMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .sMSMessage)
        sMSMessage = sMSMessageDecoded
        let emailMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emailMessage)
        emailMessage = emailMessageDecoded
        let emailSubjectDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emailSubject)
        emailSubject = emailSubjectDecoded
    }
}
