// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension DeviceType: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case deviceAttributes = "DeviceAttributes"
        case deviceCreateDate = "DeviceCreateDate"
        case deviceKey = "DeviceKey"
        case deviceLastAuthenticatedDate = "DeviceLastAuthenticatedDate"
        case deviceLastModifiedDate = "DeviceLastModifiedDate"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let deviceAttributes = deviceAttributes {
            var deviceAttributesContainer = container.nestedUnkeyedContainer(forKey: .deviceAttributes)
            for attributelisttype0 in deviceAttributes {
                try deviceAttributesContainer.encode(attributelisttype0)
            }
        }
        if let deviceCreateDate = deviceCreateDate {
            try container.encode(deviceCreateDate.timeIntervalSince1970, forKey: .deviceCreateDate)
        }
        if let deviceKey = deviceKey {
            try container.encode(deviceKey, forKey: .deviceKey)
        }
        if let deviceLastAuthenticatedDate = deviceLastAuthenticatedDate {
            try container.encode(deviceLastAuthenticatedDate.timeIntervalSince1970, forKey: .deviceLastAuthenticatedDate)
        }
        if let deviceLastModifiedDate = deviceLastModifiedDate {
            try container.encode(deviceLastModifiedDate.timeIntervalSince1970, forKey: .deviceLastModifiedDate)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let deviceKeyDecoded = try containerValues.decodeIfPresent(String.self, forKey: .deviceKey)
        deviceKey = deviceKeyDecoded
        let deviceAttributesContainer = try containerValues.decodeIfPresent([AttributeType].self, forKey: .deviceAttributes)
        var deviceAttributesDecoded0:[AttributeType]? = nil
        if let deviceAttributesContainer = deviceAttributesContainer {
            deviceAttributesDecoded0 = [AttributeType]()
            for structure0 in deviceAttributesContainer {
                deviceAttributesDecoded0?.append(structure0)
            }
        }
        deviceAttributes = deviceAttributesDecoded0
        let deviceCreateDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .deviceCreateDate)
        deviceCreateDate = deviceCreateDateDecoded
        let deviceLastModifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .deviceLastModifiedDate)
        deviceLastModifiedDate = deviceLastModifiedDateDecoded
        let deviceLastAuthenticatedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .deviceLastAuthenticatedDate)
        deviceLastAuthenticatedDate = deviceLastAuthenticatedDateDecoded
    }
}
