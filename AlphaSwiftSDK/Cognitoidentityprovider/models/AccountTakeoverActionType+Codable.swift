// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension AccountTakeoverActionType: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case eventAction = "EventAction"
        case notify = "Notify"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let eventAction = eventAction {
            try container.encode(eventAction.rawValue, forKey: .eventAction)
        }
        if notify != false {
            try container.encode(notify, forKey: .notify)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let notifyDecoded = try containerValues.decode(Bool.self, forKey: .notify)
        notify = notifyDecoded
        let eventActionDecoded = try containerValues.decodeIfPresent(AccountTakeoverEventActionType.self, forKey: .eventAction)
        eventAction = eventActionDecoded
    }
}
