// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension VerificationMessageTemplateType: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case defaultEmailOption = "DefaultEmailOption"
        case emailMessage = "EmailMessage"
        case emailMessageByLink = "EmailMessageByLink"
        case emailSubject = "EmailSubject"
        case emailSubjectByLink = "EmailSubjectByLink"
        case smsMessage = "SmsMessage"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let defaultEmailOption = defaultEmailOption {
            try container.encode(defaultEmailOption.rawValue, forKey: .defaultEmailOption)
        }
        if let emailMessage = emailMessage {
            try container.encode(emailMessage, forKey: .emailMessage)
        }
        if let emailMessageByLink = emailMessageByLink {
            try container.encode(emailMessageByLink, forKey: .emailMessageByLink)
        }
        if let emailSubject = emailSubject {
            try container.encode(emailSubject, forKey: .emailSubject)
        }
        if let emailSubjectByLink = emailSubjectByLink {
            try container.encode(emailSubjectByLink, forKey: .emailSubjectByLink)
        }
        if let smsMessage = smsMessage {
            try container.encode(smsMessage, forKey: .smsMessage)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let smsMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .smsMessage)
        smsMessage = smsMessageDecoded
        let emailMessageDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emailMessage)
        emailMessage = emailMessageDecoded
        let emailSubjectDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emailSubject)
        emailSubject = emailSubjectDecoded
        let emailMessageByLinkDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emailMessageByLink)
        emailMessageByLink = emailMessageByLinkDecoded
        let emailSubjectByLinkDecoded = try containerValues.decodeIfPresent(String.self, forKey: .emailSubjectByLink)
        emailSubjectByLink = emailSubjectByLinkDecoded
        let defaultEmailOptionDecoded = try containerValues.decodeIfPresent(DefaultEmailOptionType.self, forKey: .defaultEmailOption)
        defaultEmailOption = defaultEmailOptionDecoded
    }
}
