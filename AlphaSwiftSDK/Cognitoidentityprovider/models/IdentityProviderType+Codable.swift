// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension IdentityProviderType: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case attributeMapping = "AttributeMapping"
        case creationDate = "CreationDate"
        case idpIdentifiers = "IdpIdentifiers"
        case lastModifiedDate = "LastModifiedDate"
        case providerDetails = "ProviderDetails"
        case providerName = "ProviderName"
        case providerType = "ProviderType"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let attributeMapping = attributeMapping {
            var attributeMappingContainer = container.nestedContainer(keyedBy: Key.self, forKey: .attributeMapping)
            for (dictKey0, attributemappingtype0) in attributeMapping {
                try attributeMappingContainer.encode(attributemappingtype0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let creationDate = creationDate {
            try container.encode(creationDate.timeIntervalSince1970, forKey: .creationDate)
        }
        if let idpIdentifiers = idpIdentifiers {
            var idpIdentifiersContainer = container.nestedUnkeyedContainer(forKey: .idpIdentifiers)
            for idpidentifierslisttype0 in idpIdentifiers {
                try idpIdentifiersContainer.encode(idpidentifierslisttype0)
            }
        }
        if let lastModifiedDate = lastModifiedDate {
            try container.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let providerDetails = providerDetails {
            var providerDetailsContainer = container.nestedContainer(keyedBy: Key.self, forKey: .providerDetails)
            for (dictKey0, providerdetailstype0) in providerDetails {
                try providerDetailsContainer.encode(providerdetailstype0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let providerName = providerName {
            try container.encode(providerName, forKey: .providerName)
        }
        if let providerType = providerType {
            try container.encode(providerType.rawValue, forKey: .providerType)
        }
        if let userPoolId = userPoolId {
            try container.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let providerNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .providerName)
        providerName = providerNameDecoded
        let providerTypeDecoded = try containerValues.decodeIfPresent(IdentityProviderTypeType.self, forKey: .providerType)
        providerType = providerTypeDecoded
        let providerDetailsContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .providerDetails)
        var providerDetailsDecoded0: [String:String]? = nil
        if let providerDetailsContainer = providerDetailsContainer {
            providerDetailsDecoded0 = [String:String]()
            for (key0, stringtype0) in providerDetailsContainer {
                providerDetailsDecoded0?[key0] = stringtype0
            }
        }
        providerDetails = providerDetailsDecoded0
        let attributeMappingContainer = try containerValues.decodeIfPresent([String:String].self, forKey: .attributeMapping)
        var attributeMappingDecoded0: [String:String]? = nil
        if let attributeMappingContainer = attributeMappingContainer {
            attributeMappingDecoded0 = [String:String]()
            for (key0, stringtype0) in attributeMappingContainer {
                attributeMappingDecoded0?[key0] = stringtype0
            }
        }
        attributeMapping = attributeMappingDecoded0
        let idpIdentifiersContainer = try containerValues.decodeIfPresent([String].self, forKey: .idpIdentifiers)
        var idpIdentifiersDecoded0:[String]? = nil
        if let idpIdentifiersContainer = idpIdentifiersContainer {
            idpIdentifiersDecoded0 = [String]()
            for string0 in idpIdentifiersContainer {
                idpIdentifiersDecoded0?.append(string0)
            }
        }
        idpIdentifiers = idpIdentifiersDecoded0
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
        let creationDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .creationDate)
        creationDate = creationDateDecoded
    }
}
