// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension RiskConfigurationType: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case accountTakeoverRiskConfiguration = "AccountTakeoverRiskConfiguration"
        case clientId = "ClientId"
        case compromisedCredentialsRiskConfiguration = "CompromisedCredentialsRiskConfiguration"
        case lastModifiedDate = "LastModifiedDate"
        case riskExceptionConfiguration = "RiskExceptionConfiguration"
        case userPoolId = "UserPoolId"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let accountTakeoverRiskConfiguration = accountTakeoverRiskConfiguration {
            try container.encode(accountTakeoverRiskConfiguration, forKey: .accountTakeoverRiskConfiguration)
        }
        if let clientId = clientId {
            try container.encode(clientId, forKey: .clientId)
        }
        if let compromisedCredentialsRiskConfiguration = compromisedCredentialsRiskConfiguration {
            try container.encode(compromisedCredentialsRiskConfiguration, forKey: .compromisedCredentialsRiskConfiguration)
        }
        if let lastModifiedDate = lastModifiedDate {
            try container.encode(lastModifiedDate.timeIntervalSince1970, forKey: .lastModifiedDate)
        }
        if let riskExceptionConfiguration = riskExceptionConfiguration {
            try container.encode(riskExceptionConfiguration, forKey: .riskExceptionConfiguration)
        }
        if let userPoolId = userPoolId {
            try container.encode(userPoolId, forKey: .userPoolId)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let userPoolIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .userPoolId)
        userPoolId = userPoolIdDecoded
        let clientIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .clientId)
        clientId = clientIdDecoded
        let compromisedCredentialsRiskConfigurationDecoded = try containerValues.decodeIfPresent(CompromisedCredentialsRiskConfigurationType.self, forKey: .compromisedCredentialsRiskConfiguration)
        compromisedCredentialsRiskConfiguration = compromisedCredentialsRiskConfigurationDecoded
        let accountTakeoverRiskConfigurationDecoded = try containerValues.decodeIfPresent(AccountTakeoverRiskConfigurationType.self, forKey: .accountTakeoverRiskConfiguration)
        accountTakeoverRiskConfiguration = accountTakeoverRiskConfigurationDecoded
        let riskExceptionConfigurationDecoded = try containerValues.decodeIfPresent(RiskExceptionConfigurationType.self, forKey: .riskExceptionConfiguration)
        riskExceptionConfiguration = riskExceptionConfigurationDecoded
        let lastModifiedDateDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastModifiedDate)
        lastModifiedDate = lastModifiedDateDecoded
    }
}
