// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension GetItemInput: Encodable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case attributesToGet = "AttributesToGet"
        case consistentRead = "ConsistentRead"
        case expressionAttributeNames = "ExpressionAttributeNames"
        case key = "Key"
        case projectionExpression = "ProjectionExpression"
        case returnConsumedCapacity = "ReturnConsumedCapacity"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let attributesToGet = attributesToGet {
            var attributesToGetContainer = container.nestedUnkeyedContainer(forKey: .attributesToGet)
            for attributenamelist0 in attributesToGet {
                try attributesToGetContainer.encode(attributenamelist0)
            }
        }
        if let consistentRead = consistentRead {
            try container.encode(consistentRead, forKey: .consistentRead)
        }
        if let expressionAttributeNames = expressionAttributeNames {
            var expressionAttributeNamesContainer = container.nestedContainer(keyedBy: Key.self, forKey: .expressionAttributeNames)
            for (dictKey0, expressionattributenamemap0) in expressionAttributeNames {
                try expressionAttributeNamesContainer.encode(expressionattributenamemap0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let key = key {
            var keyContainer = container.nestedContainer(keyedBy: Key.self, forKey: .key)
            for (dictKey0, key0) in key {
                try keyContainer.encode(key0, forKey: Key(stringValue: dictKey0))
            }
        }
        if let projectionExpression = projectionExpression {
            try container.encode(projectionExpression, forKey: .projectionExpression)
        }
        if let returnConsumedCapacity = returnConsumedCapacity {
            try container.encode(returnConsumedCapacity.rawValue, forKey: .returnConsumedCapacity)
        }
        if let tableName = tableName {
            try container.encode(tableName, forKey: .tableName)
        }
    }
}
