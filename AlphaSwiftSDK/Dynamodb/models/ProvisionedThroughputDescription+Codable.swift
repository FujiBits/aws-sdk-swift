// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension ProvisionedThroughputDescription: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case lastDecreaseDateTime = "LastDecreaseDateTime"
        case lastIncreaseDateTime = "LastIncreaseDateTime"
        case numberOfDecreasesToday = "NumberOfDecreasesToday"
        case readCapacityUnits = "ReadCapacityUnits"
        case writeCapacityUnits = "WriteCapacityUnits"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let lastDecreaseDateTime = lastDecreaseDateTime {
            try container.encode(lastDecreaseDateTime.timeIntervalSince1970, forKey: .lastDecreaseDateTime)
        }
        if let lastIncreaseDateTime = lastIncreaseDateTime {
            try container.encode(lastIncreaseDateTime.timeIntervalSince1970, forKey: .lastIncreaseDateTime)
        }
        if let numberOfDecreasesToday = numberOfDecreasesToday {
            try container.encode(numberOfDecreasesToday, forKey: .numberOfDecreasesToday)
        }
        if let readCapacityUnits = readCapacityUnits {
            try container.encode(readCapacityUnits, forKey: .readCapacityUnits)
        }
        if let writeCapacityUnits = writeCapacityUnits {
            try container.encode(writeCapacityUnits, forKey: .writeCapacityUnits)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let lastIncreaseDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastIncreaseDateTime)
        lastIncreaseDateTime = lastIncreaseDateTimeDecoded
        let lastDecreaseDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .lastDecreaseDateTime)
        lastDecreaseDateTime = lastDecreaseDateTimeDecoded
        let numberOfDecreasesTodayDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .numberOfDecreasesToday)
        numberOfDecreasesToday = numberOfDecreasesTodayDecoded
        let readCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .readCapacityUnits)
        readCapacityUnits = readCapacityUnitsDecoded
        let writeCapacityUnitsDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .writeCapacityUnits)
        writeCapacityUnits = writeCapacityUnitsDecoded
    }
}
