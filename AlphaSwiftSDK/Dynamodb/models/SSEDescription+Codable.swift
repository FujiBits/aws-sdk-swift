// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension SSEDescription: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case inaccessibleEncryptionDateTime = "InaccessibleEncryptionDateTime"
        case kMSMasterKeyArn = "KMSMasterKeyArn"
        case sSEType = "SSEType"
        case status = "Status"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTime {
            try container.encode(inaccessibleEncryptionDateTime.timeIntervalSince1970, forKey: .inaccessibleEncryptionDateTime)
        }
        if let kMSMasterKeyArn = kMSMasterKeyArn {
            try container.encode(kMSMasterKeyArn, forKey: .kMSMasterKeyArn)
        }
        if let sSEType = sSEType {
            try container.encode(sSEType.rawValue, forKey: .sSEType)
        }
        if let status = status {
            try container.encode(status.rawValue, forKey: .status)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let statusDecoded = try containerValues.decodeIfPresent(SSEStatus.self, forKey: .status)
        status = statusDecoded
        let sSETypeDecoded = try containerValues.decodeIfPresent(SSEType.self, forKey: .sSEType)
        sSEType = sSETypeDecoded
        let kMSMasterKeyArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kMSMasterKeyArn)
        kMSMasterKeyArn = kMSMasterKeyArnDecoded
        let inaccessibleEncryptionDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .inaccessibleEncryptionDateTime)
        inaccessibleEncryptionDateTime = inaccessibleEncryptionDateTimeDecoded
    }
}
