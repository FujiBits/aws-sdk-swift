// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension ReplicaAutoScalingDescription: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case regionName = "RegionName"
        case replicaProvisionedReadCapacityAutoScalingSettings = "ReplicaProvisionedReadCapacityAutoScalingSettings"
        case replicaProvisionedWriteCapacityAutoScalingSettings = "ReplicaProvisionedWriteCapacityAutoScalingSettings"
        case replicaStatus = "ReplicaStatus"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = container.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for replicaglobalsecondaryindexautoscalingdescriptionlist0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(replicaglobalsecondaryindexautoscalingdescriptionlist0)
            }
        }
        if let regionName = regionName {
            try container.encode(regionName, forKey: .regionName)
        }
        if let replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettings {
            try container.encode(replicaProvisionedReadCapacityAutoScalingSettings, forKey: .replicaProvisionedReadCapacityAutoScalingSettings)
        }
        if let replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettings {
            try container.encode(replicaProvisionedWriteCapacityAutoScalingSettings, forKey: .replicaProvisionedWriteCapacityAutoScalingSettings)
        }
        if let replicaStatus = replicaStatus {
            try container.encode(replicaStatus.rawValue, forKey: .replicaStatus)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([ReplicaGlobalSecondaryIndexAutoScalingDescription].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[ReplicaGlobalSecondaryIndexAutoScalingDescription]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [ReplicaGlobalSecondaryIndexAutoScalingDescription]()
            for structure0 in globalSecondaryIndexesContainer {
                globalSecondaryIndexesDecoded0?.append(structure0)
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let replicaProvisionedReadCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsDescription.self, forKey: .replicaProvisionedReadCapacityAutoScalingSettings)
        replicaProvisionedReadCapacityAutoScalingSettings = replicaProvisionedReadCapacityAutoScalingSettingsDecoded
        let replicaProvisionedWriteCapacityAutoScalingSettingsDecoded = try containerValues.decodeIfPresent(AutoScalingSettingsDescription.self, forKey: .replicaProvisionedWriteCapacityAutoScalingSettings)
        replicaProvisionedWriteCapacityAutoScalingSettings = replicaProvisionedWriteCapacityAutoScalingSettingsDecoded
        let replicaStatusDecoded = try containerValues.decodeIfPresent(ReplicaStatus.self, forKey: .replicaStatus)
        replicaStatus = replicaStatusDecoded
    }
}
