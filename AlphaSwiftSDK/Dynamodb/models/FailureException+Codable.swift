// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension FailureException: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case exceptionDescription = "ExceptionDescription"
        case exceptionName = "ExceptionName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let exceptionDescription = exceptionDescription {
            try container.encode(exceptionDescription, forKey: .exceptionDescription)
        }
        if let exceptionName = exceptionName {
            try container.encode(exceptionName, forKey: .exceptionName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let exceptionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exceptionName)
        exceptionName = exceptionNameDecoded
        let exceptionDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .exceptionDescription)
        exceptionDescription = exceptionDescriptionDecoded
    }
}
