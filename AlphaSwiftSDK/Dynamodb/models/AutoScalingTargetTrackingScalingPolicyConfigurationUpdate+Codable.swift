// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension AutoScalingTargetTrackingScalingPolicyConfigurationUpdate: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case disableScaleIn = "DisableScaleIn"
        case scaleInCooldown = "ScaleInCooldown"
        case scaleOutCooldown = "ScaleOutCooldown"
        case targetValue = "TargetValue"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let disableScaleIn = disableScaleIn {
            try container.encode(disableScaleIn, forKey: .disableScaleIn)
        }
        if let scaleInCooldown = scaleInCooldown {
            try container.encode(scaleInCooldown, forKey: .scaleInCooldown)
        }
        if let scaleOutCooldown = scaleOutCooldown {
            try container.encode(scaleOutCooldown, forKey: .scaleOutCooldown)
        }
        if let targetValue = targetValue {
            try container.encode(targetValue, forKey: .targetValue)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let disableScaleInDecoded = try containerValues.decodeIfPresent(Bool.self, forKey: .disableScaleIn)
        disableScaleIn = disableScaleInDecoded
        let scaleInCooldownDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scaleInCooldown)
        scaleInCooldown = scaleInCooldownDecoded
        let scaleOutCooldownDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .scaleOutCooldown)
        scaleOutCooldown = scaleOutCooldownDecoded
        let targetValueDecoded = try containerValues.decodeIfPresent(Double.self, forKey: .targetValue)
        targetValue = targetValueDecoded
    }
}
