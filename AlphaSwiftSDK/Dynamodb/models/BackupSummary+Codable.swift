// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension BackupSummary: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case backupArn = "BackupArn"
        case backupCreationDateTime = "BackupCreationDateTime"
        case backupExpiryDateTime = "BackupExpiryDateTime"
        case backupName = "BackupName"
        case backupSizeBytes = "BackupSizeBytes"
        case backupStatus = "BackupStatus"
        case backupType = "BackupType"
        case tableArn = "TableArn"
        case tableId = "TableId"
        case tableName = "TableName"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let backupArn = backupArn {
            try container.encode(backupArn, forKey: .backupArn)
        }
        if let backupCreationDateTime = backupCreationDateTime {
            try container.encode(backupCreationDateTime.timeIntervalSince1970, forKey: .backupCreationDateTime)
        }
        if let backupExpiryDateTime = backupExpiryDateTime {
            try container.encode(backupExpiryDateTime.timeIntervalSince1970, forKey: .backupExpiryDateTime)
        }
        if let backupName = backupName {
            try container.encode(backupName, forKey: .backupName)
        }
        if let backupSizeBytes = backupSizeBytes {
            try container.encode(backupSizeBytes, forKey: .backupSizeBytes)
        }
        if let backupStatus = backupStatus {
            try container.encode(backupStatus.rawValue, forKey: .backupStatus)
        }
        if let backupType = backupType {
            try container.encode(backupType.rawValue, forKey: .backupType)
        }
        if let tableArn = tableArn {
            try container.encode(tableArn, forKey: .tableArn)
        }
        if let tableId = tableId {
            try container.encode(tableId, forKey: .tableId)
        }
        if let tableName = tableName {
            try container.encode(tableName, forKey: .tableName)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let tableNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableName)
        tableName = tableNameDecoded
        let tableIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableId)
        tableId = tableIdDecoded
        let tableArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .tableArn)
        tableArn = tableArnDecoded
        let backupArnDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupArn)
        backupArn = backupArnDecoded
        let backupNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .backupName)
        backupName = backupNameDecoded
        let backupCreationDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .backupCreationDateTime)
        backupCreationDateTime = backupCreationDateTimeDecoded
        let backupExpiryDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .backupExpiryDateTime)
        backupExpiryDateTime = backupExpiryDateTimeDecoded
        let backupStatusDecoded = try containerValues.decodeIfPresent(BackupStatus.self, forKey: .backupStatus)
        backupStatus = backupStatusDecoded
        let backupTypeDecoded = try containerValues.decodeIfPresent(BackupType.self, forKey: .backupType)
        backupType = backupTypeDecoded
        let backupSizeBytesDecoded = try containerValues.decodeIfPresent(Int.self, forKey: .backupSizeBytes)
        backupSizeBytes = backupSizeBytesDecoded
    }
}
