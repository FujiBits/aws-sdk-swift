// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension ListBackupsInput: Encodable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case backupType = "BackupType"
        case exclusiveStartBackupArn = "ExclusiveStartBackupArn"
        case limit = "Limit"
        case tableName = "TableName"
        case timeRangeLowerBound = "TimeRangeLowerBound"
        case timeRangeUpperBound = "TimeRangeUpperBound"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let backupType = backupType {
            try container.encode(backupType.rawValue, forKey: .backupType)
        }
        if let exclusiveStartBackupArn = exclusiveStartBackupArn {
            try container.encode(exclusiveStartBackupArn, forKey: .exclusiveStartBackupArn)
        }
        if let limit = limit {
            try container.encode(limit, forKey: .limit)
        }
        if let tableName = tableName {
            try container.encode(tableName, forKey: .tableName)
        }
        if let timeRangeLowerBound = timeRangeLowerBound {
            try container.encode(timeRangeLowerBound.timeIntervalSince1970, forKey: .timeRangeLowerBound)
        }
        if let timeRangeUpperBound = timeRangeUpperBound {
            try container.encode(timeRangeUpperBound.timeIntervalSince1970, forKey: .timeRangeUpperBound)
        }
    }
}
