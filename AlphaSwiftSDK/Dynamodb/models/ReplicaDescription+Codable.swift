// Code generated by smithy-swift-codegen. DO NOT EDIT!

import ClientRuntime
import Foundation

extension ReplicaDescription: Codable, Reflection {
    private enum CodingKeys: String, CodingKey {
        case globalSecondaryIndexes = "GlobalSecondaryIndexes"
        case kMSMasterKeyId = "KMSMasterKeyId"
        case provisionedThroughputOverride = "ProvisionedThroughputOverride"
        case regionName = "RegionName"
        case replicaInaccessibleDateTime = "ReplicaInaccessibleDateTime"
        case replicaStatus = "ReplicaStatus"
        case replicaStatusDescription = "ReplicaStatusDescription"
        case replicaStatusPercentProgress = "ReplicaStatusPercentProgress"
    }

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        if let globalSecondaryIndexes = globalSecondaryIndexes {
            var globalSecondaryIndexesContainer = container.nestedUnkeyedContainer(forKey: .globalSecondaryIndexes)
            for replicaglobalsecondaryindexdescriptionlist0 in globalSecondaryIndexes {
                try globalSecondaryIndexesContainer.encode(replicaglobalsecondaryindexdescriptionlist0)
            }
        }
        if let kMSMasterKeyId = kMSMasterKeyId {
            try container.encode(kMSMasterKeyId, forKey: .kMSMasterKeyId)
        }
        if let provisionedThroughputOverride = provisionedThroughputOverride {
            try container.encode(provisionedThroughputOverride, forKey: .provisionedThroughputOverride)
        }
        if let regionName = regionName {
            try container.encode(regionName, forKey: .regionName)
        }
        if let replicaInaccessibleDateTime = replicaInaccessibleDateTime {
            try container.encode(replicaInaccessibleDateTime.timeIntervalSince1970, forKey: .replicaInaccessibleDateTime)
        }
        if let replicaStatus = replicaStatus {
            try container.encode(replicaStatus.rawValue, forKey: .replicaStatus)
        }
        if let replicaStatusDescription = replicaStatusDescription {
            try container.encode(replicaStatusDescription, forKey: .replicaStatusDescription)
        }
        if let replicaStatusPercentProgress = replicaStatusPercentProgress {
            try container.encode(replicaStatusPercentProgress, forKey: .replicaStatusPercentProgress)
        }
    }

    public init (from decoder: Decoder) throws {
        let containerValues = try decoder.container(keyedBy: CodingKeys.self)
        let regionNameDecoded = try containerValues.decodeIfPresent(String.self, forKey: .regionName)
        regionName = regionNameDecoded
        let replicaStatusDecoded = try containerValues.decodeIfPresent(ReplicaStatus.self, forKey: .replicaStatus)
        replicaStatus = replicaStatusDecoded
        let replicaStatusDescriptionDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicaStatusDescription)
        replicaStatusDescription = replicaStatusDescriptionDecoded
        let replicaStatusPercentProgressDecoded = try containerValues.decodeIfPresent(String.self, forKey: .replicaStatusPercentProgress)
        replicaStatusPercentProgress = replicaStatusPercentProgressDecoded
        let kMSMasterKeyIdDecoded = try containerValues.decodeIfPresent(String.self, forKey: .kMSMasterKeyId)
        kMSMasterKeyId = kMSMasterKeyIdDecoded
        let provisionedThroughputOverrideDecoded = try containerValues.decodeIfPresent(ProvisionedThroughputOverride.self, forKey: .provisionedThroughputOverride)
        provisionedThroughputOverride = provisionedThroughputOverrideDecoded
        let globalSecondaryIndexesContainer = try containerValues.decodeIfPresent([ReplicaGlobalSecondaryIndexDescription].self, forKey: .globalSecondaryIndexes)
        var globalSecondaryIndexesDecoded0:[ReplicaGlobalSecondaryIndexDescription]? = nil
        if let globalSecondaryIndexesContainer = globalSecondaryIndexesContainer {
            globalSecondaryIndexesDecoded0 = [ReplicaGlobalSecondaryIndexDescription]()
            for structure0 in globalSecondaryIndexesContainer {
                globalSecondaryIndexesDecoded0?.append(structure0)
            }
        }
        globalSecondaryIndexes = globalSecondaryIndexesDecoded0
        let replicaInaccessibleDateTimeDecoded = try containerValues.decodeIfPresent(Date.self, forKey: .replicaInaccessibleDateTime)
        replicaInaccessibleDateTime = replicaInaccessibleDateTimeDecoded
    }
}
