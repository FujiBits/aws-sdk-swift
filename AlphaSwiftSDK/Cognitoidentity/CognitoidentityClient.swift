// Code generated by smithy-swift-codegen. DO NOT EDIT!

import AWSClientRuntime
import ClientRuntime
import Foundation

public class CognitoidentityClient {
    let client: SdkHttpClient
    let config: CognitoidentityClientConfiguration
    let serviceName = "Cognitoidentity"
    let encoder: RequestEncoder
    let decoder: ResponseDecoder

    public init(config: CognitoidentityClientConfiguration) throws {
        client = try SdkHttpClient(engine: config.httpClientEngine, config: config.httpClientConfiguration)
        let encoder = JSONEncoder()
        encoder.dateEncodingStrategy = .secondsSince1970
        self.encoder = config.encoder ?? encoder
        let decoder = JSONDecoder()
        decoder.dateDecodingStrategy = .secondsSince1970
        self.decoder = config.decoder ?? decoder
        self.config = config
    }

    public class CognitoidentityClientConfiguration: Configuration, AWSClientConfiguration {

        public var region: String
        public var credentialsProvider: AWSCredentialsProvider
        public var signingRegion: String
        public var endpointResolver: EndpointResolver

        public init (
            credentialsProvider: AWSCredentialsProvider,
            endpointResolver: EndpointResolver,
            region: String,
            signingRegion: String
        )
        {
            self.credentialsProvider = credentialsProvider
            self.endpointResolver = endpointResolver
            self.region = region
            self.signingRegion = signingRegion
        }

        public convenience init(credentialsProvider: AWSCredentialsProvider) {
            let region = "us-east-1"
            let signingRegion = "us-east-1"
            let endpointResolver = DefaultEndpointResolver()
            self.init(
                credentialsProvider: credentialsProvider,
                endpointResolver: endpointResolver,
                region: region,
                signingRegion: signingRegion
            )
        }

        public static func `default`() throws -> CognitoidentityClientConfiguration {
            let awsCredsProvider = try AWSCredentialsProvider.fromEnv()
            return CognitoidentityClientConfiguration(credentialsProvider: awsCredsProvider)
        }
    }
}

extension CognitoidentityClient: CognitoidentityClientProtocol {
    /**
     <p>Creates a new identity pool. The identity pool is a store of user identity
              information that is specific to your AWS account. The keys for <code>SupportedLoginProviders</code> are as follows:</p>

              <ul>
                 <li>
                    <p>Facebook: <code>graph.facebook.com</code>
                    </p>
                 </li>
                 <li>
                    <p>Google: <code>accounts.google.com</code>
                    </p>
                 </li>
                 <li>
                    <p>Amazon: <code>www.amazon.com</code>
                    </p>
                 </li>
                 <li>
                    <p>Twitter: <code>api.twitter.com</code>
                    </p>
                 </li>
                 <li>
                    <p>Digits: <code>www.digits.com</code>
                    </p>
                 </li>
              </ul>

              <p>You must use AWS Developer credentials to call this API.</p>
     */
    public func createIdentityPool(input: CreateIdentityPoolInput, completion: @escaping (SdkResult<CreateIdentityPoolOutput, CreateIdentityPoolError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "createIdentityPool")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<CreateIdentityPoolInput, CreateIdentityPoolOutput, CreateIdentityPoolError>(id: "createIdentityPool")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: CreateIdentityPoolInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: CreateIdentityPoolInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<CreateIdentityPoolInput, CreateIdentityPoolOutput, CreateIdentityPoolError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: CreateIdentityPoolInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<CreateIdentityPoolInput, CreateIdentityPoolOutput, CreateIdentityPoolError>(xAmzTarget: "AWSCognitoIdentityService.CreateIdentityPool"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Deletes identities from an identity pool. You can specify a list of 1-60 identities
              that you want to delete.</p>
              <p>You must use AWS Developer credentials to call this API.</p>
     */
    public func deleteIdentities(input: DeleteIdentitiesInput, completion: @escaping (SdkResult<DeleteIdentitiesOutput, DeleteIdentitiesError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteIdentities")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteIdentitiesInput, DeleteIdentitiesOutput, DeleteIdentitiesError>(id: "deleteIdentities")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteIdentitiesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteIdentitiesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteIdentitiesInput, DeleteIdentitiesOutput, DeleteIdentitiesError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteIdentitiesInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteIdentitiesInput, DeleteIdentitiesOutput, DeleteIdentitiesError>(xAmzTarget: "AWSCognitoIdentityService.DeleteIdentities"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Deletes an identity pool. Once a pool is deleted, users will not be able to
              authenticate with the pool.</p>
              <p>You must use AWS Developer credentials to call this API.</p>
     */
    public func deleteIdentityPool(input: DeleteIdentityPoolInput, completion: @escaping (SdkResult<DeleteIdentityPoolOutput, DeleteIdentityPoolError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "deleteIdentityPool")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DeleteIdentityPoolInput, DeleteIdentityPoolOutput, DeleteIdentityPoolError>(id: "deleteIdentityPool")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DeleteIdentityPoolInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DeleteIdentityPoolInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DeleteIdentityPoolInput, DeleteIdentityPoolOutput, DeleteIdentityPoolError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DeleteIdentityPoolInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DeleteIdentityPoolInput, DeleteIdentityPoolOutput, DeleteIdentityPoolError>(xAmzTarget: "AWSCognitoIdentityService.DeleteIdentityPool"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Returns metadata related to the given identity, including when the identity was
              created and any associated linked logins.</p>
              <p>You must use AWS Developer credentials to call this API.</p>
     */
    public func describeIdentity(input: DescribeIdentityInput, completion: @escaping (SdkResult<DescribeIdentityOutput, DescribeIdentityError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeIdentity")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeIdentityInput, DescribeIdentityOutput, DescribeIdentityError>(id: "describeIdentity")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeIdentityInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeIdentityInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeIdentityInput, DescribeIdentityOutput, DescribeIdentityError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeIdentityInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeIdentityInput, DescribeIdentityOutput, DescribeIdentityError>(xAmzTarget: "AWSCognitoIdentityService.DescribeIdentity"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Gets details about a particular identity pool, including the pool name, ID
              description, creation date, and current number of users.</p>
              <p>You must use AWS Developer credentials to call this API.</p>
     */
    public func describeIdentityPool(input: DescribeIdentityPoolInput, completion: @escaping (SdkResult<DescribeIdentityPoolOutput, DescribeIdentityPoolError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "describeIdentityPool")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<DescribeIdentityPoolInput, DescribeIdentityPoolOutput, DescribeIdentityPoolError>(id: "describeIdentityPool")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: DescribeIdentityPoolInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: DescribeIdentityPoolInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<DescribeIdentityPoolInput, DescribeIdentityPoolOutput, DescribeIdentityPoolError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: DescribeIdentityPoolInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<DescribeIdentityPoolInput, DescribeIdentityPoolOutput, DescribeIdentityPoolError>(xAmzTarget: "AWSCognitoIdentityService.DescribeIdentityPool"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Returns credentials for the provided identity ID. Any provided logins will be
              validated against supported login providers. If the token is for
              cognito-identity.amazonaws.com, it will be passed through to AWS Security Token Service
              with the appropriate role for the token.</p>
              <p>This is a public API. You do not need any credentials to call this API.</p>
     */
    public func getCredentialsForIdentity(input: GetCredentialsForIdentityInput, completion: @escaping (SdkResult<GetCredentialsForIdentityOutput, GetCredentialsForIdentityError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getCredentialsForIdentity")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetCredentialsForIdentityInput, GetCredentialsForIdentityOutput, GetCredentialsForIdentityError>(id: "getCredentialsForIdentity")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetCredentialsForIdentityInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetCredentialsForIdentityInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetCredentialsForIdentityInput, GetCredentialsForIdentityOutput, GetCredentialsForIdentityError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: GetCredentialsForIdentityInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<GetCredentialsForIdentityInput, GetCredentialsForIdentityOutput, GetCredentialsForIdentityError>(xAmzTarget: "AWSCognitoIdentityService.GetCredentialsForIdentity"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Generates (or retrieves) a Cognito ID. Supplying multiple logins will create an
              implicit linked account.</p>
              <p>This is a public API. You do not need any credentials to call this API.</p>
     */
    public func getId(input: GetIdInput, completion: @escaping (SdkResult<GetIdOutput, GetIdError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getId")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetIdInput, GetIdOutput, GetIdError>(id: "getId")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetIdInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetIdInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetIdInput, GetIdOutput, GetIdError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: GetIdInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<GetIdInput, GetIdOutput, GetIdError>(xAmzTarget: "AWSCognitoIdentityService.GetId"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Gets the roles for an identity pool.</p>
              <p>You must use AWS Developer credentials to call this API.</p>
     */
    public func getIdentityPoolRoles(input: GetIdentityPoolRolesInput, completion: @escaping (SdkResult<GetIdentityPoolRolesOutput, GetIdentityPoolRolesError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getIdentityPoolRoles")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetIdentityPoolRolesInput, GetIdentityPoolRolesOutput, GetIdentityPoolRolesError>(id: "getIdentityPoolRoles")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetIdentityPoolRolesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetIdentityPoolRolesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetIdentityPoolRolesInput, GetIdentityPoolRolesOutput, GetIdentityPoolRolesError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: GetIdentityPoolRolesInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<GetIdentityPoolRolesInput, GetIdentityPoolRolesOutput, GetIdentityPoolRolesError>(xAmzTarget: "AWSCognitoIdentityService.GetIdentityPoolRoles"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Gets an OpenID token, using a known Cognito ID. This known Cognito ID is returned by
                 <a>GetId</a>. You can optionally add additional logins for the identity.
              Supplying multiple logins creates an implicit link.</p>
              <p>The OpenId token is valid for 10 minutes.</p>
              <p>This is a public API. You do not need any credentials to call this API.</p>
     */
    public func getOpenIdToken(input: GetOpenIdTokenInput, completion: @escaping (SdkResult<GetOpenIdTokenOutput, GetOpenIdTokenError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getOpenIdToken")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetOpenIdTokenInput, GetOpenIdTokenOutput, GetOpenIdTokenError>(id: "getOpenIdToken")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetOpenIdTokenInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetOpenIdTokenInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetOpenIdTokenInput, GetOpenIdTokenOutput, GetOpenIdTokenError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: GetOpenIdTokenInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<GetOpenIdTokenInput, GetOpenIdTokenOutput, GetOpenIdTokenError>(xAmzTarget: "AWSCognitoIdentityService.GetOpenIdToken"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Registers (or retrieves) a Cognito <code>IdentityId</code> and an OpenID Connect
              token for a user authenticated by your backend authentication process. Supplying multiple
              logins will create an implicit linked account. You can only specify one developer provider
              as part of the <code>Logins</code> map, which is linked to the identity pool. The developer
              provider is the "domain" by which Cognito will refer to your users.</p>
              <p>You can use <code>GetOpenIdTokenForDeveloperIdentity</code> to create a new identity
              and to link new logins (that is, user credentials issued by a public provider or developer
              provider) to an existing identity. When you want to create a new identity, the
                 <code>IdentityId</code> should be null. When you want to associate a new login with an
              existing authenticated/unauthenticated identity, you can do so by providing the existing
                 <code>IdentityId</code>. This API will create the identity in the specified
                 <code>IdentityPoolId</code>.</p>
              <p>You must use AWS Developer credentials to call this API.</p>
     */
    public func getOpenIdTokenForDeveloperIdentity(input: GetOpenIdTokenForDeveloperIdentityInput, completion: @escaping (SdkResult<GetOpenIdTokenForDeveloperIdentityOutput, GetOpenIdTokenForDeveloperIdentityError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "getOpenIdTokenForDeveloperIdentity")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<GetOpenIdTokenForDeveloperIdentityInput, GetOpenIdTokenForDeveloperIdentityOutput, GetOpenIdTokenForDeveloperIdentityError>(id: "getOpenIdTokenForDeveloperIdentity")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: GetOpenIdTokenForDeveloperIdentityInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: GetOpenIdTokenForDeveloperIdentityInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<GetOpenIdTokenForDeveloperIdentityInput, GetOpenIdTokenForDeveloperIdentityOutput, GetOpenIdTokenForDeveloperIdentityError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: GetOpenIdTokenForDeveloperIdentityInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<GetOpenIdTokenForDeveloperIdentityInput, GetOpenIdTokenForDeveloperIdentityOutput, GetOpenIdTokenForDeveloperIdentityError>(xAmzTarget: "AWSCognitoIdentityService.GetOpenIdTokenForDeveloperIdentity"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Lists the identities in an identity pool.</p>
              <p>You must use AWS Developer credentials to call this API.</p>
     */
    public func listIdentities(input: ListIdentitiesInput, completion: @escaping (SdkResult<ListIdentitiesOutput, ListIdentitiesError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listIdentities")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListIdentitiesInput, ListIdentitiesOutput, ListIdentitiesError>(id: "listIdentities")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListIdentitiesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListIdentitiesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListIdentitiesInput, ListIdentitiesOutput, ListIdentitiesError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListIdentitiesInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListIdentitiesInput, ListIdentitiesOutput, ListIdentitiesError>(xAmzTarget: "AWSCognitoIdentityService.ListIdentities"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Lists all of the Cognito identity pools registered for your account.</p>
              <p>You must use AWS Developer credentials to call this API.</p>
     */
    public func listIdentityPools(input: ListIdentityPoolsInput, completion: @escaping (SdkResult<ListIdentityPoolsOutput, ListIdentityPoolsError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listIdentityPools")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListIdentityPoolsInput, ListIdentityPoolsOutput, ListIdentityPoolsError>(id: "listIdentityPools")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListIdentityPoolsInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListIdentityPoolsInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListIdentityPoolsInput, ListIdentityPoolsOutput, ListIdentityPoolsError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListIdentityPoolsInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListIdentityPoolsInput, ListIdentityPoolsOutput, ListIdentityPoolsError>(xAmzTarget: "AWSCognitoIdentityService.ListIdentityPools"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Lists the tags that are assigned to an Amazon Cognito identity pool.</p>
              <p>A tag is a label that you can apply to identity pools to categorize and manage them in
              different ways, such as by purpose, owner, environment, or other criteria.</p>
              <p>You can use this action up to 10 times per second, per account.</p>
     */
    public func listTagsForResource(input: ListTagsForResourceInput, completion: @escaping (SdkResult<ListTagsForResourceOutput, ListTagsForResourceError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "listTagsForResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceError>(id: "listTagsForResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: ListTagsForResourceInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<ListTagsForResourceInput, ListTagsForResourceOutput, ListTagsForResourceError>(xAmzTarget: "AWSCognitoIdentityService.ListTagsForResource"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Retrieves the <code>IdentityID</code> associated with a
                 <code>DeveloperUserIdentifier</code> or the list of <code>DeveloperUserIdentifier</code>
              values associated with an <code>IdentityId</code> for an existing identity. Either
                 <code>IdentityID</code> or <code>DeveloperUserIdentifier</code> must not be null. If you
              supply only one of these values, the other value will be searched in the database and
              returned as a part of the response. If you supply both,
                 <code>DeveloperUserIdentifier</code> will be matched against <code>IdentityID</code>. If
              the values are verified against the database, the response returns both values and is the
              same as the request. Otherwise a <code>ResourceConflictException</code> is
              thrown.</p>
              <p>
                 <code>LookupDeveloperIdentity</code> is intended for low-throughput control plane
              operations: for example, to enable customer service to locate an identity ID by username.
              If you are using it for higher-volume operations such as user authentication, your requests
              are likely to be throttled. <a>GetOpenIdTokenForDeveloperIdentity</a> is a
              better option for higher-volume operations for user authentication.</p>
              <p>You must use AWS Developer credentials to call this API.</p>
     */
    public func lookupDeveloperIdentity(input: LookupDeveloperIdentityInput, completion: @escaping (SdkResult<LookupDeveloperIdentityOutput, LookupDeveloperIdentityError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "lookupDeveloperIdentity")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<LookupDeveloperIdentityInput, LookupDeveloperIdentityOutput, LookupDeveloperIdentityError>(id: "lookupDeveloperIdentity")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: LookupDeveloperIdentityInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: LookupDeveloperIdentityInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<LookupDeveloperIdentityInput, LookupDeveloperIdentityOutput, LookupDeveloperIdentityError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: LookupDeveloperIdentityInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<LookupDeveloperIdentityInput, LookupDeveloperIdentityOutput, LookupDeveloperIdentityError>(xAmzTarget: "AWSCognitoIdentityService.LookupDeveloperIdentity"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Merges two users having different <code>IdentityId</code>s, existing in the same
              identity pool, and identified by the same developer provider. You can use this action to
              request that discrete users be merged and identified as a single user in the Cognito
              environment. Cognito associates the given source user (<code>SourceUserIdentifier</code>)
              with the <code>IdentityId</code> of the <code>DestinationUserIdentifier</code>. Only
              developer-authenticated users can be merged. If the users to be merged are associated with
              the same public provider, but as two different users, an exception will be
              thrown.</p>
              <p>The number of linked logins is limited to 20. So, the number of linked logins for the
              source user, <code>SourceUserIdentifier</code>, and the destination user,
              <code>DestinationUserIdentifier</code>, together should not be larger than 20.
              Otherwise, an exception will be thrown.</p>
              <p>You must use AWS Developer credentials to call this API.</p>
     */
    public func mergeDeveloperIdentities(input: MergeDeveloperIdentitiesInput, completion: @escaping (SdkResult<MergeDeveloperIdentitiesOutput, MergeDeveloperIdentitiesError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "mergeDeveloperIdentities")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<MergeDeveloperIdentitiesInput, MergeDeveloperIdentitiesOutput, MergeDeveloperIdentitiesError>(id: "mergeDeveloperIdentities")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: MergeDeveloperIdentitiesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: MergeDeveloperIdentitiesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<MergeDeveloperIdentitiesInput, MergeDeveloperIdentitiesOutput, MergeDeveloperIdentitiesError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: MergeDeveloperIdentitiesInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<MergeDeveloperIdentitiesInput, MergeDeveloperIdentitiesOutput, MergeDeveloperIdentitiesError>(xAmzTarget: "AWSCognitoIdentityService.MergeDeveloperIdentities"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Sets the roles for an identity pool. These roles are used when making calls to <a>GetCredentialsForIdentity</a> action.</p>
              <p>You must use AWS Developer credentials to call this API.</p>
     */
    public func setIdentityPoolRoles(input: SetIdentityPoolRolesInput, completion: @escaping (SdkResult<SetIdentityPoolRolesOutput, SetIdentityPoolRolesError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "setIdentityPoolRoles")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<SetIdentityPoolRolesInput, SetIdentityPoolRolesOutput, SetIdentityPoolRolesError>(id: "setIdentityPoolRoles")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: SetIdentityPoolRolesInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: SetIdentityPoolRolesInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<SetIdentityPoolRolesInput, SetIdentityPoolRolesOutput, SetIdentityPoolRolesError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: SetIdentityPoolRolesInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<SetIdentityPoolRolesInput, SetIdentityPoolRolesOutput, SetIdentityPoolRolesError>(xAmzTarget: "AWSCognitoIdentityService.SetIdentityPoolRoles"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Assigns a set of tags to an Amazon Cognito identity pool. A tag is a label that you can
              use to categorize and manage identity pools in different ways, such as by purpose, owner,
              environment, or other criteria.</p>
              <p>Each tag consists of a key and value, both of which you define. A key is a general
              category for more specific values. For example, if you have two versions of an identity
              pool, one for testing and another for production, you might assign an
                 <code>Environment</code> tag key to both identity pools. The value of this key might be
                 <code>Test</code> for one identity pool and <code>Production</code> for the
              other.</p>
              <p>Tags are useful for cost tracking and access control. You can activate your tags so that
              they appear on the Billing and Cost Management console, where you can track the costs
              associated with your identity pools. In an IAM policy, you can constrain permissions for
              identity pools based on specific tags or tag values.</p>
              <p>You can use this action up to 5 times per second, per account. An identity pool can have
              as many as 50 tags.</p>
     */
    public func tagResource(input: TagResourceInput, completion: @escaping (SdkResult<TagResourceOutput, TagResourceError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "tagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<TagResourceInput, TagResourceOutput, TagResourceError>(id: "tagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<TagResourceInput, TagResourceOutput, TagResourceError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: TagResourceInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<TagResourceInput, TagResourceOutput, TagResourceError>(xAmzTarget: "AWSCognitoIdentityService.TagResource"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Unlinks a <code>DeveloperUserIdentifier</code> from an existing identity. Unlinked
              developer users will be considered new identities next time they are seen. If, for a given
              Cognito identity, you remove all federated identities as well as the developer user
              identifier, the Cognito identity becomes inaccessible.</p>
              <p>You must use AWS Developer credentials to call this API.</p>
     */
    public func unlinkDeveloperIdentity(input: UnlinkDeveloperIdentityInput, completion: @escaping (SdkResult<UnlinkDeveloperIdentityOutput, UnlinkDeveloperIdentityError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "unlinkDeveloperIdentity")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UnlinkDeveloperIdentityInput, UnlinkDeveloperIdentityOutput, UnlinkDeveloperIdentityError>(id: "unlinkDeveloperIdentity")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UnlinkDeveloperIdentityInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UnlinkDeveloperIdentityInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UnlinkDeveloperIdentityInput, UnlinkDeveloperIdentityOutput, UnlinkDeveloperIdentityError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UnlinkDeveloperIdentityInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UnlinkDeveloperIdentityInput, UnlinkDeveloperIdentityOutput, UnlinkDeveloperIdentityError>(xAmzTarget: "AWSCognitoIdentityService.UnlinkDeveloperIdentity"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Unlinks a federated identity from an existing account. Unlinked logins will be
              considered new identities next time they are seen. Removing the last linked login will make
              this identity inaccessible.</p>
              <p>This is a public API. You do not need any credentials to call this API.</p>
     */
    public func unlinkIdentity(input: UnlinkIdentityInput, completion: @escaping (SdkResult<UnlinkIdentityOutput, UnlinkIdentityError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "unlinkIdentity")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UnlinkIdentityInput, UnlinkIdentityOutput, UnlinkIdentityError>(id: "unlinkIdentity")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UnlinkIdentityInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UnlinkIdentityInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UnlinkIdentityInput, UnlinkIdentityOutput, UnlinkIdentityError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UnlinkIdentityInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UnlinkIdentityInput, UnlinkIdentityOutput, UnlinkIdentityError>(xAmzTarget: "AWSCognitoIdentityService.UnlinkIdentity"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Removes the specified tags from an Amazon Cognito identity pool. You can use this action
              up to 5 times per second, per account</p>
     */
    public func untagResource(input: UntagResourceInput, completion: @escaping (SdkResult<UntagResourceOutput, UntagResourceError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "untagResource")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UntagResourceInput, UntagResourceOutput, UntagResourceError>(id: "untagResource")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UntagResourceInput, UntagResourceOutput, UntagResourceError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UntagResourceInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UntagResourceInput, UntagResourceOutput, UntagResourceError>(xAmzTarget: "AWSCognitoIdentityService.UntagResource"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

    /**
     <p>Updates an identity pool.</p>
              <p>You must use AWS Developer credentials to call this API.</p>
     */
    public func updateIdentityPool(input: UpdateIdentityPoolInput, completion: @escaping (SdkResult<UpdateIdentityPoolOutput, UpdateIdentityPoolError>) -> Void)
    {
        let path = "/"
        let context = HttpContextBuilder()
                      .withEncoder(value: encoder)
                      .withDecoder(value: decoder)
                      .withMethod(value: .post)
                      .withPath(value: path)
                      .withServiceName(value: serviceName)
                      .withOperation(value: "updateIdentityPool")
                      .withIdempotencyTokenGenerator(value: config.idempotencyTokenGenerator)
                      .withCredentialsProvider(value: config.credentialsProvider)
                      .withRegion(value: config.region)
                      .withHost(value: "cognito-identity.\(config.region).amazonaws.com")
                      .withSigningName(value: "cognito-identity")
                      .withSigningRegion(value: config.signingRegion)
        var operation = OperationStack<UpdateIdentityPoolInput, UpdateIdentityPoolOutput, UpdateIdentityPoolError>(id: "updateIdentityPool")
        operation.addDefaultOperationMiddlewares()
        operation.serializeStep.intercept(position: .before, middleware: UpdateIdentityPoolInputHeadersMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: UpdateIdentityPoolInputQueryItemMiddleware())
        operation.serializeStep.intercept(position: .before, middleware: ContentTypeMiddleware<UpdateIdentityPoolInput, UpdateIdentityPoolOutput, UpdateIdentityPoolError>(contentType: "application/x-amz-json-1.1"))
        operation.serializeStep.intercept(position: .before, middleware: UpdateIdentityPoolInputBodyMiddleware())
        operation.buildStep.intercept(position: .before, middleware: EndpointResolverMiddleware(endpointResolver: config.endpointResolver, serviceId: serviceName))
        operation.finalizeStep.intercept(position: .after,
                                                 middleware: SigV4Middleware(unsignedBody: false))
        operation.serializeStep.intercept(position: .before, middleware: XAmzTargetMiddleware<UpdateIdentityPoolInput, UpdateIdentityPoolOutput, UpdateIdentityPoolError>(xAmzTarget: "AWSCognitoIdentityService.UpdateIdentityPool"))
        let result = operation.handleMiddleware(context: context.build(), input: input, next: client.getHandler())
        completion(result)
    }

}
